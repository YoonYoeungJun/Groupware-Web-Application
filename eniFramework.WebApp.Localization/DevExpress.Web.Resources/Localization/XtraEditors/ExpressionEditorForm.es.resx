<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral" />
  <assembly alias="mscorlib" name="mscorlib, Version=4.0.0.0, Culture=neutral" />
  <data name="buttonOK.Text" xml:space="preserve">
    <value>Aceptar</value>
  </data>
  <data name="buttonCancel.Text" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="functionsTypes.Properties.AllItems" xml:space="preserve">
    <value>(Todos)</value>
  </data>
  <data name="functionsTypes.Properties.AggregateItems" xml:space="preserve">
    <value>Agregado</value>
  </data>
  <data name="functionsTypes.Properties.DateTimeItems" xml:space="preserve">
    <value>Fecha-hora</value>
  </data>
  <data name="functionsTypes.Properties.LogicalItems" xml:space="preserve">
    <value>Lógico</value>
  </data>
  <data name="functionsTypes.Properties.MathItems" xml:space="preserve">
    <value>Matemáticos</value>
  </data>
  <data name="functionsTypes.Properties.StringItems" xml:space="preserve">
    <value>Cadena</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Editor de Expresiones</value>
  </data>
  <data name="Constants.Text" xml:space="preserve">
    <value>Constantes</value>
  </data>
  <data name="Fields.Text" xml:space="preserve">
    <value>Campos</value>
  </data>
  <data name="Functions.Text" xml:space="preserve">
    <value>Funciones</value>
  </data>
  <data name="Parameters.Text" xml:space="preserve">
    <value>Parámetros</value>
  </data>
  <data name="Operators.Text" xml:space="preserve">
    <value>Operadores</value>
  </data>
  <data name="Trim.Description" xml:space="preserve">
    <value>Trim(String)
Elimina todos los espacios al principio y al final de la cadena especificada.</value>
  </data>
  <data name="Len.Description" xml:space="preserve">
    <value>Len(Value)
Devuelve un número entero que representa el número de caracteres en una cadena, o el número nominal de bytes necesario para almacenar una variable.</value>
  </data>
  <data name="Substring3param.Description" xml:space="preserve">
    <value>Substring(Cadena, PosiciónInicial, Longitud)
Devuelve una sub-cadena de Cadena. La sub-cadena empieza el la posición PosiciónInicial hasta la longitud indicada.</value>
  </data>
  <data name="Iif.Description" xml:space="preserve">
    <value>Iif(Expresión, ParteVerdadero, ParteFalse)
Devuelve ParteVerdadero o ParteFalse, dependiendo de como se evalúa la expresión lógica.</value>
  </data>
  <data name="IsNull.Description" xml:space="preserve">
    <value>IsNull(Value)
Devuelve 'Verdadero' si el valor indicado es nulo.</value>
  </data>
  <data name="Upper.Description" xml:space="preserve">
    <value>Upper(String)
Devuelve una cadena convertida a mayúsculas.</value>
  </data>
  <data name="Lower.Description" xml:space="preserve">
    <value>Lower(String)
Devuelve una cadena convertida a minyúsculas.</value>
  </data>
  <data name="Concat.Description" xml:space="preserve">
    <value>Concat(String1, ... , StringN)
Devuelve las dos cadenas indicadas concatenadas en una.</value>
  </data>
  <data name="Abs.Description" xml:space="preserve">
    <value>Abs(Value)
Devuelve el valor absoluto positivo, de la expresión numérica.</value>
  </data>
  <data name="LocalDateTimeDayAfterTomorrow.Description" xml:space="preserve">
    <value>LocalDateTimeDayAfterTomorrow()
Devuelve un valor de fecha-hora correspondiente al día después de mañana.</value>
  </data>
  <data name="LocalDateTimeLastWeek.Description" xml:space="preserve">
    <value>LocalDateTimeLastWeek()
Devuelve un valor de fecha-hora correspondiente  al primer día de la semana pasada.</value>
  </data>
  <data name="LocalDateTimeNextMonth.Description" xml:space="preserve">
    <value>LocalDateTimeNextMonth()
Devuelve un valor de fecha-hora correspondiente al primer día del mes que viene.</value>
  </data>
  <data name="LocalDateTimeNextWeek.Description" xml:space="preserve">
    <value>LocalDateTimeNextWeek()
Devuelve un valor de fecha-hora correspondiente al primer día de la semana que viene.</value>
  </data>
  <data name="LocalDateTimeNextYear.Description" xml:space="preserve">
    <value>LocalDateTimeNextYear()
Devuelve un valor de fecha-hora correspondiente al primer día de año que viene.</value>
  </data>
  <data name="LocalDateTimeNow.Description" xml:space="preserve">
    <value>LocalDateTimeNow()
Devuelve un valor de fecha-hora correspondiente al momento actual.</value>
  </data>
  <data name="LocalDateTimeThisMonth.Description" xml:space="preserve">
    <value>LocalDateTimeThisMonth()
Devuelve un valor de fecha-hora correspondiente al primer día del mes actual.</value>
  </data>
  <data name="LocalDateTimeThisWeek.Description" xml:space="preserve">
    <value>LocalDateTimeThisWeek()
Devuelve un valor de fecha-hora correspondiente al primer día de la semana actual.</value>
  </data>
  <data name="LocalDateTimeThisYear.Description" xml:space="preserve">
    <value>LocalDateTimeThisYear()
Devuelve un valor de fecha-hora correspondiente al primer día del año actual.</value>
  </data>
  <data name="LocalDateTimeToday.Description" xml:space="preserve">
    <value>LocalDateTimeToday()
Devuelve un valor de fecha-hora correspondiente al día de hoy.</value>
  </data>
  <data name="LocalDateTimeTomorrow.Description" xml:space="preserve">
    <value>LocalDateTimeTomorrow()
Devuelve un valor de fecha-hora correspondiente a mañana.</value>
  </data>
  <data name="LocalDateTimeTwoWeeksAway.Description" xml:space="preserve">
    <value>LocalDateTimeTwoWeeksAway()
Devuelve un valor de fecha-hora correspondiente al primer día de la semana después de la semana que viene.</value>
  </data>
  <data name="LocalDateTimeYesterday.Description" xml:space="preserve">
    <value>LocalDateTimeYesterday()
Devuelve un valor de fecha-hora correspondiente al día de ayer.</value>
  </data>
  <data name="Acos.Description" xml:space="preserve">
    <value>Acos(Value)
Devuelve el valor arcocosino de un número (el ángulo, en radios, cuyo cosino es el valor especificado).</value>
  </data>
  <data name="AddDays.Description" xml:space="preserve">
    <value>AddDays(DateTime, DaysCount)
Devuelve la fecha-hora después de añadir los días indicados.</value>
  </data>
  <data name="AddHours.Description" xml:space="preserve">
    <value>AddHours(DateTime, HoursCount)
Devuelve una fecha-hora después de haber sumado las horas indicadas.</value>
  </data>
  <data name="AddMilliSeconds.Description" xml:space="preserve">
    <value>AddMilliSeconds(DateTime, MilliSecondsCount)
Devuelve la fecha-hora después de añadir los milisegundos indicados.</value>
  </data>
  <data name="AddMinutes.Description" xml:space="preserve">
    <value>AddMinutes(DateTime, MinutesCount)
Devuelve la fecha-hora después de añadir los minutos indicados.</value>
  </data>
  <data name="AddMonths.Description" xml:space="preserve">
    <value>AddMonths(DateTime, MonthsCount)
Devuelve la fecha-hora después de añadir los meses indicados.</value>
  </data>
  <data name="AddSeconds.Description" xml:space="preserve">
    <value>AddSeconds(DateTime, SecondsCount)
Devuelve una fecha-hora después de haber sumado los segundos indicados.</value>
  </data>
  <data name="AddTicks.Description" xml:space="preserve">
    <value>AddTicks(DateTime, TicksCount)
Devuelve una fecha-hora después de haber sumado los pasos indicados.</value>
  </data>
  <data name="AddTimeSpan.Description" xml:space="preserve">
    <value>AddTimeSpan(DateTime, TimeSpan)
Devuelve una fecha-hora después de haber sumado el TimeSpan indicado.</value>
  </data>
  <data name="AddYears.Description" xml:space="preserve">
    <value>AddYears(DateTime, YearsCount)
Devuelve la fecha-hora después de añadir los años indicados.</value>
  </data>
  <data name="Ascii.Description" xml:space="preserve">
    <value>Ascii(String)
Devuelve el valor ASCII del primer carácter de la cadena especificada.</value>
  </data>
  <data name="Asin.Description" xml:space="preserve">
    <value>Asin(Value)
Devuelve el valor arcosino de un número (el ángulo, en radios, cuyo sino es el valor especificado).</value>
  </data>
  <data name="Atn.Description" xml:space="preserve">
    <value>Atn(Value)
Devuelve el valor arcotangente de un número (el ángulo, en radios, cuyo tangente es el valor especificado).</value>
  </data>
  <data name="Atn2.Description" xml:space="preserve">
    <value>Atn2(Value1, Value2)
Devuelve the ángulo, en radios, cuyo tangente es el cociente de los dos valores indicados.</value>
  </data>
  <data name="BigMul.Description" xml:space="preserve">
    <value>BigMul(Value1, Value2)
Devuelve un Int64, que es el resultado de la multiplicación de los dos valores enteros indicados.</value>
  </data>
  <data name="Ceiling.Description" xml:space="preserve">
    <value>Ceiling(Value)
Devuelve el valor entero mas pequeño, que es mayor o igual, que el valor especificado.</value>
  </data>
  <data name="Char.Description" xml:space="preserve">
    <value>Char(Number)
Convierte en valor entero ASCII a un carácter.</value>
  </data>
  <data name="CharIndex.Description" xml:space="preserve">
    <value>CharIndex(String1, String2)
Devuelve la posición inicial de la Cadena1 dentro de la Cadena2, siendo el primer carácter la posición cero.</value>
  </data>
  <data name="CharIndex3Param.Description" xml:space="preserve">
    <value>CharIndex(Cadena1, Cadena2, PosiciónInicio)
Devuelve la posición de la Cadena1 dentro de Cadena2, empezando la búsqueda en la posición PosiciónInicio.</value>
  </data>
  <data name="Cos.Description" xml:space="preserve">
    <value>Cos(Value)
Devuelve el cosino de un ángulo definido en radios.</value>
  </data>
  <data name="Cosh.Description" xml:space="preserve">
    <value>Cosh(Value)
Devuelve el valor hiperbólico cosino del ángulo definido en radios.</value>
  </data>
  <data name="DateDiffDay.Description" xml:space="preserve">
    <value>DateDiffDay(fechaInicio, fechaFinal)
Devuelve el número de días trascurridas entre dos fechas.</value>
  </data>
  <data name="DateDiffHour.Description" xml:space="preserve">
    <value>DateDiffHour(fechaInicio, fechaFinal)
Devuelve el número de horas trascurridas entre dos fechas.</value>
  </data>
  <data name="DateDiffMilliSecond.Description" xml:space="preserve">
    <value>DateDiffMilliSecond(fechaInicio, fechaFinal)
Devuelve el número de milisegundos entre dos fechas.</value>
  </data>
  <data name="DateDiffMinute.Description" xml:space="preserve">
    <value>DateDiffMinute(fechaInicio, fechaFinal)
Devuelve el número de minutos trascurridos entre dos fechas.</value>
  </data>
  <data name="DateDiffMonth.Description" xml:space="preserve">
    <value>DateDiffMonth(fechaInicio, fechaFinal)
Devuelve el número de meses trascurridos entre dos fechas.</value>
  </data>
  <data name="DateDiffSecond.Description" xml:space="preserve">
    <value>DateDiffSecond(fechaInicio, fechaFinal)
Devuelve el número de segundos trascurridos entre dos fechas.</value>
  </data>
  <data name="DateDiffTick.Description" xml:space="preserve">
    <value>DateDiffTick(fechaInicio, fechaFinal)
Devuelve el número de instantes entre dos fechas.</value>
  </data>
  <data name="DateDiffYear.Description" xml:space="preserve">
    <value>DateDiffYear(fechaInicio, fechaFinal)
Devuelve el número de años trascurridos entre dos fechas.</value>
  </data>
  <data name="Exp.Description" xml:space="preserve">
    <value>Exp(Value)
Devuelve el valor expotencial del número decimal indicado.</value>
  </data>
  <data name="Floor.Description" xml:space="preserve">
    <value>Floor(Value)
Devuelve el número entero mas grande, cuyo valor es menor o igual que el valor especificado.</value>
  </data>
  <data name="GetDate.Description" xml:space="preserve">
    <value>GetDate(DateTime)
Extrae la parte de la fecha de un valor fecha-hora.</value>
  </data>
  <data name="GetDay.Description" xml:space="preserve">
    <value>GetDay(DateTime)
Extrae el día de un valor fecha-hora.</value>
  </data>
  <data name="GetDayOfWeek.Description" xml:space="preserve">
    <value>GetDayOfWeek(DateTime)
Extrae el día de la semana de un valor fecha-hora.</value>
  </data>
  <data name="GetDayOfYear.Description" xml:space="preserve">
    <value>GetDayOfYear(DateTime)
Extrae el día de la fecha-hora especificada.</value>
  </data>
  <data name="GetHour.Description" xml:space="preserve">
    <value>GetHour(DateTime)
Extrae la hora de la fecha-hora indicada.</value>
  </data>
  <data name="GetMilliSecond.Description" xml:space="preserve">
    <value>GetMilliSecond(DateTime)
Extrae los milisegungos de la fecha-hora indicada.</value>
  </data>
  <data name="GetMinute.Description" xml:space="preserve">
    <value>GetMinute(DateTime)
Extrae los minutos de la fecha-hora especificada.</value>
  </data>
  <data name="GetMonth.Description" xml:space="preserve">
    <value>GetMonth(DateTime)
Extrae el mes de la fecha-hora indicada.</value>
  </data>
  <data name="GetSecond.Description" xml:space="preserve">
    <value>GetSecond(DateTime)
Extrae los segundos de la fecha-hora especificada.</value>
  </data>
  <data name="GetTimeOfDay.Description" xml:space="preserve">
    <value>GetTimeOfDay(DateTime)
Extrae el valor de hora definido en pasos.</value>
  </data>
  <data name="GetYear.Description" xml:space="preserve">
    <value>GetYear(DateTime)
Extrae el año de la fecha-hora indicada.</value>
  </data>
  <data name="IsNullOrEmpty.Description" xml:space="preserve">
    <value>IsNullOrEmpty(String)
Devuelve 'Verdadero' si la cadena especificada el nulo o una cadena vacía, sino devuelve 'Falso'.</value>
  </data>
  <data name="Log.Description" xml:space="preserve">
    <value>Log(Value)
Devuelve el valor logarítmico del número especificado.</value>
  </data>
  <data name="Log2Param.Description" xml:space="preserve">
    <value>Log(Value, Base)
Devuelve el valor logarítmico del número especificado con las base indicada.</value>
  </data>
  <data name="Log10.Description" xml:space="preserve">
    <value>Log10(Value)
Devuelve el valor logarítmico de base 10 del número dado.</value>
  </data>
  <data name="Now.Description" xml:space="preserve">
    <value>Now()
Devuelve la fecha-hora actual del sistema.</value>
  </data>
  <data name="PadLeft.Description" xml:space="preserve">
    <value>PadLeft(String, Length)
Rellena una cadena con espacios por la izquierda hasta llegar a la longitud indicada.</value>
  </data>
  <data name="PadLeft3Param.Description" xml:space="preserve">
    <value>PadLeft(String, Length, Char)
Rellena una cadena con espacios por la izquierda hasta llegar a la longitud indicada.</value>
  </data>
  <data name="PadRight.Description" xml:space="preserve">
    <value>PadRight(String, Length)
Rellena una cadena con espacios por la derecha hasta llegar a la longitud indicada.</value>
  </data>
  <data name="PadRight3Param.Description" xml:space="preserve">
    <value>PadRight(String, Length, Char)
Rellena una cadena con espacios por la derecha hasta llegar a la longitud indicada.</value>
  </data>
  <data name="Power.Description" xml:space="preserve">
    <value>Power(Value, Power)
Devuelve un número elevado al poder del otro número especificado.</value>
  </data>
  <data name="Remove.Description" xml:space="preserve">
    <value>Remove(String, StartPosition, Length)
Elimina un número determinado de carácteres de la cadena indicada, empezando el la posición especificada.</value>
  </data>
  <data name="Replace.Description" xml:space="preserve">
    <value>Replace(Cadena, SubCadena2, Cadena3)
Devuelve una copia de Cadena1, en la cual, todas las instancias de SubCadena2 han sido reemplazadas por Cadena3.</value>
  </data>
  <data name="Reverse.Description" xml:space="preserve">
    <value>Reverse(String)
Invierte todos los caracteres de una cadena.</value>
  </data>
  <data name="Rnd.Description" xml:space="preserve">
    <value>Rnd()
Devuelve un valor aleatorio, menor que uno, pero mayor o igual a cero.</value>
  </data>
  <data name="Round.Description" xml:space="preserve">
    <value>Round(Value)
Redondea un valor decimal al entero mas cercano.</value>
  </data>
  <data name="Round2Param.Description" xml:space="preserve">
    <value>Round(Valor, Precisión)
Redondea el valor indicado al entero más cercano o al valor indicado redondeado al número de decimales.</value>
  </data>
  <data name="Sign.Description" xml:space="preserve">
    <value>Sign(Value)
Devuelve el signo positivo (+1), cero (0) o negativo (-1) de la expresión dada.</value>
  </data>
  <data name="Sin.Description" xml:space="preserve">
    <value>Sin(Value)
Devuelve el valor sino del ángulo, definido en radios.</value>
  </data>
  <data name="Sinh.Description" xml:space="preserve">
    <value>Sinh(Value)
Devuelve el valor hiperbólico sino del ángulo definido en radios.</value>
  </data>
  <data name="Sqr.Description" xml:space="preserve">
    <value>Sqr(Value)
Devuelve la raíz cuadrada de un número dado.</value>
  </data>
  <data name="Insert.Description" xml:space="preserve">
    <value>Insert(String1, StartPosition, String2)
Inserta la segunda cadena en la promera cadena en la posición indicada</value>
  </data>
  <data name="Tan.Description" xml:space="preserve">
    <value>Tan(Value)
Devuelve el valor tangente del ángulo definido en radios.</value>
  </data>
  <data name="Tanh.Description" xml:space="preserve">
    <value>Tanh(Value)
Devuelve el valor hiperbólico tangente del ángulo definido en radios.</value>
  </data>
  <data name="Today.Description" xml:space="preserve">
    <value>Today()
Devuelve la fecha actual del sistema, descartando la hora. En realidad, devuelve medianoche de la fecha actual.</value>
  </data>
  <data name="ToInt.Description" xml:space="preserve">
    <value>ToInt(Value)
Convierte Value a su valor entero con signo.</value>
  </data>
  <data name="ToLong.Description" xml:space="preserve">
    <value>ToLong(Value)
Convierte Value a su valor entero largo con signo.</value>
  </data>
  <data name="ToFloat.Description" xml:space="preserve">
    <value>ToFloat(Value)
Convierte Value a su valor de precisión simple con decimales.</value>
  </data>
  <data name="ToDouble.Description" xml:space="preserve">
    <value>ToDouble(Value)
Convierte Value a su valor de precisión doble con decimales.</value>
  </data>
  <data name="ToDecimal.Description" xml:space="preserve">
    <value>ToDecimal(Value)
Convierte Value a su valor de moneda con decimales.</value>
  </data>
  <data name="ToStr.Description" xml:space="preserve">
    <value>ToStr(Value)
Devuelve una representación de cadena del valor indicado.</value>
  </data>
  <data name="UtcNow.Description" xml:space="preserve">
    <value>UtcNow()
Devuelve la fecha-hora actual del sistema, expresado como Hora Universal Coordinada (UTC).</value>
  </data>
  <data name="Fields Description Prefix" xml:space="preserve">
    <value>El tipo de éste campo es: </value>
  </data>
  <data name="GridFields Description Prefix" xml:space="preserve">
    <value>Información del Campo
Etiqueta: {1}
El tipo del campo es: {2}</value>
  </data>
  <data name="Parameters Description Prefix" xml:space="preserve">
    <value>El tipo de parámetros es: </value>
  </data>
  <data name="Plus.Description" xml:space="preserve">
    <value>Suma dos valores numéricos y concatena dos cadenas.</value>
  </data>
  <data name="Minus.Description" xml:space="preserve">
    <value>Devuelve la diferencia entre dos números.</value>
  </data>
  <data name="Multiply.Description" xml:space="preserve">
    <value>Efectúa una multiplicación entre dos valores numéricos.</value>
  </data>
  <data name="Divide.Description" xml:space="preserve">
    <value>Efectúa una división del primer operando por el segundo.</value>
  </data>
  <data name="Modulo.Description" xml:space="preserve">
    <value>Devuelve el residuo (módulo) obtenido dividiendo el primer operando por el segundo.</value>
  </data>
  <data name="BitwiseOr.Description" xml:space="preserve">
    <value>Compara cada bit del primer operando con el correspondiente del segundo. Si alguno de los dos valen uno, el correspondiente del resultado también vale uno. En cualquier otro caso vale cero.</value>
  </data>
  <data name="BitwiseAnd.Description" xml:space="preserve">
    <value>Efectúa una operación 'Y' lógica entre dos valores enteros.</value>
  </data>
  <data name="BitwiseXor.Description" xml:space="preserve">
    <value>Hace la exclusión lógica (XOR) en dos valores lógicos o la exclusión lógica a nivel de bit de dos números.</value>
  </data>
  <data name="Equal.Description" xml:space="preserve">
    <value>Devuelve Verdadero si los dos operandos tienen el mismo valor, sino Falso.</value>
  </data>
  <data name="NotEqual.Description" xml:space="preserve">
    <value>Devuelve Verdadero si los dos operandos no son iguales, sino devuelve Falso.</value>
  </data>
  <data name="Less.Description" xml:space="preserve">
    <value>Operador menor que. Usado para comparar expresiones.</value>
  </data>
  <data name="LessOrEqual.Description" xml:space="preserve">
    <value>Operador menor o igual que. Usado para comparar expresiones.</value>
  </data>
  <data name="GreaterOrEqual.Description" xml:space="preserve">
    <value>Operador mayor o igual que. Usado para comparar expresiones.</value>
  </data>
  <data name="Greater.Description" xml:space="preserve">
    <value>Operador mayor que. Usado para comparar expresiones.</value>
  </data>
  <data name="In.Description" xml:space="preserve">
    <value>In (,,,)
Comprueba la existencia de una propiedad dentro de un conjunto.</value>
  </data>
  <data name="Like.Description" xml:space="preserve">
    <value>Compara una cadena con un patrón. Si coincide el valor con el patrón, el resultado es Verdadero. Si la cadena no coincide con el patrón, el resultado es Falso. Si las dos cadenas están vacías, el resultado también será Verdadero.</value>
  </data>
  <data name="Between.Description" xml:space="preserve">
    <value>Between (,)
Indica si un valor entra en un rango específico de valores.</value>
  </data>
  <data name="And.Description" xml:space="preserve">
    <value>Efectúa una conjunción lógica entre dos expresiones.</value>
  </data>
  <data name="Or.Description" xml:space="preserve">
    <value>Efectúa una disyunción entre dos valores lógicos.</value>
  </data>
  <data name="Not.Description" xml:space="preserve">
    <value>Efectúa una negación lógica sobre una expresión.</value>
  </data>
  <data name="True.Description" xml:space="preserve">
    <value>Representa el valor lógico 'Verdadero'.</value>
  </data>
  <data name="False.Description" xml:space="preserve">
    <value>Representa el valor lógico 'Falso'.</value>
  </data>
  <data name="Null.Description" xml:space="preserve">
    <value>Representa un objeto nulo, que no hace referencia a ningun objeto.</value>
  </data>
  <data name="Substring2param.Description" xml:space="preserve">
    <value>Substring(Cadena, PosiciónInicial)
Devuelve una sub-cadena de Cadena. La sub-cadena empieza el la posición PosiciónInicial.</value>
  </data>
  <data name="Condition.Text" xml:space="preserve">
    <value>Editor de Condiciones</value>
  </data>
  <data name="Expression.Text" xml:space="preserve">
    <value>Editor de Expresiones</value>
  </data>
  <data name="Variables.Text" xml:space="preserve">
    <value>Variables</value>
  </data>
  <data name="RowCount.Description" xml:space="preserve">
    <value>Devuelve el número de filas de la fuente de datos.</value>
  </data>
  <data name="CurrentRowIndex.Description" xml:space="preserve">
    <value>Devuelve un índice correspondiente a la fila actual en la fuente de datos. Nota: El índice de la primera fila es cero, no uno.</value>
  </data>
  <data name="UnboundColumn.Caption" xml:space="preserve">
    <value>Editor de Expresiones</value>
  </data>
  <data name="Condition.Caption" xml:space="preserve">
    <value>Editor de condiciones de expresiones</value>
  </data>
  <data name="AvgAggregate.Description" xml:space="preserve">
    <value>Avg(Value)
Evalúa el valor medio de una lista de valores.</value>
  </data>
  <data name="CountAggregate.Description" xml:space="preserve">
    <value>Count()
Devuelve en número de objetos en una colección.</value>
  </data>
  <data name="ExistsAggregate.Description" xml:space="preserve">
    <value>Exists()
Verifica si un objeto existe en una colección.</value>
  </data>
  <data name="MaxAggregate.Description" xml:space="preserve">
    <value>Max(Value)
Devuelve el valor máximo dentro de una colección.</value>
  </data>
  <data name="MinAggregate.Description" xml:space="preserve">
    <value>Min(Value)
Devuelve el valor mínimo dentro de una colección.</value>
  </data>
  <data name="SumAggregate.Description" xml:space="preserve">
    <value>Sum(Value)
Devuelve la suma de los valores dentro de una colección.</value>
  </data>
  <data name="SingleAggregate.Description" xml:space="preserve">
    <value>Single()
Devuelve una instancia de un objeto en una colección.</value>
  </data>
  <data name="Max.Description" xml:space="preserve">
    <value>Max(Valor1, Valor2)
Devuelve el valor máximo entre los valores especificados.</value>
  </data>
  <data name="Min.Description" xml:space="preserve">
    <value>Mix(Valor1, Valor2)
Devuelve el valor mínimo entre los valores especificados.</value>
  </data>
  <data name="StartsWith.Description" xml:space="preserve">
    <value>StartsWith(String, StartString)
Devuelve Cierto si String comienza por StartString; sino, devuelve Falso.</value>
  </data>
  <data name="EndsWith.Description" xml:space="preserve">
    <value>EndsWith(String, EndString)
Devuelve Cierto si String finaliza por EndString; sino, devuelve Falso.</value>
  </data>
  <data name="Contains.Description" xml:space="preserve">
    <value>Contains(String, SubString)
Devuelve Cierto si String contiene SubString; sino, devuelve Falso.</value>
  </data>
  <data name="IsThisWeek.Description" xml:space="preserve">
    <value>IsThisWeek(DateTime)
Devuelve Verdadero si la fecha indicada este en la semana actual.</value>
  </data>
  <data name="IsThisMonth.Description" xml:space="preserve">
    <value>IsThisMonth(DateTime)
Devuelve Verdadero si la fecha indicada este en el mes actual.</value>
  </data>
  <data name="IsThisYear.Description" xml:space="preserve">
    <value>IsThisYear(DateTime)
Devuelve Verdadero si la fecha indicada este en el año actual.</value>
  </data>
  <data name="FormatRule.Caption" xml:space="preserve">
    <value>Editor de expresión de reglas de formato</value>
  </data>
  <data name="Remove2Param.Description" xml:space="preserve">
    <value>Remove(String, StartPosition)
Elimina todos los caracteres de esta instancia, comenzando en una posición especificada.</value>
  </data>
  <data name="Remove3Param.Description" xml:space="preserve">
    <value>(String, StartPosition, longitud)
Elimina un número de caracteres especificado de esta instancia, comenzando en una posición especificada.</value>
  </data>
  <data name="&gt;&gt;buttonOK.Name" xml:space="preserve">
    <value>buttonOK</value>
  </data>
  <data name="&gt;&gt;buttonOK.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;buttonOK.ZOrder" xml:space="preserve">
    <value>24</value>
  </data>
  <data name="&gt;&gt;descriptionControl.Name" xml:space="preserve">
    <value>descriptionControl</value>
  </data>
  <data name="&gt;&gt;descriptionControl.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;descriptionControl.ZOrder" xml:space="preserve">
    <value>4</value>
  </data>
  <data name="&gt;&gt;expressionEdit.Name" xml:space="preserve">
    <value>expressionEdit</value>
  </data>
  <data name="&gt;&gt;expressionEdit.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;expressionEdit.ZOrder" xml:space="preserve">
    <value>21</value>
  </data>
  <data name="&gt;&gt;functionsTypes.Name" xml:space="preserve">
    <value>functionsTypes</value>
  </data>
  <data name="&gt;&gt;functionsTypes.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;functionsTypes.ZOrder" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="&gt;&gt;labelControl1.Name" xml:space="preserve">
    <value>labelControl1</value>
  </data>
  <data name="&gt;&gt;labelControl1.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;labelControl1.ZOrder" xml:space="preserve">
    <value>16</value>
  </data>
  <data name="&gt;&gt;labelControl2.Name" xml:space="preserve">
    <value>labelControl2</value>
  </data>
  <data name="&gt;&gt;labelControl2.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;labelControl2.ZOrder" xml:space="preserve">
    <value>9</value>
  </data>
  <data name="&gt;&gt;labelControl3.Name" xml:space="preserve">
    <value>labelControl3</value>
  </data>
  <data name="&gt;&gt;labelControl3.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;labelControl3.ZOrder" xml:space="preserve">
    <value>5</value>
  </data>
  <data name="&gt;&gt;labelControl4.Name" xml:space="preserve">
    <value>labelControl4</value>
  </data>
  <data name="&gt;&gt;labelControl4.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;labelControl4.ZOrder" xml:space="preserve">
    <value>1</value>
  </data>
  <data name="&gt;&gt;layoutItemButton10.Name" xml:space="preserve">
    <value>layoutItemButton10</value>
  </data>
  <data name="&gt;&gt;layoutItemButton10.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton10.ZOrder" xml:space="preserve">
    <value>11</value>
  </data>
  <data name="&gt;&gt;layoutItemButton11.Name" xml:space="preserve">
    <value>layoutItemButton11</value>
  </data>
  <data name="&gt;&gt;layoutItemButton11.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton11.ZOrder" xml:space="preserve">
    <value>10</value>
  </data>
  <data name="&gt;&gt;layoutItemButton12.Name" xml:space="preserve">
    <value>layoutItemButton12</value>
  </data>
  <data name="&gt;&gt;layoutItemButton12.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton12.ZOrder" xml:space="preserve">
    <value>6</value>
  </data>
  <data name="&gt;&gt;layoutItemButton13.Name" xml:space="preserve">
    <value>layoutItemButton13</value>
  </data>
  <data name="&gt;&gt;layoutItemButton13.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton13.ZOrder" xml:space="preserve">
    <value>7</value>
  </data>
  <data name="&gt;&gt;layoutItemButton14.Name" xml:space="preserve">
    <value>layoutItemButton14</value>
  </data>
  <data name="&gt;&gt;layoutItemButton14.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton14.ZOrder" xml:space="preserve">
    <value>8</value>
  </data>
  <data name="&gt;&gt;layoutItemButton15.Name" xml:space="preserve">
    <value>layoutItemButton15</value>
  </data>
  <data name="&gt;&gt;layoutItemButton15.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton15.ZOrder" xml:space="preserve">
    <value>0</value>
  </data>
  <data name="&gt;&gt;layoutItemButton2.Name" xml:space="preserve">
    <value>layoutItemButton2</value>
  </data>
  <data name="&gt;&gt;layoutItemButton2.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton2.ZOrder" xml:space="preserve">
    <value>20</value>
  </data>
  <data name="&gt;&gt;layoutItemButton3.Name" xml:space="preserve">
    <value>layoutItemButton3</value>
  </data>
  <data name="&gt;&gt;layoutItemButton3.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton3.ZOrder" xml:space="preserve">
    <value>19</value>
  </data>
  <data name="&gt;&gt;layoutItemButton4.Name" xml:space="preserve">
    <value>layoutItemButton4</value>
  </data>
  <data name="&gt;&gt;layoutItemButton4.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton4.ZOrder" xml:space="preserve">
    <value>18</value>
  </data>
  <data name="&gt;&gt;layoutItemButton5.Name" xml:space="preserve">
    <value>layoutItemButton5</value>
  </data>
  <data name="&gt;&gt;layoutItemButton5.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton5.ZOrder" xml:space="preserve">
    <value>17</value>
  </data>
  <data name="&gt;&gt;layoutItemButton6.Name" xml:space="preserve">
    <value>layoutItemButton6</value>
  </data>
  <data name="&gt;&gt;layoutItemButton6.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton6.ZOrder" xml:space="preserve">
    <value>15</value>
  </data>
  <data name="&gt;&gt;layoutItemButton7.Name" xml:space="preserve">
    <value>layoutItemButton7</value>
  </data>
  <data name="&gt;&gt;layoutItemButton7.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton7.ZOrder" xml:space="preserve">
    <value>14</value>
  </data>
  <data name="&gt;&gt;layoutItemButton8.Name" xml:space="preserve">
    <value>layoutItemButton8</value>
  </data>
  <data name="&gt;&gt;layoutItemButton8.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton8.ZOrder" xml:space="preserve">
    <value>13</value>
  </data>
  <data name="&gt;&gt;layoutItemButton9.Name" xml:space="preserve">
    <value>layoutItemButton9</value>
  </data>
  <data name="&gt;&gt;layoutItemButton9.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;layoutItemButton9.ZOrder" xml:space="preserve">
    <value>12</value>
  </data>
  <data name="&gt;&gt;listOfInputParameters.Name" xml:space="preserve">
    <value>listOfInputParameters</value>
  </data>
  <data name="&gt;&gt;listOfInputParameters.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;listOfInputParameters.ZOrder" xml:space="preserve">
    <value>2</value>
  </data>
  <data name="&gt;&gt;listOfInputTypes.Name" xml:space="preserve">
    <value>listOfInputTypes</value>
  </data>
  <data name="&gt;&gt;listOfInputTypes.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;listOfInputTypes.ZOrder" xml:space="preserve">
    <value>3</value>
  </data>
  <data name="&gt;&gt;plusItemButton.Name" xml:space="preserve">
    <value>plusItemButton</value>
  </data>
  <data name="&gt;&gt;plusItemButton.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;plusItemButton.ZOrder" xml:space="preserve">
    <value>22</value>
  </data>
  <data name="&gt;&gt;$this.Name" xml:space="preserve">
    <value>CalculatedFieldExpressionEditorForm</value>
  </data>
  <data name="&gt;&gt;buttonCancel.Name" xml:space="preserve">
    <value>buttonCancel</value>
  </data>
  <data name="&gt;&gt;buttonCancel.Parent" xml:space="preserve">
    <value>$this</value>
  </data>
  <data name="&gt;&gt;buttonCancel.ZOrder" xml:space="preserve">
    <value>23</value>
  </data>
</root>