<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Parameters.Text" xml:space="preserve">
    <value>Parameter</value>
  </data>
  <data name="Condition.Caption" xml:space="preserve">
    <value>Bedingungsausdruck bearbeiten</value>
  </data>
  <data name="Condition.Text" xml:space="preserve">
    <value>Ausdrucks-Editor</value>
  </data>
  <data name="Expression.Text" xml:space="preserve">
    <value>Ausdruck bearbeiten</value>
  </data>
  <data name="Operators.Text" xml:space="preserve">
    <value>Operatoren</value>
  </data>
  <data name="Variables.Text" xml:space="preserve">
    <value>Variablen</value>
  </data>
  <data name="Constants.Text" xml:space="preserve">
    <value>Konstanten</value>
  </data>
  <data name="UnboundColumn.Caption" xml:space="preserve">
    <value>Ausdruck bearbeiten</value>
  </data>
  <data name="Fields.Text" xml:space="preserve">
    <value>Felder</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>Ausdrucks Editor</value>
  </data>
  <data name="Functions.Text" xml:space="preserve">
    <value>Funktionen</value>
  </data>
  <data name="buttonCancel.Text" xml:space="preserve">
    <value>Abbrechen</value>
  </data>
  <data name="buttonOK.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="And.Description" xml:space="preserve">
    <value>Führt eine logische Konjunktion zweier Ausdrücke.</value>
  </data>
  <data name="AddDays.Description" xml:space="preserve">
    <value>AddDays(DateTime, DaysCount)
Gibt ein Datum-Uhrzeit-Wert, der die angegebene Anzahl von Tagen vom angegebenen DateTime ist.</value>
  </data>
  <data name="AddMilliSeconds.Description" xml:space="preserve">
    <value>AddMilliSeconds(DateTime, MilliSecondsCount)
Gibt ein Datum-Uhrzeit-Wert, der die angegebene Anzahl von Millisekunden vom angegebenen DateTime ist.</value>
  </data>
  <data name="Ascii.Description" xml:space="preserve">
    <value>Ascii(String)
Gibt den ASCII-Wert des am weitesten links stehende Zeichen in einem Zeichenausdruck.</value>
  </data>
  <data name="AddHours.Description" xml:space="preserve">
    <value>AddHours(DateTime, HoursCount)
Gibt ein Datum-Uhrzeit-Wert, der die angegebene Anzahl von Stunden entfernt von den angegebenen DateTime ist.</value>
  </data>
  <data name="AddTicks.Description" xml:space="preserve">
    <value>AddTicks(DateTime, TicksCount)
Gibt ein Datum-Uhrzeit-Wert, der die angegebene Anzahl von Ticks entfernt von der angegebenen DateTime ist.</value>
  </data>
  <data name="AddSeconds.Description" xml:space="preserve">
    <value>AddSeconds(DateTime, SecondsCount)
Gibt ein Datum-Uhrzeit-Wert, der die angegebene Anzahl von Sekunden entfernt von den angegebenen DateTime ist.</value>
  </data>
  <data name="Abs.Description" xml:space="preserve">
    <value>Abs(Value)
Gibt die absolute, positiven Wert des angegebenen numerischen Ausdrucks.</value>
  </data>
  <data name="Acos.Description" xml:space="preserve">
    <value>Acos(Value)
Gibt den Arkuskosinus einer Zahl (der Winkel im Bogenmaß, dessen Kosinus der angegebenen float-Ausdruck).</value>
  </data>
  <data name="AddTimeSpan.Description" xml:space="preserve">
    <value>AddTimeSpan(DateTime, TimeSpan)
Gibt ein Datum-Uhrzeit-Wert, der weg von der angegebenen DateTime für den angegebenen TimeSpan.</value>
  </data>
  <data name="AddMinutes.Description" xml:space="preserve">
    <value>AddMinutes(DateTime, MinutesCount)
Gibt ein Datum-Uhrzeit-Wert, der die angegebene Anzahl von Minuten von den angegebenen DateTime ist.</value>
  </data>
  <data name="AddMonths.Description" xml:space="preserve">
    <value>AddMonths(DateTime, MonthsCount)
Gibt ein Datum-Uhrzeit-Wert, der die angegebene Anzahl von Monaten vom angegebenen DateTime ist.</value>
  </data>
  <data name="Fields Description Prefix" xml:space="preserve">
    <value>Der Typ dieses Feldes ist:</value>
  </data>
  <data name="functionsTypes.Properties.AllItems" xml:space="preserve">
    <value>(Alle)</value>
  </data>
  <data name="functionsTypes.Properties.DateTimeItems" xml:space="preserve">
    <value>Datum / Uhrzeit</value>
  </data>
  <data name="CountAggregate.Description" xml:space="preserve">
    <value>Count()
Gibt die Anzahl der Objekte in einer Auflistung zurück.</value>
  </data>
  <data name="Parameters Description Prefix" xml:space="preserve">
    <value>Der Typ dieses Parameters ist:</value>
  </data>
  <data name="Rnd.Description" xml:space="preserve">
    <value>Rnd()
Gibt eine Zufallszahl, die kleiner als 1, aber größer oder gleich NULL ist.</value>
  </data>
  <data name="RowCount.Description" xml:space="preserve">
    <value>Gibt den Gesamtbetrag der Datenzeilen in einer Datasource.</value>
  </data>
  <data name="Sqr.Description" xml:space="preserve">
    <value>Sqr(Value)
Gibt die Quadratwurzel einer angegebenen Zahl zurück.</value>
  </data>
  <data name="ToDecimal.Description" xml:space="preserve">
    <value>ToDecimal(Value)
Konvertiert Wert in die entsprechende Dezimalzahl.</value>
  </data>
  <data name="ToFloat.Description" xml:space="preserve">
    <value>ToFloat(Value)
Konvertiert Wert in eine entsprechende 32-Bit-Genauigkeit-Gleitkommazahl.</value>
  </data>
  <data name="Tan.Description" xml:space="preserve">
    <value>Tan(Value)
Liefert den Tangens des Winkels im Bogenmaß definiert.</value>
  </data>
  <data name="Tanh.Description" xml:space="preserve">
    <value>Tanh(Value)
Gibt den hyperbolischen Tangens eines Winkels im Bogenmaß definiert.</value>
  </data>
  <data name="ToStr.Description" xml:space="preserve">
    <value>ToStr(Value)
Gibt eine Zeichenfolgendarstellung eines Objekts zurück.</value>
  </data>
  <data name="Trim.Description" xml:space="preserve">
    <value>Trim(String)
Entfernt alle führenden und nachgestellten Leerzeichen aus String.</value>
  </data>
  <data name="Char.Description" xml:space="preserve">
    <value>Char(Number)
Ein IntegerASCIICode in ein Zeichen konvertiert.</value>
  </data>
  <data name="Divide.Description" xml:space="preserve">
    <value>Dividiert den ersten Operanden durch den zweiten.</value>
  </data>
  <data name="functionsTypes.Properties.LogicalItems" xml:space="preserve">
    <value>Logisch</value>
  </data>
  <data name="Greater.Description" xml:space="preserve">
    <value>Größer als-Operator. Wird verwendet, um Ausdrücke zu vergleichen.</value>
  </data>
  <data name="GreaterOrEqual.Description" xml:space="preserve">
    <value>Größer als oder gleich-Operator. Wird verwendet, um Ausdrücke zu vergleichen.</value>
  </data>
  <data name="LocalDateTimeLastWeek.Description" xml:space="preserve">
    <value>LocalDateTimeLastWeek()
Gibt einen Datum-Uhrzeit-Wert zurück, der dem ersten Tag der vorangegangenen Woche entspricht.</value>
  </data>
  <data name="LocalDateTimeNextMonth.Description" xml:space="preserve">
    <value>LocalDateTimeNextMonth()
Gibt einen Datum-Uhrzeit-Wert zurück, der dem ersten Tag des nächsten Monats entspricht.</value>
  </data>
  <data name="LocalDateTimeThisMonth.Description" xml:space="preserve">
    <value>LocalDateTimeThisMonth()
Gibt einen Datum-Uhrzeit-Wert zurück, der dem ersten Tag des aktuellen Monats entspricht.</value>
  </data>
  <data name="LocalDateTimeThisWeek.Description" xml:space="preserve">
    <value>LocalDateTimeThisWeek()
Gibt einen Datum-Uhrzeit-Wert zurück, der dem ersten Tag der aktuellen Woche entspricht.</value>
  </data>
  <data name="LocalDateTimeThisYear.Description" xml:space="preserve">
    <value>LocalDateTimeThisYear()
Gibt einen Datum-Uhrzeit-Wert zurück, der dem ersten Tag des aktuellen Jahres entspricht.</value>
  </data>
  <data name="Minus.Description" xml:space="preserve">
    <value>Findet die Differenz zwischen zwei Zahlen.</value>
  </data>
  <data name="Multiply.Description" xml:space="preserve">
    <value>Multipliziert den Wert von zwei Ausdrücken.</value>
  </data>
  <data name="AvgAggregate.Description" xml:space="preserve">
    <value>Avg(Value)
Ergibt den Durchschnitt der Werte in der Auflistung.</value>
  </data>
  <data name="BitwiseAnd.Description" xml:space="preserve">
    <value>Führt eine bitweise logische UND-Operation zwischen zwei ganzzahligen Werten aus.</value>
  </data>
  <data name="AddYears.Description" xml:space="preserve">
    <value>AddYears (DateTime, YearsCount)
Gibt einen Datum-Uhrzeit-Wert, der die angegebene Anzahl von Jahren Weg von der Specieid DateTime ist.</value>
  </data>
  <data name="MaxAggregate.Description" xml:space="preserve">
    <value>Max(Wert)
Gibt den größten Wert in einer Auflistung zurück.</value>
  </data>
  <data name="Or.Description" xml:space="preserve">
    <value>Führt eine logische Disjunktion zweier boolescher Ausdrücke.</value>
  </data>
  <data name="ExistsAggregate.Description" xml:space="preserve">
    <value>Exists()
Bestimmt, ob das Objekt in der Auflistung vorhanden ist.</value>
  </data>
  <data name="functionsTypes.Properties.AggregateItems" xml:space="preserve">
    <value>Aggregat</value>
  </data>
  <data name="functionsTypes.Properties.StringItems" xml:space="preserve">
    <value>String</value>
  </data>
  <data name="GetDate.Description" xml:space="preserve">
    <value>GetDate(DateTime)
Extrahiert ein Datum aus der definierten DateTime.</value>
  </data>
  <data name="GetDay.Description" xml:space="preserve">
    <value>GetDay(DateTime)
Extrahiert einen Tag aus der definierten DateTime.</value>
  </data>
  <data name="GetDayOfYear.Description" xml:space="preserve">
    <value>GetDayOfYear(DateTime)
Extrahiert einen Tag des Jahres aus der definierten DateTime.</value>
  </data>
  <data name="GetHour.Description" xml:space="preserve">
    <value>GetHour(DateTime)
Extrahiert eine Stunde aus der definierten DateTime.</value>
  </data>
  <data name="GetMonth.Description" xml:space="preserve">
    <value>GetMonth(DateTime)
Extrahiert einen Monat aus der definierten DateTime.</value>
  </data>
  <data name="GetYear.Description" xml:space="preserve">
    <value>GetYear(DateTime)
Extrahiert ein Jahr aus der definierten DateTime.</value>
  </data>
  <data name="GridFields Description Prefix" xml:space="preserve">
    <value>Feldinformationen
Bildunterschrift: {1}
Der Typ dieses Feldes ist: {2}</value>
  </data>
  <data name="IsNull.Description" xml:space="preserve">
    <value>IsNull(Value)
Gibt True zurück, wenn der angegebene Wert NULL ist.</value>
  </data>
  <data name="IsThisYear.Description" xml:space="preserve">
    <value>IsThisYear(DateTime)
Gibt True zurück, wenn das angegebene Datum in das laufende Jahr fällt.</value>
  </data>
  <data name="CharIndex3Param.Description" xml:space="preserve">
    <value>CharIndex (String1, String2, StartLocation)
Gibt die Startposition von String1 in String2, beginnend von der StartLocation Zeichenposition an das Ende einer Zeichenfolge zurück.</value>
  </data>
  <data name="CurrentRowIndex.Description" xml:space="preserve">
    <value>Gibt den Index der aktuellen Datenzeile in einer Datasource zurück. Beachten Sie, dass dieser Index nullbasiert ist.</value>
  </data>
  <data name="In.Description" xml:space="preserve">
    <value>In (,,,)
Tests für das Vorhandensein einer Eigenschaft in einem Objekt.</value>
  </data>
  <data name="Ceiling.Description" xml:space="preserve">
    <value>Ceiling(Value)
Gibt die kleinste ganze Zahl, die größer als oder gleich dem gegebenen numerischen Ausdruck ist.</value>
  </data>
  <data name="Concat.Description" xml:space="preserve">
    <value>Concat (String1,..., StringN)
Gibt einen String-Wert, die Verkettung der aktuellen Zeichenfolge mit zusätzlichen Zeichenfolgen enthält.</value>
  </data>
  <data name="Contains.Description" xml:space="preserve">
    <value>Enthält (String, SubString)
Gibt True zurück, wenn Teilzeichenfolge in Zeichenfolge vorkommt; Anderenfalls wird False zurückgegeben.</value>
  </data>
  <data name="Cos.Description" xml:space="preserve">
    <value>Cos(Value)
Liefert den Cosinus des Winkels im Bogenmaß definiert.</value>
  </data>
  <data name="Cosh.Description" xml:space="preserve">
    <value>Cosh(Value)
Gibt den hyperbolischen Kosinus des Winkels im Bogenmaß definiert.</value>
  </data>
  <data name="DateDiffDay.Description" xml:space="preserve">
    <value>DateDiffDay (Startdatum, Enddatum)
Liefert die Anzahl der Taggrenzen zwischen zwei NULL-Daten.</value>
  </data>
  <data name="DateDiffHour.Description" xml:space="preserve">
    <value>DateDiffHour (Startdatum, Enddatum)
Gibt die Anzahl von Stundengrenzen zwischen zwei Datumsangaben, die NULL-.</value>
  </data>
  <data name="DateDiffMilliSecond.Description" xml:space="preserve">
    <value>DateDiffMilliSecond (Startdatum, Enddatum)
Liefert die Anzahl der Millisekundengrenzen zwischen zwei NULL-Datumsangaben.</value>
  </data>
  <data name="DateDiffMinute.Description" xml:space="preserve">
    <value>DateDiffMinute (Startdatum, Enddatum)
Gibt die Anzahl von Minutengrenzen zwischen zwei Datumsangaben, die NULL-.</value>
  </data>
  <data name="DateDiffMonth.Description" xml:space="preserve">
    <value>DateDiffMonth (Startdatum, Enddatum)
Liefert die Anzahl der Monatsgrenzen zwischen zwei Datumsangaben, die NULL-.</value>
  </data>
  <data name="DateDiffSecond.Description" xml:space="preserve">
    <value>DateDiffSecond (Startdatum, Enddatum)
Liefert die Anzahl der zweiten Grenzen zwischen zwei NULL-Datumsangaben.</value>
  </data>
  <data name="DateDiffTick.Description" xml:space="preserve">
    <value>DateDiffTick (Startdatum, Enddatum)
Liefert die Anzahl der Tick Grenzen zwischen zwei NULL-Daten.</value>
  </data>
  <data name="DateDiffYear.Description" xml:space="preserve">
    <value>DateDiffYear (Startdatum, Enddatum)
Gibt die Anzahl von Jahresgrenzen zwischen zwei Datumsangaben, die NULL-.</value>
  </data>
  <data name="EndsWith.Description" xml:space="preserve">
    <value>EndsWith (String, EndString)
Gibt True zurück, wenn das Ende der Zeichenfolge EndString übereinstimmt; Anderenfalls wird False zurückgegeben.</value>
  </data>
  <data name="Equal.Description" xml:space="preserve">
    <value>Gibt true, wenn beide Operanden denselben Wert haben, andernfalls gibt es false zurück.</value>
  </data>
  <data name="Exp.Description" xml:space="preserve">
    <value>Exp(Value)
Der exponentielle Wert des gegebenen Float-Ausdrucks zurückgegeben.</value>
  </data>
  <data name="False.Description" xml:space="preserve">
    <value>Stellt den Boolean False-Wert.</value>
  </data>
  <data name="Floor.Description" xml:space="preserve">
    <value>Floor(Value)
Gibt der größten ganze Zahl kleiner oder gleich dem gegebenen numerischen Ausdruck.</value>
  </data>
  <data name="functionsTypes.Properties.MathItems" xml:space="preserve">
    <value>Math</value>
  </data>
  <data name="GetDayOfWeek.Description" xml:space="preserve">
    <value>GetDayOfWeek(DateTime)
Extrahiert den Wochentag aus definierten DateTime.</value>
  </data>
  <data name="GetMilliSecond.Description" xml:space="preserve">
    <value>GetMilliSecond(DateTime)
Extrahiert von Millisekunden aus definierten DateTime.</value>
  </data>
  <data name="GetMinute.Description" xml:space="preserve">
    <value>GetMinute(DateTime)
Die definierten DateTime Minuten entnimmt.</value>
  </data>
  <data name="GetSecond.Description" xml:space="preserve">
    <value>GetSecond(DateTime)
Die definierten DateTime Sekunden Auszüge.</value>
  </data>
  <data name="GetTimeOfDay.Description" xml:space="preserve">
    <value>GetTimeOfDay(DateTime)
Extrahiert die Tageszeit aus der definierten DateTime in ticks.</value>
  </data>
  <data name="Iif.Description" xml:space="preserve">
    <value>Iif (Ausdruck, True-Teil, FalsePart)
Gibt entweder true-Teil oder FalsePart, abhängig von der Auswertung der boolesche Ausdruck.</value>
  </data>
  <data name="Insert.Description" xml:space="preserve">
    <value>Insert (String1, StartPosition, String2)
Fügt String2 in String1, an der durch StartPositon angegebenen Position</value>
  </data>
  <data name="IsNullOrEmpty.Description" xml:space="preserve">
    <value>IsNullOrEmpty(String)
Gibt WAHR zurück, wenn das angegebene String-Objekt NULL oder eine leere Zeichenfolge ist. Anderenfalls wird False zurückgegeben.</value>
  </data>
  <data name="IsThisMonth.Description" xml:space="preserve">
    <value>IsThisMonth(DateTime)
Gibt True zurück, wenn das angegebene Datum innerhalb des aktuellen Monats fällt.</value>
  </data>
  <data name="IsThisWeek.Description" xml:space="preserve">
    <value>IsThisWeek(DateTime)
Gibt True zurück, wenn das angegebene Datum in der aktuellen Woche fällt.</value>
  </data>
  <data name="Len.Description" xml:space="preserve">
    <value>Len(Value)
Gibt einer ganze Zahl enthält entweder die Anzahl der Zeichen in einer Zeichenfolge oder die nominale Bytes erforderlich, um eine Variable zu speichern.</value>
  </data>
  <data name="Less.Description" xml:space="preserve">
    <value>Weniger als-Operator. Verwendet, um Ausdrücke zu vergleichen.</value>
  </data>
  <data name="LessOrEqual.Description" xml:space="preserve">
    <value>Kleiner oder gleich der Betreiber. Verwendet, um Ausdrücke zu vergleichen.</value>
  </data>
  <data name="Like.Description" xml:space="preserve">
    <value>Vergleicht eine Zeichenfolge mit einem Muster. Wenn der Wert der Zeichenfolge das Muster übereinstimmt, ist Ergebnis true. Wenn die Zeichenfolge nicht dem Muster entspricht, ist Ergebnis false. Wenn String und Muster leere Zeichenfolgen sind, ist das Ergebnis true.</value>
  </data>
  <data name="LocalDateTimeDayAfterTomorrow.Description" xml:space="preserve">
    <value>LocalDateTimeDayAfterTomorrow()
Gibt einen Datum-Uhrzeit-Wert entspricht übermorgen.</value>
  </data>
  <data name="LocalDateTimeNextWeek.Description" xml:space="preserve">
    <value>LocalDateTimeNextWeek()
Gibt einen Datum-Uhrzeit-Wert entspricht des ersten Tages der darauf folgenden Woche.</value>
  </data>
  <data name="LocalDateTimeNextYear.Description" xml:space="preserve">
    <value>LocalDateTimeNextYear()
Gibt einen Datum-Uhrzeit-Wert entspricht dem ersten Tag des darauf folgenden Jahres.</value>
  </data>
  <data name="LocalDateTimeNow.Description" xml:space="preserve">
    <value>LocalDateTimeNow()
Gibt einen Datum-Uhrzeit-Wert entspricht dem aktuellen Zeitpunkt.</value>
  </data>
  <data name="LocalDateTimeToday.Description" xml:space="preserve">
    <value>LocalDateTimeToday()
Gibt einen Datum-Uhrzeit-Wert entspricht heute.</value>
  </data>
  <data name="LocalDateTimeTomorrow.Description" xml:space="preserve">
    <value>LocalDateTimeTomorrow()
Gibt einen Datum-Uhrzeit-Wert entspricht Morgen.</value>
  </data>
  <data name="LocalDateTimeTwoWeeksAway.Description" xml:space="preserve">
    <value>LocalDateTimeTwoWeeksAway()
Gibt einen Datum-Uhrzeit-Wert entspricht des ersten Tages der Woche, die nach der nächsten Woche ist.</value>
  </data>
  <data name="LocalDateTimeYesterday.Description" xml:space="preserve">
    <value>LocalDateTimeYesterday()
Gibt einen Datum-Uhrzeit-Wert entspricht gestern.</value>
  </data>
  <data name="Log.Description" xml:space="preserve">
    <value>Log(Value)
Gibt den natürlichen Logarithmus einer angegebenen Zahl.</value>
  </data>
  <data name="Log10.Description" xml:space="preserve">
    <value>Log10(Value)
Gibt die Basis 10 Logarithmus einer angegebenen Zahl.</value>
  </data>
  <data name="Log2Param.Description" xml:space="preserve">
    <value>Log (Value, Base)
Gibt den Logarithmus einer angegebenen Zahl bezüglich einer angegebenen Basis.</value>
  </data>
  <data name="Lower.Description" xml:space="preserve">
    <value>Lower(String)
Gibt die Zeichenfolge in Kleinbuchstaben.</value>
  </data>
  <data name="Max.Description" xml:space="preserve">
    <value>Max (Value1, Value2)
Gibt den maximalen Wert von den angegebenen Werten.</value>
  </data>
  <data name="Min.Description" xml:space="preserve">
    <value>Min (Value1, Value2)
Gibt den kleinsten Wert aus den angegebenen Werten.</value>
  </data>
  <data name="MinAggregate.Description" xml:space="preserve">
    <value>Min(Value)
Den minimale Ausdruckswert in einer Auflistung zurückgibt.</value>
  </data>
  <data name="Modulo.Description" xml:space="preserve">
    <value>Gibt den Rest (Modulo) errechnet sich ein numerischen Ausdruck ineinander zurück.</value>
  </data>
  <data name="Not.Description" xml:space="preserve">
    <value>Führt eine logische Negation auf einem Ausdruck.</value>
  </data>
  <data name="NotEqual.Description" xml:space="preserve">
    <value>Gibt true, wenn die Operanden haben nicht denselben Wert, andernfalls gibt es false zurück.</value>
  </data>
  <data name="Now.Description" xml:space="preserve">
    <value>Jetzt()
Gibt das aktuelle Systemdatum und Zeit.</value>
  </data>
  <data name="Null.Description" xml:space="preserve">
    <value>Stellt einen null-Verweis, eine, die nicht an ein beliebiges Objekt verweist.</value>
  </data>
  <data name="PadLeft.Description" xml:space="preserve">
    <value>PadLeft (String, Länge)
Zeichen richtet, die definierte Zeichenfolge linksbündig der linken Seite mit Leerzeichen bis eine angegebene Gesamtlänge zu erreichen.</value>
  </data>
  <data name="PadLeft3Param.Description" xml:space="preserve">
    <value>PadLeft (String, Länge, Char)
Zeichen richtet, die definierte Zeichenfolge linksbündig der linken Seite mit dem angegebenen Char bis eine angegebene Gesamtlänge zu erreichen.</value>
  </data>
  <data name="PadRight.Description" xml:space="preserve">
    <value>PadRight (String, Länge)
Zeichen rechts ausgerichtet, die definierte Zeichenfolge linksbündig der linken Seite mit Leerzeichen bis eine angegebene Gesamtlänge zu erreichen.</value>
  </data>
  <data name="PadRight3Param.Description" xml:space="preserve">
    <value>PadRight (String, Länge, Char)
Zeichen rechts ausgerichtet, die definierte Zeichenfolge linksbündig der linken Seite mit dem angegebenen Char bis eine angegebene Gesamtlänge zu erreichen.</value>
  </data>
  <data name="Plus.Description" xml:space="preserve">
    <value>Fügt den Wert eines numerischen Ausdrucks in einen anderen oder verkettet zwei Zeichenfolgen.</value>
  </data>
  <data name="Power.Description" xml:space="preserve">
    <value>Power (Wert, macht)
Gibt eine angegebene Anzahl in die angegebene Potenz.</value>
  </data>
  <data name="Remove.Description" xml:space="preserve">
    <value>-Remove (String, StartPosition, Länge)
Löscht eine angegebene Anzahl von Zeichen aus dieser Instanz, an der angegebenen Position ab.</value>
  </data>
  <data name="Reverse.Description" xml:space="preserve">
    <value>Reverse(String)
Kehrt die Reihenfolge der Elemente innerhalb eines Strings.</value>
  </data>
  <data name="Round.Description" xml:space="preserve">
    <value>Round(Value)
Den angegebenen Wert auf die nächste Ganzzahl Runden.</value>
  </data>
  <data name="Round2Param.Description" xml:space="preserve">
    <value>Runde (Wert, Genauigkeit)
Den angegebenen Wert auf die nächste Ganzzahl oder eine angegebene Anzahl von Dezimalstellen Runden.</value>
  </data>
  <data name="Sign.Description" xml:space="preserve">
    <value>Sign(Value)
Gibt das Positive (+ 1), NULL (0) oder negativ (-1) Zeichen des angegebenen Ausdrucks.</value>
  </data>
  <data name="Sin.Description" xml:space="preserve">
    <value>Sin(Value)
Liefert den Sinus des Winkels im Bogenmaß definiert.</value>
  </data>
  <data name="SingleAggregate.Description" xml:space="preserve">
    <value>Single()
Gibt ein einzelnes Objekt aus der Auflistung.</value>
  </data>
  <data name="Sinh.Description" xml:space="preserve">
    <value>Sinh(Value)
Gibt den hyperbolischen Sinus des Winkels im Bogenmaß definiert.</value>
  </data>
  <data name="StartsWith.Description" xml:space="preserve">
    <value>StartsWith (String, StartString)
Gibt True zurück, wenn der Anfang der Zeichenfolge StartString übereinstimmt; Anderenfalls wird False zurückgegeben.</value>
  </data>
  <data name="Asin.Description" xml:space="preserve">
    <value>Asin(Value)
Gibt den Arkussinus einer Zahl (den Winkel im Bogenmaß, dessen Sinus der angegebenen Float-Ausdruck ist).</value>
  </data>
  <data name="Atn.Description" xml:space="preserve">
    <value>Atn(Value)
Gibt den Arkustangens einer Zahl (den Winkel im Bogenmaß, dessen Tangens der angegebenen Float-Ausdruck ist).</value>
  </data>
  <data name="Atn2.Description" xml:space="preserve">
    <value>Atn2 (Wert1, Wert2)
Gibt den Winkel, dessen Tangens der Quotient von zwei angegebenen Zahlen in Bogenmaß (Radiant ist).</value>
  </data>
  <data name="Between.Description" xml:space="preserve">
    <value>Zwischen (,)
Gibt einen Bereich zu testen. Gibt true zurück, wenn ein Wert größer oder gleich der erste Operand ist und kleiner oder gleich der zweite Operand.</value>
  </data>
  <data name="BigMul.Description" xml:space="preserve">
    <value>BigMul (Wert1, Wert2)
Gibt ein Int64, enthält die Vollversion von zwei angegebenen 32-Bit-Ganzzahlen.</value>
  </data>
  <data name="BitwiseOr.Description" xml:space="preserve">
    <value>Vergleicht jedes Bit seinen ersten Operanden auf das entsprechende Bit den zweiten Operanden. Wenn entweder Bit 1 ist, wird das entsprechende Ergebnisbit auf 1 festgelegt. Andernfalls wird das entsprechende Ergebnisbit auf 0 festgelegt.</value>
  </data>
  <data name="BitwiseXor.Description" xml:space="preserve">
    <value>Führt einen logischen Ausschluss zweier boolescher Ausdrücke oder einen bitweisen Ausschluss zweier numerischer Ausdrücke.</value>
  </data>
  <data name="Substring2param.Description" xml:space="preserve">
    <value>Substring (String, StartPosition)
Ruft eine Teilzeichenfolge aus String. Die Teilzeichenfolge beginnt an StartPosition.</value>
  </data>
  <data name="Substring3param.Description" xml:space="preserve">
    <value>Substring (String, StartPosition, Länge)
Ruft eine Teilzeichenfolge aus String. Die Teilzeichenfolge beginnt an StartPosition und hat die angegebene Länge.</value>
  </data>
  <data name="SumAggregate.Description" xml:space="preserve">
    <value>Sum(Wert)
Gibt die Summe aller Expression-Werte in der Auflistung zurück.</value>
  </data>
  <data name="ToDouble.Description" xml:space="preserve">
    <value>ToDouble(Value)
Konvertiert Wert in eine entsprechende 64-Bit doppeltgenaue Gleitkommazahl.</value>
  </data>
  <data name="ToInt.Description" xml:space="preserve">
    <value>ToInt(Value)
Wert in eine entsprechende 32-Bit-Ganzzahl mit Vorzeichen konvertiert.</value>
  </data>
  <data name="ToLong.Description" xml:space="preserve">
    <value>ToLong(Value)
Wert in eine entsprechende 64-Bit-Ganzzahl mit Vorzeichen konvertiert.</value>
  </data>
  <data name="True.Description" xml:space="preserve">
    <value>Stellt den booleschen Wert True Wert.</value>
  </data>
  <data name="Upper.Description" xml:space="preserve">
    <value>Upper(String)
Zeichenfolge in Großbuchstaben zurück.</value>
  </data>
  <data name="UtcNow.Description" xml:space="preserve">
    <value>UtcNow()
Gibt das aktuelle Systemdatum und die Zeit, ausgedrückt als koordinierte Weltzeit (UTC).</value>
  </data>
  <data name="CharIndex.Description" xml:space="preserve">
    <value>CharIndex (String1, String2)
Gibt die Startposition von String1 in String2, beginnend mit Nullstellung Zeichen am Ende einer Zeichenfolge zurück.</value>
  </data>
  <data name="Today.Description" xml:space="preserve">
    <value>Heute()
Gibt das aktuelle Datum. Unabhängig von der tatsächlichen Zeit, gibt diese Funktion Uhr des aktuellen Datums.</value>
  </data>
  <data name="Replace.Description" xml:space="preserve">
    <value>Ersetzen (String, SubString2, String3)
Gibt eine Kopie von String1, in der SubString2 wurde durch String3 ersetzt.</value>
  </data>
  <data name="Remove2Param.Description" xml:space="preserve">
    <value>Entfernen Sie (String, StartPosition)
Löscht alle Zeichen aus dieser Instanz, an der angegebenen Position ab.</value>
  </data>
  <data name="Remove3Param.Description" xml:space="preserve">
    <value>-Remove (String, StartPosition, Länge)
Löscht eine angegebene Anzahl von Zeichen aus dieser Instanz, an der angegebenen Position ab.</value>
  </data>
  <data name="&gt;&gt;buttonCancel.ZOrder" xml:space="preserve">
    <value>23</value>
  </data>
  <data name="&gt;&gt;buttonOK.ZOrder" xml:space="preserve">
    <value>24</value>
  </data>
</root>