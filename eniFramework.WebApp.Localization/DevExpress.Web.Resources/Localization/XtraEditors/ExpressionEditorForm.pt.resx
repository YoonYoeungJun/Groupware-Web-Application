<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Constants.Text" xml:space="preserve">
    <value>Constantes</value>
  </data>
  <data name="Parameters.Text" xml:space="preserve">
    <value>Parâmetros</value>
  </data>
  <data name="buttonOK.Text" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="Fields.Text" xml:space="preserve">
    <value>Campos</value>
  </data>
  <data name="Operators.Text" xml:space="preserve">
    <value>Operadores</value>
  </data>
  <data name="functionsTypes.Properties.AggregateItems" xml:space="preserve">
    <value>Agregado</value>
  </data>
  <data name="buttonCancel.Text" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="functionsTypes.Properties.AllItems" xml:space="preserve">
    <value>(Todos)</value>
  </data>
  <data name="functionsTypes.Properties.StringItems" xml:space="preserve">
    <value>Seqüência de caracteres</value>
  </data>
  <data name="Functions.Text" xml:space="preserve">
    <value>Funções</value>
  </data>
  <data name="functionsTypes.Properties.DateTimeItems" xml:space="preserve">
    <value>Data e hora</value>
  </data>
  <data name="functionsTypes.Properties.LogicalItems" xml:space="preserve">
    <value>Lógico</value>
  </data>
  <data name="functionsTypes.Properties.MathItems" xml:space="preserve">
    <value>Matemática</value>
  </data>
  <data name="Char.Description" xml:space="preserve">
    <value>Char(Number)
Converte um integerASCIICode para um caractere.</value>
  </data>
  <data name="ExistsAggregate.Description" xml:space="preserve">
    <value>Exists()
Determina se o objeto existe na coleção.</value>
  </data>
  <data name="False.Description" xml:space="preserve">
    <value>Representa o valor booleano False.</value>
  </data>
  <data name="Fields Description Prefix" xml:space="preserve">
    <value>o tipo deste campo é:</value>
  </data>
  <data name="True.Description" xml:space="preserve">
    <value>Representa o valor booleano True.</value>
  </data>
  <data name="UnboundColumn.Caption" xml:space="preserve">
    <value>Editor de expressão</value>
  </data>
  <data name="Upper.Description" xml:space="preserve">
    <value>Upper(String)
Retorna a String em letras maiúsculas.</value>
  </data>
  <data name="UtcNow.Description" xml:space="preserve">
    <value>UtcNow()
Retorna a data atual do sistema e o tempo, expressado como tempo Universal Coordenado (UTC).</value>
  </data>
  <data name="Variables.Text" xml:space="preserve">
    <value>Variáveis</value>
  </data>
  <data name="Floor.Description" xml:space="preserve">
    <value>Floor(Value)
Retorna o maior inteiro menor ou igual a determinada expressão numérica.</value>
  </data>
  <data name="FormatRule.Caption" xml:space="preserve">
    <value>Editor de expressões de regra de formato</value>
  </data>
  <data name="DateDiffDay.Description" xml:space="preserve">
    <value>DateDiffDay (startDate, endDate)
Retorna o número de limites de dias entre duas datas não anuláveis.</value>
  </data>
  <data name="DateDiffHour.Description" xml:space="preserve">
    <value>DateDiffHour (startDate, endDate)
Retorna o número de limites de horas entre duas datas não anuláveis.</value>
  </data>
  <data name="DateDiffMilliSecond.Description" xml:space="preserve">
    <value>DateDiffMilliSecond (startDate, endDate)
Retorna o número de milissegundos limites entre duas datas não anuláveis.</value>
  </data>
  <data name="DateDiffMinute.Description" xml:space="preserve">
    <value>DateDiffMinute (startDate, endDate)
Retorna o número de minuto os limites entre duas datas não anuláveis.</value>
  </data>
  <data name="DateDiffMonth.Description" xml:space="preserve">
    <value>DateDiffMonth (startDate, endDate)
Retorna o número de mês limites entre duas datas não anuláveis.</value>
  </data>
  <data name="DateDiffSecond.Description" xml:space="preserve">
    <value>DateDiffSecond (startDate, endDate)
Retorna o número de segundo limites entre duas datas não anuláveis.</value>
  </data>
  <data name="DateDiffTick.Description" xml:space="preserve">
    <value>DateDiffTick (startDate, endDate)
Retorna o número de escala de limites entre duas datas não anuláveis.</value>
  </data>
  <data name="DateDiffYear.Description" xml:space="preserve">
    <value>DateDiffYear (startDate, endDate)
Retorna o número de ano limites entre duas datas não anuláveis.</value>
  </data>
  <data name="Divide.Description" xml:space="preserve">
    <value>Divide o primeiro operando por segundo.</value>
  </data>
  <data name="EndsWith.Description" xml:space="preserve">
    <value>EndsWith (String, EndString)
Retorna True se o final da seqüência de caracteres corresponde a EndString; caso contrário, False é retornado.</value>
  </data>
  <data name="Equal.Description" xml:space="preserve">
    <value>Retorna true se ambos os operandos têm o mesmo valor; caso contrário, retorna false.</value>
  </data>
  <data name="Exp.Description" xml:space="preserve">
    <value>Exp(Value)
Retorna o valor exponencial de expressão float determinado.</value>
  </data>
  <data name="Expression.Text" xml:space="preserve">
    <value>Editor de expressão</value>
  </data>
  <data name="CharIndex.Description" xml:space="preserve">
    <value>CharIndex (String1, String2)
Retorna a posição inicial de String1 dentro String2, começando do zero posição do caractere para o fim de uma seqüência de caracteres.</value>
  </data>
  <data name="CharIndex3Param.Description" xml:space="preserve">
    <value>CharIndex (String1, String2, StartLocation)
Retorna a posição inicial de String1 dentro String2, começando a partir da posição de caractere StartLocation ao final de uma seqüência de caracteres.</value>
  </data>
  <data name="Concat.Description" xml:space="preserve">
    <value>Concat (String1,..., StringN)
Retorna um valor de seqüência de caracteres que contém a concatenação de seqüência de caracteres atual com qualquer cadeia de caracteres adicionais.</value>
  </data>
  <data name="Condition.Caption" xml:space="preserve">
    <value>Editor de expressão de condição</value>
  </data>
  <data name="Condition.Text" xml:space="preserve">
    <value>Editor de condição</value>
  </data>
  <data name="Contains.Description" xml:space="preserve">
    <value>Contém (String, SubString)
Retorna True se a SubString ocorre dentro de cadeia de caracteres; caso contrário, False é retornado.</value>
  </data>
  <data name="Cos.Description" xml:space="preserve">
    <value>Cos(Value)
Retorna o cosseno do ângulo definido em radianos.</value>
  </data>
  <data name="Cosh.Description" xml:space="preserve">
    <value>Cosh(Value)
Retorna o cosseno hiperbólico de um ângulo definido em radianos.</value>
  </data>
  <data name="CountAggregate.Description" xml:space="preserve">
    <value>Count)
Retorna o número de objetos em uma coleção.</value>
  </data>
  <data name="CurrentRowIndex.Description" xml:space="preserve">
    <value>Retorna o índice da linha atual de dados em uma fonte de dados. Note que este índice é baseado em zero.</value>
  </data>
  <data name="Ceiling.Description" xml:space="preserve">
    <value>Ceiling(Value)
Retorna o menor inteiro que é maior que ou igual a determinada expressão numérica.</value>
  </data>
  <data name="GetDate.Description" xml:space="preserve">
    <value>GetDate(DateTime)
Extrai uma data de DateTime definido.</value>
  </data>
  <data name="GetDay.Description" xml:space="preserve">
    <value>GetDay(DateTime)
Extrai o DateTime definido um dia.</value>
  </data>
  <data name="GetDayOfWeek.Description" xml:space="preserve">
    <value>GetDayOfWeek(DateTime)
Extrai um dia da semana de DateTime definido.</value>
  </data>
  <data name="GetDayOfYear.Description" xml:space="preserve">
    <value>GetDayOfYear(DateTime)
Extrai um dia do ano de DateTime definido.</value>
  </data>
  <data name="GetHour.Description" xml:space="preserve">
    <value>GetHour(DateTime)
Extrai uma hora de DateTime definido.</value>
  </data>
  <data name="GetMilliSecond.Description" xml:space="preserve">
    <value>GetMilliSecond(DateTime)
Extrai o DateTime definido milissegundos.</value>
  </data>
  <data name="GetMinute.Description" xml:space="preserve">
    <value>GetMinute(DateTime)
Extrai o DateTime definido minutos.</value>
  </data>
  <data name="GetMonth.Description" xml:space="preserve">
    <value>GetMonth (DateTime)
Extrai um mês de DateTime definido.</value>
  </data>
  <data name="GetSecond.Description" xml:space="preserve">
    <value>GetSecond(DateTime)
Extrai o DateTime definido segundos.</value>
  </data>
  <data name="GetTimeOfDay.Description" xml:space="preserve">
    <value>GetTimeOfDay(DateTime)
Extrai o DateTime definido, em escalas da hora do dia.</value>
  </data>
  <data name="GetYear.Description" xml:space="preserve">
    <value>GetYear(DateTime)
Extrai um ano de DateTime definido.</value>
  </data>
  <data name="Greater.Description" xml:space="preserve">
    <value>Maior que o operador. Usado para comparar expressões.</value>
  </data>
  <data name="GreaterOrEqual.Description" xml:space="preserve">
    <value>Maior ou igual ao operador. Usado para comparar expressões.</value>
  </data>
  <data name="GridFields Description Prefix" xml:space="preserve">
    <value>Legenda: {1}
É o tipo deste campo: {2}</value>
  </data>
  <data name="Iif.Description" xml:space="preserve">
    <value>Iif (expressão, TruePart, FalsePart)
Retorna o TruePart ou FalsePart, dependendo da avaliação da expressão booliana.</value>
  </data>
  <data name="In.Description" xml:space="preserve">
    <value>In (,,,)
Testes para a existência de uma propriedade em um objeto.</value>
  </data>
  <data name="Max.Description" xml:space="preserve">
    <value>Max (valor1, valor2)
Retorna o valor máximo dos valores especificados.</value>
  </data>
  <data name="MaxAggregate.Description" xml:space="preserve">
    <value>Max(Value)
Retorna o valor da expressão máxima em uma coleção.</value>
  </data>
  <data name="Min.Description" xml:space="preserve">
    <value>Min (valor1, valor2)
Retorna o valor mínimo dos valores especificados.</value>
  </data>
  <data name="MinAggregate.Description" xml:space="preserve">
    <value>Min(Value)
Retorna o valor mínimo de expressão em uma coleção.</value>
  </data>
  <data name="Minus.Description" xml:space="preserve">
    <value>Encontra a diferença entre dois números.</value>
  </data>
  <data name="Modulo.Description" xml:space="preserve">
    <value>Retorna o resto (módulo) obtido dividindo-se uma expressão numérica em outra.</value>
  </data>
  <data name="Multiply.Description" xml:space="preserve">
    <value>Multiplica o valor de duas expressões.</value>
  </data>
  <data name="Not.Description" xml:space="preserve">
    <value>Executa a negação lógica em uma expressão.</value>
  </data>
  <data name="NotEqual.Description" xml:space="preserve">
    <value>Retorna true se os operandos não têm o mesmo valor; caso contrário, retorna false.</value>
  </data>
  <data name="Now.Description" xml:space="preserve">
    <value>Now)
Retorna a data atual do sistema e a hora.</value>
  </data>
  <data name="Null.Description" xml:space="preserve">
    <value>Representa uma referência nula, o que não faz referência a qualquer objeto.</value>
  </data>
  <data name="Or.Description" xml:space="preserve">
    <value>Executa uma disjunção lógica em duas expressões Boolean.</value>
  </data>
  <data name="PadLeft.Description" xml:space="preserve">
    <value>PadLeft (cadeia de caracteres, comprimento)
Alinha à esquerda caracteres na seqüência de caracteres definido, estofamento do seu lado esquerdo com caracteres de espaços em branco até um período total especificado.</value>
  </data>
  <data name="PadLeft3Param.Description" xml:space="preserve">
    <value>PadLeft (cadeia de caracteres, comprimento, Char)
Alinha à esquerda caracteres na seqüência de caracteres definido, acolchoando seu lado esquerdo com o caractere especificado até um período total especificado.</value>
  </data>
  <data name="PadRight.Description" xml:space="preserve">
    <value>PadRight (cadeia de caracteres, comprimento)
Alinha à direita caracteres na seqüência de caracteres definido, estofamento do seu lado esquerdo com caracteres de espaços em branco até um período total especificado.</value>
  </data>
  <data name="PadRight3Param.Description" xml:space="preserve">
    <value>PadRight (cadeia de caracteres, comprimento, Char)
Alinha à direita caracteres na seqüência de caracteres definido, acolchoando seu lado esquerdo com o caractere especificado até um período total especificado.</value>
  </data>
  <data name="Parameters Description Prefix" xml:space="preserve">
    <value>o tipo desse parâmetro é:</value>
  </data>
  <data name="Plus.Description" xml:space="preserve">
    <value>Adiciona o valor de uma expressão numérica para outro, ou concatena duas seqüências de caracteres.</value>
  </data>
  <data name="Power.Description" xml:space="preserve">
    <value>(valor, poder)
Retorna um número especificado elevado a uma potência especificada.</value>
  </data>
  <data name="Remove2Param.Description" xml:space="preserve">
    <value>Remover (String, StartPosition)
Exclui todos os caracteres nessa instância, começando na posição especificada.</value>
  </data>
  <data name="Remove3Param.Description" xml:space="preserve">
    <value>(String, StartPosition, comprimento)
Exclui um número especificado de caracteres desta instância, começando na posição especificada.</value>
  </data>
  <data name="Replace.Description" xml:space="preserve">
    <value>Replace (String, SubString2, String3)
Retorna uma cópia de String1, em que SubString2 foi substituído por String3.</value>
  </data>
  <data name="Reverse.Description" xml:space="preserve">
    <value>Reverse(String)
Inverte a ordem dos elementos dentro de uma string.</value>
  </data>
  <data name="Rnd.Description" xml:space="preserve">
    <value>Rnd()
Retorna um número aleatório que é inferior a 1, mas maior ou igual a zero.</value>
  </data>
  <data name="Round.Description" xml:space="preserve">
    <value>Round(Value)
Arredonda o valor dado para o inteiro mais próximo.</value>
  </data>
  <data name="Round2Param.Description" xml:space="preserve">
    <value>Redonda (valor, precisão)
Arredonda o valor dado para o inteiro mais próximo, ou para um número especificado de casas decimais.</value>
  </data>
  <data name="RowCount.Description" xml:space="preserve">
    <value>Retorna a quantidade total de linhas de dados em uma fonte de dados.</value>
  </data>
  <data name="Sign.Description" xml:space="preserve">
    <value>Sign(Value)
Retorna o positivo (+ 1), zero (0) ou negativo (-1) sinal da expressão dada.</value>
  </data>
  <data name="Sin.Description" xml:space="preserve">
    <value>Sin(Value)
Retorna o seno do ângulo, definido em radianos.</value>
  </data>
  <data name="SingleAggregate.Description" xml:space="preserve">
    <value>Single)
Retorna um único objeto da coleção.</value>
  </data>
  <data name="Sinh.Description" xml:space="preserve">
    <value>Sinh(Value)
Retorna o seno hiperbólico de um ângulo definido em radianos.</value>
  </data>
  <data name="Sqr.Description" xml:space="preserve">
    <value>Sqr(Value)
Retorna a raiz quadrada de um número determinado.</value>
  </data>
  <data name="StartsWith.Description" xml:space="preserve">
    <value>StartsWith (String, StartString)
Retorna True se o início da seqüência de caracteres corresponde a StartString; caso contrário, False é retornado.</value>
  </data>
  <data name="Substring2param.Description" xml:space="preserve">
    <value>Substring (String, StartPosition)
Recupera uma subseqüência da seqüência de caracteres. A subseqüência começa em StartPosition.</value>
  </data>
  <data name="Substring3param.Description" xml:space="preserve">
    <value>Substring (String, StartPosition, comprimento)
Recupera uma subseqüência da seqüência de caracteres. A subseqüência começa em StartPosition e tem o comprimento especificado.</value>
  </data>
  <data name="SumAggregate.Description" xml:space="preserve">
    <value>Sum(Value)
Retorna a soma de todos os valores de expressão na coleção.</value>
  </data>
  <data name="Tan.Description" xml:space="preserve">
    <value>Tan(Value)
Retorna a tangente do ângulo definido em radianos.</value>
  </data>
  <data name="Tanh.Description" xml:space="preserve">
    <value>Tanh(Value)
Retorna a tangente hiperbólica de um ângulo definido em radianos.</value>
  </data>
  <data name="Today.Description" xml:space="preserve">
    <value>Today()
Retorna a data atual. Independentemente do tempo real, esta função retorna à meia-noite da data atual.</value>
  </data>
  <data name="ToDecimal.Description" xml:space="preserve">
    <value>ToDecimal(Value)
Converte o valor para um número decimal equivalente.</value>
  </data>
  <data name="ToDouble.Description" xml:space="preserve">
    <value>ToDouble(Value)
Converte o valor para um número de ponto flutuante de precisão dupla equivalente 64-bit.</value>
  </data>
  <data name="ToFloat.Description" xml:space="preserve">
    <value>ToFloat(Value)
Converte o valor para um número equivalente de ponto flutuante de precisão simples em 32-bit.</value>
  </data>
  <data name="ToInt.Description" xml:space="preserve">
    <value>ToInt(Value)
Converte o valor para um inteiro assinado de 32 bits equivalente.</value>
  </data>
  <data name="ToLong.Description" xml:space="preserve">
    <value>ToLong(Value)
Converte o valor para um inteiro assinado de 64 bits equivalente.</value>
  </data>
  <data name="ToStr.Description" xml:space="preserve">
    <value>ToStr(Value)
Retorna uma representação de seqüência de caracteres de um objeto.</value>
  </data>
  <data name="Trim.Description" xml:space="preserve">
    <value>Trim(String)
Remove todos os caracteres de espaço de esquerda e à direita do String.</value>
  </data>
</root>