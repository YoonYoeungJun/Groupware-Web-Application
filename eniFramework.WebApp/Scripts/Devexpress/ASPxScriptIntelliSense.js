MVCxClientDashboardViewer = function() {
    ///<summary>
    ///A client-side counterpart of the DashboardViewer extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "ActionAvailabilityChanged" type = "ASPxClientEvent">
    ///Occurs after the available interactivity actions have changed.
    ///</field>
    ///<field name = "MasterFilterSet" type = "ASPxClientEvent">
    ///Occurs when an end-user changes the state of the master filter.
    ///</field>
    ///<field name = "MasterFilterCleared" type = "ASPxClientEvent">
    ///Occurs when an end-user clears the selection in the master filter item.
    ///</field>
    ///<field name = "DataLoadingError" type = "ASPxClientEvent">
    ///Provides the capability to handle data loading errors in the ASPxClientDashboardViewer.
    ///</field>
    ///<field name = "DrillDownPerformed" type = "ASPxClientEvent">
    ///Occurs after a drill-down is performed.
    ///</field>
    ///<field name = "DrillUpPerformed" type = "ASPxClientEvent">
    ///Occurs after a drill-up is performed.
    ///</field>
    ///<field name = "Loaded" type = "ASPxClientEvent">
    ///Occurs after the ASPxClientDashboardViewer is loaded.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Occurs when an end-user clicks a dashboard item.
    ///</field>
    ///<field name = "ItemVisualInteractivity" type = "ASPxClientEvent">
    ///Allows you to provide custom visual interactivity for data-bound dashboard items that support element selection and highlighting.
    ///</field>
    ///<field name = "ItemWidgetCreated" type = "ASPxClientEvent">
    ///Allows you to access underlying UI/Data Visualization widgets.
    ///</field>
    ///<field name = "ItemWidgetUpdating" type = "ASPxClientEvent">
    ///Allows you to access underlying UI/Data Visualization widgets.
    ///</field>
    ///<field name = "ItemWidgetUpdated" type = "ASPxClientEvent">
    ///Allows you to access underlying UI/Data Visualization widgets.
    ///</field>
    ///<field name = "ItemBeforeWidgetDisposed" type = "ASPxClientEvent">
    ///Allows you to access underlying UI/Data Visualization widgets.
    ///</field>
    ///<field name = "ItemSelectionChanged" type = "ASPxClientEvent">
    ///Occurs after the selection within the dashboard item is changed.
    ///</field>
    ///<field name = "ItemElementCustomColor" type = "ASPxClientEvent">
    ///Allows you to color the required dashboard item elements using the specified colors.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
DashboardDataAxisNames = function() {
    ///<summary>
    ///Lists constants used to identify various types of data axes.
    ///</summary>
    ///<field name = "DefaultAxis" type = "String" static = "true">
    ///Identifies a default axis in all data-bound dashboard items.
    ///</field>
    ///<field name = "ChartSeriesAxis" type = "String" static = "true">
    ///Identifies a series axis in a chart and pie.
    ///</field>
    ///<field name = "ChartArgumentAxis" type = "String" static = "true">
    ///Identifies an argument axis in a chart, scatter chart and pie.
    ///</field>
    ///<field name = "SparklineAxis" type = "String" static = "true">
    ///Identifies a sparkline axis in a grid and cards.
    ///</field>
    ///<field name = "PivotColumnAxis" type = "String" static = "true">
    ///Identifies a pivot column axis.
    ///</field>
    ///<field name = "PivotRowAxis" type = "String" static = "true">
    ///Identifies a pivot row axis.
    ///</field>
};
DashboardSpecialValues = function() {
    ///<summary>
    ///Provides access to dashboard special values.
    ///</summary>
    ///<field name = "NullValue" type = "String" static = "true">
    ///Represents a null value.
    ///</field>
    ///<field name = "OlapNullValue" type = "String" static = "true">
    ///Represents a null value in OLAP mode.
    ///</field>
    ///<field name = "OthersValue" type = "String" static = "true">
    ///Represents an Others value.
    ///</field>
    ///<field name = "ErrorValue" type = "String" static = "true">
    ///Represents an error value for calculated fields.
    ///</field>
};
ASPxClientDashboardItemUnderlyingData = function() {
    ///<summary>
    ///Represents a list of records from the dashboard data source.
    ///</summary>
};
ASPxClientDashboardItemRequestUnderlyingDataParameters = function() {
    ///<summary>
    ///Contains parameters used to obtain the underlying data for the dashboard item.
    ///</summary>
    ///<field name = "DataMembers" type = "Array" elementType = "String">
    ///Gets or sets an array of data member identifiers used to obtain underlying data. Value: An array of String objects that specify data member identifiers.
    ///</field>
    ///<field name = "AxisPoints" type = "Array" elementType = "ASPxClientDashboardItemDataAxisPoint">
    ///Gets or sets axis points used to obtain the underlying data. Value: An array of ASPxClientDashboardItemDataAxisPoint objects that represent axis points.
    ///</field>
    ///<field name = "ValuesByAxisName" type = "Object">
    ///Gets or sets the dimension value used to obtain the underlying data. Value: The dimension value.
    ///</field>
    ///<field name = "UniqueValuesByAxisName" type = "Object">
    ///Gets or sets the unique dimension value used to obtain the underlying data. Value: The unique dimension value.
    ///</field>
};
ASPxClientDashboardItemRequestUnderlyingDataCompleted = function(data) {
    ///<summary>
    ///References a method executed after an asynchronous request is completed.
    ///</summary>
    ///<param name = "data" type = "ASPxClientDashboardItemUnderlyingData">
    ///An ASPxClientDashboardItemUnderlyingData object that represents a list of records from the dashboard data source.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemClickEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ItemClick events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardItemClickEventArgs">
    ///A ASPxClientDashboardItemClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemClickEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemClick events.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the name of the dashboard item for which the event has been raised. Value: A String that is the dashboard item name.
    ///</field>
};
ASPxClientDashboardItemVisualInteractivityEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ItemVisualInteractivity events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardItemVisualInteractivityEventArgs">
    ///A ASPxClientDashboardItemVisualInteractivityEventArgs object containing event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemVisualInteractivityEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemVisualInteractivity events.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the component name of the dashboard item for which the event was raised. Value: A String that is the component name of the dashboard item.
    ///</field>
};
ASPxClientDashboardItemSelectionChangedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ItemSelectionChanged events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardItemSelectionChangedEventArgs">
    ///A ASPxClientDashboardItemSelectionChangedEventArgs object containing event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemSelectionChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemSelectionChanged events.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the component name of the dashboard item for which the event was raised. Value: A String that is the component name of the dashboard item.
    ///</field>
};
ASPxClientDashboardItemElementCustomColorEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ItemElementCustomColor events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardItemElementCustomColorEventArgs">
    ///An ASPxClientDashboardItemElementCustomColorEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemElementCustomColorEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemElementCustomColor events.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the component name of the dashboard item for which the event was raised. Value: A String that is the component name of the dashboard item for which the event was raised.
    ///</field>
};
ASPxClientDashboardItemWidgetCreatedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ItemWidgetCreated events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardItemWidgetEventArgs">
    ///A ASPxClientDashboardItemWidgetEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemWidgetUpdatingEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ItemWidgetUpdating event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardItemWidgetEventArgs">
    ///A ASPxClientDashboardItemWidgetEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemWidgetUpdatedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ItemWidgetUpdated event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardItemWidgetEventArgs">
    ///A ASPxClientDashboardItemWidgetEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemBeforeWidgetDisposedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ItemBeforeWidgetDisposed events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardItemWidgetEventArgs">
    ///A ASPxClientDashboardItemWidgetEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemWidgetEventArgs = function() {
    ///<summary>
    ///Provides data for events related to client widgets used to visualize data in dashboard items.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the component name of the dashboard item for which the event was raised. Value: A String that is the component name of the dashboard item.
    ///</field>
};
ASPxClientDashboardItemData = function() {
    ///<summary>
    ///Represents multidimensional data visualized in the dashboard item.
    ///</summary>
};
ASPxClientDashboardItemDataAxis = function() {
    ///<summary>
    ///An axis that contains data points corresponding to the specified value hierarchy.
    ///</summary>
};
ASPxClientDashboardItemDataDimension = function() {
    ///<summary>
    ///Contains the dimension metadata.
    ///</summary>
    ///<field name = "Id" type = "String">
    ///Gets the dimension identifier. Value: A String that is the dimension identifier.
    ///</field>
    ///<field name = "Name" type = "String">
    ///Gets or sets the name of the dimension. Value: A String that is the name of the dimension.
    ///</field>
    ///<field name = "DataMember" type = "String">
    ///Gets the data member identifier for the current dimension. Value: A String value that identifies a data member.
    ///</field>
    ///<field name = "DateTimeGroupInterval" type = "String">
    ///Gets the group interval for date-time values for the current dimension. Value: A String value that represents how date-time values are grouped.
    ///</field>
    ///<field name = "TextGroupInterval" type = "String">
    ///Gets the group interval for string values. Value: A String value that specifies the group interval for string values.
    ///</field>
};
ASPxClientDashboardItemDataMeasure = function() {
    ///<summary>
    ///Contains the measure metadata.
    ///</summary>
    ///<field name = "Id" type = "String">
    ///Gets the measure identifier. Value: A String that is the measure identifier.
    ///</field>
    ///<field name = "Name" type = "String">
    ///Gets the name of the measure. Value: A String that is the name of the measure.
    ///</field>
    ///<field name = "DataMember" type = "String">
    ///Gets the data member that identifies the data source list used to provide data for the current measure. Value: A String value that identifies the data source list used to provide data for the current measure.
    ///</field>
    ///<field name = "SummaryType" type = "String">
    ///Gets the type of summary function calculated against the current measure. Value: A String value that identifies the type of summary function calculated against the current measure.
    ///</field>
};
ASPxClientDashboardItemDataDelta = function() {
    ///<summary>
    ///Contains the delta metadata.
    ///</summary>
    ///<field name = "Id" type = "String">
    ///Gets the data item identifier. Value: A String that is the data item identifier.
    ///</field>
    ///<field name = "Name" type = "String">
    ///Gets the name of the data item container. Value: A String value that is the name of the data item container.
    ///</field>
    ///<field name = "ActualMeasureId" type = "String">
    ///Gets the identifier for the measure that provides actual values. Value: A String value that is the measure identifier.
    ///</field>
    ///<field name = "TargetMeasureId" type = "String">
    ///Gets the identifier for the measure that provides target values. Value: A String value that is the measure identifier.
    ///</field>
};
ASPxClientDashboardItemDataDimensionValue = function() {
    ///<summary>
    ///Provides dimension values at the specified axis point.
    ///</summary>
};
ASPxClientDashboardItemDataMeasureValue = function() {
    ///<summary>
    ///Provides the measure value and display text.
    ///</summary>
};
ASPxClientDashboardItemDataDeltaValue = function() {
    ///<summary>
    ///Provides delta element values.
    ///</summary>
};
ASPxClientDashboardItemDataAxisPoint = function() {
    ///<summary>
    ///A point on the data axis.
    ///</summary>
};
ASPxClientDashboardItemDataAxisPointTuple = function() {
    ///<summary>
    ///Represents a tuple of axis points.
    ///</summary>
};
ASPxClientDashboardRangeFilterSelection = function() {
    ///<summary>
    ///A range in the Range Filter dashboard item.
    ///</summary>
    ///<field name = "Maximum" type = "Object">
    ///Gets or sets a maximum value in the range of the Range Filter dashboard item. Value: A maximum value in the range of the Range Filter dashboard item.
    ///</field>
    ///<field name = "Minimum" type = "Object">
    ///Gets or sets a minimum value in the range of the Range Filter dashboard item. Value: A minimum value in the range of the Range Filter dashboard item.
    ///</field>
};
ASPxClientDashboardParameters = function() {
    ///<summary>
    ///A collection of ASPxClientDashboardParameter objects.
    ///</summary>
};
ASPxClientDashboardParameter = function() {
    ///<summary>
    ///A client-side dashboard parameter.
    ///</summary>
    ///<field name = "Name" type = "String">
    ///Gets the dashboard parameter name on the client side. Value: A String that is the dashboard parameter name on the client side.
    ///</field>
    ///<field name = "Value" type = "Object">
    ///Gets the dashboard parameter value on the client side. Value: A String that specifies the dashboard parameter value on the client side.
    ///</field>
};
ASPxClientDashboardParameterValue = function() {
    ///<summary>
    ///Provides access to the parameter value and display text.
    ///</summary>
};
DashboardExportPageLayout = function() {
    ///<summary>
    ///Lists constants used to identify the page orientation used to export a dashboard/dashboard item.
    ///</summary>
    ///<field name = "Portrait" type = "String" static = "true">
    ///The page orientation used to export a dashboard (dashboard item) is portrait.
    ///</field>
    ///<field name = "Landscape" type = "String" static = "true">
    ///The page orientation used to export a dashboard (dashboard item) is landscape.
    ///</field>
};
DashboardExportPaperKind = function() {
    ///<summary>
    ///Lists constants used to identify a standard paper size used to export a dashboard/dashboard item.
    ///</summary>
    ///<field name = "Letter" type = "String" static = "true">
    ///Letter paper (8.5 in. by 11 in.).
    ///</field>
    ///<field name = "Legal" type = "String" static = "true">
    ///Legal paper (8.5 in. by 14 in.).
    ///</field>
    ///<field name = "Executive" type = "String" static = "true">
    ///Executive paper (7.25 in. by 10.5 in.).
    ///</field>
    ///<field name = "A5" type = "String" static = "true">
    ///A5 paper (148 mm by 210 mm).
    ///</field>
    ///<field name = "A4" type = "String" static = "true">
    ///A4 paper (210 mm by 297 mm).
    ///</field>
    ///<field name = "A3" type = "String" static = "true">
    ///A3 paper (297 mm by 420 mm).
    ///</field>
};
DashboardExportScaleMode = function() {
    ///<summary>
    ///Lists values that specify a scale mode when exporting a dashboard (dashboard item).
    ///</summary>
    ///<field name = "None" type = "String" static = "true">
    ///The dashboard (dashboard item) on the exported page retains its original size.
    ///</field>
    ///<field name = "UseScaleFactor" type = "String" static = "true">
    ///The size of the dashboard (dashboard item) on the exported page is changed according to the scale factor value.
    ///</field>
    ///<field name = "AutoFitToPageWidth" type = "String" static = "true">
    ///The size of the dashboard (dashboard item) is changed according to the width of the exported page.
    ///</field>
    ///<field name = "AutoFitWithinOnePage" type = "String" static = "true">
    ///The size of the dashboard (dashboard item) is changed to fit its content on a single page.
    ///</field>
};
DashboardExportFilterState = function() {
    ///<summary>
    ///Lists constants used to identify the filter state's location on the exported document.
    ///</summary>
    ///<field name = "None" type = "String" static = "true">
    ///The filter state is not included in the exported document.
    ///</field>
    ///<field name = "Below" type = "String" static = "true">
    ///The filter state is placed below the dashboard (dashboard item) in the exported document.
    ///</field>
    ///<field name = "SeparatePage" type = "String" static = "true">
    ///The filter state is placed on a separate page in the exported document.
    ///</field>
};
DashboardStateExportPosition = function() {
    ///<summary>
    ///Lists constants that specify the position of the dashboard state (such as master filter or current parameter values) in the exported document.
    ///</summary>
    ///<field name = "Below" type = "String" static = "true">
    ///The dashboard state is placed below the exported dashboard/dashboard item.
    ///</field>
    ///<field name = "SeparatePage" type = "String" static = "true">
    ///The dashboard state is placed on a separate page.
    ///</field>
};
DashboardStateExcelExportPosition = function() {
    ///<summary>
    ///Lists constants that specify the position of the dashboard state (such as master filter or current parameter values) in the exported Excel document.
    ///</summary>
    ///<field name = "Below" type = "String" static = "true">
    ///The dashboard state is placed below the exported data.
    ///</field>
    ///<field name = "SeparateSheet" type = "String" static = "true">
    ///The dashboard state is placed on a separate sheet.
    ///</field>
};
DashboardExportImageFormat = function() {
    ///<summary>
    ///Lists values that specify the image format used for exporting a dashboard/dashboard item.
    ///</summary>
    ///<field name = "Png" type = "String" static = "true">
    ///The PNG image format.
    ///</field>
    ///<field name = "Gif" type = "String" static = "true">
    ///The GIF image format.
    ///</field>
    ///<field name = "Jpg" type = "String" static = "true">
    ///The JPG image format.
    ///</field>
};
ExcelExportFilterState = function() {
};
DashboardExportExcelFormat = function() {
    ///<summary>
    ///Lists values that specify Excel formats available for exporting individual dashboard items.
    ///</summary>
    ///<field name = "Xls" type = "String" static = "true">
    ///The Excel 97 - Excel 2003 (XLS) file format.
    ///</field>
    ///<field name = "Xlsx" type = "String" static = "true">
    ///The Office Excel 2007 XML-based (XLSX) file format.
    ///</field>
    ///<field name = "Csv" type = "String" static = "true">
    ///A comma-separated values (CSV) file format.
    ///</field>
};
ChartExportSizeMode = function() {
    ///<summary>
    ///Lists constants used to specify how a Chart dashboard item should be resized when being exported.
    ///</summary>
    ///<field name = "None" type = "String" static = "true">
    ///A chart dashboard item is exported in a size identical to that shown on the dashboard.
    ///</field>
    ///<field name = "Stretch" type = "String" static = "true">
    ///A chart dashboard item is stretched or shrunk to fit the page to which it is exported.
    ///</field>
    ///<field name = "Zoom" type = "String" static = "true">
    ///A chart dashboard item is resized proportionally to best fit the exported page.
    ///</field>
};
MapExportSizeMode = function() {
    ///<summary>
    ///Lists values used to specify how a Map dashboard item should be resized when being exported.
    ///</summary>
    ///<field name = "None" type = "String" static = "true">
    ///A map dashboard item is exported in a size identical to that shown on the dashboard
    ///</field>
    ///<field name = "Zoom" type = "String" static = "true">
    ///A map dashboard item is resized proportionally to best fit the exported page.
    ///</field>
};
TreemapExportSizeMode = function() {
    ///<summary>
    ///Lists constants used to specify how a Treemap dashboard item should be resized when being exported.
    ///</summary>
    ///<field name = "none" type = "String" static = "true">
    ///</field>
    ///<field name = "zoom" type = "String" static = "true">
    ///</field>
};
RangeFilterExportSizeMode = function() {
    ///<summary>
    ///Lists values used to specify how a Range Filter dashboard item should be resized when being exported.
    ///</summary>
    ///<field name = "None" type = "String" static = "true">
    ///A Range Filter dashboard item is exported in a size identical to that shown on the dashboard.
    ///</field>
    ///<field name = "Stretch" type = "String" static = "true">
    ///A Range Filter dashboard item is stretched or shrunk to fit the page to which it is exported.
    ///</field>
    ///<field name = "Zoom" type = "String" static = "true">
    ///A Range Filter dashboard item is resized proportionally to best fit the printed page.
    ///</field>
};
ImageFormatOptions = function() {
    ///<summary>
    ///Contains settings that specify parameters affecting how the dashboard or dashboard item is exported in Image format.
    ///</summary>
    ///<field name = "Format" type = "String">
    ///Gets or sets an image format in which the dashboard (dashboard item) is exported. Value: A value returned by the DashboardExportImageFormat class that specifies an image format in which the dashboard (dashboard item) is exported.
    ///</field>
    ///<field name = "Resolution" type = "Int32">
    ///Gets or sets the resolution (in dpi) used to export a dashboard (dashboard item) in Image format. Value: An integer value that specifies the resolution (in dpi) used to export a dashboard (dashboard item) in Image format.
    ///</field>
};
ExcelFormatOptions = function() {
    ///<summary>
    ///Contains options which define how the dashboard item is exported to Excel format.
    ///</summary>
    ///<field name = "Format" type = "String">
    ///Gets or sets the Excel format in which the dashboard item is exported. Value: A value returned by the DashboardExportExcelFormat class that specifies the Excel format in which the dashboard item is exported.
    ///</field>
    ///<field name = "CsvValueSeparator" type = "String">
    ///Gets or sets a character used to separate values in a CSV document. Value: A String value that specifies the character used to separate values in a CSV document.
    ///</field>
};
GridExportOptions = function() {
    ///<summary>
    ///Contains settings that specify parameters affecting how the Grid dashboard item is exported.
    ///</summary>
    ///<field name = "FitToPageWidth" type = "Boolean">
    ///Gets or sets whether the size of the Grid dashboard item is changed according to the width of the exported page. Value: true, to change the size of the Grid dashboard item according to the width of the exported page; otherwise, false.
    ///</field>
    ///<field name = "PrintHeadersOnEveryPage" type = "Boolean">
    ///Gets or sets whether to print column headers of the Grid dashboard item on every page. Value: true, to print column headers on every page; otherwise, false.
    ///</field>
};
PivotExportOptions = function() {
    ///<summary>
    ///Contains settings that specify parameters affecting how the Pivot dashboard item is exported.
    ///</summary>
    ///<field name = "PrintHeadersOnEveryPage" type = "Boolean">
    ///Gets or sets whether to print the column headers of the Pivot dashboard item on every page. Value: true, to print column headers on every page; otherwise, false.
    ///</field>
};
PieExportOptions = function() {
    ///<summary>
    ///Contains settings that specify parameters affecting how the Pie dashboard item is exported.
    ///</summary>
    ///<field name = "AutoArrangeContent" type = "Boolean">
    ///Gets or sets whether dashboard item elements are arranged automatically on the exported page. Value: true, to arrange dashboard item elements automatically on the exported page; otherwise, false.
    ///</field>
};
GaugeExportOptions = function() {
    ///<summary>
    ///Contains settings that specify parameters affecting how the Gauge dashboard item is exported.
    ///</summary>
    ///<field name = "AutoArrangeContent" type = "Boolean">
    ///Gets or sets whether dashboard item elements are arranged automatically on the exported page. Value: true, to arrange dashboard item elements automatically on the exported page; otherwise, false.
    ///</field>
};
CardExportOptions = function() {
    ///<summary>
    ///Contains settings that specify parameters affecting how the Card dashboard item is exported.
    ///</summary>
    ///<field name = "AutoArrangeContent" type = "Boolean">
    ///Gets or sets whether dashboard item elements are arranged automatically on the exported page. Value: true, to arrange dashboard item elements automatically on the exported page; otherwise, false.
    ///</field>
};
RangeFilterExportOptions = function() {
    ///<summary>
    ///Contains settings that specify parameters affecting how the Range Filter dashboard item is exported.
    ///</summary>
    ///<field name = "AutomaticPageLayout" type = "Boolean">
    ///Gets or sets whether the page orientation used to export a Range Filter dashboard item is selected automatically. Value: true, to automatically select the page orientation used to export a Range Filter dashboard item; otherwise, false.
    ///</field>
    ///<field name = "SizeMode" type = "String">
    ///Gets or sets the export size mode for the Range Filter dashboard item. Value: A value returned by the RangeFilterExportSizeMode class that specifies the export size mode for the Range Filter dashboard item.
    ///</field>
};
ChartExportOptions = function() {
    ///<summary>
    ///Contains settings that specify parameters affecting how Chart dashboard items are exported.
    ///</summary>
    ///<field name = "AutomaticPageLayout" type = "Boolean">
    ///Gets or sets whether the page orientation used to export a Chart dashboard item is selected automatically. Value: true, to automatically select the page orientation used to export a Chart dashboard item; otherwise, false.
    ///</field>
    ///<field name = "SizeMode" type = "String">
    ///Gets or sets the export size mode for the Chart dashboard item. Value: A value returned by the ChartExportSizeMode class that specifies the export size mode for the Chart dashboard item.
    ///</field>
};
MapExportOptions = function() {
    ///<summary>
    ///Contains settings that specify parameters affecting how Map dashboard items are exported.
    ///</summary>
    ///<field name = "AutomaticPageLayout" type = "Boolean">
    ///Gets or sets whether the page orientation used to export a map dashboard item is selected automatically. Value: true, to automatically select the page orientation used to export a map dashboard item; otherwise, false.
    ///</field>
    ///<field name = "SizeMode" type = "String">
    ///Gets or sets the export size mode for the map dashboard item. Value: A value returned by the MapExportSizeMode class that specifies specifies the export size mode for the map dashboard item.
    ///</field>
};
ASPxClientDashboardExportOptions = function() {
    ///<summary>
    ///Contains settings that specify parameters affecting how the dashboard (dashboard item) is exported.
    ///</summary>
    ///<field name = "PaperKind" type = "String">
    ///Gets or sets the standard paper size. Value: A string value returned by the DashboardExportPaperKind class that specifies the standard paper size.
    ///</field>
    ///<field name = "PageLayout" type = "String">
    ///Gets or sets the page orientation used to export a dashboard (dashboard item). Value: A string value returned by the DashboardExportPageLayout class that specifies the page orientation used to export a dashboard (dashboard item).
    ///</field>
    ///<field name = "ScaleMode" type = "String">
    ///Gets or sets the mode for scaling when exporting a dashboard (dashboard item). Value: A string value returned by the DashboardExportScaleMode class that specifies the mode for scaling when exporting a dashboard (dashboard item).
    ///</field>
    ///<field name = "ScaleFactor" type = "Single">
    ///Gets or sets the scale factor (in fractions of 1) by which a dashboard (dashboard item) is scaled. Value: A Single value that specifies the scale factor by which a dashboard (dashboard item) is scaled.
    ///</field>
    ///<field name = "AutoFitPageCount" type = "Int32">
    ///Gets or sets the number of horizontal/vertical pages spanning the total width/height of a dashboard (dashboard item). Value: An integer value that specifies the number of horizontal/vertical pages spanning the total width/height of a dashboard (dashboard item).
    ///</field>
    ///<field name = "Title" type = "String">
    ///Gets or sets the title of the exported document. Value: A String value that specifies the title of the exported document.
    ///</field>
    ///<field name = "ShowTitle" type = "Boolean">
    ///Gets or sets whether a dashboard title (or dashboard item's caption) is included as the exported document title. Value: A DefaultBoolean value that specifies whether a dashboard title (or dashboard item's caption) is included as the exported document title.
    ///</field>
    ///<field name = "FilterState" type = "String">
    ///Gets or sets the filter state's location on the exported document. Value: A string value returned by the DashboardExportFilterState class that specifies the filter state's location on the exported document.
    ///</field>
    ///<field name = "ImageOptions" type = "ImageFormatOptions">
    ///Provides access to options for exporting a dashboard or individual items in Image format. Value: An ImageFormatOptions object containing settings that specify parameters affecting how the dashboard or dashboard item is exported in Image format.
    ///</field>
    ///<field name = "ExcelOptions" type = "ExcelFormatOptions">
    ///Provides access to options for exporting individual dashboard items in Excel format. Value: An ExcelFormatOptions object containing settings that specify parameters affecting how the dashboard item is exported in Excel format.
    ///</field>
    ///<field name = "GridOptions" type = "GridExportOptions">
    ///Provides access to options for exporting a Grid dashboard item. Value: A GridExportOptions object containing settings that specify parameters that affect how Grid dashboard items are exported.
    ///</field>
    ///<field name = "PivotOptions" type = "PivotExportOptions">
    ///Provides access to options for exporting a Pivot dashboard item. Value: A PivotExportOptions object containing settings that specify parameters that affect how Pivot dashboard items are exported.
    ///</field>
    ///<field name = "PieOptions" type = "PieExportOptions">
    ///Provides access to options for exporting a Pie dashboard item. Value: A PieExportOptions object containing settings that specify parameters that affect how Pie dashboard items are exported.
    ///</field>
    ///<field name = "GaugeOptions" type = "GaugeExportOptions">
    ///Provides access to options for exporting a Gauge dashboard item. Value: A GaugeExportOptions object containing settings that specify parameters that affect how Gauge dashboard items are exported.
    ///</field>
    ///<field name = "CardOptions" type = "CardExportOptions">
    ///Provides access to options for exporting a Card dashboard item. Value: A CardExportOptions object containing settings that specify parameters that affect how Card dashboard items are exported.
    ///</field>
    ///<field name = "RangeFilterOptions" type = "RangeFilterExportOptions">
    ///Provides access to options for exporting a Range Filter dashboard item. Value: A RangeFilterExportOptions object containing settings that specify parameters affecting how the Range Filter dashboard item is exported.
    ///</field>
    ///<field name = "ChartOptions" type = "ChartExportOptions">
    ///Provides access to options for exporting a Chart dashboard item. Value: A ChartExportOptions object containing settings that specify parameters that affect how Chart dashboard items are exported.
    ///</field>
    ///<field name = "MapOptions" type = "MapExportOptions">
    ///Provides access to options for exporting map dashboard items. Value: A MapExportOptions object containing settings that specify parameters that affect how map dashboard items are exported.
    ///</field>
};
DashboardPdfExportOptions = function() {
    ///<summary>
    ///Contains options related to exporting a dashboard/dashboard item to the PDF format.
    ///</summary>
    ///<field name = "PaperKind" type = "String">
    ///Gets or sets the type of paper for the exported document. Value: A DashboardExportPaperKind value that specifies the type of paper for the exported document.
    ///</field>
    ///<field name = "PageLayout" type = "String">
    ///Gets or sets the page orientation used to export a dashboard/dashboard item. Value: A DashboardExportPageLayout value that specifies the page orientation used to export a dashboard/dashboard item.
    ///</field>
    ///<field name = "ScaleMode" type = "String">
    ///Gets or sets the mode for scaling a dashboard/dashboard item in the exported document. Value: A DashboardExportScaleMode value that specifies the mode for scaling a dashboard/dashboard item in the exported document.
    ///</field>
    ///<field name = "ScaleFactor" type = "Single">
    ///Gets or sets the scale factor (in fractions of 1), by which a dashboard/dashboard item is scaled in the exported document. Value: A Single value that specifies the scale factor by which a dashboard/dashboard item is scaled in the exported document.
    ///</field>
    ///<field name = "AutoFitPageCount" type = "Int32">
    ///Gets or sets the number of horizontal/vertical pages spanning the total width/height of a dashboard/dashboard item. Value: An integer value that specifies the number of horizontal/vertical pages spanning the total width/height of a dashboard/dashboard item.
    ///</field>
    ///<field name = "Title" type = "String">
    ///Gets or sets the title of the exported document. Value: A string value that specifies the title of the exported document.
    ///</field>
    ///<field name = "ShowTitle" type = "Boolean">
    ///Gets or sets whether a dashboard title (or dashboard item's caption) is included as the exported document title. Value: A DefaultBoolean value that specifies whether a dashboard title (or dashboard item's caption) is included as the exported document title.
    ///</field>
    ///<field name = "ExportFilters" type = "Boolean">
    ///Gets or sets whether to add the state of master filter items to the exported document. Value: true, to add the state of master filter items to the exported document; otherwise, false.
    ///</field>
    ///<field name = "ExportParameters" type = "Boolean">
    ///Gets or sets whether to add current parameter values to the exported document. Value: true, to add current parameter values to the exported document; otherwise, false.
    ///</field>
    ///<field name = "IncludeHiddenParameters" type = "Boolean">
    ///Gets or sets whether to add current values of a hidden parameter to the exported document. Value: true, to add current values of a hidden parameter to the exported document; otherwise, false.
    ///</field>
    ///<field name = "DashboardStatePosition" type = "String">
    ///Gets or sets a position of the dashboard state (such as master filter or current parameter values) in the exported document. Value: A DashboardStateExportPosition object that specifies the position of the dashboard state in the exported document.
    ///</field>
    ///<field name = "CardAutoArrangeContent" type = "Boolean">
    ///Gets or sets whether cards within the Card dashboard item are arranged automatically on the exported page. Value: true, to arrange cards automatically on the exported page; otherwise, false.
    ///</field>
    ///<field name = "ChartAutomaticPageLayout" type = "Boolean">
    ///Gets or sets whether the page orientation used to export the Chart dashboard item is selected automatically. Value: true, to automatically select the page orientation used to export the Chart dashboard item; otherwise, false.
    ///</field>
    ///<field name = "ChartSizeMode" type = "String">
    ///Gets or sets the export size mode for the Chart dashboard item. Value: A ChartExportSizeMode value that specifies the export size mode for the Chart dashboard item.
    ///</field>
    ///<field name = "GaugeAutoArrangeContent" type = "Boolean">
    ///Gets or sets whether gauges within the Gauge dashboard item are arranged automatically on the exported page. Value: true, to arrange gauges automatically on the exported page; otherwise, false.
    ///</field>
    ///<field name = "GridFitToPageWidth" type = "Boolean">
    ///Gets or sets whether the size of the Grid dashboard item is changed according to the width of the exported page. Value: true, to change the size of the Grid dashboard item according to the width of the exported page; otherwise, false.
    ///</field>
    ///<field name = "GridPrintHeadersOnEveryPage" type = "Boolean">
    ///Gets or sets whether to add column headers of the Grid dashboard item to every page. Value: true, to add column headers to every page; otherwise, false.
    ///</field>
    ///<field name = "MapAutomaticPageLayout" type = "Boolean">
    ///Gets or sets whether the page orientation used to export the Map dashboard item is selected automatically. Value: true, to automatically select the page orientation used to export the Map dashboard item; otherwise, false.
    ///</field>
    ///<field name = "MapSizeMode" type = "String">
    ///Gets or sets the export size mode for the Map dashboard item. Value: A MapExportSizeMode value that specifies the export size mode for the Map dashboard item.
    ///</field>
    ///<field name = "PieAutoArrangeContent" type = "Boolean">
    ///Gets or sets whether pies within the Pie dashboard item are arranged automatically on the exported page. Value: true, to arrange pies automatically on the exported page; otherwise, false.
    ///</field>
    ///<field name = "PivotPrintHeadersOnEveryPage" type = "Boolean">
    ///Gets or sets whether to add column headers of the Pivot dashboard item to every page. Value: true, to add column headers to every page; otherwise, false.
    ///</field>
    ///<field name = "RangeFilterAutomaticPageLayout" type = "Boolean">
    ///Gets or sets whether the page orientation used to export the Range Filter dashboard item is selected automatically. Value: true, to automatically select the page orientation used to export the Range Filter dashboard item; otherwise, false.
    ///</field>
    ///<field name = "RangeFilterSizeMode" type = "String">
    ///Gets or sets the export size mode for the Range Filter dashboard item. Value: A RangeFilterExportSizeMode value that specifies the export size mode for the Range Filter dashboard item.
    ///</field>
    ///<field name = "TreemapAutomaticPageLayout" type = "Boolean">
    ///Gets or sets whether the page orientation used to export the Treemap dashboard item is selected automatically. Value: true, to automatically select the page orientation used to export the Treemap dashboard item; otherwise, false.
    ///</field>
    ///<field name = "TreemapSizeMode" type = "String">
    ///Gets or sets the export size mode for the Treemap dashboard item. Value: A TreemapExportSizeMode value that specifies the export size mode for the Treemap dashboard item.
    ///</field>
};
DashboardImageExportOptions = function() {
    ///<summary>
    ///Contains options related to exporting a dashboard/dashboard item to an image.
    ///</summary>
    ///<field name = "Title" type = "String">
    ///Gets or sets a title of the exported document. Value: A string value that specifies the title of the exported document.
    ///</field>
    ///<field name = "ShowTitle" type = "Boolean">
    ///Gets or sets whether a dashboard title (or dashboard item's caption) is included as the exported document title. Value: true, to include a dashboard title (or dashboard item's caption) as the exported document title; otherwise, false.
    ///</field>
    ///<field name = "ExportFilters" type = "Boolean">
    ///Gets or sets whether to add the state of master filter items to the exported document. Value: true, to add the state of master filter items to the exported document; otherwise, false.
    ///</field>
    ///<field name = "ExportParameters" type = "Boolean">
    ///Gets or sets whether to add current parameter values to the exported document. Value: true, to add current parameter values to the exported document; otherwise, false.
    ///</field>
    ///<field name = "IncludeHiddenParameters" type = "Boolean">
    ///Gets or sets whether to add current values of a hidden parameter to the exported document. Value: true, to add current values of a hidden parameter to the exported document; otherwise, false.
    ///</field>
    ///<field name = "Format" type = "String">
    ///Gets or sets an image format in which the dashboard/dashboard item is exported. Value: A DashboardExportImageFormat value that specifies an image format in which the dashboard/dashboard item is exported.
    ///</field>
    ///<field name = "Resolution" type = "Int32">
    ///Gets or sets the resolution (in dpi) used to export a dashboard/dashboard item to an image. Value: An integer value that specifies the resolution (in dpi) used to export a dashboard/dashboard item to an image.
    ///</field>
    ///<field name = "ScaleFactor" type = "Single">
    ///Gets or sets the scale factor (in fractions of 1), by which a dashboard/dashboard item is scaled in the exported document. Value: A string value that specifies the scale factor by which a dashboard/dashboard item is scaled in the exported document.
    ///</field>
};
DashboardExcelExportOptions = function() {
    ///<summary>
    ///Contains options related to exporting a dashboard/dashboard item to the Excel format.
    ///</summary>
    ///<field name = "Format" type = "String">
    ///Gets or sets the Excel format in which the dashboard item is exported. Value: A DashboardExportExcelFormat value that specifies the Excel format in which the dashboard item is exported.
    ///</field>
    ///<field name = "CsvValueSeparator" type = "String">
    ///Gets or sets a character used to separate values in a CSV document. Value: A string value that specifies the character used to separate values in a CSV document.
    ///</field>
    ///<field name = "ExportFilters" type = "Boolean">
    ///Gets or sets whether to add the state of master filter items to the exported document. Value: true, to add the state of master filter items to the exported document; otherwise, false.
    ///</field>
    ///<field name = "ExportParameters" type = "Boolean">
    ///Gets or sets whether to add current parameter values to the exported document. Value: true, to add current parameter values to the exported document; otherwise, false.
    ///</field>
    ///<field name = "IncludeHiddenParameters" type = "Boolean">
    ///Gets or sets whether to add current values of a hidden parameter to the exported document. Value: true, to add current values of a hidden parameter to the exported document; otherwise, false.
    ///</field>
    ///<field name = "DashboardStatePosition" type = "String">
    ///Gets or sets the position of the dashboard state (such as master filter or current parameter values) in the exported document. Value: A DashboardStateExcelExportPosition object that specifies the position of the dashboard state in the exported document.
    ///</field>
};
DashboardSelectionMode = function() {
};
ASPxClientDashboard = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxDashboard control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CustomDataCallback" type = "ASPxClientEvent">
    ///Fires when a round trip to the server has been initiated by a call to the client PerformDataCallback method.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "DashboardStateChanged" type = "ASPxClientEvent">
    ///Occurs after the state of the dashboard displayed in the ASPxClientDashboard is changed.
    ///</field>
    ///<field name = "DashboardChanged" type = "ASPxClientEvent">
    ///Occurs after a new dashboard is displayed in the ASPxClientDashboard.
    ///</field>
    ///<field name = "CustomizeMenuItems" type = "ASPxClientEvent">
    ///For internal use.
    ///</field>
    ///<field name = "BeforeRender" type = "ASPxClientEvent">
    ///Occurs before any element in the Web Dashboard control has been rendered.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Occurs when an end-user clicks a dashboard item.
    ///</field>
    ///<field name = "ItemVisualInteractivity" type = "ASPxClientEvent">
    ///Allows you to provide custom visual interactivity for data-bound dashboard items that support element selection and highlighting.
    ///</field>
    ///<field name = "ItemWidgetCreated" type = "ASPxClientEvent">
    ///Allows you to access underlying UI/Data Visualization widgets.
    ///</field>
    ///<field name = "ItemWidgetUpdating" type = "ASPxClientEvent">
    ///Allows you to access underlying UI/Data Visualization widgets.
    ///</field>
    ///<field name = "ItemWidgetUpdated" type = "ASPxClientEvent">
    ///Allows you to access underlying UI/Data Visualization widgets.
    ///</field>
    ///<field name = "ItemBeforeWidgetDisposed" type = "ASPxClientEvent">
    ///Allows you to access underlying UI/Data Visualization widgets.
    ///</field>
    ///<field name = "ItemSelectionChanged" type = "ASPxClientEvent">
    ///Occurs after the selection within the dashboard item is changed.
    ///</field>
    ///<field name = "ItemElementCustomColor" type = "ASPxClientEvent">
    ///Allows you to color the required dashboard item elements using the specified colors.
    ///</field>
    ///<field name = "ItemMasterFilterStateChanged" type = "ASPxClientEvent">
    ///Occurs when a master filter state is changed.
    ///</field>
    ///<field name = "ItemDrillDownStateChanged" type = "ASPxClientEvent">
    ///Occurs when a drill-down/drill-up is performed.
    ///</field>
    ///<field name = "ActionAvailabilityChanged" type = "ASPxClientEvent">
    ///Occurs after the available interactivity actions have changed for the specific dashboard item.
    ///</field>
    ///<field name = "DynamicLookUpValuesLoaded" type = "ASPxClientEvent">
    ///Occurs after parameter values provided using a Dynamic List are loaded.
    ///</field>
    ///<field name = "ItemBeginUpdate" type = "ASPxClientEvent">
    ///Occurs when a dashboard item update is initiated.
    ///</field>
    ///<field name = "ItemEndUpdate" type = "ASPxClientEvent">
    ///Occurs after the dashboard item update is performed.
    ///</field>
    ///<field name = "DashboardBeginUpdate" type = "ASPxClientEvent">
    ///Occurs when a dashboard update is initiated.
    ///</field>
    ///<field name = "DashboardEndUpdate" type = "ASPxClientEvent">
    ///Occurs after the dashboard update is performed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientDashboardStateChangedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the DashboardStateChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardStateChangedEventArgs">
    ///A ASPxClientDashboardStateChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardStateChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the DashboardStateChanged event.
    ///</summary>
    ///<field name = "DashboardState" type = "String">
    ///Gets the current state of the dashboard. Value: A String that is the current state of the dashboard.
    ///</field>
};
ASPxClientDashboardChangedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the DashboardChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardChangedEventArgs">
    ///A ASPxClientDashboardChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the DashboardChanged event.
    ///</summary>
    ///<field name = "DashboardId" type = "String">
    ///Gets the identifier of a newly opened dashboard. Value: A String values that is an identifier of newly opened dashboard.
    ///</field>
    ///<field name = "DashboardName" type = "String">
    ///Gets the name of a newly opened dashboard. Value: A string value that is the name of newly opened dashboard.
    ///</field>
};
ASPxClientDashboardCustomizeMenuItemsEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardMenuItem = function() {
};
ASPxClientDashboardCustomizeMenuItemsEventArgs = function() {
};
ASPxClientDashboardBeforeRenderEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the BeforeRender event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientEventArgs">
    ///An ASPxClientEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemEventArgs = function() {
    ///<summary>
    ///Serves as the base class for classes that provide data for client-side events related to dashboard items.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the component name of the dashboard item. Value: A string value that is the component name of the dashboard item.
    ///</field>
};
ASPxClientDashboardItemMasterFilterStateChangedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ItemMasterFilterStateChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardItemMasterFilterStateChangedEventArgs">
    ///An ASPxClientDashboardItemMasterFilterStateChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemMasterFilterStateChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemMasterFilterStateChanged event.
    ///</summary>
    ///<field name = "Values" type = "Array" elementType = "Object[]">
    ///Gets the currently selected values. Value: An array of objects that are the currently selected values.
    ///</field>
    ///<field name = "ItemName" type = "String">
    ///Gets the component name of the dashboard item. Value: A string value that is the component name of the dashboard item.
    ///</field>
};
ASPxClientDashboardItemDrillDownStateChangedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ItemDrillDownStateChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardItemDrillDownStateChangedEventArgs">
    ///An ASPxClientDashboardItemDrillDownStateChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemDrillDownStateChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemDrillDownStateChanged event.
    ///</summary>
    ///<field name = "Action" type = "String">
    ///Gets the drill-down action performed in the dashboard item. Value: A string value that is the drill-down action performed in the dashboard item.
    ///</field>
    ///<field name = "Values" type = "Array" elementType = "Object">
    ///Gets values from the current drill-down hierarchy. Value: An array of values from the current drill-down hierarchy.
    ///</field>
    ///<field name = "ItemName" type = "String">
    ///Gets the component name of the dashboard item. Value: A string value that is the component name of the dashboard item.
    ///</field>
};
ASPxClientActionAvailabilityChangedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ActionAvailabilityChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientActionAvailabilityChangedEventArgs">
    ///A ASPxClientActionAvailabilityChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientActionAvailabilityChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the ActionAvailabilityChanged event.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the component name of the dashboard item. Value: A string value that is the component name of the dashboard item.
    ///</field>
};
ASPxClientDynamicLookUpValuesLoadedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the DynamicLookUpValuesLoaded event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDynamicLookUpValuesLoadedEventArgs">
    ///A ASPxClientDynamicLookUpValuesLoadedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDynamicLookUpValuesLoadedEventArgs = function() {
    ///<summary>
    ///Provides data for the DynamicLookUpValuesLoaded event.
    ///</summary>
    ///<field name = "ParameterName" type = "String">
    ///Gets the dashboard parameter name whose values have been loaded. Value: A string value that is the dashboard parameter name whose values have been loaded.
    ///</field>
};
ASPxClientItemBeginUpdateEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ItemBeginUpdate event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientItemBeginUpdateEventArgs">
    ///A ASPxClientItemBeginUpdateEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientItemBeginUpdateEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemBeginUpdate event.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the component name of the dashboard item. Value: A string value that is the component name of the dashboard item.
    ///</field>
};
ASPxClientItemEndUpdateEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ItemEndUpdate event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientItemEndUpdateEventArgs">
    ///A ASPxClientItemEndUpdateEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientItemEndUpdateEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemEndUpdate event.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the component name of the dashboard item. Value: A string value that is the component name of the dashboard item.
    ///</field>
};
ASPxClientDashboardBeginUpdateEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the DashboardBeginUpdate event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardBeginUpdateEventArgs">
    ///A ASPxClientDashboardBeginUpdateEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardBeginUpdateEventArgs = function() {
    ///<summary>
    ///Provides data for the DashboardBeginUpdate event.
    ///</summary>
    ///<field name = "DashboardId" type = "String">
    ///Gets the identifier of the dashboard for which the event was raised. Value: A string value that is the dashboard identifier.
    ///</field>
};
ASPxClientDashboardEndUpdateEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the DashboardEndUpdate event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardEndUpdateEventArgs">
    ///An ASPxClientDashboardEndUpdateEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardEndUpdateEventArgs = function() {
    ///<summary>
    ///Provides data for the DashboardEndUpdate event.
    ///</summary>
    ///<field name = "DashboardId" type = "String">
    ///Gets the identifier of the dashboard for which the event was raised. Value: A string value that is the dashboard identifier.
    ///</field>
};
ASPxClientDashboardViewer = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxDashboardViewer control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "ActionAvailabilityChanged" type = "ASPxClientEvent">
    ///Occurs after the available interactivity actions have changed.
    ///</field>
    ///<field name = "MasterFilterSet" type = "ASPxClientEvent">
    ///Occurs when an end-user changes the state of the master filter.
    ///</field>
    ///<field name = "MasterFilterCleared" type = "ASPxClientEvent">
    ///Occurs when an end-user clears the selection in the master filter item.
    ///</field>
    ///<field name = "DataLoadingError" type = "ASPxClientEvent">
    ///Provides the capability to handle data loading errors in the ASPxClientDashboardViewer.
    ///</field>
    ///<field name = "DrillDownPerformed" type = "ASPxClientEvent">
    ///Occurs after a drill-down is performed.
    ///</field>
    ///<field name = "DrillUpPerformed" type = "ASPxClientEvent">
    ///Occurs after a drill-up is performed.
    ///</field>
    ///<field name = "Loaded" type = "ASPxClientEvent">
    ///Occurs after the ASPxClientDashboardViewer is loaded.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Occurs when an end-user clicks a dashboard item.
    ///</field>
    ///<field name = "ItemVisualInteractivity" type = "ASPxClientEvent">
    ///Allows you to provide custom visual interactivity for data-bound dashboard items that support element selection and highlighting.
    ///</field>
    ///<field name = "ItemWidgetCreated" type = "ASPxClientEvent">
    ///Allows you to access underlying UI/Data Visualization widgets.
    ///</field>
    ///<field name = "ItemWidgetUpdating" type = "ASPxClientEvent">
    ///Allows you to access underlying UI/Data Visualization widgets.
    ///</field>
    ///<field name = "ItemWidgetUpdated" type = "ASPxClientEvent">
    ///Allows you to access underlying UI/Data Visualization widgets.
    ///</field>
    ///<field name = "ItemBeforeWidgetDisposed" type = "ASPxClientEvent">
    ///Allows you to access underlying UI/Data Visualization widgets.
    ///</field>
    ///<field name = "ItemSelectionChanged" type = "ASPxClientEvent">
    ///Occurs after the selection within the dashboard item is changed.
    ///</field>
    ///<field name = "ItemElementCustomColor" type = "ASPxClientEvent">
    ///Allows you to color the required dashboard item elements using the specified colors.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientDashboardActionAvailabilityChangedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the ActionAvailabilityChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardActionAvailabilityChangedEventArgs">
    ///A ASPxClientDashboardActionAvailabilityChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardActionAvailabilityChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the ActionAvailabilityChanged event.
    ///</summary>
    ///<field name = "IsReloadDataAvailable" type = "Boolean">
    ///Gets whether or not data reloading is available in the current state of dashboard item. Value: true, if data reloading is available in the current state of dashboard item; otherwise, false.
    ///</field>
    ///<field name = "ItemActions" type = "Array" elementType = "ASPxClientDashboardItemAction">
    ///Gets interactivity actions currently available for the dashboard item. Value: An array of ASPxClientDashboardItemAction objects that represent interactivity actions currently available for the dashboard item.
    ///</field>
};
ASPxClientDashboardDataLoadingErrorEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the DataLoadingError event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardDataLoadingErrorEventArgs">
    ///A ASPxClientDashboardDataLoadingErrorEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardDataLoadingErrorEventArgs = function() {
    ///<summary>
    ///Provides data for the DataLoadingError event.
    ///</summary>
};
ASPxClientDashboardItemAction = function() {
    ///<summary>
    ///Represents an interactivity action in the dashboard item.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the name of the dashboard item. Value: A string that specifies the name of the dashboard item.
    ///</field>
    ///<field name = "Actions" type = "Array" elementType = "ASPxClientDashboardAction">
    ///Gets interactivity actions performed on a dashboard item. Value: An array of ASPxClientDashboardAction values that specify interactivity actions performed on a dashboard item.
    ///</field>
};
ASPxClientDashboardMasterFilterSetEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the MasterFilterSet event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardMasterFilterSetEventArgs">
    ///A ASPxClientDashboardMasterFilterSetEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardMasterFilterSetEventArgs = function() {
    ///<summary>
    ///Provides data for the MasterFilterSet event.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the name of the dashboard item. Value: A String that specifies the name of the dashboard item.
    ///</field>
    ///<field name = "Values" type = "Array" elementType = "Object[]">
    ///Gets values of currently selected elements in the master filter item. Value: Values of currently selected elements in the master filter item.
    ///</field>
};
ASPxClientDashboardMasterFilterClearedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the MasterFilterCleared event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardMasterFilterClearedEventArgs">
    ///A ASPxClientDashboardMasterFilterClearedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardMasterFilterClearedEventArgs = function() {
    ///<summary>
    ///Provides data for the MasterFilterCleared event.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the name of the dashboard item. Value: A String that is the name of the dashboard item.
    ///</field>
};
ASPxClientDashboardDrillDownPerformedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the DrillDownPerformed event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardDrillDownPerformedEventArgs">
    ///A ASPxClientDashboardDrillDownPerformedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardDrillDownPerformedEventArgs = function() {
    ///<summary>
    ///Provides data for the DrillDownPerformed event.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the name of the dashboard item. Value: A string that specifies the name of the dashboard item.
    ///</field>
    ///<field name = "Values" type = "Array" elementType = "Object">
    ///Gets values from the current drill-down hierarchy. Value: An array of values from the current drill-down hierarchy.
    ///</field>
};
ASPxClientDashboardDrillUpPerformedEventHandler = function(source, e) {
    ///<summary>
    ///References a method that will handle the DrillUpPerformed event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientDashboardDrillUpPerformedEventArgs">
    ///A ASPxClientDashboardDrillUpPerformedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardDrillUpPerformedEventArgs = function() {
    ///<summary>
    ///Provides data for the DrillUpPerformed event.
    ///</summary>
    ///<field name = "ItemName" type = "String">
    ///Gets the name of the dashboard item. Value: A string that is the name of the dashboard item.
    ///</field>
};
IExtension = function() {
    ///<summary>
    ///When implemented, represents the Web Dashboard extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
DashboardControl = function() {
    ///<summary>
    ///An inner part of the ASPxClientDashboard control.
    ///</summary>
    ///<field name = "customTemplates" type = "KnockoutObservableArray">
    ///Allows you to implement knockout templates. Value: A <see cref="KnockoutObservableArray" /> object that is a knockout template.
    ///</field>
    ///<field name = "extensions" type = "Array" elementType = "IExtension">
    ///Returns a list of registered dashboard extensions. Value: An array of IExtension objects that are dashboard extensions.
    ///</field>
};
DashboardParameterDialogExtension = function() {
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
DashboardExportExtension = function() {
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
DashboardClientApiExtension = function() {
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
DashboardCurrencyEditorExtension = function() {
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
DataSourceBrowserExtension = function() {
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
DataSourceWizardExtension = function() {
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
DashboadItemMenuExtension = function() {
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
UndoRedoExtension = function() {
    ///<summary>
    ///A Web Dashboard extension that allows you to keep track of all user actions, and cancel or repeat them.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
BindingPanelExtension = function() {
    ///<summary>
    ///An extension that is the dashboard item's Binding menu allowing you to create and modify data binding.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
DashboardColorSchemeEditorExtension = function() {
    ///<summary>
    ///A Web Dashboard extension that allows you to configure color schemes.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
ConversionPanelExtension = function() {
    ///<summary>
    ///An extension that is the dashboard item's Convert To menu allowing you to convert or duplicate the current item.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
SaveDashboardExtension = function() {
    ///<summary>
    ///A Web Dashboard extension that allows you to save the current dashboard.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
CreateDashboardExtension = function() {
    ///<summary>
    ///A Web Dashboard extension that allows you to create a new dashboard.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
OpenDashboardExtension = function() {
    ///<summary>
    ///A Web Dashboard extension that allows you to open the created dashboards.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
InteractivityPanelExtension = function() {
    ///<summary>
    ///An extension that is the dashboard item's Interactivity menu containing settings that affect on interaction between various dashboard items.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
OptionsPanelExtension = function() {
    ///<summary>
    ///An extension that is the dashboard item's Options menu containing specific options and settings related to the current dashboard item.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
DashboardTitleEditorExtension = function() {
    ///<summary>
    ///An extension that is the Web Dashboard title editor.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
DashboardPanelExtension = function() {
    ///<summary>
    ///The Dashboard Panel extension that displays a list of available dashboards and lets you switch between the designer and viewer modes.
    ///</summary>
    ///<field name = "panelWidth" type = "Int32">
    ///Gets or sets the width of the Dashboard Panel extension. Value: An integer value that specifies the Dashboard Panel's width.
    ///</field>
    ///<field name = "visible" type = "KnockoutObservableBoolean">
    ///Allows you to control the Dashboard Panel's visibility. Value: true, to display the Dashboard Panel; otherwise, false.
    ///</field>
    ///<field name = "allowSwitchToDesigner" type = "KnockoutObservableBoolean">
    ///Gets or sets whether you can switch into the designer mode. Value: true, to display the Edit in Designer button on the dashboard panel; otherwise, false.
    ///</field>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
AvailableDataSourcesExtension = function() {
    ///<summary>
    ///An extension that is a list of available data sources used to provide data to the Web Dashboard.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
DashboardMenuItem = function() {
    ///<summary>
    ///A dashboard menu item.
    ///</summary>
    ///<field name = "id" type = "String">
    ///A unique id of a dashboard menu item. Value: A string value that is a menu item's unique name.
    ///</field>
    ///<field name = "title" type = "String">
    ///Gets or sets a dashboard menu item title. Value: A string value that is a dashboard menu item title.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Specifies the position of a dashboard menu item group within the dashboard menu. Value: A zero-based integer specifying the position of the current dashboard menu item.
    ///</field>
    ///<field name = "hotKey" type = "Int32">
    ///Provides access to the keyboard shortcut used to invoke the command. Value: An integer value that specifies a hotkey combination.
    ///</field>
    ///<field name = "click" type = "Action">
    ///Simulates a mouse-click on a dashboard menu item. Value: A custom function that is invoked when a click occurs.
    ///</field>
    ///<field name = "template" type = "String">
    ///An extension template. Value: A System.String value that is an id of the template.
    ///</field>
    ///<field name = "selected" type = "KnockoutObservableBoolean">
    ///Specifies whether the dashboard menu item is selected. Value: true, if the dashboard menu item is selected; otherwise, false;
    ///</field>
    ///<field name = "disabled" type = "KnockoutObservableBoolean">
    ///Specifies whether a dashboard menu item should be disabled. Value: true, if a dashboard menu item should be disabled; otherwise, false.
    ///</field>
    ///<field name = "hasSeparator" type = "Boolean">
    ///Specifies whether a dashboard menu item has a separator. Value: true, if a dashboard menu item has a separator; otherwise, false.
    ///</field>
    ///<field name = "data" type = "Object">
    ///Gets or sets data that is used by a menu item. Value: An object that contains data used by a menu item.
    ///</field>
};
DashboardToolboxItem = function() {
    ///<summary>
    ///A toolbox item of the specified dashboard toolbox group.
    ///</summary>
    ///<field name = "type" type = "String">
    ///Specifies a dashboard item type. Value: A string value that is a dashboard item type.
    ///</field>
    ///<field name = "icon" type = "String">
    ///Specifies an icon of a dashboard toolbox item. Value: A string value that is the icon id from the SVG definition.
    ///</field>
    ///<field name = "name" type = "String">
    ///A unique name of a dashboard toolbox item. Value: A string value that is a toolbox item's unique name.
    ///</field>
    ///<field name = "title" type = "String">
    ///Gets or sets a dashboard toolbox item title. Value: A string value that is a dashboard toolbox item title.
    ///</field>
    ///<field name = "disabled" type = "KnockoutObservableBoolean">
    ///Specifies whether a toolbox item should be disabled. Value: true, if a toolbox item should be disabled; otherwise, false.
    ///</field>
    ///<field name = "click" type = "Action">
    ///Simulates a mouse-click on a toolbox item. Value: A custom function that is invoked when a click occurs.
    ///</field>
};
DashboardToolbarItem = function() {
    ///<summary>
    ///A toolbar item of the specified dashboard toolbar group.
    ///</summary>
    ///<field name = "icon" type = "String">
    ///Specifies an icon of a dashboard toolbar item. Value: A string value that is the icon id from the SVG definition.
    ///</field>
    ///<field name = "name" type = "String">
    ///A unique name of a dashboard toolbar item. Value: A string value that is a unique toolbar item name.
    ///</field>
    ///<field name = "title" type = "String">
    ///Gets or sets a dashboard toolbar item title. Value: A string value that is a dashboard toolbar item title.
    ///</field>
    ///<field name = "disabled" type = "KnockoutObservableBoolean">
    ///Specifies whether a toolbar item should be disabled. Value: true, if a toolbar item should be disabled; otherwise, false.
    ///</field>
    ///<field name = "template" type = "String">
    ///An extension template. Value: A System.String value that is an id of the template.
    ///</field>
    ///<field name = "click" type = "Action">
    ///Simulates a mouse-click on a toolbar item. Value: A custom function that is invoked when a click occurs.
    ///</field>
};
DashboardToolboxGroup = function() {
    ///<summary>
    ///A toolbox group that contains dashboard toolbox items.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a dashboard toolbox group. Value: A string value that is a unique toolbox group name.
    ///</field>
    ///<field name = "title" type = "String">
    ///Gets or sets a dashboard toolbox group title. Value: A string value that is a dashboard toolbox group title.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Specifies the position of a toolbox group within the Toolbox. Value: A zero-based integer specifying the position of the current toolbox group.
    ///</field>
    ///<field name = "items" type = "KnockoutObservableArray">
    ///A collection of toolbox items obtained from the specified toolbox group. Value: A <see cref="KnockoutObservableArray" /> object that is an array of items obtained from the specified toolbox group.
    ///</field>
};
DashboardToolbarGroup = function() {
    ///<summary>
    ///A toolbar group that contains dashboard toolbar items.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a dashboard toolbar group. Value: A string value that is a unique toolbar group name.
    ///</field>
    ///<field name = "title" type = "String">
    ///Gets or sets a dashboard toolbar group title. Value: A string value that is a dashboard toolbar group title.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Specifies the position of a toolbar group within the Toolbox. Value: A zero-based integer specifying the position of the current toolbar group.
    ///</field>
    ///<field name = "items" type = "KnockoutObservableArray">
    ///A collection of toolbox items obtained from the specified toolbar group. Value: A <see cref="KnockoutObservableArray" /> object that is an array of items obtained from the specified toolbar group.
    ///</field>
};
ToolboxExtension = function() {
    ///<summary>
    ///The Web Dashboard Toolbox extension that provides access to the dashboard menu and allows you to add dashboard items, as well as undo or repeat user actions.
    ///</summary>
    ///<field name = "menuVisible" type = "KnockoutObservableBoolean">
    ///Controls the visibility of the dashboard menu. Value: true, to display the dashboard menu; otherwise, false.
    ///</field>
    ///<field name = "menuItems" type = "KnockoutObservableArray">
    ///A collection of menu items obtained from the dashboard menu. Value: A <see cref="KnockoutObservableArray" /> object that is a collection the dashboard menu items .
    ///</field>
    ///<field name = "toolboxGroups" type = "KnockoutObservableArray">
    ///A collection of toolbox groups obtained from the Toolbox. Value: A <see cref="KnockoutObservableArray" /> object that is a collection the toolbox groups.
    ///</field>
    ///<field name = "toolbarGroups" type = "KnockoutObservableArray">
    ///A collection of toolbar groups obtained from the Toolbox. Value: A <see cref="KnockoutObservableArray" /> object that is a collection the toolbar groups.
    ///</field>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
DashboardParameterEditorExtension = function() {
    ///<summary>
    ///A Web Dashboard extension that allows you to create and edit dashboard parameters.
    ///</summary>
    ///<field name = "name" type = "String">
    ///A unique name of a Web Dashboard extension. Value: A string value that is a unique name of a Web Dashboard extension.
    ///</field>
};
ASPxClientEditBase = function() {
    ///<summary>
    ///Serves as the base object for all the editors included in the client-side object model.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientEdit = function() {
    ///<summary>
    ///Serves as the base object for all the editors that support validation.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientBinaryImage = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxBinaryImage control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an image is clicked.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client side if any server error occurs during server-side processing of a callback sent by the ASPxClientBinaryImage.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientButton = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxButton control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the button's checked state is changed.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the button receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the button loses input focus.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after a button is clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientButtonClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client Click event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object that is the event's source.
    ///</param>
    ///<param name = "e" type = "ASPxClientButtonClickEventArgs">
    ///An ASPxClientButtonClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonClickEventArgs = function() {
    ///<summary>
    ///Provides data for the Click event.
    ///</summary>
    ///<field name = "cancelEventAndBubble" type = "Boolean">
    ///Specifies whether both the event's default action and the event's bubbling upon the hierarchy of event handlers should be canceled. Value: true to cancel the event's default action and the event's bubbling upon the hierarchy of event handlers; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientCalendar = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxCalendar control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the selected date has been changed within the calendar.
    ///</field>
    ///<field name = "VisibleMonthChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the month displayed within the calendar is changed.
    ///</field>
    ///<field name = "CustomDisabledDate" type = "ASPxClientEvent">
    ///Allows you to disable the calendar's days.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after the callback server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCalendar.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientCalendarCustomDisabledDateEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomDisabledDate event.
    ///</summary>
    ///<field name = "date" type = "DateTime">
    ///Gets the date processed in the calendar. Value: A DateTime value containing processed data.
    ///</field>
    ///<field name = "isDisabled" type = "Boolean">
    ///Gets or sets a value specifying whether selection of the processed calendar date is disabled. Value: true, if the date is disabled; otherwise, false.
    ///</field>
};
ASPxClientCalendarCustomDisabledDateEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client CustomDisabledDate event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientCalendarCustomDisabledDateEventArgs">
    ///An ASPxClientCalendarCustomDisabledDateEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxCaptcha control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientCheckBox = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxCheckBox control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the editor's checked state is changed.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientRadioButton = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxRadioButton control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the editor's checked state is changed.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientTextEdit = function() {
    ///<summary>
    ///Represents a base for client-side objects which allow single-line text input.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientTextBoxBase = function() {
    ///<summary>
    ///Represents a base for client-side editors which are capable of displaying and editing text data in their edit regions.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientButtonEditBase = function() {
    ///<summary>
    ///Represents a base for client button editor objects.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientDropDownEditBase = function() {
    ///<summary>
    ///Represents a base class for the editors that contain a drop down window.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "QueryCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientColorEdit = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxColorEdit control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ColorChanged" type = "ASPxClientEvent">
    ///Fires after the selected color has been changed within the color editor via end-user interaction.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///This event is not in effect for the ASPxClientColorEdit. Use the ColorChanged event instead.
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "QueryCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientComboBox = function() {
    ///<summary>
    ///Represent the client-side equivalent of the ASPxComboBox control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientComboBox.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "QueryCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientDateEdit = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxDateEdit control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DateChanged" type = "ASPxClientEvent">
    ///Fires after the selected date has been changed within the date editor.
    ///</field>
    ///<field name = "ParseDate" type = "ASPxClientEvent">
    ///Enables you to convert the value entered by an end user into the value that will be stored by the date editor.
    ///</field>
    ///<field name = "CalendarCustomDisabledDate" type = "ASPxClientEvent">
    ///Allows you to disable the calendar's days.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///This event is not in effect for the ASPxClientDateEdit. Use the DateChanged event instead.
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "QueryCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientParseDateEventArgs = function() {
    ///<summary>
    ///Provides data for the ParseDate client-side event that parses a string entered into a date editor.
    ///</summary>
    ///<field name = "value" type = "String">
    ///Gets the value entered into the date editor by an end user. Value: The string value entered into the date editor by an end user.
    ///</field>
    ///<field name = "date" type = "DateTime">
    ///Gets or sets the edit value of the date editor. Value: A date/time value representing the edit value of the date editor.
    ///</field>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets a value specifying whether the event was handled. Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
    ///</field>
};
ASPxClientParseDateEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ParseDate event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the button editor that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientParseDateEventArgs">
    ///An ASPxClientParseDateEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit = function() {
    ///<summary>
    ///Represents a base for client editor objects realizing the dropdown editor functionality.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "QueryCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientEditKeyEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client events concerning a keyboard key being pressed.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the editor which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientEditKeyEventArgs">
    ///An ASPxClientEditKeyEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditKeyEventArgs = function() {
    ///<summary>
    ///Provides data for the client events involved with a key being pressed or released.
    ///</summary>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
};
ASPxClientEditValidationEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle client validation events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the button editor that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientEditValidationEventArgs">
    ///An ASPxClientEditValidationEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditValidationEventArgs = function() {
    ///<summary>
    ///Provides data for the client events that are related to data validation (see Validate).
    ///</summary>
    ///<field name = "errorText" type = "String">
    ///Gets or sets the error description. Value: A string representing the error description.
    ///</field>
    ///<field name = "isValid" type = "Boolean">
    ///Gets or sets a value specifying whether the validated value is valid. Value: true if the value is valid; otherwise, false.
    ///</field>
    ///<field name = "value" type = "String">
    ///Gets or sets the editor's value being validated. Value: An object that represents the validated value.
    ///</field>
};
ASPxClientFilterControl = function() {
    ///<summary>
    ///Represents the client ASPxFilterControl.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Applied" type = "ASPxClientEvent">
    ///Occurs after a new filter expression has been applied.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientFilterControl.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientFilterAppliedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the Applied event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientFilterAppliedEventArgs">
    ///An ASPxClientFilterAppliedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterAppliedEventArgs = function() {
    ///<summary>
    ///Provides data for the Applied event.
    ///</summary>
    ///<field name = "filterExpression" type = "String">
    ///Gets the filter expression currently being applied. Value: A string value that specifies the filter expression currently being applied.
    ///</field>
};
ASPxClientListEdit = function() {
    ///<summary>
    ///Represents a base for client editor objects that display a list of items.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientListEditItem = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ListEditItem object.
    ///</summary>
    ///<field name = "selected" type = "Boolean">
    ///Gets a value that indicates whether a list edit item is selected. Value: true if a list edit item is selected; otherwise, false.
    ///</field>
    ///<field name = "listEditBase" type = "ASPxClientListEdit">
    ///Gets an editor to which the current item belongs. Value: An ASPxClientListEdit object that represents the item's owner editor.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets the item's index. Value: An integer value that represents the item's index within the corresponding editor's item collection.
    ///</field>
    ///<field name = "imageUrl" type = "String">
    ///Gets the item's associated image. Value: A string value that represents the path to the image displayed by the item.
    ///</field>
    ///<field name = "text" type = "String">
    ///Gets the item's display text. Value: A string value that represents the item's display text.
    ///</field>
    ///<field name = "value" type = "Object">
    ///Gets the item's associated value. Value: An object that represents the value associated with the item.
    ///</field>
};
ASPxClientListBox = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxListBox control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientListBox.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list box has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "ItemDoubleClick" type = "ASPxClientEvent">
    ///Occurs on the client when the editor's item is double clicked.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientCheckListBase = function() {
    ///<summary>
    ///Serves as the base type for the ASPxClientRadioButtonList objects.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientRadioButtonList = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxRadioButtonList control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientCheckBoxList = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxCheckBoxList object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the check box list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientListEditItemSelectedChangedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the SelectedIndexChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientListEditItemSelectedChangedEventArgs">
    ///An ASPxClientListEditItemSelectedChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEditItemSelectedChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the SelectedIndexChanged event.
    ///</summary>
    ///<field name = "index" type = "Int32">
    ///Gets the index of the item related to the event. Value: An integer value that represents the item's index within the corresponding editor's item collection.
    ///</field>
    ///<field name = "isSelected" type = "Boolean">
    ///Gets whether the item has been selected. Value: true if the item is selected; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientProgressBar = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxProgressBar control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientSpinEditBase = function() {
    ///<summary>
    ///Represents a base class for the ASPxClientSpinEdit object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///This event is not in effect for the ASPxClientSpinEditBase. Use the ASPxClientTimeEdit.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientSpinEdit = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxSpinEdit control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "NumberChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the editor's value is altered in any way.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///This event is not in effect for the ASPxClientSpinEditBase. Use the ASPxClientTimeEdit.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientTimeEdit = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxTimeEdit control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DateChanged" type = "ASPxClientEvent">
    ///Fires after the selected date has been changed within the time editor.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///This event is not in effect for the ASPxClientSpinEditBase. Use the ASPxClientTimeEdit.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientStaticEdit = function() {
    ///<summary>
    ///Represents a base for client-side static editors whose values cannot be visually changed by end users.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientEditEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle client-side events which concern clicking within editors.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the editor that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientEditClickEventArgs">
    ///An ASPxClientEditClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditClickEventArgs = function() {
    ///<summary>
    ///Provides data for the client-side events which concern clicking within editors.
    ///</summary>
    ///<field name = "htmlElement" type = "Object">
    ///Gets the HTML element related to the event. Value: An object that represents the clicked HTML element.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
};
ASPxClientHyperLink = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxHyperLink control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientImageBase = function() {
    ///<summary>
    ///Represents a base for client-side editors which are capable of displaying images.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientImage = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxImage control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientLabel = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxLabel control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientTextBox = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxTextBox control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientMemo = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxMemo control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientButtonEdit = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxButtonEdit control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientButtonEditClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ButtonClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the button editor that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientButtonEditClickEventArgs">
    ///An ASPxClientButtonEditClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditClickEventArgs = function() {
    ///<summary>
    ///Provides data for the ButtonClick event.
    ///</summary>
    ///<field name = "buttonIndex" type = "Int32">
    ///Gets the index of the clicked button. Value: An integer value representing the index of the clicked button within the editor's Buttons collection.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTokenBox = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxTokenBox object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "TokensChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the token collection has been changed.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientComboBox.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "QueryCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientTrackBar = function() {
    ///<summary>
    ///The client-side equivalent of the ASPxTrackBar control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "PositionChanging" type = "ASPxClientEvent">
    ///Fires on the client side before a track bar position is changed and allows you to cancel the action.
    ///</field>
    ///<field name = "PositionChanged" type = "ASPxClientEvent">
    ///Fires after the editor's position has been changed.
    ///</field>
    ///<field name = "Track" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user moves a cursor while the drag handle is held down.
    ///</field>
    ///<field name = "TrackStart" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a drag handle and moves it.
    ///</field>
    ///<field name = "TrackEnd" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a drag handle after moving it.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientTrackBarPositionChangingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the PositionChanging event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxTrackBar control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientTrackBarPositionChangingEventArgs">
    ///A ASPxClientTrackBarPositionChangingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBarPositionChangingEventArgs = function() {
    ///<summary>
    ///Provides data for the PositionChanging event.
    ///</summary>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "currentPosition" type = "Decimal">
    ///Gets the current drag handle position. Value: A <see cref="Decimal" /> value that is the drag handle position.
    ///</field>
    ///<field name = "currentPositionEnd" type = "Decimal">
    ///Gets the current secondary drag handle position. Value: A <see cref="Decimal" /> value that is the drag handle position.
    ///</field>
    ///<field name = "currentPositionStart" type = "Decimal">
    ///Gets the current main drag handle position. Value: A <see cref="Decimal" /> value that is the drag handle position.
    ///</field>
    ///<field name = "newPosition" type = "Decimal">
    ///Gets a position where the drag handle is being moved. Value: A <see cref="Decimal" /> value that is the drag handle position.
    ///</field>
    ///<field name = "newPositionEnd" type = "Decimal">
    ///Gets a position where the secondary drag handle is being moved. Value: A <see cref="Decimal" /> value that is the drag handle position.
    ///</field>
    ///<field name = "newPositionStart" type = "Decimal">
    ///Gets a position where the main drag handle is being moved. Value: A <see cref="Decimal" /> value that is the drag handle position.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientValidationSummary = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxValidationSummary control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "VisibilityChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the validation summary's visibility is changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientValidationSummaryVisibilityChangedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the VisibilityChanged client event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientValidationSummaryVisibilityChangedEventArgs">
    ///A ASPxClientValidationSummaryVisibilityChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummaryVisibilityChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the VisibilityChanged event.
    ///</summary>
    ///<field name = "visible" type = "Boolean">
    ///Gets or sets whether the editor is visible on the client. Value: true if the editor is visible; otherwise, false.
    ///</field>
};
ASPxClientGaugeControl = function() {
    ///<summary>
    ///Represents the client ASPxGaugeControl.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires when errors have occurred during callback processing.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientGridColumnMovingTargetPosition = function() {
    ///<summary>
    ///Lists values that specify the position relative to the target column in which a moved column should be placed.
    ///</summary>
    ///<field name = "Right" type = "Int32">
    ///A moved column should be placed to the right of the target column.
    ///</field>
    ///<field name = "Left" type = "Int32">
    ///A moved column should be placed to the left of the target column.
    ///</field>
    ///<field name = "Top" type = "Int32">
    ///A moved column should be placed at the top of the target column.
    ///</field>
    ///<field name = "Bottom" type = "Int32">
    ///A moved column should be placed at the bottom of the target column.
    ///</field>
};
ASPxClientGridBase = function() {
    ///<summary>
    ///Represents the client ASPxGridView.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ToolbarItemClick" type = "ASPxClientEvent">
    ///Fires after a toolbar item has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientGridColumnBase = function() {
    ///<summary>
    ///Serves as a base object implementing the client column functionality.
    ///</summary>
};
ASPxClientGridViewCallbackCommand = function() {
    ///<summary>
    ///Declares client constants that contain the names of the GridView's default commands executed through callbacks.
    ///</summary>
    ///<field name = "NextPage" type = "String" static = "true">
    ///Default value: "NEXTPAGE"
    ///</field>
    ///<field name = "PreviousPage" type = "String" static = "true">
    ///Default value: "PREVPAGE"
    ///</field>
    ///<field name = "GotoPage" type = "String" static = "true">
    ///Default value: "GOTOPAGE"
    ///</field>
    ///<field name = "SelectRows" type = "String" static = "true">
    ///Default value: "SELECTROWS"
    ///</field>
    ///<field name = "SelectRowsKey" type = "String" static = "true">
    ///Default value: "SELECTROWSKEY"
    ///</field>
    ///<field name = "Selection" type = "String" static = "true">
    ///Default value: "SELECTION"
    ///</field>
    ///<field name = "FocusedRow" type = "String" static = "true">
    ///Default value: "FOCUSEDROW"
    ///</field>
    ///<field name = "Group" type = "String" static = "true">
    ///Default value: "GROUP"
    ///</field>
    ///<field name = "UnGroup" type = "String" static = "true">
    ///Default value: "UNGROUP"
    ///</field>
    ///<field name = "Sort" type = "String" static = "true">
    ///Default value: "SORT"
    ///</field>
    ///<field name = "ColumnMove" type = "String" static = "true">
    ///Default value: "COLUMNMOVE"
    ///</field>
    ///<field name = "CollapseAll" type = "String" static = "true">
    ///Default value: "COLLAPSEALL"
    ///</field>
    ///<field name = "ExpandAll" type = "String" static = "true">
    ///Default value: "EXPANDALL"
    ///</field>
    ///<field name = "ExpandRow" type = "String" static = "true">
    ///Default value: "EXPANDROW"
    ///</field>
    ///<field name = "CollapseRow" type = "String" static = "true">
    ///Default value: "COLLAPSEROW"
    ///</field>
    ///<field name = "HideAllDetail" type = "String" static = "true">
    ///Default value: "HIDEALLDETAIL"
    ///</field>
    ///<field name = "ShowAllDetail" type = "String" static = "true">
    ///Default value: "SHOWALLDETAIL"
    ///</field>
    ///<field name = "ShowDetailRow" type = "String" static = "true">
    ///Default value: "SHOWDETAILROW"
    ///</field>
    ///<field name = "HideDetailRow" type = "String" static = "true">
    ///Default value: "HIDEDETAILROW"
    ///</field>
    ///<field name = "PagerOnClick" type = "String" static = "true">
    ///Default value: "PAGERONCLICK"
    ///</field>
    ///<field name = "ApplyFilter" type = "String" static = "true">
    ///Default value: "APPLYFILTER"
    ///</field>
    ///<field name = "ApplyColumnFilter" type = "String" static = "true">
    ///Default value: "APPLYCOLUMNFILTER"
    ///</field>
    ///<field name = "ApplyMultiColumnFilter" type = "String" static = "true">
    ///Default value: "APPLYMULTICOLUMNFILTER"
    ///</field>
    ///<field name = "ApplyHeaderColumnFilter" type = "String" static = "true">
    ///Default value: "APPLYHEADERCOLUMNFILTER"
    ///</field>
    ///<field name = "ApplySearchPanelFilter" type = "String" static = "true">
    ///Default value: "APPLYSEARCHPANELFILTER"
    ///</field>
    ///<field name = "ApplyCustomizationDialogChanges" type = "String" static = "true">
    ///Default value: "APPLYCUSTOMIZATIONDIALOGCHANGES"
    ///</field>
    ///<field name = "FilterRowMenu" type = "String" static = "true">
    ///Default value: "FILTERROWMENU"
    ///</field>
    ///<field name = "StartEdit" type = "String" static = "true">
    ///Default value: "STARTEDIT"
    ///</field>
    ///<field name = "CancelEdit" type = "String" static = "true">
    ///Default value: "CANCELEDIT"
    ///</field>
    ///<field name = "UpdateEdit" type = "String" static = "true">
    ///Default value: "UPDATEEDIT"
    ///</field>
    ///<field name = "AddNewRow" type = "String" static = "true">
    ///Default value: "ADDNEWROW"
    ///</field>
    ///<field name = "DeleteRow" type = "String" static = "true">
    ///Default value: "DELETEROW"
    ///</field>
    ///<field name = "CustomButton" type = "String" static = "true">
    ///Default value: "CUSTOMBUTTON"
    ///</field>
    ///<field name = "CustomCallback" type = "String" static = "true">
    ///Default value: "CUSTOMCALLBACK"
    ///</field>
    ///<field name = "ShowFilterControl" type = "String" static = "true">
    ///Default value: "SHOWFILTERCONTROL"
    ///</field>
    ///<field name = "CloseFilterControl" type = "String" static = "true">
    ///Default value: "CLOSEFILTERCONTROL"
    ///</field>
    ///<field name = "SetFilterEnabled" type = "String" static = "true">
    ///Default value: "SETFILTERENABLED"
    ///</field>
    ///<field name = "Refresh" type = "String" static = "true">
    ///Default value: "REFRESH"
    ///</field>
    ///<field name = "SelFieldValues" type = "String" static = "true">
    ///Default value: "SELFIELDVALUES"
    ///</field>
    ///<field name = "RowValues" type = "String" static = "true">
    ///Default value: "ROWVALUES"
    ///</field>
    ///<field name = "PageRowValues" type = "String" static = "true">
    ///Default value: "PAGEROWVALUES"
    ///</field>
    ///<field name = "FilterPopup" type = "String" static = "true">
    ///Default value: "FILTERPOPUP"
    ///</field>
    ///<field name = "ContextMenu" type = "String" static = "true">
    ///Default value: "CONTEXTMENU"
    ///</field>
    ///<field name = "Toolbar" type = "String" static = "true">
    ///Default value: "TOOLBAR"
    ///</field>
    ///<field name = "CustomValues" type = "String" static = "true">
    ///Default value: "CUSTOMVALUES"
    ///</field>
};
ASPxClientGridToolbarItemClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ToolbarItemClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridToolbarItemClickEventArgs">
    ///An ASPxClientGridToolbarItemClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridToolbarItemClickEventArgs = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "toolbarIndex" type = "Int32">
    ///Gets the toolbar index. Value: An integer value that is the toolbar index.
    ///</field>
    ///<field name = "item" type = "ASPxClientMenuItem">
    ///Gets the clicked toolbar item. Value: A ASPxClientMenuItem object that is the toolbar item.
    ///</field>
    ///<field name = "usePostBack" type = "Boolean">
    ///Specifies whether a postback or a callback is used to finally process the event on the server side. Value: true to perform the round trip to the server side via postback; false to perform the round trip to the server side via callback.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientGridLookup = function() {
    ///<summary>
    ///The client-side equivalent of the ASPxGridLookup control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "RowClick" type = "ASPxClientEvent">
    ///Fires on the client when a data row is clicked within the built-in dropdown grid.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "QueryCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientCardView = function() {
    ///<summary>
    ///Represents the client ASPxCardView.
    ///</summary>
    ///<field name = "batchEditApi" type = "ASPxClientCardViewBatchEditApi">
    ///Provides access to the batch editing client API. Value: A <see cref="ASPxClientCardViewBatchEditApi" /> object that exposes the batch editing client API methods.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CustomButtonClick" type = "ASPxClientEvent">
    ///Occurs when a custom command button has been clicked.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed.
    ///</field>
    ///<field name = "ColumnSorting" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being sorted.
    ///</field>
    ///<field name = "BatchEditStartEditing" type = "ASPxClientEvent">
    ///Occurs when a grid switches to batch edit mode.
    ///</field>
    ///<field name = "BatchEditEndEditing" type = "ASPxClientEvent">
    ///Occurs when a grid leaves batch edit mode.
    ///</field>
    ///<field name = "BatchEditConfirmShowing" type = "ASPxClientEvent">
    ///Enables you to prevent a batch edit confirmation message from being displayed.
    ///</field>
    ///<field name = "BatchEditTemplateCellFocused" type = "ASPxClientEvent">
    ///Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
    ///</field>
    ///<field name = "BatchEditCardValidating" type = "ASPxClientEvent">
    ///Enables you to specify whether card data is valid and provide an error text.
    ///</field>
    ///<field name = "BatchEditChangesSaving" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are saved in batch edit mode.
    ///</field>
    ///<field name = "BatchEditChangesCanceling" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are canceled in batch edit mode.
    ///</field>
    ///<field name = "BatchEditCardInserting" type = "ASPxClientEvent">
    ///Occurs on the client side before a card is inserted in batch edit mode.
    ///</field>
    ///<field name = "BatchEditCardDeleting" type = "ASPxClientEvent">
    ///Occurs on the client side before a card is deleted in batch edit mode.
    ///</field>
    ///<field name = "FocusedCellChanging" type = "ASPxClientEvent">
    ///Occurs on the client side when the focused cell is about to be changed.
    ///</field>
    ///<field name = "CardClick" type = "ASPxClientEvent">
    ///Fires on the client when a card is clicked.
    ///</field>
    ///<field name = "CardDblClick" type = "ASPxClientEvent">
    ///Fires on the client when a card is double clicked.
    ///</field>
    ///<field name = "FocusedCardChanged" type = "ASPxClientEvent">
    ///Fires in response to changing card focus.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientCardView.
    ///</field>
    ///<field name = "CustomizationWindowCloseUp" type = "ASPxClientEvent">
    ///Fires after the customization window has been closed.
    ///</field>
    ///<field name = "ToolbarItemClick" type = "ASPxClientEvent">
    ///Fires after a toolbar item has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientCardViewColumn = function() {
    ///<summary>
    ///Represents a client column.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the column. Value: A string value assigned to the column's Name property.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets the column's position within the collection. Value: An integer zero-bazed index that specifies the column's position within the collection.
    ///</field>
    ///<field name = "fieldName" type = "String">
    ///Gets the name of the database field assigned to the current column. Value: A string value that specifies the name of a data field.
    ///</field>
    ///<field name = "visible" type = "Boolean">
    ///Gets whether the column is visible. Value: true to display the column; otherwise, false.
    ///</field>
};
ASPxClientCardViewValuesCallback = function(result) {
    ///<summary>
    ///Represents a JavaScript function which receives the list of card values when the client GetSelectedFieldValues method is called.
    ///</summary>
    ///<param name = "result" type = "Object">
    ///An object that represents the list of card values received from the server.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewColumnCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the cancelable events of a client ASPxCardView column.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the ASPxClientCardView object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewColumnCancelEventArgs">
    ///An ASPxClientCardViewColumnCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewColumnCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the cancelable events of a client ASPxCardView column.
    ///</summary>
    ///<field name = "column" type = "ASPxClientCardViewColumn">
    ///Gets the processed client column. Value: An ASPxClientCardViewColumn object that represents the processed column.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientCardViewCardClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CardClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the ASPxClientCardView object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewCardClickEventArgs">
    ///An ASPxClientCardViewCardClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewCardClickEventArgs = function() {
    ///<summary>
    ///Provides data for the CardClick event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the processed card's visible index. Value: An integer zero-based index that identifies the processed record.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Provides access to the parameters associated with the CardClick event. Value: An object that contains parameters associated with the event.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientCardViewCustomButtonEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomButtonClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.  This parameter identifies the ASPxClientCardView object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewCustomButtonEventArgs">
    ///An ASPxClientCardViewCustomButtonEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewCustomButtonEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomButtonClick event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the value which identifies the card whose custom button has been clicked. Value: An integer value that identifies the card whose custom button has been clicked.
    ///</field>
    ///<field name = "buttonID" type = "String">
    ///Gets the value which identifies the custom button. Value: A string value that identifies the clicked custom button.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientCardViewSelectionEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the SelectionChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewSelectionEventArgs">
    ///An ASPxClientCardViewSelectionEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewSelectionEventArgs = function() {
    ///<summary>
    ///Provides data for the SelectionChanged event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the visible index of the card whose selected state has been changed. Value: An <see cref="Int32" /> value that specifies the visible index of the card.
    ///</field>
    ///<field name = "isSelected" type = "Boolean">
    ///Gets whether the card has been selected. Value: true if the card has been selected; otherwise, false.
    ///</field>
    ///<field name = "isAllRecordsOnPage" type = "Boolean">
    ///Gets whether all cards displayed within a page have been selected or unselected. Value: true if all cards displayed within a page have been selected or unselected; otherwise, false.
    ///</field>
    ///<field name = "isChangedOnServer" type = "Boolean">
    ///Gets whether a selection has been changed on the server. Value: true  if a selection has been changed on the server; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientCardViewBatchEditStartEditingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditStartEditing event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewBatchEditStartEditingEventArgs">
    ///An ASPxClientCardViewBatchEditStartEditingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewBatchEditStartEditingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditStartEditing event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the visible index of the card whose cells are about to be edited. Value: An <see cref="Int32" /> value that specifies the visible index of the card.
    ///</field>
    ///<field name = "focusedColumn" type = "ASPxClientCardViewColumn">
    ///Gets the CardView column that owns a cell that is about to be edited. Value: An <see cref="ASPxClientCardViewColumn" /> object that is the focused CardView column.
    ///</field>
    ///<field name = "cardValues" type = "Object">
    ///Gets a hashtable that maintains information about editable cells. Value: A hashtable that stores information about editable cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientCardViewBatchEditEndEditingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditEndEditing event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewBatchEditEndEditingEventArgs">
    ///An ASPxClientCardViewBatchEditEndEditingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewBatchEditEndEditingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditEndEditing event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the visible index of the card whose cells have been edited. Value: An <see cref="Int32" /> value that specifies the visible index of the card.
    ///</field>
    ///<field name = "cardValues" type = "Object">
    ///Gets a hashtable that maintains information about editable cells. Value: A hashtable that stores information about editable cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientCardViewBatchEditCardValidatingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditCardValidating event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewBatchEditCardValidatingEventArgs">
    ///An ASPxClientCardViewBatchEditCardValidatingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewBatchEditCardValidatingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditCardValidating event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the processed card's visible index. Value: An integer value that specifies the processed card's visible index.
    ///</field>
    ///<field name = "validationInfo" type = "Object">
    ///Provides validation information of a card currently being validated. Value: An object that is a hashtable containing validation information.
    ///</field>
};
ASPxClientCardViewBatchEditConfirmShowingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditConfirmShowing client event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewBatchEditConfirmShowingEventArgs">
    ///An ASPxClientCardViewBatchEditConfirmShowingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewBatchEditConfirmShowingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditConfirmShowing event.
    ///</summary>
    ///<field name = "requestTriggerID" type = "String">
    ///Gets the client identifier of an object that initiates a send request. Value: A string value that specifies the object client identifier.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientCardViewBatchEditTemplateCellFocusedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditTemplateCellFocused event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the button editor that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs">
    ///An ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditTemplateCellFocused event.
    ///</summary>
    ///<field name = "column" type = "ASPxClientCardViewColumn">
    ///Gets the currently processed column. Value: An <see cref="ASPxClientCardViewColumn" /> object that is the client-side column object.
    ///</field>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets a value specifying whether the event was handled. Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
    ///</field>
};
ASPxClientCardViewBatchEditChangesSavingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditChangesSaving event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the card view object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewBatchEditChangesSavingEventArgs">
    ///An ASPxClientCardViewBatchEditChangesSavingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewBatchEditChangesSavingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditChangesSaving event.
    ///</summary>
    ///<field name = "insertedValues" type = "Object">
    ///Gets a hashtable that maintains information about inserted cells. Value: A hashtable that stores information about inserted cells.
    ///</field>
    ///<field name = "deletedValues" type = "Object">
    ///Gets a hashtable that maintains information about deleted cells. Value: A hashtable that stores information about deleted cells.
    ///</field>
    ///<field name = "updatedValues" type = "Object">
    ///Gets a hashtable that maintains information about updated cells. Value: A hashtable that stores information about updated cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientCardViewBatchEditChangesCancelingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditChangesCanceling event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the card view object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewBatchEditChangesCancelingEventArgs">
    ///An ASPxClientCardViewBatchEditChangesCancelingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewBatchEditChangesCancelingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditChangesCanceling event.
    ///</summary>
    ///<field name = "insertedValues" type = "Object">
    ///Gets a hashtable that maintains information about inserted cells. Value: A hashtable that stores information about inserted cells.
    ///</field>
    ///<field name = "deletedValues" type = "Object">
    ///Gets a hashtable that maintains information about deleted cells. Value: A hashtable that stores information about deleted cells.
    ///</field>
    ///<field name = "updatedValues" type = "Object">
    ///Gets a hashtable that maintains information about updated cells. Value: A hashtable that stores information about updated cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientCardViewBatchEditCardInsertingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditCardInserting event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the card view object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewBatchEditCardInsertingEventArgs">
    ///An ASPxClientCardViewBatchEditCardInsertingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewBatchEditCardInsertingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditCardInserting event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the processed card visible index. Value: An integer value that specifies the processed card visible index.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientCardViewBatchEditCardDeletingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditCardDeleting event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the card view object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewBatchEditCardDeletingEventArgs">
    ///An ASPxClientCardViewBatchEditCardDeletingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewBatchEditCardDeletingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditCardDeleting event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the processed card visible index. Value: An integer value that specifies the processed card visible index.
    ///</field>
    ///<field name = "cardValues" type = "Object">
    ///Gets a hashtable that maintains information about deleted cells. Value: A hashtable that stores information about deleted cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientCardViewFocusedCellChangingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FocusedCellChanging event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientCardViewFocusedCellChangingEventArgs">
    ///An ASPxClientCardViewFocusedCellChangingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewFocusedCellChangingEventArgs = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "cellInfo" type = "ASPxClientCardViewCellInfo">
    ///Provides information of a card's cell currently being focused. Value: A ASPxClientCardViewCellInfo object that provides information about the card's cell.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientCardViewBatchEditApi = function() {
    ///<summary>
    ///Provides members related to Batch Edit Mode
    ///</summary>
};
ASPxClientCardViewCellInfo = function() {
    ///<summary>
    ///Contains information on a grid cell.
    ///</summary>
    ///<field name = "cardVisibleIndex" type = "Int32">
    ///Gets the visible index of the card that contains the cell currently being processed. Value: An <see cref="Int32" /> value that specifies the visible index of the card.
    ///</field>
    ///<field name = "column" type = "ASPxClientCardViewColumn">
    ///Gets the data column that contains the cell currently being processed. Value: An <see cref="ASPxClientCardViewColumn" /> object that is the data column which contains the processed cell.
    ///</field>
};
ASPxClientGridView = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxGridView object.
    ///</summary>
    ///<field name = "batchEditApi" type = "ASPxClientGridViewBatchEditApi">
    ///Provides access to the batch editing client API. Value: A <see cref="ASPxClientGridViewBatchEditApi" /> object that exposes the batch editing client API methods.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CustomButtonClick" type = "ASPxClientEvent">
    ///Occurs when a custom command button has been clicked.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed.
    ///</field>
    ///<field name = "ColumnSorting" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being sorted.
    ///</field>
    ///<field name = "FocusedRowChanged" type = "ASPxClientEvent">
    ///Fires in response to changing row focus.
    ///</field>
    ///<field name = "ColumnGrouping" type = "ASPxClientEvent">
    ///Enables you to cancel data grouping.
    ///</field>
    ///<field name = "ColumnStartDragging" type = "ASPxClientEvent">
    ///Fires when an end-user starts dragging the column's header and enables you to cancel this operation.
    ///</field>
    ///<field name = "ColumnResizing" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being resized.
    ///</field>
    ///<field name = "ColumnResized" type = "ASPxClientEvent">
    ///Occurs after a column's width has been changed by an end-user.
    ///</field>
    ///<field name = "ColumnMoving" type = "ASPxClientEvent">
    ///Enables you to control column movement.
    ///</field>
    ///<field name = "RowExpanding" type = "ASPxClientEvent">
    ///Fires before a group row is expanded.
    ///</field>
    ///<field name = "RowCollapsing" type = "ASPxClientEvent">
    ///Fires before a group row is collapsed.
    ///</field>
    ///<field name = "DetailRowExpanding" type = "ASPxClientEvent">
    ///Fires before a detail row is expanded.
    ///</field>
    ///<field name = "DetailRowCollapsing" type = "ASPxClientEvent">
    ///Fires before a detail row is collapsed.
    ///</field>
    ///<field name = "RowClick" type = "ASPxClientEvent">
    ///Fires on the client when a data row is clicked.
    ///</field>
    ///<field name = "RowDblClick" type = "ASPxClientEvent">
    ///Fires on the client when a data row is double clicked.
    ///</field>
    ///<field name = "ContextMenu" type = "ASPxClientEvent">
    ///Occurs after an end-user right clicks in the GridView, and enables you to provide a custom context menu.
    ///</field>
    ///<field name = "ContextMenuItemClick" type = "ASPxClientEvent">
    ///Fires on the client side when a context menu item has been clicked.
    ///</field>
    ///<field name = "BatchEditRowValidating" type = "ASPxClientEvent">
    ///Enables you to specify whether row data is valid and provide an error text.
    ///</field>
    ///<field name = "BatchEditConfirmShowing" type = "ASPxClientEvent">
    ///Enables you to prevent a batch edit confirmation message from being displayed.
    ///</field>
    ///<field name = "BatchEditStartEditing" type = "ASPxClientEvent">
    ///Occurs when a grid switches to batch edit mode.
    ///</field>
    ///<field name = "BatchEditEndEditing" type = "ASPxClientEvent">
    ///Occurs when a grid leaves the batch edit mode.
    ///</field>
    ///<field name = "BatchEditTemplateCellFocused" type = "ASPxClientEvent">
    ///Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
    ///</field>
    ///<field name = "BatchEditChangesSaving" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are saved in batch edit mode.
    ///</field>
    ///<field name = "BatchEditChangesCanceling" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are canceled in batch edit mode.
    ///</field>
    ///<field name = "BatchEditRowInserting" type = "ASPxClientEvent">
    ///Occurs on the client side before a data row is inserted in batch edit mode.
    ///</field>
    ///<field name = "BatchEditRowDeleting" type = "ASPxClientEvent">
    ///Occurs on the client side before a data row is deleted in batch edit mode.
    ///</field>
    ///<field name = "FocusedCellChanging" type = "ASPxClientEvent">
    ///Occurs on the client side when the focused cell is about to be changed.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientGridView.
    ///</field>
    ///<field name = "CustomizationWindowCloseUp" type = "ASPxClientEvent">
    ///Fires after the Customization Window has been closed.
    ///</field>
    ///<field name = "ToolbarItemClick" type = "ASPxClientEvent">
    ///Fires after a toolbar item has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientGridViewColumn = function() {
    ///<summary>
    ///A client grid column.
    ///</summary>
    ///<field name = "id" type = "String">
    ///Gets the column's unique identifier. Value: A string value that specifies the column's unique identifier.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the column. Value: A string value assigned to the column's Name property.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets the column's position within the collection. Value: An integer zero-bazed index that specifies the column's position within the collection.
    ///</field>
    ///<field name = "fieldName" type = "String">
    ///Gets the name of the database field assigned to the current column. Value: A string value that specifies the name of a data field.
    ///</field>
    ///<field name = "visible" type = "Boolean">
    ///Gets whether the column is visible. Value: true to display the column; otherwise, false.
    ///</field>
};
ASPxClientGridViewValuesCallback = function(result) {
    ///<summary>
    ///Represents a JavaScript function which receives the list of row values when the client GetSelectedFieldValues method is called.
    ///</summary>
    ///<param name = "result" type = "Object">
    ///An object that represents the list of row values received from the server.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewColumnCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the cancelable events of a client ASPxGridView column.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewColumnCancelEventArgs">
    ///An ASPxClientGridViewColumnCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewColumnCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the cancelable events of a client ASPxGridView column.
    ///</summary>
    ///<field name = "column" type = "ASPxClientGridViewColumn">
    ///Gets the processed client column. Value: An ASPxClientGridViewColumn object that represents the processed column.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewColumnProcessingModeEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client events concerned with column processing.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewColumnProcessingModeEventArgs">
    ///A ASPxClientGridViewColumnProcessingModeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewColumnProcessingModeEventArgs = function() {
    ///<summary>
    ///Provides data for the client events  concerned with column processing, and that allow the event's processing to be passed to the server side.
    ///</summary>
    ///<field name = "column" type = "ASPxClientGridViewColumn">
    ///Gets a grid column related to the event. Value: An ASPxClientGridViewColumn object representing the column related to the event.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientGridViewRowCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the RowExpanding events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewRowCancelEventArgs">
    ///An ASPxClientGridViewRowCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewRowCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the RowExpanding events.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the processed row's visible index. Value: An integer zero-based index that identifies the processed row.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewSelectionEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the SelectionChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewSelectionEventArgs">
    ///An ASPxClientGridViewSelectionEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewSelectionEventArgs = function() {
    ///<summary>
    ///Provides data for the SelectionChanged event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the visible index of the row whose selected state has been changed. Value: An <see cref="Int32" /> value that specifies the visible index of the row.
    ///</field>
    ///<field name = "isSelected" type = "Boolean">
    ///Gets whether the row has been selected. Value: true if the row has been selected; otherwise, false.
    ///</field>
    ///<field name = "isAllRecordsOnPage" type = "Boolean">
    ///Gets whether all rows displayed within a page have been selected or unselected. Value: true if all rows displayed within a page have been selected or unselected; otherwise, false.
    ///</field>
    ///<field name = "isChangedOnServer" type = "Boolean">
    ///Gets whether a selection has been changed on the server. Value: true  if a selection has been changed on the server; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientGridViewRowClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the RowClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the ASPxClientGridView object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewRowClickEventArgs">
    ///An ASPxClientGridViewRowClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewRowClickEventArgs = function() {
    ///<summary>
    ///Provides data for the RowClick event.
    ///</summary>
    ///<field name = "htmlEvent" type = "Object">
    ///Provides access to the parameters associated with the RowClick event. Value: An object that contains parameters associated with the event.
    ///</field>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the processed row's visible index. Value: An integer zero-based index that identifies the processed row.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewContextMenuEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ContextMenu event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewContextMenuEventArgs">
    ///An ASPxClientGridViewContextMenuEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewContextMenuEventArgs = function() {
    ///<summary>
    ///Provides data for the ContextMenu event.
    ///</summary>
    ///<field name = "objectType" type = "String">
    ///Gets which grid element has been right clicked by the user. Value: A String value that specifies grid element.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Identifies the grid element being right clicked by the user. Value: A zero-based integer index that identifies the grid element being clicked by the user.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Provides access to the parameters associated with the ContextMenu event. Value: An object that contains parameters associated with the event.
    ///</field>
    ///<field name = "menu" type = "Object">
    ///Gets the currently processed menu object. Value: An object that is the currently processed menu.
    ///</field>
    ///<field name = "showBrowserMenu" type = "Boolean">
    ///Specifies whether a browser context menu should be displayed. Value: true, to display a browser context menu; otherwise, false.    The default is false.
    ///</field>
};
ASPxClientGridViewContextMenuItemClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ContextMenuItemClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewContextMenuItemClickEventArgs">
    ///An ASPxClientGridViewContextMenuItemClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewContextMenuItemClickEventArgs = function() {
    ///<summary>
    ///Provides data for the ContextMenuItemClick event.
    ///</summary>
    ///<field name = "item" type = "ASPxClientMenuItem">
    ///Gets the clicked context menu item. Value: An <see cref="ASPxClientMenuItem" /> object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "objectType" type = "String">
    ///Gets which grid element has been right clicked by the user. Value: A String value that specifies the grid element.
    ///</field>
    ///<field name = "elementIndex" type = "Int32">
    ///Returns the processed element index. Value: An integer value that specifies the processed element index.
    ///</field>
    ///<field name = "usePostBack" type = "Boolean">
    ///Specifies whether a postback or a callback is used to finally process the event on the server side. Value: true to perform the round trip to the server side via postback; false to perform the round trip to the server side via callback.
    ///</field>
    ///<field name = "handled" type = "Boolean">
    ///Specifies whether default context menu item click is handled manually, so no default processing is required. Value: true if no default processing is required; otherwise false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientGridViewCustomButtonEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomButtonClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.  This parameter identifies the ASPxClientGridView object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewCustomButtonEventArgs">
    ///An ASPxClientGridViewCustomButtonEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewCustomButtonEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomButtonClick event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the value which identifies the row whose custom button has been clicked. Value: An integer value that identifies the row whose custom button has been clicked.
    ///</field>
    ///<field name = "buttonID" type = "String">
    ///Gets the value which identifies the custom button. Value: A string value that identifies the clicked custom button.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientGridViewColumnMovingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ColumnMoving event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewColumnMovingEventArgs">
    ///An ASPxClientGridViewColumnMovingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewColumnMovingEventArgs = function() {
    ///<summary>
    ///Provides data for the ColumnMoving event.
    ///</summary>
    ///<field name = "allow" type = "Boolean">
    ///Gets or sets whether a column is allowed to be moved. Value: true to allow column moving; otherwise, false.
    ///</field>
    ///<field name = "sourceColumn" type = "ASPxClientGridViewColumn">
    ///Gets the column currently being dragged by an end-user. Value: An ASPxClientGridViewColumn object that represents the column currently being dragged by an end-user.
    ///</field>
    ///<field name = "destinationColumn" type = "ASPxClientGridViewColumn">
    ///Gets the target column, before or after which the source column will be inserted (if dropped). Value: An ASPxClientGridViewColumn object that represents the target column. null (Nothing in Visual Basic) if the source column isn't over the column header panel.
    ///</field>
    ///<field name = "isDropBefore" type = "Boolean">
    ///Gets whether the source column will be inserted before the target column (if dropped). Value: true if the source column will be inserted before the target column (if dropped); otherwise, false.
    ///</field>
    ///<field name = "isGroupPanel" type = "Boolean">
    ///Gets whether the source column is currently over the Group Panel. Value: true if the source column is currently over the Group Panel; otherwise, false.
    ///</field>
};
ASPxClientGridViewBatchEditConfirmShowingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditConfirmShowing client event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewBatchEditConfirmShowingEventArgs">
    ///An ASPxClientGridViewBatchEditConfirmShowingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewBatchEditConfirmShowingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditConfirmShowing event.
    ///</summary>
    ///<field name = "requestTriggerID" type = "String">
    ///Gets the client identifier of an object that initiates a send request. Value: A string value that specifies the object client identifier.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewBatchEditStartEditingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditStartEditing event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewBatchEditStartEditingEventArgs">
    ///An ASPxClientGridViewBatchEditStartEditingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewBatchEditStartEditingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditStartEditing event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the visible index of the row whose cells are about to be edited. Value: An <see cref="Int32" /> value that specifies the visible index of the row.
    ///</field>
    ///<field name = "focusedColumn" type = "ASPxClientGridViewColumn">
    ///Gets the grid column that owns a cell that is about to be edited. Value: An <see cref="ASPxClientGridViewColumn" /> object that is the focused grid column.
    ///</field>
    ///<field name = "rowValues" type = "Object">
    ///Gets a hashtable that maintains information about editable cells. Value: A hashtable that stores information about editable cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewBatchEditEndEditingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditEndEditing event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewBatchEditEndEditingEventArgs">
    ///An ASPxClientGridViewBatchEditEndEditingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewBatchEditEndEditingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditEndEditing event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the visible index of the row whose cells has been edited. Value: An <see cref="Int32" /> value that specifies the visible index of the row.
    ///</field>
    ///<field name = "rowValues" type = "Object">
    ///Gets a hashtable that maintains information about editable cells. Value: A hashtable that stores information about editable cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewBatchEditRowValidatingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditRowValidating event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewBatchEditRowValidatingEventArgs">
    ///An ASPxClientGridViewBatchEditRowValidatingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewBatchEditRowValidatingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditRowValidating event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the processed row's visible index. Value: An integer value that specifies the processed row's visible index.
    ///</field>
    ///<field name = "validationInfo" type = "Object">
    ///Provides validation information of a row currently being validated. Value: An object that is a hashtable containing validation information.
    ///</field>
};
ASPxClientGridViewBatchEditTemplateCellFocusedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditTemplateCellFocused event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the button editor that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs">
    ///An ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditTemplateCellFocused event.
    ///</summary>
    ///<field name = "column" type = "ASPxClientGridViewColumn">
    ///Gets the currently processed column. Value: A <see cref="ASPxClientGridViewColumn" /> object that is the client-side column object.
    ///</field>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets a value specifying whether the event was handled. Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
    ///</field>
};
ASPxClientGridViewBatchEditChangesSavingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditChangesSaving event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the grid view object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewBatchEditChangesSavingEventArgs">
    ///An ASPxClientGridViewBatchEditChangesSavingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewBatchEditChangesSavingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditChangesSaving event.
    ///</summary>
    ///<field name = "insertedValues" type = "Object">
    ///Gets a hashtable that maintains information about inserted cells. Value: A hashtable that stores information about inserted cells.
    ///</field>
    ///<field name = "deletedValues" type = "Object">
    ///Gets a hashtable that maintains information about deleted cells. Value: A hashtable that stores information about deleted cells.
    ///</field>
    ///<field name = "updatedValues" type = "Object">
    ///Gets a hashtable that maintains information about updated cells. Value: A hashtable that stores information about updated cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewBatchEditChangesCancelingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditChangesCanceling event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the grid view object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewBatchEditChangesCancelingEventArgs">
    ///An ASPxClientGridViewBatchEditChangesCancelingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewBatchEditChangesCancelingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditChangesCanceling event.
    ///</summary>
    ///<field name = "insertedValues" type = "Object">
    ///Gets a hashtable that maintains information about inserted cells. Value: A hashtable that stores information about inserted cells.
    ///</field>
    ///<field name = "deletedValues" type = "Object">
    ///Gets a hashtable that maintains information about deleted cells. Value: A hashtable that stores information about deleted cells.
    ///</field>
    ///<field name = "updatedValues" type = "Object">
    ///Gets a hashtable that maintains information about updated cells. Value: A hashtable that stores information about updated cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewBatchEditRowInsertingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditRowInserting event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the card view object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewBatchEditRowInsertingEventArgs">
    ///An ASPxClientGridViewBatchEditRowInsertingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewBatchEditRowInsertingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditRowInserting event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the processed row's visible index. Value: An integer value that specifies the processed row's visible index.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewBatchEditRowDeletingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditRowDeleting event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the grid view object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewBatchEditRowDeletingEventArgs">
    ///An ASPxClientGridViewBatchEditRowDeletingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewBatchEditRowDeletingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditRowDeleting event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the processed row's visible index. Value: An integer value that specifies the processed row's visible index.
    ///</field>
    ///<field name = "rowValues" type = "Object">
    ///Gets a hashtable that maintains information about deleted cells. Value: A hashtable that stores information about deleted cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewFocusedCellChangingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FocusedCellChanging event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGridViewFocusedCellChangingEventArgs">
    ///An ASPxClientGridViewFocusedCellChangingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewFocusedCellChangingEventArgs = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "cellInfo" type = "ASPxClientGridViewCellInfo">
    ///Provides information on a cell currently being focused. Value: A ASPxClientGridViewCellInfo object that is the cell information.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientGridViewCellInfo = function() {
    ///<summary>
    ///Contains information on a grid cell.
    ///</summary>
    ///<field name = "rowVisibleIndex" type = "Int32">
    ///Gets the visible index of the row that contains the cell currently being processed. Value: An <see cref="Int32" /> value that specifies the visible index of the row.
    ///</field>
    ///<field name = "column" type = "ASPxClientGridViewColumn">
    ///Gets the data column that contains the cell currently being processed. Value: An <see cref="ASPxClientGridViewColumn" /> object that is the data column which contains the processed cell.
    ///</field>
};
ASPxClientGridViewBatchEditApi = function() {
    ///<summary>
    ///Provides members related to Batch Edit Mode
    ///</summary>
};
ASPxClientVerticalGrid = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxVerticalGrid object.
    ///</summary>
    ///<field name = "batchEditApi" type = "ASPxClientVerticalGridBatchEditApi">
    ///Provides access to the batch editing client API. Value: A <see cref="ASPxClientVerticalGridBatchEditApi" /> object that exposes the batch editing client API methods.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CustomButtonClick" type = "ASPxClientEvent">
    ///Occurs when a custom command button has been clicked.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed.
    ///</field>
    ///<field name = "BatchEditStartEditing" type = "ASPxClientEvent">
    ///Occurs when a grid switches to batch edit mode.
    ///</field>
    ///<field name = "BatchEditEndEditing" type = "ASPxClientEvent">
    ///Occurs when a grid leaves the batch edit mode.
    ///</field>
    ///<field name = "BatchEditConfirmShowing" type = "ASPxClientEvent">
    ///Enables you to prevent a batch edit confirmation message from being displayed.
    ///</field>
    ///<field name = "BatchEditTemplateCellFocused" type = "ASPxClientEvent">
    ///Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
    ///</field>
    ///<field name = "BatchEditChangesSaving" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are saved in batch edit mode.
    ///</field>
    ///<field name = "BatchEditChangesCanceling" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are canceled in batch edit mode.
    ///</field>
    ///<field name = "BatchEditRecordInserting" type = "ASPxClientEvent">
    ///Occurs on the client side before a record is inserted in batch edit mode.
    ///</field>
    ///<field name = "BatchEditRecordDeleting" type = "ASPxClientEvent">
    ///Occurs on the client side before a record is deleted in batch edit mode.
    ///</field>
    ///<field name = "BatchEditRecordValidating" type = "ASPxClientEvent">
    ///Enables you to specify whether record data is valid and provide an error text.
    ///</field>
    ///<field name = "FocusedCellChanging" type = "ASPxClientEvent">
    ///Occurs on the client side when the focused cell is about to be changed.
    ///</field>
    ///<field name = "RowSorting" type = "ASPxClientEvent">
    ///Enables you to prevent rows from being sorted.
    ///</field>
    ///<field name = "RowExpandedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the expansion state of a row is changed by end-user interaction.
    ///</field>
    ///<field name = "RowExpandedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a row's expansion state has been changed by end-user interaction.
    ///</field>
    ///<field name = "RecordClick" type = "ASPxClientEvent">
    ///Fires on the client when a record is clicked.
    ///</field>
    ///<field name = "RecordDblClick" type = "ASPxClientEvent">
    ///Fires on the client when a record is double clicked.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientVerticalGrid.
    ///</field>
    ///<field name = "ToolbarItemClick" type = "ASPxClientEvent">
    ///Fires after a toolbar item has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientVerticalGridRow = function() {
    ///<summary>
    ///A client grid row.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the row. Value: A string value assigned to the row's Name property.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets the row's position within the collection. Value: An integer zero-bazed index that specifies the row's position within the collection.
    ///</field>
    ///<field name = "fieldName" type = "String">
    ///Gets the name of the database field assigned to the current row. Value: A string value that specifies the name of a data field.
    ///</field>
    ///<field name = "visible" type = "Boolean">
    ///Gets whether the row is visible. Value: true, to display the row; otherwise, false.
    ///</field>
};
ASPxClientVerticalGridValuesCallback = function(result) {
    ///<summary>
    ///Represents a JavaScript function which receives the list of record values when the client GetSelectedFieldValues method is called.
    ///</summary>
    ///<param name = "result" type = "Object">
    ///An object that represents the list of record values received from the server.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridRowCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the cancelable events of a client ASPxVerticalGrid row.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridRowCancelEventArgs">
    ///An ASPxClientVerticalGridRowCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridRowCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the cancelable events of a client ASPxVerticalGrid row.
    ///</summary>
    ///<field name = "row" type = "ASPxClientVerticalGridRow">
    ///Gets the processed client row. Value: An ASPxClientVerticalGridRow object that represents the processed row.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientVerticalGridRecordClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the RecordClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the ASPxClientVerticalGrid object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridRecordClickEventArgs">
    ///An ASPxClientVerticalGridRecordClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridRecordClickEventArgs = function() {
    ///<summary>
    ///Provides data for the RecordClick event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the processed record's visible index. Value: An integer zero-based index that identifies the processed record.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Provides access to the parameters associated with the RecordClick event. Value: An object that contains parameters associated with the event.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientVerticalGridCustomButtonEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomButtonClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.  This parameter identifies the ASPxClientVerticalGrid object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridCustomButtonEventArgs">
    ///An ASPxClientVerticalGridCustomButtonEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridCustomButtonEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomButtonClick event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the value which identifies the record whose custom button has been clicked. Value: An integer value that identifies the record whose custom button has been clicked.
    ///</field>
    ///<field name = "buttonID" type = "String">
    ///Gets the value which identifies the custom button. Value: A string value that identifies the clicked custom button.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientVerticalGridSelectionEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the SelectionChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridSelectionEventArgs">
    ///An ASPxClientVerticalGridSelectionEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridSelectionEventArgs = function() {
    ///<summary>
    ///Provides data for the SelectionChanged event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the visible index of the record whose selected state has been changed. Value: An <see cref="Int32" /> value that specifies the visible index of the record.
    ///</field>
    ///<field name = "isSelected" type = "Boolean">
    ///Gets whether the record has been selected. Value: true, if the record has been selected; otherwise, false.
    ///</field>
    ///<field name = "isAllRecordsOnPage" type = "Boolean">
    ///Gets whether all records displayed within a page have been selected or unselected. Value: true if all records displayed within a page have been selected or unselected; otherwise, false.
    ///</field>
    ///<field name = "isChangedOnServer" type = "Boolean">
    ///Gets whether a selection has been changed on the server. Value: true  if a selection has been changed on the server; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientVerticalGridRowExpandedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the RowExpandedChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridRowExpandedEventArgs">
    ///An ASPxClientVerticalGridRowExpandedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridRowExpandedEventArgs = function() {
    ///<summary>
    ///Provides data for the RowExpandedChanged event.
    ///</summary>
    ///<field name = "row" type = "ASPxClientVerticalGridRow">
    ///Gets the expanded row. Value: An ASPxClientVerticalGridRow object that represents the expanded row.
    ///</field>
};
ASPxClientVerticalGridRowExpandingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the RowExpandedChanging event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridRowExpandingEventArgs">
    ///An ASPxClientVerticalGridRowExpandedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridRowExpandingEventArgs = function() {
    ///<summary>
    ///Provides data for the RowExpandedChanging event.
    ///</summary>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true, if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "row" type = "ASPxClientVerticalGridRow">
    ///Gets the expanded row. Value: An ASPxClientVerticalGridRow object that represents the expanded row.
    ///</field>
};
ASPxClientVerticalGridBatchEditStartEditingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditStartEditing event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridBatchEditStartEditingEventArgs">
    ///An ASPxClientVerticalGridBatchEditStartEditingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridBatchEditStartEditingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditStartEditing event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the visible index of the record whose cells are about to be edited. Value: An <see cref="Int32" /> value that specifies the visible index of the record.
    ///</field>
    ///<field name = "focusedRow" type = "ASPxClientVerticalGridRow">
    ///Gets the grid row that owns a cell that is about to be edited. Value: An <see cref="ASPxClientVerticalGridRow" /> object that is the focused grid row.
    ///</field>
    ///<field name = "recordValues" type = "Object">
    ///Gets a hashtable that maintains information about editable cells. Value: A hashtable that stores information about editable cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientVerticalGridBatchEditEndEditingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditEndEditing event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridBatchEditEndEditingEventArgs">
    ///An ASPxClientVerticalGridBatchEditEndEditingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridBatchEditEndEditingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditEndEditing event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the visible index of the record whose cells have been edited. Value: An <see cref="Int32" /> value that specifies the visible index of the record.
    ///</field>
    ///<field name = "recordValues" type = "Object">
    ///Gets a hashtable that maintains information about editable cells. Value: Gets a hashtable that maintains information about editable cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientVerticalGridBatchEditRecordValidatingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditRecordValidating event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridBatchEditRecordValidatingEventArgs">
    ///An ASPxClientVerticalGridBatchEditRecordValidatingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridBatchEditRecordValidatingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditRecordValidating event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the processed record's visible index. Value: An integer value that specifies the processed record's visible index.
    ///</field>
    ///<field name = "validationInfo" type = "Object">
    ///Provides validation information on the record currently being validated. Value: An object that is a hashtable containing validation information.
    ///</field>
};
ASPxClientVerticalGridBatchEditConfirmShowingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditConfirmShowing client event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridBatchEditConfirmShowingEventArgs">
    ///An ASPxClientVerticalGridBatchEditConfirmShowingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridBatchEditConfirmShowingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditConfirmShowing event.
    ///</summary>
    ///<field name = "requestTriggerID" type = "String">
    ///Gets the client identifier of an object that initiates a send request. Value: A string value that specifies the object client identifier.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientVerticalGridBatchEditTemplateCellFocusedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditTemplateCellFocused event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the button editor that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs">
    ///An ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditTemplateCellFocused event.
    ///</summary>
    ///<field name = "row" type = "ASPxClientVerticalGridRow">
    ///Gets the currently processed row. Value: A <see cref="ASPxClientVerticalGridRow" /> object that is the client-side row object.
    ///</field>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets a value specifying whether the event was handled. Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
    ///</field>
};
ASPxClientVerticalGridBatchEditChangesSavingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditChangesSaving event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the vertical grid object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridBatchEditChangesSavingEventArgs">
    ///An ASPxClientVerticalGridBatchEditChangesSavingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridBatchEditChangesSavingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditChangesSaving event.
    ///</summary>
    ///<field name = "insertedValues" type = "Object">
    ///Gets a hashtable that maintains information about inserted cells. Value: A hashtable that stores information about inserted cells.
    ///</field>
    ///<field name = "deletedValues" type = "Object">
    ///Gets a hashtable that maintains information about deleted cells. Value: A hashtable that stores information about deleted cells.
    ///</field>
    ///<field name = "updatedValues" type = "Object">
    ///Gets a hashtable that maintains information about updated cells. Value: A hashtable that stores information about updated cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientVerticalGridBatchEditChangesCancelingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditChangesCanceling event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the vertical grid object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridBatchEditChangesCancelingEventArgs">
    ///An ASPxClientVerticalGridBatchEditChangesCancelingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridBatchEditChangesCancelingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditChangesCanceling event.
    ///</summary>
    ///<field name = "insertedValues" type = "Object">
    ///Gets a hashtable that maintains information about inserted cells. Value: A hashtable that stores information about inserted cells.
    ///</field>
    ///<field name = "deletedValues" type = "Object">
    ///Gets a hashtable that maintains information about deleted cells. Value: A hashtable that stores information about deleted cells.
    ///</field>
    ///<field name = "updatedValues" type = "Object">
    ///Gets a hashtable that maintains information about updated cells. Value: A hashtable that stores information about updated cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientVerticalGridBatchEditRecordInsertingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditRecordInserting event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the vertical grid object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridBatchEditRecordInsertingEventArgs">
    ///An ASPxClientVerticalGridBatchEditRecordInsertingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridBatchEditRecordInsertingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditRecordInserting event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the processed record's visible index. Value: An integer value that specifies the processed record's visible index.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientVerticalGridBatchEditRecordDeletingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BatchEditRecordDeleting event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the vertical grid object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridBatchEditRecordDeletingEventArgs">
    ///An ASPxClientVerticalGridBatchEditRecordDeletingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridBatchEditRecordDeletingEventArgs = function() {
    ///<summary>
    ///Provides data for the BatchEditRecordDeleting event.
    ///</summary>
    ///<field name = "visibleIndex" type = "Int32">
    ///Gets the processed record's visible index. Value: An integer value that specifies the processed record's visible index.
    ///</field>
    ///<field name = "recordValues" type = "Object">
    ///Gets a hashtable that maintains information about deleted cells. Value: A hashtable that stores information about deleted cells.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientVerticalGridFocusedCellChangingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FocusedCellChanging event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientVerticalGridFocusedCellChangingEventArgs">
    ///An ASPxClientVerticalGridFocusedCellChangingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridFocusedCellChangingEventArgs = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "cellInfo" type = "ASPxClientVerticalGridCellInfo">
    ///Provides information on a cell currently being focused. Value: A ASPxClientVerticalGridCellInfo object that is the cell information.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientVerticalGridCellInfo = function() {
    ///<summary>
    ///Contains information on a cell that is being edited.
    ///</summary>
    ///<field name = "row" type = "ASPxClientVerticalGridRow">
    ///Gets the row that contains the cell currently being processed. Value: An <see cref="ASPxClientVerticalGridRow" /> object that is the row which contains the processed cell.
    ///</field>
    ///<field name = "recordVisibleIndex" type = "Int32">
    ///Gets the visible index of the record that contains the cell currently being processed. Value: An <see cref="Int32" /> value that specifies the visible index of the record.
    ///</field>
};
ASPxClientVerticalGridCallbackCommand = function() {
    ///<summary>
    ///Declares client constants that contain the names of the ASPxVerticalGrid's default commands executed through callbacks.
    ///</summary>
    ///<field name = "ExpandRow" type = "String" static = "true">
    ///Default value: "EXPANDROW"
    ///</field>
};
ASPxClientVerticalGridBatchEditApi = function() {
    ///<summary>
    ///Provides members related to Batch Edit Mode
    ///</summary>
};
ASPxClientHtmlEditorCommandStyleSettings = function() {
    ///<summary>
    ///Contains style settings related to media elements in ASPxHtmlEditor.
    ///</summary>
    ///<field name = "className" type = "String">
    ///Gets or sets a media element's CSS class name. Value: A string that specifies a class name.
    ///</field>
    ///<field name = "width" type = "String">
    ///Gets or sets an element's width. Value: A string that specifies an element's width <a href="http://www.w3schools.com/cssref/pr_dim_width.asp">in any correct format</a>.
    ///</field>
    ///<field name = "height" type = "String">
    ///Gets or sets an element's height. Value: A string that specifies an element's height <a href="http://www.w3schools.com/cssref/pr_dim_height.asp">in any correct format</a>.
    ///</field>
    ///<field name = "borderWidth" type = "String">
    ///Gets or sets a media element's border width. Value: A string that specifies a border width <a href="http://www.w3schools.com/cssref/pr_border-width.asp">in any correct format</a>.
    ///</field>
    ///<field name = "borderColor" type = "String">
    ///Gets or sets a media element's border color. Value: A string that specifies a border color <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">in any correct format</a>.
    ///</field>
    ///<field name = "borderStyle" type = "String">
    ///Gets or sets a media element's border style. Value: A string that specifies a border style <a href="http://www.w3schools.com/cssref/pr_border-style.asp">in any correct format</a>.
    ///</field>
    ///<field name = "marginTop" type = "String">
    ///Gets or sets an element's top margin. Value: A string that specifies an element's top margin <a href="http://www.w3schools.com/cssref/pr_margin.asp">in any correct format</a>.
    ///</field>
    ///<field name = "marginRight" type = "String">
    ///Gets or sets an element's right margin. Value: A string that specifies an element's right margin <a href="http://www.w3schools.com/cssref/pr_margin.asp">in any correct format</a>.
    ///</field>
    ///<field name = "marginBottom" type = "String">
    ///Gets or sets an element's bottom margin. Value: A string that specifies an element's bottom margin <a href="http://www.w3schools.com/cssref/pr_margin.asp">in any correct format</a>.
    ///</field>
    ///<field name = "marginLeft" type = "String">
    ///Gets or sets an element's left margin. Value: A string that specifies an element's left margin <a href="http://www.w3schools.com/cssref/pr_margin.asp">in any correct format</a>.
    ///</field>
    ///<field name = "backgroundColor" type = "String">
    ///Gets or sets a media element's background color. Value: A string that specifies a background color <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">in any correct format</a>.
    ///</field>
    ///<field name = "textAlign" type = "String">
    ///Gets or sets the element's text alignment. Value: A string value that specifies the element's text alignment <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">in any correct format</a>.
    ///</field>
    ///<field name = "verticalAlign" type = "String">
    ///Gets or sets the element's vertical alignment. Value: A string value that specifies the element's vertical alignment <a href="http://www.w3schools.com/cssref/css_colors_legal.asp">in any correct format</a>.
    ///</field>
};
ASPxClientHtmlEditorCommandArguments = function() {
    ///<summary>
    ///The base class for parameters used in the ASPxHtmlEditor's client-side commands.
    ///</summary>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorInsertImageCommandArguments = function() {
    ///<summary>
    ///Contains settings related to the INSERTIMAGE_COMMAND command parameter.
    ///</summary>
    ///<field name = "src" type = "String">
    ///Specifies the source of the target image. Value: A string specifying the source of the target image.
    ///</field>
    ///<field name = "alt" type = "String">
    ///Creates an alternate text for the target image. Value: A string that specifies an alternate text for the target image.
    ///</field>
    ///<field name = "useFloat" type = "Boolean">
    ///Determines if the target image is wrapped with text. Value: true, if the target image is wrapped with text; otherwise, false.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target image. Value: A string value defining the position of the target image.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings specifying the appearance of the target image. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings specifying the appearance of the target image.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorChangeImageCommandArguments = function() {
    ///<summary>
    ///Contains settings related to the CHANGEIMAGE_COMMAND command parameter.
    ///</summary>
    ///<field name = "src" type = "String">
    ///Specifies the source of the target image. Value: A string specifying the source of the target image.
    ///</field>
    ///<field name = "alt" type = "String">
    ///Creates an alternate text for the target image. Value: A string that specifies an alternate text for the target image.
    ///</field>
    ///<field name = "useFloat" type = "Boolean">
    ///Determines if the target image is wrapped with text. Value: true, if the target image is wrapped with text; otherwise, false.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target image. Value: A string value defining the position of the target image.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings specifying the appearance of the target image. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings specifying the appearance of the target image.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorInsertLinkCommandArguments = function() {
    ///<summary>
    ///Contains settings related to the INSERTLINK_COMMAND command parameter.
    ///</summary>
    ///<field name = "url" type = "String">
    ///Specifies the url of the page the target link goes to. Value: A string value specifying the target link url.
    ///</field>
    ///<field name = "text" type = "String">
    ///Specifiies the text of the target link. Value: A string value specifying the text of the target link.
    ///</field>
    ///<field name = "target" type = "String">
    ///Determines where to open the target link. Value: A string that specifies where to open the target link <a href="http://www.w3schools.com/tags/att_a_target.asp">in any correct format</a>.
    ///</field>
    ///<field name = "title" type = "String">
    ///Defines the title of the target link. Value: A string value defining the title of the target link.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target link element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target link element.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorChangeMediaElementCommandArguments = function() {
    ///<summary>
    ///The base class for parameters related to inserting or changing media elements in the ASPxHtmlEditor.
    ///</summary>
    ///<field name = "id" type = "String">
    ///Defines the <a href="http://www.w3schools.com/tags/att_global_id.asp">HTML "id"</a> attribute of the target media element. Value: A string value which is a unique identifier for the element.
    ///</field>
    ///<field name = "src" type = "String">
    ///Defines the source of the target media element. Value: A string defining the source of the target media element.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target media element. Value: A string value indicating the position of the target media element.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target media element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target media element.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments = function() {
    ///<summary>
    ///The base class for parameters related to inserting or changing HTML5 media elements (Audio and Video) in the ASPxHtmlEditor.
    ///</summary>
    ///<field name = "autoPlay" type = "Boolean">
    ///Determines if a media file will start playing automatically. Value: true, if autoplay is enabled; otherwise, false.
    ///</field>
    ///<field name = "loop" type = "Boolean">
    ///Determines if a media file repeats indefinitely, or stops when it reaches the last frame. Value: true, to loop playback; otherwise, false.
    ///</field>
    ///<field name = "showPlayerControls" type = "Boolean">
    ///Determines if the media player controls should be displayed. Value: true, if media player controls are displayed; otherwise, false.
    ///</field>
    ///<field name = "preloadMode" type = "String">
    ///Determines how a media file should be loaded when the page loads. Value: One of the ASPxClientHtmlEditorMediaPreloadMode enumeration values.
    ///</field>
    ///<field name = "id" type = "String">
    ///Defines the <a href="http://www.w3schools.com/tags/att_global_id.asp">HTML "id"</a> attribute of the target media element. Value: A string value which is a unique identifier for the element.
    ///</field>
    ///<field name = "src" type = "String">
    ///Defines the source of the target media element. Value: A string defining the source of the target media element.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target media element. Value: A string value indicating the position of the target media element.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target media element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target media element.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorInsertAudioCommandArguments = function() {
    ///<summary>
    ///Contains settings related to the INSERTAUDIO_COMMAND command parameter.
    ///</summary>
    ///<field name = "autoPlay" type = "Boolean">
    ///Determines if a media file will start playing automatically. Value: true, if autoplay is enabled; otherwise, false.
    ///</field>
    ///<field name = "loop" type = "Boolean">
    ///Determines if a media file repeats indefinitely, or stops when it reaches the last frame. Value: true, to loop playback; otherwise, false.
    ///</field>
    ///<field name = "showPlayerControls" type = "Boolean">
    ///Determines if the media player controls should be displayed. Value: true, if media player controls are displayed; otherwise, false.
    ///</field>
    ///<field name = "preloadMode" type = "String">
    ///Determines how a media file should be loaded when the page loads. Value: One of the ASPxClientHtmlEditorMediaPreloadMode enumeration values.
    ///</field>
    ///<field name = "id" type = "String">
    ///Defines the <a href="http://www.w3schools.com/tags/att_global_id.asp">HTML "id"</a> attribute of the target media element. Value: A string value which is a unique identifier for the element.
    ///</field>
    ///<field name = "src" type = "String">
    ///Defines the source of the target media element. Value: A string defining the source of the target media element.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target media element. Value: A string value indicating the position of the target media element.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target media element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target media element.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorChangeAudioCommandArguments = function() {
    ///<summary>
    ///Contains settings related to the CHANGEAUDIO_COMMAND command parameter.
    ///</summary>
    ///<field name = "autoPlay" type = "Boolean">
    ///Determines if a media file will start playing automatically. Value: true, if autoplay is enabled; otherwise, false.
    ///</field>
    ///<field name = "loop" type = "Boolean">
    ///Determines if a media file repeats indefinitely, or stops when it reaches the last frame. Value: true, to loop playback; otherwise, false.
    ///</field>
    ///<field name = "showPlayerControls" type = "Boolean">
    ///Determines if the media player controls should be displayed. Value: true, if media player controls are displayed; otherwise, false.
    ///</field>
    ///<field name = "preloadMode" type = "String">
    ///Determines how a media file should be loaded when the page loads. Value: One of the ASPxClientHtmlEditorMediaPreloadMode enumeration values.
    ///</field>
    ///<field name = "id" type = "String">
    ///Defines the <a href="http://www.w3schools.com/tags/att_global_id.asp">HTML "id"</a> attribute of the target media element. Value: A string value which is a unique identifier for the element.
    ///</field>
    ///<field name = "src" type = "String">
    ///Defines the source of the target media element. Value: A string defining the source of the target media element.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target media element. Value: A string value indicating the position of the target media element.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target media element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target media element.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorInsertVideoCommandArguments = function() {
    ///<summary>
    ///Contains settings related to the INSERTVIDEO_COMMAND command parameter.
    ///</summary>
    ///<field name = "posterUrl" type = "String">
    ///Defines the URL of an image that is shown while the video file is downloading, or until an end-user clicks the play button. Value: A string value that specifies the poster image URL.
    ///</field>
    ///<field name = "autoPlay" type = "Boolean">
    ///Determines if a media file will start playing automatically. Value: true, if autoplay is enabled; otherwise, false.
    ///</field>
    ///<field name = "loop" type = "Boolean">
    ///Determines if a media file repeats indefinitely, or stops when it reaches the last frame. Value: true, to loop playback; otherwise, false.
    ///</field>
    ///<field name = "showPlayerControls" type = "Boolean">
    ///Determines if the media player controls should be displayed. Value: true, if media player controls are displayed; otherwise, false.
    ///</field>
    ///<field name = "preloadMode" type = "String">
    ///Determines how a media file should be loaded when the page loads. Value: One of the ASPxClientHtmlEditorMediaPreloadMode enumeration values.
    ///</field>
    ///<field name = "id" type = "String">
    ///Defines the <a href="http://www.w3schools.com/tags/att_global_id.asp">HTML "id"</a> attribute of the target media element. Value: A string value which is a unique identifier for the element.
    ///</field>
    ///<field name = "src" type = "String">
    ///Defines the source of the target media element. Value: A string defining the source of the target media element.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target media element. Value: A string value indicating the position of the target media element.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target media element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target media element.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorChangeVideoCommandArguments = function() {
    ///<summary>
    ///Contains settings related to the CHANGEVIDEO_COMMAND command parameter.
    ///</summary>
    ///<field name = "posterUrl" type = "String">
    ///Defines the URL of an image that is shown while the video file is downloading, or until an end-user clicks the play button. Value: A string value that specifies the poster image URL.
    ///</field>
    ///<field name = "autoPlay" type = "Boolean">
    ///Determines if a media file will start playing automatically. Value: true, if autoplay is enabled; otherwise, false.
    ///</field>
    ///<field name = "loop" type = "Boolean">
    ///Determines if a media file repeats indefinitely, or stops when it reaches the last frame. Value: true, to loop playback; otherwise, false.
    ///</field>
    ///<field name = "showPlayerControls" type = "Boolean">
    ///Determines if the media player controls should be displayed. Value: true, if media player controls are displayed; otherwise, false.
    ///</field>
    ///<field name = "preloadMode" type = "String">
    ///Determines how a media file should be loaded when the page loads. Value: One of the ASPxClientHtmlEditorMediaPreloadMode enumeration values.
    ///</field>
    ///<field name = "id" type = "String">
    ///Defines the <a href="http://www.w3schools.com/tags/att_global_id.asp">HTML "id"</a> attribute of the target media element. Value: A string value which is a unique identifier for the element.
    ///</field>
    ///<field name = "src" type = "String">
    ///Defines the source of the target media element. Value: A string defining the source of the target media element.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target media element. Value: A string value indicating the position of the target media element.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target media element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target media element.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorInsertFlashCommandArguments = function() {
    ///<summary>
    ///Contains settings related to the INSERTFLASH_COMMAND command parameter.
    ///</summary>
    ///<field name = "autoPlay" type = "Boolean">
    ///Determines if the target flash element will start playing automatically. Value: true, if autoplay is enabled; otherwise, false.
    ///</field>
    ///<field name = "loop" type = "Boolean">
    ///Defines if the target flash element repeats indefinitely, or stops when it reaches the last frame. Value: true, to loop playback; otherwise, false.
    ///</field>
    ///<field name = "enableFlashMenu" type = "Boolean">
    ///Determines if the flash related items are displayed in the context menu of the target flash element. Value: true, if the specific context menu items are displayed; otherwise, false
    ///</field>
    ///<field name = "allowFullscreen" type = "Boolean">
    ///Determines if the target flash element can be displayed in the fullscreen mode. Value: true, if the fullscreen mode is allowed; otherwise, false.
    ///</field>
    ///<field name = "quality" type = "String">
    ///Defines the rendering quality level used for the target flash element. Value: A string value that specifies the target flash element rendering quality.
    ///</field>
    ///<field name = "id" type = "String">
    ///Defines the <a href="http://www.w3schools.com/tags/att_global_id.asp">HTML "id"</a> attribute of the target media element. Value: A string value which is a unique identifier for the element.
    ///</field>
    ///<field name = "src" type = "String">
    ///Defines the source of the target media element. Value: A string defining the source of the target media element.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target media element. Value: A string value indicating the position of the target media element.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target media element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target media element.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorChangeFlashCommandArguments = function() {
    ///<summary>
    ///Contains settings related to the CHANGEFLASH_COMMAND command parameter.
    ///</summary>
    ///<field name = "autoPlay" type = "Boolean">
    ///Determines if the target flash element will start playing automatically. Value: true, if autoplay is enabled; otherwise, false.
    ///</field>
    ///<field name = "loop" type = "Boolean">
    ///Defines if the target flash element repeats indefinitely, or stops when it reaches the last frame. Value: true, to loop playback; otherwise, false.
    ///</field>
    ///<field name = "enableFlashMenu" type = "Boolean">
    ///Determines if the flash related items are displayed in the context menu of the target flash element. Value: true, if the specific context menu items are displayed; otherwise, false
    ///</field>
    ///<field name = "allowFullscreen" type = "Boolean">
    ///Determines if the target flash element can be displayed in the fullscreen mode. Value: true, if the fullscreen mode is allowed; otherwise, false.
    ///</field>
    ///<field name = "quality" type = "String">
    ///Defines the rendering quality level used for the target flash element. Value: A string value that specifies the target flash element rendering quality.
    ///</field>
    ///<field name = "id" type = "String">
    ///Defines the <a href="http://www.w3schools.com/tags/att_global_id.asp">HTML "id"</a> attribute of the target media element. Value: A string value which is a unique identifier for the element.
    ///</field>
    ///<field name = "src" type = "String">
    ///Defines the source of the target media element. Value: A string defining the source of the target media element.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target media element. Value: A string value indicating the position of the target media element.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target media element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target media element.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorInsertYouTubeVideoCommandArguments = function() {
    ///<summary>
    ///Contains settings related to the INSERTYOUTUBEVIDEO_COMMAND command parameter.
    ///</summary>
    ///<field name = "showRelatedVideos" type = "Boolean">
    ///Determines if suggested videos are shown after the target YouTube video finishes. Value: true, to show suggested videos; otherwise, false
    ///</field>
    ///<field name = "showVideoInfo" type = "Boolean">
    ///Determines if the target YouTube video title and player actions (Watch later, Share) are shown. Value: true, to display the title and player actions; otherwise, false.
    ///</field>
    ///<field name = "enablePrivacyEnhancedMode" type = "Boolean">
    ///Determines if the privacy-enhanced mode is enabled for the target YouTube video. Value: true, if the privace-enhanced mode is enabled; otherwise, false
    ///</field>
    ///<field name = "showPlayerControls" type = "Boolean">
    ///Determines if the player controls are displayed for the target YouTube video. Value: true, if the player controls are displayed; otherwise, false.
    ///</field>
    ///<field name = "id" type = "String">
    ///Defines the <a href="http://www.w3schools.com/tags/att_global_id.asp">HTML "id"</a> attribute of the target media element. Value: A string value which is a unique identifier for the element.
    ///</field>
    ///<field name = "src" type = "String">
    ///Defines the source of the target media element. Value: A string defining the source of the target media element.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target media element. Value: A string value indicating the position of the target media element.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target media element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target media element.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorChangeYouTubeVideoCommandArguments = function() {
    ///<summary>
    ///Contains settings related to the CHANGEYOUTUBEVIDEO_COMMAND command parameter.
    ///</summary>
    ///<field name = "showRelatedVideos" type = "Boolean">
    ///Determines if suggested videos are shown after the target YouTube video finishes. Value: true, to show suggested videos; otherwise, false
    ///</field>
    ///<field name = "showVideoInfo" type = "Boolean">
    ///Determines if the target YouTube video title and player actions (Watch later, Share) are shown. Value: true, to display the title and player actions; otherwise, false.
    ///</field>
    ///<field name = "enablePrivacyEnhancedMode" type = "Boolean">
    ///Determines if the privacy-enhanced mode is enabled for the target YouTube video. Value: true, if the privace-enhanced mode is enabled; otherwise, false
    ///</field>
    ///<field name = "showPlayerControls" type = "Boolean">
    ///Determines if the player controls are displayed for the target YouTube video. Value: true, if the player controls are displayed; otherwise, false.
    ///</field>
    ///<field name = "id" type = "String">
    ///Defines the <a href="http://www.w3schools.com/tags/att_global_id.asp">HTML "id"</a> attribute of the target media element. Value: A string value which is a unique identifier for the element.
    ///</field>
    ///<field name = "src" type = "String">
    ///Defines the source of the target media element. Value: A string defining the source of the target media element.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target media element. Value: A string value indicating the position of the target media element.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target media element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target media element.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorTablePropertiesCommandArguments = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target table element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target table element.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target table element. Value: A string value indicating the position of the target table element.
    ///</field>
    ///<field name = "cellPadding" type = "Int32">
    ///Gets or sets a table cell padding. Value: An integer value that is the cell padding.
    ///</field>
    ///<field name = "cellSpacing" type = "Int32">
    ///Gets or sets the table cell spacing. Value: An integer value that is the table cell spacing.
    ///</field>
    ///<field name = "caption" type = "String">
    ///Gets or sets a value that is the table caption. Value: A string value that is the caption.
    ///</field>
    ///<field name = "headers" type = "String">
    ///Gets or sets a value indicating whether the first row/column serves as the table's header. Value: A string value that specifies whether the first row/column serves as the table's header.
    ///</field>
    ///<field name = "summary" type = "String">
    ///Gets or sets the table's summary. Value: A string value that is the table's summary.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorInsertTableCommandArguments = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "columns" type = "Int32">
    ///Gets or sets the count of columns in the table. Value: An integer value that is the count of columns.
    ///</field>
    ///<field name = "rows" type = "Int32">
    ///Gets or sets the count of rows in the table. Value: An integer value that is the count of rows.
    ///</field>
    ///<field name = "isEqualColumnWidth" type = "Boolean">
    ///Gets or sets a value indicating whether all table columns should have equal width. Value: true, to create equal widths for all columns; otherwise, false.
    ///</field>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target table element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target table element.
    ///</field>
    ///<field name = "align" type = "String">
    ///Determines the position of the target table element. Value: A string value indicating the position of the target table element.
    ///</field>
    ///<field name = "cellPadding" type = "Int32">
    ///Gets or sets a table cell padding. Value: An integer value that is the cell padding.
    ///</field>
    ///<field name = "cellSpacing" type = "Int32">
    ///Gets or sets the table cell spacing. Value: An integer value that is the table cell spacing.
    ///</field>
    ///<field name = "caption" type = "String">
    ///Gets or sets a value that is the table caption. Value: A string value that is the caption.
    ///</field>
    ///<field name = "headers" type = "String">
    ///Gets or sets a value indicating whether the first row/column serves as the table's header. Value: A string value that specifies whether the first row/column serves as the table's header.
    ///</field>
    ///<field name = "summary" type = "String">
    ///Gets or sets the table's summary. Value: A string value that is the table's summary.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorTableCellPropertiesCommandArguments = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target cell element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target cell element.
    ///</field>
    ///<field name = "applyForAll" type = "Boolean">
    ///Gets or sets a value that indicates whether the cell settings should be applied to all cells in the table. Value: true, if the cell settings should be applied to all cells in the table; otherwise, false.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorTableRowPropertiesCommandArguments = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings specifying the appearance of the specified table row. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings specifying the appearance of the specified table row.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientHtmlEditorTableColumnPropertiesCommandArguments = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "styleSettings" type = "ASPxClientHtmlEditorCommandStyleSettings">
    ///Contains the style settings defining the appearance of the target column element. Value: An <see cref="ASPxClientHtmlEditorCommandStyleSettings" /> object that contains the style settings defining the appearance of the target column element.
    ///</field>
    ///<field name = "selectedElement" type = "Object">
    ///Gets the currently selected element in the ASPxHtmlEditor. Value: An HTML object which is the currently selected element.
    ///</field>
};
ASPxClientCommandConsts = function() {
    ///<summary>
    ///Declares client constants that contain the names of the ASPxHtmlEditor's default client commands.
    ///</summary>
    ///<field name = "SHOWSEARCHPANEL_COMMAND" type = "String" static = "true">
    ///Identifies a command that shows a search panel. Value: "showsearchpanel"
    ///</field>
    ///<field name = "FINDANDREPLACE_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Find and Replace dialog. Value: "findandreplacedialog"
    ///</field>
    ///<field name = "BOLD_COMMAND" type = "String" static = "true">
    ///Identifies a command that applies the bold text formatting to the selected text. If it's already applied, cancels it. Value: "bold"
    ///</field>
    ///<field name = "ITALIC_COMMAND" type = "String" static = "true">
    ///Identifies a command that makes the selected text italic or regular type depending on the current state. Value: "italic"
    ///</field>
    ///<field name = "UNDERLINE_COMMAND" type = "String" static = "true">
    ///Identifies a command that applies the underline text formatting to the selected text. If it's already applied, cancels it. Value: "underline"
    ///</field>
    ///<field name = "STRIKETHROUGH_COMMAND" type = "String" static = "true">
    ///Identifies a command that applies the strike through text formatting to the selected text. If it's already applied, cancels it. Value: "strikethrough"
    ///</field>
    ///<field name = "SUPERSCRIPT_COMMAND" type = "String" static = "true">
    ///Identifies a command that applies the superscript text formatting to the selected text. If it's already applied, cancels it. Value: "superscript"
    ///</field>
    ///<field name = "SUBSCRIPT_COMMAND" type = "String" static = "true">
    ///Identifies a command that applies the subscript text formatting to the selected text. If it's already applied, cancels it. Value: "subscript"
    ///</field>
    ///<field name = "JUSTIFYCENTER_COMMAND" type = "String" static = "true">
    ///Identifies a command that centers the content of the currently focused paragraph. Value: "justifycenter"
    ///</field>
    ///<field name = "JUSTIFYLEFT_COMMAND" type = "String" static = "true">
    ///Identifies a command that left justifies the content of the currently focused paragraph. Value: "justifyleft"
    ///</field>
    ///<field name = "INDENT_COMMAND" type = "String" static = "true">
    ///Identifies a command that creates an indent for the selected paragarph. Value: "indent"
    ///</field>
    ///<field name = "OUTDENT_COMMAND" type = "String" static = "true">
    ///Identifies a command that creates an outdent for the focused paragarph. Value: "outdent"
    ///</field>
    ///<field name = "JUSTIFYRIGHT_COMMAND" type = "String" static = "true">
    ///Identifies a command that right justifies the content of the currently focused paragraph. Value: "justifyright"
    ///</field>
    ///<field name = "JUSTIFYFULL_COMMAND" type = "String" static = "true">
    ///Identifies a command that fully justifies the content of the currently focused paragraph (aligned with both the left and right margines). Value: "justifyfull"
    ///</field>
    ///<field name = "FONTSIZE_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the size of the selected text. Value: "fontsize"
    ///</field>
    ///<field name = "FONTNAME_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the font of the selected text. Value: "fontname"
    ///</field>
    ///<field name = "FONTCOLOR_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the color of a fore color pickers and sets the selected text fore color. Value: "forecolor"
    ///</field>
    ///<field name = "BACKCOLOR_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the color of a back color pickers and sets the selected text back color. Value: "backcolor"
    ///</field>
    ///<field name = "FORMATBLOCK_COMMAND" type = "String" static = "true">
    ///Identifies a command that wraps the selected paragraph in the specified html tag. Value: "formatblock"
    ///</field>
    ///<field name = "APPLYCSS_COMMAND" type = "String" static = "true">
    ///Identifies a command that wraps the currently selected text content in a specific html tag with a css class assigned to it. Value: "applycss"
    ///</field>
    ///<field name = "REMOVEFORMAT_COMMAND" type = "String" static = "true">
    ///Identifies a command that removes all formatting from the selected content. Value: "removeformat"
    ///</field>
    ///<field name = "UNDO_COMMAND" type = "String" static = "true">
    ///Identifies a command that cancels the last action. Value: "undo"
    ///</field>
    ///<field name = "REDO_COMMAND" type = "String" static = "true">
    ///Identifies a command that returns a previously canceled action. Value: "redo"
    ///</field>
    ///<field name = "COPY_COMMAND" type = "String" static = "true">
    ///Identifies a command that copies the selected content. Value: "copy"
    ///</field>
    ///<field name = "PASTE_COMMAND" type = "String" static = "true">
    ///Identifies a command that pastes the content of the clipboard at the current cursor position. Value: "paste"
    ///</field>
    ///<field name = "PASTEFROMWORD_COMMAND" type = "String" static = "true">
    ///Identifies a command that pastes a specified content taking into account that it was copied from Word. Value: "pastefromword"
    ///</field>
    ///<field name = "PASTEFROMWORDDIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Paste from Word dialog. Value: "pastefromworddialog"
    ///</field>
    ///<field name = "CUT_COMMAND" type = "String" static = "true">
    ///Identifies a command that cuts the selected content. Value: "cut"
    ///</field>
    ///<field name = "SELECT_ALL" type = "String" static = "true">
    ///Identifies a command that selects all content inside the html editor. Value: "selectall"
    ///</field>
    ///<field name = "DELETE_COMMAND" type = "String" static = "true">
    ///Identifies a command that deletes the selected content. Value: "delete"
    ///</field>
    ///<field name = "PASTEHTML_COMMAND" type = "String" static = "true">
    ///Identifies a command that can be used to correctly insert HTML code into the editor. Value: "pastehtml"
    ///</field>
    ///<field name = "INSERTORDEREDLIST_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new ordered list. Value: "insertorderedlist"
    ///</field>
    ///<field name = "INSERTUNORDEREDLIST_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new unordered list. Value: "insertunorderedlist"
    ///</field>
    ///<field name = "RESTARTORDEREDLIST_COMMAND" type = "String" static = "true">
    ///Identifies a command that restarts the current ordered list. Value: "restartorderedlist"
    ///</field>
    ///<field name = "CONTINUEORDEREDLIST_COMMAND" type = "String" static = "true">
    ///Identifies a command that continues a disrupted ordered list. Value: "continueorderedlist"
    ///</field>
    ///<field name = "UNLINK_COMMAND" type = "String" static = "true">
    ///Identifies a command that removes a hyperlink from the selected text or image. Value: "unlink"
    ///</field>
    ///<field name = "INSERTLINK_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new hyperlink. Value: "insertlink"
    ///</field>
    ///<field name = "INSERTIMAGE_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new image. Value: "insertimage"
    ///</field>
    ///<field name = "CHANGEIMAGE_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the selected image. Value: "changeimage"
    ///</field>
    ///<field name = "CHECKSPELLING_COMMAND" type = "String" static = "true">
    ///Identifies a command that initiates spell checking. Value: "checkspelling"
    ///</field>
    ///<field name = "INSERTIMAGE_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Insert Image dialog. Value: "insertimagedialog"
    ///</field>
    ///<field name = "CHANGEIMAGE_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Change Image dialog. Value: "changeimagedialog"
    ///</field>
    ///<field name = "INSERTLINK_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Insert Link dialog. Value: "insertlinkdialog"
    ///</field>
    ///<field name = "CHANGELINK_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Change Link dialog. Value: "changelinkdialog"
    ///</field>
    ///<field name = "INSERTTABLE_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Insert Table dialog. Value: "inserttabledialog"
    ///</field>
    ///<field name = "TABLEPROPERTIES_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Table Properties dialog. Value: "tablepropertiesdialog"
    ///</field>
    ///<field name = "TABLECELLPROPERTIES_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Cell Properties dialog. Value: "tablecellpropertiesdialog"
    ///</field>
    ///<field name = "TABLECOLUMNPROPERTIES_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Column Properties dialog. Value: "tablecolumnpropertiesdialog"
    ///</field>
    ///<field name = "TABLEROWPROPERTIES_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Row Properties dialog. Value: "tablerowpropertiesdialog"
    ///</field>
    ///<field name = "PRINT_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes a default browser Print dialog, allowing an end-user to print the content of the html editor. Value: "print"
    ///</field>
    ///<field name = "FULLSCREEN_COMMAND" type = "String" static = "true">
    ///Identifies a command that toggles the full-screen mode. Value: "fullscreen"
    ///</field>
    ///<field name = "INSERTTABLE_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new table. Value: "inserttable"
    ///</field>
    ///<field name = "CHANGETABLE_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the selected table. Value: "changetable"
    ///</field>
    ///<field name = "CHANGETABLECELL_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the selected table cell. Value: "changetablecell"
    ///</field>
    ///<field name = "CHANGETABLEROW_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the selected table row. Value: "changetablerow"
    ///</field>
    ///<field name = "CHANGETABLECOLUMN_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the selected table column. Value: "changetablecolumn"
    ///</field>
    ///<field name = "DELETETABLE_COMMAND" type = "String" static = "true">
    ///Identifies a command that deletes the currently selected table. Value: "deletetable"
    ///</field>
    ///<field name = "DELETETABLEROW_COMMAND" type = "String" static = "true">
    ///Identifies a command that deletes the currently selected table row. Value: "deletetablerow"
    ///</field>
    ///<field name = "DELETETABLECOLUMN_COMMAND" type = "String" static = "true">
    ///Identifies a command that deletes the currently selected table column. Value: "deletetablecolumn"
    ///</field>
    ///<field name = "INSERTTABLECOLUMNTOLEFT_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new column to the left from the currently focused one. Value: "inserttablecolumntoleft"
    ///</field>
    ///<field name = "INSERTTABLECOLUMNTORIGHT_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new column to the right from the currently focused one. Value: "inserttablecolumntoright"
    ///</field>
    ///<field name = "INSERTTABLEROWBELOW_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new row below the currently focused one. Value: "inserttablerowbelow"
    ///</field>
    ///<field name = "INSERTTABLEROWABOVE_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new row above the currently focused one. Value: "inserttablerowabove"
    ///</field>
    ///<field name = "SPLITTABLECELLHORIZONTALLY_COMMAND" type = "String" static = "true">
    ///Identifies a command that splits the current table cell horizontally. Value: "splittablecellhorizontally"
    ///</field>
    ///<field name = "SPLITTABLECELLVERTICALLY_COMMAND" type = "String" static = "true">
    ///Identifies a command that splits the current table cell vertically. Value: "splittablecellvertically"
    ///</field>
    ///<field name = "MERGETABLECELLRIGHT_COMMAND" type = "String" static = "true">
    ///Identifies a command that merges the focused table cell with the one to the right. Value: "mergetablecellright"
    ///</field>
    ///<field name = "MERGETABLECELLDOWN_COMMAND" type = "String" static = "true">
    ///Identifies a command that merges the focused table cell with the one below. Value: "mergetablecelldown"
    ///</field>
    ///<field name = "CUSTOMDIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes a custom dialog. Value: "customdialog"
    ///</field>
    ///<field name = "EXPORT_COMMAND" type = "String" static = "true">
    ///Identifies a command that exports the html editor content. Value: "export"
    ///</field>
    ///<field name = "INSERTAUDIO_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new audio element. Value: "insertaudio"
    ///</field>
    ///<field name = "INSERTVIDEO_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new video. Value: "insertvideo"
    ///</field>
    ///<field name = "INSERTFLASH_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new flash element. Value: "insertflash"
    ///</field>
    ///<field name = "INSERTYOUTUBEVIDEO_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new YouTube video. Value: "insertyoutubevideo"
    ///</field>
    ///<field name = "CHANGEAUDIO_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the selected audio element. Value: "changeaudio"
    ///</field>
    ///<field name = "CHANGEVIDEO_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the selected video element. Value: "changevideo"
    ///</field>
    ///<field name = "CHANGEFLASH_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the selected flash element. Value: "changeflash"
    ///</field>
    ///<field name = "CHANGEYOUTUBEVIDEO_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the selected YouTube video element. Value: "changeyoutubevideo"
    ///</field>
    ///<field name = "INSERTAUDIO_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Insert Audio dialog. Value: "insertaudiodialog"
    ///</field>
    ///<field name = "INSERTVIDEO_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Insert Video dialog. Value: "insertvideodialog"
    ///</field>
    ///<field name = "INSERTFLASH_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Insert Flash dialog. Value: "insertflashdialog"
    ///</field>
    ///<field name = "INSERTYOUTUBEVIDEO_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Insert YouTube Video dialog. Value: "insertyoutubevideodialog"
    ///</field>
    ///<field name = "CHANGEAUDIO_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Change Audio dialog. Value: "changeaudiodialog"
    ///</field>
    ///<field name = "CHANGEVIDEO_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Change Video dialog. Value: "changevideodialog"
    ///</field>
    ///<field name = "CHANGEFLASH_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Change Flash dialog. Value: "changeflash"
    ///</field>
    ///<field name = "CHANGEYOUTUBEVIDEO_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Change YouTube Video dialog. Value: "changeyoutubevideodialog"
    ///</field>
    ///<field name = "PASTEHTMLSOURCEFORMATTING_COMMAND" type = "String" static = "true">
    ///Identifies a command that pastes the content of the clipboard to the current cursor position, taking into account that the PasteMode property is set to SourceFormatting. Value: "pastehtmlsourceformatting"
    ///</field>
    ///<field name = "PASTEHTMLPLAINTEXT_COMMAND" type = "String" static = "true">
    ///Identifies a command that pastes the content of the clipboard to the current cursor position, taking into account that the PasteMode property is set to PlainText. Value: "pastehtmlplaintext"
    ///</field>
    ///<field name = "PASTEHTMLMERGEFORMATTING_COMMAND" type = "String" static = "true">
    ///Identifies a command that pastes the content of the clipboard to the current cursor position, taking into account that the PasteMode property is set to MergeFormatting. Value: "pastehtmlmergeformatting"
    ///</field>
    ///<field name = "INSERTPLACEHOLDER_COMMAND" type = "String" static = "true">
    ///Identifies a command that inserts a new placeholder. Value: "insertplaceholder"
    ///</field>
    ///<field name = "CHANGEPLACEHOLDER_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes the selected placeholder. Value: "changeplaceholder"
    ///</field>
    ///<field name = "INSERTPLACEHOLDER_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Insert Placeholder dialog. Value: "insertplaceholderdialog"
    ///</field>
    ///<field name = "CHANGEPLACEHOLDER_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Change Placeholder dialog. Value: "changeplaceholderdialog"
    ///</field>
    ///<field name = "UPDATEDOCUMENT_COMMAND" type = "String" static = "true">
    ///Identifies a command that updates the editor content. Value: "updatedocument"
    ///</field>
    ///<field name = "CHANGEELEMENTPROPERTIES_COMMAND" type = "String" static = "true">
    ///Identifies a command that changes properties of the element selected in the tag inspector. Value: "changeelementproperties"
    ///</field>
    ///<field name = "CHANGEELEMENTPROPERTIES_DIALOG_COMMAND" type = "String" static = "true">
    ///Identifies a command that invokes the Change Element Properties dialog. Value: "changeelementpropertiesdialog"
    ///</field>
    ///<field name = "COMMENT_COMMAND" type = "String" static = "true">
    ///Identifies a command that comments the selected HTML code. If no code is selected, it comments the focused tag. Value: "comment"
    ///</field>
    ///<field name = "UNCOMMENTHTML_COMMAND" type = "String" static = "true">
    ///Identifies a command that uncomments the selected HTML code. If no code is selected, the command uncomments the currently focused tag. Value: "uncomment"
    ///</field>
    ///<field name = "FORMATDOCUMENT_COMMAND" type = "String" static = "true">
    ///Identifies a command that formats the current HTML document. Value: "formatdocument"
    ///</field>
    ///<field name = "INDENTLINE_COMMAND" type = "String" static = "true">
    ///Identifies a command that applies the indent formatting to the selected content. Value: "indent"
    ///</field>
    ///<field name = "OUTDENTLINE_COMMAND" type = "String" static = "true">
    ///Identifies a command that applies the outdent formatting to the focused content. Value: "outdent"
    ///</field>
    ///<field name = "COLLAPSETAG_COMMAND" type = "String" static = "true">
    ///Identifies a command that collapses the selected HTML tag. Value: "collapsetag"
    ///</field>
    ///<field name = "EXPANDTAG_COMMAND" type = "String" static = "true">
    ///Identifies a command that expands the selected HTML tag. Value: "expandtag"
    ///</field>
    ///<field name = "SHOWINTELLISENSE_COMMAND" type = "String" static = "true">
    ///Identifies a command that shows intellisense for the HTML code editor. Value: "showintellisense"
    ///</field>
};
ASPxClientHtmlEditorDialogInitializedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client DialogInitialized event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e" type = "ASPxClientHtmlEditorDialogInitializedEventArgs">
    ///An ASPxClientHtmlEditorDialogInitializedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorDialogInitializedEventArgs = function() {
    ///<summary>
    ///Provides data for the DialogInitialized client event.
    ///</summary>
    ///<field name = "dialogName" type = "String">
    ///Gets the name of the dialog that has been initialized. Value: A string value that is the name of the initialized dialog.
    ///</field>
    ///<field name = "dialog" type = "ASPxClientHtmlEditorDialogBase">
    ///Gets a dialog object related to the event. Value: A ASPxClientHtmlEditorDialogBase object that is the dialog.
    ///</field>
};
ASPxClientHtmlEditorDialogCloseEventArgs = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "dialogName" type = "String">
    ///Gets the dialog name related to the event. Value: A string value that is the dialog name.
    ///</field>
    ///<field name = "dialog" type = "ASPxClientHtmlEditorDialogBase">
    ///Gets the dialog object related to the event. Value: An ASPxClientHtmlEditorDialogBase object that is the dialog.
    ///</field>
    ///<field name = "parameter" type = "Object">
    ///Gets a string that contains specific information (if any) passed from the client side for server-side processing. Value: A string value representing specific information passed from the client to the server side.
    ///</field>
};
ASPxClientHtmlEditorDialogClosingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the DialogClosing event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientHtmlEditorDialogClosingEventArgs">
    ///An ASPxClientHtmlEditorDialogClosingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorDialogClosingEventArgs = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true, if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "dialogName" type = "String">
    ///Gets the dialog name related to the event. Value: A string value that is the dialog name.
    ///</field>
    ///<field name = "dialog" type = "ASPxClientHtmlEditorDialogBase">
    ///Gets the dialog object related to the event. Value: An ASPxClientHtmlEditorDialogBase object that is the dialog.
    ///</field>
    ///<field name = "parameter" type = "Object">
    ///Gets a string that contains specific information (if any) passed from the client side for server-side processing. Value: A string value representing specific information passed from the client to the server side.
    ///</field>
};
ASPxClientHtmlEditorDialogClosedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the DialogClosed event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientHtmlEditorDialogClosedEventArgs">
    ///An ASPxClientHtmlEditorDialogClosedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorDialogClosedEventArgs = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "dialogName" type = "String">
    ///Gets the dialog name related to the event. Value: A string value that is the dialog name.
    ///</field>
    ///<field name = "dialog" type = "ASPxClientHtmlEditorDialogBase">
    ///Gets the dialog object related to the event. Value: An ASPxClientHtmlEditorDialogBase object that is the dialog.
    ///</field>
    ///<field name = "parameter" type = "Object">
    ///Gets a string that contains specific information (if any) passed from the client side for server-side processing. Value: A string value representing specific information passed from the client to the server side.
    ///</field>
};
ASPxClientHtmlEditorCommandExecutingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client CommandExecuted event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event's source.
    ///</param>
    ///<param name = "e" type = "ASPxClientHtmlEditorCommandExecutingEventArgs">
    ///An ASPxClientHtmlEditorCommandExecutingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorCommandExecutingEventArgs = function() {
    ///<summary>
    ///Provides data for the CommandExecuting event.
    ///</summary>
    ///<field name = "commandName" type = "String">
    ///Gets the name of the processed command. Value: A string value specifying the processed command's name.
    ///</field>
    ///<field name = "parameter" type = "Object">
    ///Gets an optional parameter that complements the processed command. Value: An object containing additional information about the processed command.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientHtmlEditorCommandEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the corresponding client event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the editor which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientHtmlEditorCommandEventArgs">
    ///An ASPxClientHtmlEditorCommandEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorCommandEventArgs = function() {
    ///<summary>
    ///Provides data for client events that relate to command processing (CustomCommand).
    ///</summary>
    ///<field name = "commandName" type = "String">
    ///Gets the name of the processed command. Value: A string value representing the processed command's name.
    ///</field>
    ///<field name = "parameter" type = "Object">
    ///Gets an optional parameter that complements the processed command. Value: A string value containing additional information about the processed command.
    ///</field>
};
ASPxClientHtmlEditorCustomDialogEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client CustomDialogOpened event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e" type = "ASPxClientHtmlEditorCustomDialogEventArgs">
    ///An ASPxClientHtmlEditorCustomDialogEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorCustomDialogEventArgs = function() {
    ///<summary>
    ///Provides data for client events that relate to custom dialog operations.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the processed custom dialog. Value: A string value that represents the value assigned to the processed custom dialog's Name property.
    ///</field>
};
ASPxClientHtmlEditorCustomDialogCloseEventArgsBase = function() {
    ///<summary>
    ///Provides data for client events that relate to closing a custom dialog.
    ///</summary>
    ///<field name = "status" type = "Object">
    ///Gets the status of the closed custom dialog. Value: An object representing a custom dialog's closing status. By default, it's the "cancel" string if the dialog operation is canceled, or the "ok" string if a dialog is closed by submitting a file. You can also provide your custom status, if your dialog contains additional buttons.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the processed custom dialog. Value: A string value that represents the value assigned to the processed custom dialog's Name property.
    ///</field>
};
ASPxClientHtmlEditorCustomDialogClosingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client CustomDialogClosing event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e" type = "ASPxClientHtmlEditorCustomDialogClosingEventArgs">
    ///An ASPxClientHtmlEditorCustomDialogClosingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorCustomDialogClosingEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomDialogClosing client event.
    ///</summary>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets a value specifying whether the event was handled. Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
    ///</field>
    ///<field name = "status" type = "Object">
    ///Gets the status of the closed custom dialog. Value: An object representing a custom dialog's closing status. By default, it's the "cancel" string if the dialog operation is canceled, or the "ok" string if a dialog is closed by submitting a file. You can also provide your custom status, if your dialog contains additional buttons.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the processed custom dialog. Value: A string value that represents the value assigned to the processed custom dialog's Name property.
    ///</field>
};
ASPxClientHtmlEditorCustomDialogClosedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client CustomDialogClosed event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e" type = "ASPxClientHtmlEditorCustomDialogClosedEventArgs">
    ///An ASPxClientHtmlEditorCustomDialogClosedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorCustomDialogClosedEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomDialogClosed client event.
    ///</summary>
    ///<field name = "data" type = "Object">
    ///Gets an object associated with the closed dialog. Value: An object containing custom data associated with dialog closing.
    ///</field>
    ///<field name = "status" type = "Object">
    ///Gets the status of the closed custom dialog. Value: An object representing a custom dialog's closing status. By default, it's the "cancel" string if the dialog operation is canceled, or the "ok" string if a dialog is closed by submitting a file. You can also provide your custom status, if your dialog contains additional buttons.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the processed custom dialog. Value: A string value that represents the value assigned to the processed custom dialog's Name property.
    ///</field>
};
ASPxClientHtmlEditorValidationEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client Validation event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e" type = "ASPxClientHtmlEditorValidationEventArgs">
    ///An ASPxClientHtmlEditorValidationEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorValidationEventArgs = function() {
    ///<summary>
    ///Provides data for the Validation client event.
    ///</summary>
    ///<field name = "html" type = "String">
    ///Gets or sets the HTML markup that is the ASPxHtmlEditor's content. Value: A string value that specifies the HTML content to validate.
    ///</field>
    ///<field name = "isValid" type = "Boolean">
    ///Gets or sets a value specifying whether the validated value is valid. Value: true if the validation has been completed successfully; otherwise, false.
    ///</field>
    ///<field name = "errorText" type = "String">
    ///Gets or sets the error text to be displayed within the editor's error frame if the editor's validation fails. Value: A string value specifying the error description.
    ///</field>
};
ASPxClientHtmlEditorTabEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client ActiveTabChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event's source.
    ///</param>
    ///<param name = "e" type = "ASPxClientHtmlEditorTabEventArgs">
    ///An ASPxClientHtmlEditorTabEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorTabEventArgs = function() {
    ///<summary>
    ///Provides data for the ActiveTabChanged event that concerns manipulations on tabs.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies an editor tab. Value: A string value that is the tab name.
    ///</field>
};
ASPxClientHtmlEditorTabCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client ActiveTabChanging event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event's source.
    ///</param>
    ///<param name = "e" type = "ASPxClientHtmlEditorTabCancelEventArgs">
    ///An ASPxClientHtmlEditorTabCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorTabCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the cancellable ActiveTabChanging event that concerns manipulations on tabs.
    ///</summary>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event, should be canceled. Value: true, if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies an editor tab. Value: A string value that is the tab name.
    ///</field>
};
ASPxClientHtmlEditorBeforePasteEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BeforePaste event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the HTML editor object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientHtmlEditorBeforePasteEventArgs">
    ///An ASPxClientHtmlEditorBeforePasteEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorBeforePasteEventArgs = function() {
    ///<summary>
    ///Provides data for the BeforePaste event.
    ///</summary>
    ///<field name = "commandName" type = "String">
    ///Gets the name of the processed command. Value: A string value identifying the command's name.
    ///</field>
    ///<field name = "html" type = "String">
    ///Gets or sets the HTML markup that is about to be pasted to the ASPxHtmlEditor's content. Value: A string value that specifies the HTML content to paste.
    ///</field>
};
ASPxClientHtmlEditor = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxHtmlEditor control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DialogInitialized" type = "ASPxClientEvent">
    ///Occurs on the client side after a dialog has been initialized.
    ///</field>
    ///<field name = "DialogClosing" type = "ASPxClientEvent">
    ///Fires on the client side before a dialog is going to be closed.
    ///</field>
    ///<field name = "DialogClosed" type = "ASPxClientEvent">
    ///Occurs on the client side after a dialog is closed.
    ///</field>
    ///<field name = "CommandExecuting" type = "ASPxClientEvent">
    ///Occurs before a default or custom command has been executed and allows you to cancel the action.
    ///</field>
    ///<field name = "CustomCommand" type = "ASPxClientEvent">
    ///Enables you to implement a custom command's logic.
    ///</field>
    ///<field name = "CommandExecuted" type = "ASPxClientEvent">
    ///Occurs after a default or custom command has been executed on the client side.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's Design View Area receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's Design View Area loses input focus.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Occurs on the client when a selection is changed within the ASPxHtmlEditor.
    ///</field>
    ///<field name = "HtmlChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the content of the editor changes.
    ///</field>
    ///<field name = "CustomDialogOpened" type = "ASPxClientEvent">
    ///Occurs on the client side after a custom dialog is opened.
    ///</field>
    ///<field name = "CustomDialogClosing" type = "ASPxClientEvent">
    ///Fires on the client side before a custom dialog is closed.
    ///</field>
    ///<field name = "CustomDialogClosed" type = "ASPxClientEvent">
    ///Occurs on the client side after a custom dialog is closed.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the ASPxHtmlEditor is valid.
    ///</field>
    ///<field name = "ContextMenuShowing" type = "ASPxClientEvent">
    ///Occurs on the client side before a context menu is shown.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientHtmlEditor.
    ///</field>
    ///<field name = "CustomDataCallback" type = "ASPxClientEvent">
    ///Fires after a callback, sent by the CustomDataCallback event handler.
    ///</field>
    ///<field name = "SpellingChecked" type = "ASPxClientEvent">
    ///Occurs on the client side after the editor content is spell checked.
    ///</field>
    ///<field name = "ActiveTabChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the active tab has been changed within a control.
    ///</field>
    ///<field name = "ActiveTabChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the active tab is changed within a control.
    ///</field>
    ///<field name = "BeforePaste" type = "ASPxClientEvent">
    ///Occurs before an HTML code is pasted to editor content, and allows you to modify it.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientHtmlEditorDialogBase = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorEditElementDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorLinkDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorPlaceholderDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorPasteFromWordDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorMediaDialogBase = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorImageDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorFlashDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorAudioDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorVideoDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorYouTubeDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorTableDialogBase = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorTableDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorInsertTableDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorTableElementPropertiesDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorTableCellPropertiesDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorTableRowPropertiesDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorTableColumnPropertiesDialog = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHtmlEditorMediaPreloadMode = function() {
    ///<summary>
    ///Lists the values that specify how a media file should be loaded when the page loads.
    ///</summary>
    ///<field name = "None" type = "String" static = "true">
    ///The browser does not load a media file when the page loads.
    ///</field>
    ///<field name = "Auto" type = "String" static = "true">
    ///The browser loads the entire video when the page loads.
    ///</field>
    ///<field name = "Metadata" type = "String" static = "true">
    ///The browser loads only metadata when the page loads.
    ///</field>
};
ASPxClientHtmlEditorSelection = function() {
    ///<summary>
    ///A selection in the ASPxHtmlEditor.
    ///</summary>
};
ASPxClientPivotGrid = function() {
    ///<summary>
    ///The client-side equivalent of the ASPxPivotGrid control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientPivotGrid.
    ///</field>
    ///<field name = "AfterCallback" type = "ASPxClientEvent">
    ///Fires after a callback that has been processed on the server returns back to the client.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "BeforeCallback" type = "ASPxClientEvent">
    ///Fires before a callback is sent to the server for server-side processing.
    ///</field>
    ///<field name = "CustomizationFieldsVisibleChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the customization form's visible state has been changed.
    ///</field>
    ///<field name = "CellClick" type = "ASPxClientEvent">
    ///Occurs when a cell is clicked.
    ///</field>
    ///<field name = "CellDblClick" type = "ASPxClientEvent">
    ///Occurs when a cell is double clicked.
    ///</field>
    ///<field name = "PopupMenuItemClick" type = "ASPxClientEvent">
    ///Occurs when a custom menu item has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CellDblClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientClickEventArgs">
    ///An ASPxClientClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientClickEventArgs = function() {
    ///<summary>
    ///Provides data for the CellDblClick client events.
    ///</summary>
    ///<field name = "HtmlEvent" type = "Object">
    ///Provides access to the parameters associated with the CellDblClick events. Value: An object that contains parameters associated with the CellDblClick events.
    ///</field>
    ///<field name = "Value" type = "Object">
    ///Gets the processed cell's value. Value: An object that represents the processed cell's value.
    ///</field>
    ///<field name = "ColumnIndex" type = "Int32">
    ///Gets the index of a column that owns the processed cell. Value: An integer value that identifies a column.
    ///</field>
    ///<field name = "RowIndex" type = "Int32">
    ///Gets the index of a row that owns the processed cell. Value: An integer value that identifies a row.
    ///</field>
    ///<field name = "ColumnValue" type = "Object">
    ///Gets a column field value. Value: An object that represents a column field value.
    ///</field>
    ///<field name = "RowValue" type = "Object">
    ///Gets a row field value. Value: An object that represents a row field value.
    ///</field>
    ///<field name = "ColumnFieldName" type = "String">
    ///Gets a column field name. Value: A String value that represents a column field name.
    ///</field>
    ///<field name = "RowFieldName" type = "String">
    ///Gets a row field name. Value: A String value that represents a row field name.
    ///</field>
    ///<field name = "ColumnValueType" type = "String">
    ///Gets a column value type. Value: A String value that represents a column value type.
    ///</field>
    ///<field name = "RowValueType" type = "String">
    ///Gets a row value type. Value: A String value that represents a row value type.
    ///</field>
    ///<field name = "DataIndex" type = "Int32">
    ///Gets the index of the data field which corresponds to the clicked summary value. Value: An integer value that identifies the data field.
    ///</field>
};
ASPxClientPivotMenuItemClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the PopupMenuItemClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientPivotMenuItemClickEventArgs">
    ///An ASPxClientPivotMenuItemClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotMenuItemClickEventArgs = function() {
    ///<summary>
    ///Provides data for the PopupMenuItemClick event.
    ///</summary>
    ///<field name = "MenuType" type = "String">
    ///Gets the context menu's type. Value: A PivotGridPopupMenuType enumeration value that identifies the context menu.
    ///</field>
    ///<field name = "MenuItemName" type = "String">
    ///Gets the name of the menu item currently being clicked. Value: A String value that identifies the clicked item by its name.
    ///</field>
    ///<field name = "FieldID" type = "String">
    ///Gets the field's unique indentifier. Value: A string which specifies the field's unique indentifier.
    ///</field>
    ///<field name = "FieldValueIndex" type = "Int32">
    ///Gets the index of the field value for which the popup menu has been invoked. Value: An integer value that identifies the field value.
    ///</field>
};
ASPxClientPivotCustomization = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxPivotCustomizationControl control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientRichEditCustomCommandExecutedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomCommandExecuted event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the RichEdit that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientRichEditCustomCommandExecutedEventArgs">
    ///A ASPxClientRichEditCustomCommandExecutedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRichEditCustomCommandExecutedEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomCommandExecuted event.
    ///</summary>
    ///<field name = "commandName" type = "String">
    ///Gets the name of the processed command. Value: A string value representing the processed command's name.
    ///</field>
    ///<field name = "parameter" type = "Object">
    ///Gets an optional parameter that complements the processed command. Value: A string value containing additional information about the processed command.
    ///</field>
};
ASPxClientRichEditHyperlinkClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the HyperlinkClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientRichEditHyperlinkClickEventArgs">
    ///An ASPxClientRichEditHyperlinkClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRichEditHyperlinkClickEventArgs = function() {
    ///<summary>
    ///Provides data for the HyperlinkClick event.
    ///</summary>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets whether the event is handled manually, so no default processing is required. Value: true if the event is handled and no default processing is required; otherwise false.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "hyperlinkType" type = "ASPxClientOfficeDocumentLinkType">
    ///Gets a value identifying the clicked hyperlink type. Value: One of the <see cref="ASPxClientOfficeDocumentLinkType" /> values.
    ///</field>
    ///<field name = "targetUri" type = "String">
    ///Gets the clicked link's URI. Value: A sting value specifying the link's URI.
    ///</field>
};
ASPxClientRichEdit = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxRichEdit object.
    ///</summary>
    ///<field name = "document" type = "RichEditDocument">
    ///Provides access to document structural elements. Value: A <see cref="RichEditDocument" /> object that lists RichEdit's document structural elements.
    ///</field>
    ///<field name = "commands" type = "RichEditCommands">
    ///Provides access to RichEdit's client-side commands. Value: A <see cref="RichEditCommands" /> object that lists RichEdit's client-side commands.
    ///</field>
    ///<field name = "selection" type = "RichEditSelection">
    ///Provides access to the client methods that changes the selection. Value: A <see cref="RichEditSelection" /> object that lists methods to work with the selection.
    ///</field>
    ///<field name = "unitConverter" type = "RichEditUnitConverter">
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CustomCommandExecuted" type = "ASPxClientEvent">
    ///Occurs after a custom command has been executed on the client side.
    ///</field>
    ///<field name = "BeginSynchronization" type = "ASPxClientEvent">
    ///Fires after a client change has been made to the document and the client-server synchronization starts to apply the change on the server.
    ///</field>
    ///<field name = "EndSynchronization" type = "ASPxClientEvent">
    ///Fires after a document change has been applied to the server and server and client document models have been synchronized.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the RichEdit.
    ///</field>
    ///<field name = "DocumentChanged" type = "ASPxClientEvent">
    ///Fires if any change is made to the RichEdit's document on the client.
    ///</field>
    ///<field name = "HyperlinkClick" type = "ASPxClientEvent">
    ///Occurs when a hyperlink is clicked within the document.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Occurs when the selection is changed within the document.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
RichEditCommands = function() {
    ///<summary>
    ///Contains a set of the available client commands.
    ///</summary>
    ///<field name = "fileNew" type = "FileNewCommand">
    ///Gets a command to create a new empty document. Value: A <see cref="FileNewCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "fileOpen" type = "FileOpenCommand">
    ///Gets a command to open the file, specifying its path. Value: A <see cref="FileOpenCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "fileOpenDialog" type = "FileOpenDialogCommand">
    ///Gets a command to invoke the File Open dialog allowing one to select and load a document file into RichEdit. Value: A <see cref="FileOpenDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "fileSave" type = "FileSaveCommand">
    ///Gets a command to save the document to a file. Value: A <see cref="FileSaveCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "fileDownload" type = "FileDownloadCommand">
    ///Gets a command to download the document file, specifying its extension. Value: A <see cref="FileDownloadCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "fileSaveAs" type = "FileSaveAsCommand">
    ///Gets a command to invoke the Save As dialog that prompts for a file name and saves the current document in a file with the specified path. Value: A <see cref="FileSaveAsCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "fileSaveAsDialog" type = "FileSaveAsDialogCommand">
    ///</field>
    ///<field name = "filePrint" type = "FilePrintCommand">
    ///Gets a command to invoke a browser-specific Print dialog allowing one to print the current document. Value: A <see cref="FilePrintCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "undo" type = "UndoCommand">
    ///Gets a command to cancel changes caused by the previous command. Value: A <see cref="UndoCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "redo" type = "RedoCommand">
    ///Gets a command to reverse actions of the previous undo command. Value: A <see cref="RedoCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "copy" type = "CopyCommand">
    ///Gets a command to copy the selected text and place it to the clipboard. Value: A <see cref="CopyCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "paste" type = "PasteCommand">
    ///Gets a command to paste the text from the clipboard over the selection. Value: A <see cref="PasteCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "cut" type = "CutCommand">
    ///Gets a command to cut the selected text and place it to the clipboard. Value: A <see cref="CutCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeFontName" type = "ChangeFontNameCommand">
    ///Gets a command to change the font name of characters in a selected range. Value: A <see cref="ChangeFontNameCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeFontSize" type = "ChangeFontSizeCommand">
    ///Gets a command to change the font size of characters in a selected range. Value: A <see cref="ChangeFontSizeCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "increaseFontSize" type = "IncreaseFontSizeCommand">
    ///Gets a command to increase the font size of characters in a selected range to the closest larger predefined value. Value: A <see cref="IncreaseFontSizeCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "decreaseFontSize" type = "DecreaseFontSizeCommand">
    ///Gets a command to decrease the selected range's font size to the closest smaller predefined value. Value: A <see cref="DecreaseFontSizeCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "makeTextUpperCase" type = "MakeTextUpperCaseCommand">
    ///Gets a command to convert selected text to upper case. Value: A <see cref="MakeTextUpperCaseCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "makeTextLowerCase" type = "MakeTextLowerCaseCommand">
    ///Gets a command to convert selected text to lower case. Value: A <see cref="MakeTextLowerCaseCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "capitalizeEachWordTextCase" type = "CapitalizeEachWordTextCaseCommand">
    ///Gets a command to capitalize each word in the selected sentence. Value: A <see cref="CapitalizeEachWordTextCaseCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTextCase" type = "ToggleTextCaseCommand">
    ///Gets a command to toggle case for each character - upper case becomes lower, lower case becomes upper. Value: A <see cref="ToggleTextCaseCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeFontBold" type = "ChangeFontBoldCommand">
    ///Gets a command to change the bold formatting of characters in a selected range. Value: A <see cref="ChangeFontBoldCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeFontItalic" type = "ChangeFontItalicCommand">
    ///Gets a command to change the italic formatting of characters in a selected range. Value: A <see cref="ChangeFontItalicCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeFontUnderline" type = "ChangeFontUnderlineCommand">
    ///Gets a command to change the underline formatting of characters in a selected range. Value: A <see cref="ChangeFontUnderlineCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeFontStrikeout" type = "ChangeFontStrikeoutCommand">
    ///Gets a command to change the strikeout formatting of characters in a selected range. Value: A <see cref="ChangeFontStrikeoutCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeFontSuperscript" type = "ChangeFontSuperscriptCommand">
    ///Gets a command to change the superscript formatting of characters in a selected range. Value: A <see cref="ChangeFontSuperscriptCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeFontSubscript" type = "ChangeFontSubscriptCommand">
    ///Gets a command to change the subscript formatting of characters in the selected range. Value: A <see cref="ChangeFontSubscriptCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeFontForeColor" type = "ChangeFontForeColorCommand">
    ///Gets a command to change the font color of characters in a selected range. Value: A <see cref="ChangeFontForeColorCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeFontBackColor" type = "ChangeFontBackColorCommand">
    ///Gets a command to change the background color of characters in a selected range. Value: A <see cref="ChangeFontBackColorCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "clearFormatting" type = "ClearFormattingCommand">
    ///Gets a command to reset the selected text's formatting to default. Value: A <see cref="ClearFormattingCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeStyle" type = "ChangeStyleCommand">
    ///Gets a command to change the selected range's style. Value: A <see cref="ChangeStyleCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleBulletedList" type = "ToggleBulletedListCommand">
    ///Gets a command to toggle between the bulleted paragraph and normal text. Value: A <see cref="ToggleBulletedListCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleNumberingList" type = "ToggleNumberingListCommand">
    ///Gets a command to toggle between the numbered paragraph and normal text. Value: A <see cref="ToggleNumberingListCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleMultilevelList" type = "ToggleMultilevelListCommand">
    ///Gets a command to toggle between the multilevel list style and normal text. Value: A <see cref="ToggleMultilevelListCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "increaseIndent" type = "IncreaseIndentCommand">
    ///Gets a command to increment the indent level of paragraphs in a selected range. Value: A <see cref="IncreaseIndentCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "decreaseIndent" type = "DecreaseIndentCommand">
    ///Gets a command to decrement the indent level of paragraphs in a selected range. Value: A <see cref="DecreaseIndentCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "showHiddenSymbols" type = "ShowHiddenSymbolsCommand">
    ///Gets a command to toggle hidden symbol visibility. Value: A <see cref="ShowHiddenSymbolsCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleParagraphAlignmentLeft" type = "ToggleParagraphAlignmentLeftCommand">
    ///Gets a command to toggle left paragraph alignment on and off. Value: A <see cref="ToggleParagraphAlignmentLeftCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleParagraphAlignmentCenter" type = "ToggleParagraphAlignmentCenterCommand">
    ///Gets a command to toggle centered paragraph alignment on and off. Value: A <see cref="ToggleParagraphAlignmentCenterCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleParagraphAlignmentRight" type = "ToggleParagraphAlignmentRightCommand">
    ///Gets a command to toggle right paragraph alignment on and off. Value: A <see cref="ToggleParagraphAlignmentRightCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleParagraphAlignmentJustify" type = "ToggleParagraphAlignmentJustifyCommand">
    ///Gets a command to toggle justified paragraph alignment on and off. Value: A <see cref="ToggleParagraphAlignmentJustifyCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "setSingleParagraphSpacing" type = "SetSingleParagraphSpacingCommand">
    ///Gets a command to format a current paragraph with single line spacing. Value: A <see cref="SetSingleParagraphSpacingCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "setSesquialteralParagraphSpacing" type = "SetSesquialteralParagraphSpacingCommand">
    ///Gets a command to format a current paragraph with one and a half line spacing. Value: A <see cref="SetSesquialteralParagraphSpacingCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "setDoubleParagraphSpacing" type = "SetDoubleParagraphSpacingCommand">
    ///Gets a command to format a selected paragraph with double line spacing. Value: A <see cref="SetDoubleParagraphSpacingCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "addSpacingBeforeParagraph" type = "AddSpacingBeforeParagraphCommand">
    ///Gets a command to add spacing before a paragraph. Value: A <see cref="AddSpacingBeforeParagraphCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "addSpacingAfterParagraph" type = "AddSpacingAfterParagraphCommand">
    ///Gets a command to add spacing after a paragraph. Value: A <see cref="AddSpacingAfterParagraphCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "removeSpacingBeforeParagraph" type = "RemoveSpacingBeforeParagraphCommand">
    ///Gets a command to remove spacing before the selected paragraph. Value: A <see cref="RemoveSpacingBeforeParagraphCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "removeSpacingAfterParagraph" type = "RemoveSpacingAfterParagraphCommand">
    ///Gets a command to remove spacing after the selected paragraph. Value: A <see cref="RemoveSpacingAfterParagraphCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeParagraphBackColor" type = "ChangeParagraphBackColorCommand">
    ///Gets a command to change the background color of paragraphs in a selected range. Value: A <see cref="ChangeParagraphBackColorCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openFontFormattingDialog" type = "OpenFontFormattingDialogCommand">
    ///Gets a command to invoke the Font dialog window. Value: A <see cref="OpenFontFormattingDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeFontFormatting" type = "ChangeFontFormattingCommand">
    ///Gets a command to change the font formatting of characters in a selected range. Value: A <see cref="ChangeFontFormattingCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openParagraphFormattingDialog" type = "OpenParagraphFormattingDialogCommand">
    ///Gets a command to invoke the Indents And Spacing tab of the Paragraph dialog window. Value: A <see cref="OpenParagraphFormattingDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeParagraphFormatting" type = "ChangeParagraphFormattingCommand">
    ///Gets a command to change the formatting of paragraphs in a selected range. Value: A <see cref="ChangeParagraphFormattingCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertPageBreak" type = "InsertPageBreakCommand">
    ///Gets a command to insert a page break at the current position in the document. Value: A <see cref="InsertPageBreakCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openInsertTableDialog" type = "OpenInsertTableDialogCommand">
    ///Gets a command to invoke the Insert Table dialog window. Value: A <see cref="OpenInsertTableDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertTable" type = "InsertTableCommand">
    ///Gets a command to invoke the Insert Table dialog window. Value: A <see cref="InsertTableCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openInsertPictureDialog" type = "OpenInsertPictureDialogCommand">
    ///Gets a command to invoke the Insert Image dialog window. Value: A <see cref="OpenInsertPictureDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertPicture" type = "InsertPictureCommand">
    ///Gets a command to insert a picture from a file. Value: A <see cref="InsertPictureCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openInsertBookmarkDialog" type = "OpenInsertBookmarkDialogCommand">
    ///Gets a command to invoke the Bookmark dialog window. Value: A <see cref="OpenInsertBookmarkDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertBookmark" type = "InsertBookmarkCommand">
    ///Gets a command to insert a new bookmark that references the current selection. Value: A <see cref="InsertBookmarkCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "deleteBookmark" type = "DeleteBookmarkCommand">
    ///A command to delete a specific bookmark. Value: A <see cref="DeleteBookmarkCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "goToBookmark" type = "GoToBookmarkCommand">
    ///Gets a command to navigate to the specified bookmark. Value: A <see cref="GoToBookmarkCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openInsertHyperlinkDialog" type = "OpenInsertHyperlinkDialogCommand">
    ///Gets a command to invoke the Hyperlink dialog window. Value: A <see cref="OpenInsertHyperlinkDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertHyperlink" type = "InsertHyperlinkCommand">
    ///Gets a command to insert a hyperlink at the current position in the document. Value: A <see cref="InsertHyperlinkCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "deleteHyperlink" type = "DeleteHyperlinkCommand">
    ///Gets a command to delete the selected hyperlink. Value: A <see cref="DeleteHyperlinkCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "deleteHyperlinks" type = "DeleteHyperlinksCommand">
    ///Gets a command to delete all hyperlinks in the selected range. Value: A <see cref="DeleteHyperlinksCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openHyperlink" type = "OpenHyperlinkCommand">
    ///Gets a command to navigate to the document bookmark or URI (uniform resource identifier) specified for the hyperlink. Value: A <see cref="OpenHyperlinkCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openInsertSymbolDialog" type = "OpenInsertSymbolDialogCommand">
    ///Gets a command to invoke the Symbols dialog window. Value: A <see cref="OpenInsertSymbolDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertSymbol" type = "InsertSymbolCommand">
    ///Gets a command to insert a character into a document. Value: A <see cref="InsertSymbolCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changePageMargins" type = "ChangePageMarginsCommand">
    ///Gets a command to change page margin settings. Value: A <see cref="ChangePageMarginsCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openPageMarginsDialog" type = "OpenPageMarginsDialogCommand">
    ///Gets a command to invoke the Margins tab of the Page Setup dialog window. Value: A <see cref="OpenPageMarginsDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changePageOrientation" type = "ChangePageOrientationCommand">
    ///Gets a command to change the page orientation. Value: A <see cref="ChangePageOrientationCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "setPageSizeDialog" type = "SetPageSizeDialogCommand">
    ///Gets a command to define the page size dialog's settings. Value: A <see cref="SetPageSizeDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openPagePaperSizeDialog" type = "OpenPagePaperSizeDialogCommand">
    ///Gets a command to invoke the Paper tab of the Page Setup dialog window. Value: A <see cref="OpenPagePaperSizeDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changePageSize" type = "ChangePageSizeCommand">
    ///Gets a command to change the page size. Value: A <see cref="ChangePageSizeCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeSectionEqualColumnCount" type = "ChangeSectionEqualColumnCountCommand">
    ///Gets a command to change the number of section columns having the same width. Value: A <see cref="ChangeSectionEqualColumnCountCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openSectionColumnsDialog" type = "OpenSectionColumnsDialogCommand">
    ///Gets a command to invoke the Columns dialog window. Value: A <see cref="OpenSectionColumnsDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeSectionColumns" type = "ChangeSectionColumnsCommand">
    ///Gets a command to change the settings of individual section columns. Value: A <see cref="ChangeSectionColumnsCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertColumnBreak" type = "InsertColumnBreakCommand">
    ///Gets a command to insert a column break at the current position in the document. Value: A <see cref="InsertColumnBreakCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertSectionBreakNextPage" type = "InsertSectionBreakNextPageCommand">
    ///Gets a command to insert a section break and starts a new section on the next page. Value: A <see cref="InsertSectionBreakNextPageCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertSectionBreakEvenPage" type = "InsertSectionBreakEvenPageCommand">
    ///Gets a command to insert a section break and starts a new section on the next even-numbered page. Value: A <see cref="InsertSectionBreakEvenPageCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertSectionBreakOddPage" type = "InsertSectionBreakOddPageCommand">
    ///Gets a command to insert a section break and starts a new section on the next odd-numbered page. Value: A <see cref="InsertSectionBreakOddPageCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changePageColor" type = "ChangePageColorCommand">
    ///Gets a command to set the background color of the page. Value: A <see cref="ChangePageColorCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "showHorizontalRuler" type = "ShowHorizontalRulerCommand">
    ///Gets a command to toggle the horizontal ruler's visibility. Value: A <see cref="ShowHorizontalRulerCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "setFullscreen" type = "SetFullscreenCommand">
    ///Gets a command to toggle the fullscreen mode. Value: A <see cref="SetFullscreenCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openNumberingListDialog" type = "OpenNumberingListDialogCommand">
    ///Gets a command to invoke the Bulleted and Numbering dialog window. Value: A <see cref="OpenNumberingListDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertParagraph" type = "InsertParagraphCommand">
    ///Gets a command to insert a paragraph break at the current position in the document. Value: A <see cref="InsertParagraphCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertText" type = "InsertTextCommand">
    ///Gets a command to insert text at the current position in a document. Value: A <see cref="InsertTextCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "delete" type = "DeleteCommand">
    ///Gets a command to delete the text in a selected range. Value: A <see cref="DeleteCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "removePrevWord" type = "RemovePrevWordCommand">
    ///Gets a command to remove the previous word. Value: A <see cref="RemovePrevWordCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "removeNextWord" type = "RemoveNextWordCommand">
    ///Gets a command to remove the next word. Value: A <see cref="RemoveNextWordCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "backspace" type = "BackspaceCommand">
    ///Gets a command to move the cursor backwards and erase the character in that space. Value: A <see cref="BackspaceCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertLineBreak" type = "InsertLineBreakCommand">
    ///Gets a command to insert the line break at the current position in the document. Value: A <see cref="InsertLineBreakCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changePictureScale" type = "ChangePictureScaleCommand">
    ///Gets a command to scale pictures in a selected range. Value: A <see cref="ChangePictureScaleCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "incrementParagraphLeftIndent" type = "IncrementParagraphLeftIndentCommand">
    ///Gets a command to increment the left indentation of paragraphs in a selected range. Value: A <see cref="IncrementParagraphLeftIndentCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "decrementParagraphLeftIndent" type = "DecrementParagraphLeftIndentCommand">
    ///Gets a command to decrement the paragraph's left indent position. Value: A <see cref="DecrementParagraphLeftIndentCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "moveContent" type = "MoveContentCommand">
    ///Gets a command to move the selected range. Value: A <see cref="MoveContentCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "copyContent" type = "CopyContentCommand">
    ///Gets a command to copy the selected text and place it to the specified position. Value: A <see cref="CopyContentCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertTab" type = "InsertTabCommand">
    ///Gets a command to insert a tab character at the current position in the document. Value: A <see cref="InsertTabCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openTabsDialog" type = "OpenTabsDialogCommand">
    ///Gets a command to invoke the Tabs dialog window. Value: A <see cref="OpenTabsDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeTabs" type = "ChangeTabsCommand">
    ///Gets a command to change paragraph tab stops. Value: A <see cref="ChangeTabsCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openCustomNumberingListDialog" type = "OpenCustomNumberingListDialogCommand">
    ///Gets a command to invoke the Customize Numbered List dialog window. Value: A <see cref="OpenCustomNumberingListDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeCustomNumberingList" type = "ChangeCustomNumberingListCommand">
    ///Gets a command to customize the numbered list parameters. Value: A <see cref="ChangeCustomNumberingListCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "restartNumberingList" type = "RestartNumberingListCommand">
    ///Gets a command to restart the numbering list. Value: A <see cref="RestartNumberingListCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "incrementNumberingIndent" type = "IncrementNumberingIndentCommand">
    ///Gets a command to increment the indent level of paragraphs in a selected numbered list. Value: A <see cref="IncrementNumberingIndentCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "decrementNumberingIndent" type = "DecrementNumberingIndentCommand">
    ///Gets a command to decrement the indent level of paragraphs in a selected numbered list. Value: A <see cref="DecrementNumberingIndentCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "createField" type = "CreateFieldCommand">
    ///Gets a command to create an empty field in the document. Value: A <see cref="CreateFieldCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "updateField" type = "UpdateFieldCommand">
    ///Gets a command to update the field's result. Value: A <see cref="UpdateFieldCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "showFieldCodes" type = "ShowFieldCodesCommand">
    ///Gets a command to display the selected field's codes. Value: A <see cref="ShowFieldCodesCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "showAllFieldCodes" type = "ShowAllFieldCodesCommand">
    ///Get a command to display all field codes in place of the fields in the document. Value: A <see cref="ShowAllFieldCodesCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "continueNumberingList" type = "ContinueNumberingListCommand">
    ///Gets a command to continue the list's numbering. Value: A <see cref="ContinueNumberingListCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertNumeration" type = "InsertNumerationCommand">
    ///Gets a command to insert numeration to a paragraph making it a numbering list item. Value: A <see cref="InsertNumerationCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "removeNumeration" type = "RemoveNumerationCommand">
    ///Gets a command to remove the selected numeration. Value: A <see cref="RemoveNumerationCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "updateAllFields" type = "UpdateAllFieldsCommand">
    ///Gets a command to update all fields in the selected range. Value: A <see cref="UpdateAllFieldsCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "createDateField" type = "CreateDateFieldCommand">
    ///Gets a command to insert a DATE field displaying the current date. Value: A <see cref="CreateDateFieldCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "createTimeField" type = "CreateTimeFieldCommand">
    ///Gets a command to insert a TIME field displaying the current time. Value: A <see cref="CreateTimeFieldCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "createPageField" type = "CreatePageFieldCommand">
    ///A command to insert a PAGE field displaying the current page number. Value: A <see cref="CreatePageFieldCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "makeTextSentenceCase" type = "MakeTextSentenceCaseCommand">
    ///Gets a command to convert the text of all selected sentences to sentence case. Value: A <see cref="MakeTextSentenceCaseCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "switchTextCase" type = "SwitchTextCaseCommand">
    ///Gets a command to switch the text case at the current position in the document. Value: A <see cref="SwitchTextCaseCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "goToFirstDataRecord" type = "GoToFirstDataRecordCommand">
    ///Gets a command to navigate to the first data record. Value: A <see cref="GoToFirstDataRecordCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "goToPreviousDataRecord" type = "GoToPreviousDataRecordCommand">
    ///Gets a command to navigate to the previous data record of the bound data source. Value: A <see cref="GoToPreviousDataRecordCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "goToNextDataRecord" type = "GoToNextDataRecordCommand">
    ///Gets a command to navigate to the next data record of the bound data source. Value: A <see cref="GoToNextDataRecordCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "goToDataRecord" type = "GoToDataRecordCommand">
    ///Gets a command to navigate to the next data record. Value: A <see cref="GoToDataRecordCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "goToLastDataRecord" type = "GoToLastDataRecordCommand">
    ///Gets a command to navigate to the last data record of the bound data source. Value: A <see cref="GoToLastDataRecordCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "showMergedData" type = "ShowMergedDataCommand">
    ///Gets a command to display or hide actual data in MERGEFIELD fields. Value: A <see cref="ShowMergedDataCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "mergeFieldDialog" type = "MergeFieldDialogCommand">
    ///Gets a command to invoke the Insert Merge Field dialog window. Value: A <see cref="MergeFieldDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "createMergeField" type = "CreateMergeFieldCommand">
    ///Gets a command to insert a MERGEFIELD field (with a data source column name) at the current position in the document. Value: A <see cref="CreateMergeFieldCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "mailMergeDialog" type = "MailMergeDialogCommand">
    ///Gets a command to invoke the Export Range dialog window to start a mail merge. Value: A <see cref="MailMergeDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "mailMergeAndDownload" type = "MailMergeAndDownloadCommand">
    ///Gets a command to perform a mail merge and download the merged document. Value: A <see cref="MailMergeAndDownloadCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "mailMergeAndSaveAs" type = "MailMergeAndSaveAsCommand">
    ///Gets a command to perform a mail merge and save the merged document to the server. Value: A <see cref="MailMergeAndSaveAsCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertHeader" type = "InsertHeaderCommand">
    ///Gets a command to activate the page header and begin editing. Value: A <see cref="InsertHeaderCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertFooter" type = "InsertFooterCommand">
    ///Gets a command to activate the page footer and begin editing. Value: A <see cref="InsertFooterCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "linkHeaderFooterToPrevious" type = "LinkHeaderFooterToPreviousCommand">
    ///Gets a command to link a header/footer to the previous section, so it has the same content. Value: A <see cref="LinkHeaderFooterToPreviousCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "goToFooter" type = "GoToFooterCommand">
    ///Gets a command to navigate to the page footer from the page header in the header/footer editing mode. Value: A <see cref="GoToFooterCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "goToHeader" type = "GoToHeaderCommand">
    ///Gets a command to navigate to the page header from the page footer in the header/footer editing mode. Value: A <see cref="GoToHeaderCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "goToNextHeaderFooter" type = "GoToNextHeaderFooterCommand">
    ///Gets a command to navigate to the next page header or footer in the header/footer editing mode. Value: A <see cref="GoToNextHeaderFooterCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "goToPreviousHeaderFooter" type = "GoToPreviousHeaderFooterCommand">
    ///Gets a command to navigate to the previous page header or footer in the header/footer editing mode. Value: A <see cref="GoToPreviousHeaderFooterCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "setDifferentFirstPageHeaderFooter" type = "SetDifferentFirstPageHeaderFooterCommand">
    ///Gets a command to change the header/footer edit mode, so it allows creation of a different header or footer for the first page of a document or section. Value: A <see cref="SetDifferentFirstPageHeaderFooterCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "setDifferentOddAndEvenPagesHeaderFooter" type = "SetDifferentOddAndEvenPagesHeaderFooterCommand">
    ///Gets a command to change the header/footer edit mode so it allows creation of a different header or footer for odd and even pages of a document or section. Value: A <see cref="SetDifferentOddAndEvenPagesHeaderFooterCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "closeHeaderFooter" type = "CloseHeaderFooterCommand">
    ///Gets a command to finish header/footer editing. Value: A <see cref="CloseHeaderFooterCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "createPageCountField" type = "CreatePageCountFieldCommand">
    ///Gets a command to insert a NUMPAGES field displaying the total number of pages. Value: A <see cref="CreatePageCountFieldCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openTableFormattingDialog" type = "OpenTableFormattingDialogCommand">
    ///Gets a command to invoke the Table tab of the Table Properties dialog window. Value: A <see cref="OpenTableFormattingDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeTableFormatting" type = "ChangeTableFormattingCommand">
    ///Gets a command to change the selected table's formatting. Value: A <see cref="ChangeTableFormattingCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeTableRowPreferredHeight" type = "ChangeTableRowPreferredHeightCommand">
    ///Gets a command to change the selected table rows' preferred height. Value: A <see cref="ChangeTableRowPreferredHeightCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeTableCellPreferredWidth" type = "ChangeTableCellPreferredWidthCommand">
    ///Gets a command to change the preferred cell width of the selected table rows. Value: A <see cref="ChangeTableCellPreferredWidthCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellInsideBorders" type = "ToggleTableCellInsideBordersCommand">
    ///Gets a command to toggle inside borders for selected cells on/off. Value: A <see cref="ToggleTableCellInsideBordersCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeTableColumnPreferredWidth" type = "ChangeTableColumnPreferredWidthCommand">
    ///Gets a command to change the selected table columns' preferred width. Value: A <see cref="ChangeTableColumnPreferredWidthCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeTableCellFormatting" type = "ChangeTableCellFormattingCommand">
    ///Gets a command to change the cell formatting of the selected table elements. Value: A <see cref="ChangeTableCellFormattingCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertTableColumnToTheLeft" type = "InsertTableColumnToTheLeftCommand">
    ///Gets a command to insert a table column to the left of the current position in the table. Value: A <see cref="InsertTableColumnToTheLeftCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertTableColumnToTheRight" type = "InsertTableColumnToTheRightCommand">
    ///Gets a command to insert a table column to the right of the current position in the table. Value: A <see cref="InsertTableColumnToTheRightCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertTableRowBelow" type = "InsertTableRowBelowCommand">
    ///Gets a command to insert a row in the table below the selected row. Value: A <see cref="InsertTableRowBelowCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertTableRowAbove" type = "InsertTableRowAboveCommand">
    ///Gets a command to insert a row in the table above the selected row. Value: A <see cref="InsertTableRowAboveCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "deleteTableRows" type = "DeleteTableRowsCommand">
    ///Gets a command to delete the selected rows in the table. Value: A <see cref="DeleteTableRowsCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "deleteTableColumns" type = "DeleteTableColumnsCommand">
    ///Gets a command to delete the selected columns in the table. Value: A <see cref="DeleteTableColumnsCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertTableCellWithShiftToTheLeft" type = "InsertTableCellWithShiftToTheLeftCommand">
    ///Gets a command to insert table cells with a horizontal shift into the selected table. Value: A <see cref="InsertTableCellWithShiftToTheLeftCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "deleteTableCellsWithShiftHorizontally" type = "DeleteTableCellsWithShiftHorizontallyCommand">
    ///Gets a command to delete the selected table cells with a horizontal shift. Value: A <see cref="DeleteTableCellsWithShiftHorizontallyCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "deleteTableCellsWithShiftVertically" type = "DeleteTableCellsWithShiftVerticallyCommand">
    ///Gets a command to delete the selected table cells with a vertical shift. Value: A <see cref="DeleteTableCellsWithShiftVerticallyCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "deleteTable" type = "DeleteTableCommand">
    ///Gets a command to delete the selected table. Value: A <see cref="DeleteTableCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertTableCellsDialog" type = "InsertTableCellsDialogCommand">
    ///Gets a command to invoke the Insert Cells dialog window. Value: A <see cref="InsertTableCellsDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "deleteTableCellsDialog" type = "DeleteTableCellsDialogCommand">
    ///Gets a command to invoke the Delete Cells dialog window. Value: A <see cref="DeleteTableCellsDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "mergeTableCells" type = "MergeTableCellsCommand">
    ///Gets a command to merge the selected cells. Value: A <see cref="MergeTableCellsCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "splitTableCellsDialog" type = "SplitTableCellsDialogCommand">
    ///Gets a command to invoke the Split Cells dialog window. Value: A <see cref="SplitTableCellsDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "splitTableCells" type = "SplitTableCellsCommand">
    ///Gets a command to split the selected table cells. Value: A <see cref="SplitTableCellsCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "insertTableCellsWithShiftToTheVertically" type = "InsertTableCellsWithShiftToTheVerticallyCommand">
    ///Gets a command to insert table cells with a vertical shift into the selected table. Value: A <see cref="InsertTableCellsWithShiftToTheVerticallyCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openTableBordersAndShadingDialog" type = "OpenTableBordersAndShadingDialogCommand">
    ///Gets a command to invoke the Borders tab of the Borders and Shading dialog window. Value: A <see cref="OpenTableBordersAndShadingDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeTableBordersAndShading" type = "ChangeTableBordersAndShadingCommand">
    ///Gets a command to change the selected table's borders and shading. Value: A <see cref="ChangeTableBordersAndShadingCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellAlignTopLeft" type = "ToggleTableCellAlignTopLeftCommand">
    ///Gets a command to apply top-left alignment for the selected cells. Value: A <see cref="ToggleTableCellAlignTopLeftCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellAlignTopCenter" type = "ToggleTableCellAlignTopCenterCommand">
    ///Gets a command to apply top-center alignment for the selected cells. Value: A <see cref="ToggleTableCellAlignTopCenterCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellAlignTopRight" type = "ToggleTableCellAlignTopRightCommand">
    ///Gets a command to apply top-right alignment for the selected cells. Value: A <see cref="ToggleTableCellAlignTopRightCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellAlignMiddleLeft" type = "ToggleTableCellAlignMiddleLeftCommand">
    ///Gets a command to apply middle-left alignment for the selected cells. Value: A <see cref="ToggleTableCellAlignMiddleLeftCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellAlignMiddleCenter" type = "ToggleTableCellAlignMiddleCenterCommand">
    ///Gets a command to apply middle-center alignment for the selected cells. Value: A <see cref="ToggleTableCellAlignMiddleCenterCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellAlignMiddleRight" type = "ToggleTableCellAlignMiddleRightCommand">
    ///Gets a command to apply middle-right alignment for the selected cells. Value: A <see cref="ToggleTableCellAlignMiddleRightCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellAlignBottomLeft" type = "ToggleTableCellAlignBottomLeftCommand">
    ///Gets a command to apply bottom-left alignment for the selected cells. Value: A <see cref="ToggleTableCellAlignBottomLeftCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellAlignBottomCenter" type = "ToggleTableCellAlignBottomCenterCommand">
    ///Gets a command to apply bottom-center alignment for the selected cells. Value: A <see cref="ToggleTableCellAlignBottomCenterCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellAlignBottomRight" type = "ToggleTableCellAlignBottomRightCommand">
    ///Gets a command to apply bottom-right alignment for the selected cells. Value: A <see cref="ToggleTableCellAlignBottomRightCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeTableStyle" type = "ChangeTableStyleCommand">
    ///Gets a command to change the selected table's style. Value: A <see cref="ChangeTableStyleCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellTopBorder" type = "ToggleTableCellTopBorderCommand">
    ///Gets a command to toggle top borders for selected cells on/off. Value: A <see cref="ToggleTableCellTopBorderCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellRightBorder" type = "ToggleTableCellRightBorderCommand">
    ///Gets a command to toggle right borders for selected cells on/off. Value: A <see cref="ToggleTableCellRightBorderCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellBottomBorder" type = "ToggleTableCellBottomBorderCommand">
    ///Gets a command to toggle bottom borders for selected cells on/off. Value: A <see cref="ToggleTableCellBottomBorderCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellLeftBorder" type = "ToggleTableCellLeftBorderCommand">
    ///Gets a command to toggle left borders for selected cells on/off. Value: A <see cref="ToggleTableCellLeftBorderCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "removeTableCellBorders" type = "RemoveTableCellBordersCommand">
    ///Gets a command to remove the borders of the selected table cells. Value: A <see cref="RemoveTableCellBordersCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellAllBorders" type = "ToggleTableCellAllBordersCommand">
    ///Gets a command to toggle all borders for selected cells on/off. Value: A <see cref="ToggleTableCellAllBordersCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellInsideHorizontalBorders" type = "ToggleTableCellInsideHorizontalBordersCommand">
    ///Gets a command to toggle inner horizontal borders for selected cells on/off. Value: A <see cref="ToggleTableCellInsideHorizontalBordersCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellInsideVerticalBorders" type = "ToggleTableCellInsideVerticalBordersCommand">
    ///Gets a command to toggle inner vertical borders for selected cells on/off. Value: A <see cref="ToggleTableCellInsideVerticalBordersCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "toggleTableCellOutsideBorders" type = "ToggleTableCellOutsideBordersCommand">
    ///Gets a command to toggle outer borders for selected cells on/off. Value: A <see cref="ToggleTableCellOutsideBordersCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeTableLook" type = "ChangeTableLookCommand">
    ///Gets a command to change the selected table's style options. Value: A <see cref="ChangeTableLookCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeTableBorderRepositoryItem" type = "ChangeTableBorderRepositoryItemCommand">
    ///Gets a command to change the repository item's table border style. Value: A <see cref="ChangeTableBorderRepositoryItemCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "changeTableCellShading" type = "ChangeTableCellShadingCommand">
    ///Gets a command to change cell shading in the selected table elements. Value: A <see cref="ChangeTableCellShadingCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "showTableGridLines" type = "ShowTableGridLinesCommand">
    ///Gets a command to toggle the display of grid lines for a table with no borders applied - on/off. Value: A <see cref="ShowTableGridLinesCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openFindPanel" type = "OpenFindPanelCommand">
    ///Gets a command to invoke the Search Panel allowing end-users to search text and navigate through search results. Value: A <see cref="OpenFindPanelCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openFindAndReplaceDialog" type = "OpenFindAndReplaceDialogCommand">
    ///Gets a command to invoke the Find and Replace dialog window. Value: A <see cref="OpenFindAndReplaceDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "findAll" type = "FindAllCommand">
    ///Gets a command to find all matches of the specified text in the document. Value: A <see cref="FindAllCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "hideFindResults" type = "HideFindResultsCommand">
    ///Gets a command to hide the results of the search. Value: A <see cref="HideFindResultsCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "replaceAll" type = "ReplaceAllCommand">
    ///Gets a command to search for a specific text and replace all matches in the document with the specified string. Value: A <see cref="ReplaceAllCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "replaceNext" type = "ReplaceNextCommand">
    ///Gets a command to search for a specific text and replace the next match in the document with the specified string. Value: A <see cref="ReplaceNextCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openSpellingDialog" type = "OpenSpellingDialogCommand">
    ///Gets a command to invoke the Spelling dialog window. Value: A <see cref="OpenSpellingDialogCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "assignShortcut" type = "AssignShortcutCommand">
    ///Gets a command to assign a shortcut to the specified client command. Value: A <see cref="AssignShortcutCommand" /> object that provides methods for executing the command and checking its state.
    ///</field>
    ///<field name = "openLayoutOptionsDialogCommand" type = "OpenLayoutOptionsDialogCommand">
    ///</field>
    ///<field name = "insertFloatingTextBoxCommand" type = "InsertFloatingTextBoxCommand">
    ///</field>
    ///<field name = "changeFloatingObjectAlignmentPositionCommand" type = "ChangeFloatingObjectAlignmentPositionCommand">
    ///</field>
    ///<field name = "changeFloatingObjectAbsolutePositionCommand" type = "ChangeFloatingObjectAbsolutePositionCommand">
    ///</field>
    ///<field name = "changeFloatingObjectRelativePositionCommand" type = "ChangeFloatingObjectRelativePositionCommand">
    ///</field>
    ///<field name = "changeFloatingObjectLockAnchorCommand" type = "ChangeFloatingObjectLockAnchorCommand">
    ///</field>
    ///<field name = "changeFloatingObjectTextWrappingCommand" type = "ChangeFloatingObjectTextWrappingCommand">
    ///</field>
    ///<field name = "changeFloatingObjectAbsoluteSizeCommand" type = "ChangeFloatingObjectAbsoluteSizeCommand">
    ///</field>
    ///<field name = "changeTextBoxRelativeSizeCommand" type = "ChangeTextBoxRelativeSizeCommand">
    ///</field>
    ///<field name = "changeFloatingObjectRotationCommand" type = "ChangeFloatingObjectRotationCommand">
    ///</field>
    ///<field name = "changeFloatingObjectLockAspectRatioCommand" type = "ChangeFloatingObjectLockAspectRatioCommand">
    ///</field>
    ///<field name = "changeFloatingObjectFillColorCommand" type = "ChangeFloatingObjectFillColorCommand">
    ///</field>
    ///<field name = "changeFloatingObjectOutlineColorCommand" type = "ChangeFloatingObjectOutlineColorCommand">
    ///</field>
    ///<field name = "changeFloatingObjectOutlineWidthCommand" type = "ChangeFloatingObjectOutlineWidthCommand">
    ///</field>
    ///<field name = "changeTextBoxContentMarginsCommand" type = "ChangeTextBoxContentMarginsCommand">
    ///</field>
};
CommandBase = function() {
    ///<summary>
    ///Serves as a base for objects that implement different client command functionalities.
    ///</summary>
};
CommandWithSimpleStateBase = function() {
    ///<summary>
    ///Serves as a base for commands with a simple common command state.
    ///</summary>
};
CommandWithBooleanStateBase = function() {
    ///<summary>
    ///Serves as a base for commands with the Boolean state.
    ///</summary>
};
SimpleCommandState = function() {
    ///<summary>
    ///Defines a simple state common to most of the client commands.
    ///</summary>
    ///<field name = "enabled" type = "Boolean">
    ///Gets a value indicating whether the command's UI element is enabled (within the ribbon and context menu). Value: true, if the command's related UI element is enabled; otherwise, false.
    ///</field>
    ///<field name = "visible" type = "Boolean">
    ///Gets a value indicating whether the command's UI element is visible. Value: true, if the command's related UI element is visible; otherwise, false.
    ///</field>
};
CommandState = function(T) {
    ///<summary>
    ///Defines the state of a command.
    ///</summary>
    ///<field name = "value" type = "T">
    ///Gets the command state value. Value: A T object specifying the command state value.
    ///</field>
    ///<field name = "enabled" type = "Boolean">
    ///Gets a value indicating whether the command's UI element is enabled (within the ribbon and context menu). Value: true, if the command's related UI element is enabled; otherwise, false.
    ///</field>
    ///<field name = "visible" type = "Boolean">
    ///Gets a value indicating whether the command's UI element is visible. Value: true, if the command's related UI element is visible; otherwise, false.
    ///</field>
};
RichEditDocument = function() {
    ///<summary>
    ///Contains a set properties providing the current information about certain document structural elements.
    ///</summary>
    ///<field name = "activeSubDocument" type = "SubDocument">
    ///Provides the information about the active sub-document. Value: A <see cref="SubDocument" /> object storing information about the essential document functionality.
    ///</field>
    ///<field name = "sectionsInfo" type = "Array" elementType = "Section">
    ///Provides information about sections in the current document. Value: An array of Section objects storing information about sections.
    ///</field>
    ///<field name = "paragraphStylesInfo" type = "Array" elementType = "ParagraphStyle">
    ///Provides information about paragraph styles in the current document. Value: An array of ParagraphStyle objects storing information about paragraph styles.
    ///</field>
    ///<field name = "characterStylesInfo" type = "Array" elementType = "CharacterStyle">
    ///Provides information about character styles in the current document. Value: An array of CharacterStyle objects storing information about character styles.
    ///</field>
    ///<field name = "abstractNumberingListsInfo" type = "Array" elementType = "AbstractNumberingList">
    ///Provides information about numbered paragraphs in the document. Value: An array of AbstractNumberingList objects storing the information about numbered paragraphs.
    ///</field>
    ///<field name = "tableStylesInfo" type = "Array" elementType = "TableStyle">
    ///Provides information about table styles in the current document. Value: An array of TableStyle objects storing information about table styles.
    ///</field>
    ///<field name = "spellingInfo" type = "SpellingInfo">
    ///Provides information about spell checking in the current document. Value: A <see cref="SpellingInfo" /> object.
    ///</field>
};
AbstractNumberingList = function() {
    ///<summary>
    ///An abstract numbering list definition that defines the appearance and behavior of numbered paragraphs in a document.
    ///</summary>
    ///<field name = "deleted" type = "Boolean">
    ///</field>
};
Paragraph = function() {
    ///<summary>
    ///Defines a paragraph in the document.
    ///</summary>
    ///<field name = "length" type = "Int32">
    ///Gets the paragraph's character length. Value: An integer value specifying the element length in characters.
    ///</field>
    ///<field name = "start" type = "Int32">
    ///Gets the paragraph's start position in the document. Value: An integer value specifying the start position.
    ///</field>
    ///<field name = "interval" type = "Interval">
    ///</field>
    ///<field name = "styleName" type = "String">
    ///Gets the name of the paragraph style applied to the current paragraph (see name). Value: A string value specifying the style name.
    ///</field>
    ///<field name = "listIndex" type = "Int32">
    ///Gets the index of a list applied to the paragraph. Value: An integer that is the index of a list to which the paragraph belongs.
    ///</field>
    ///<field name = "listLevelIndex" type = "Int32">
    ///Gets the index of the list level applied to the current paragraph in the numbering list. Value: An integer that is the index of the list level of the current paragraph.
    ///</field>
};
Field = function() {
    ///<summary>
    ///Defines a field in the document.
    ///</summary>
    ///<field name = "start" type = "Int32">
    ///Gets the field's start position in a document. Value: An integer value specifying the start position.
    ///</field>
    ///<field name = "length" type = "Int32">
    ///Gets the field length in a document. Value: An integer value specifying the field length.
    ///</field>
    ///<field name = "codeInterval" type = "Interval">
    ///</field>
    ///<field name = "resultInterval" type = "Interval">
    ///</field>
    ///<field name = "interval" type = "Interval">
    ///</field>
    ///<field name = "hyperlinkUri" type = "String">
    ///Gets or sets a URI to navigate to when the hyperlink (represented by the current field) is activated. Value: A string representing an URI.
    ///</field>
    ///<field name = "hyperlinkTip" type = "String">
    ///Gets or sets the text for the tooltip displayed when the mouse hovers over a hyperlink field. Value: A string containing the tooltip text.
    ///</field>
    ///<field name = "hyperlinkAnchor" type = "String">
    ///Gets or sets the name of a bookmark (or a hyperlink) in the current document which shall be the target of the hyperlink field. Value: A string representing the bookmark's name.
    ///</field>
    ///<field name = "showCode" type = "Boolean">
    ///Gets a value specifying whether a field's code or result is dispalyed. Value: true, if the field code is displayed; false, if the field result is displayed.
    ///</field>
};
Bookmark = function() {
    ///<summary>
    ///Defines a bookmark in the document.
    ///</summary>
    ///<field name = "start" type = "Int32">
    ///Gets the bookmark's start position in a document. Value: An integer value specifying the start position.
    ///</field>
    ///<field name = "length" type = "Int32">
    ///Gets the bookmark's length. Value: An integer value specifying the length of the bookmark.
    ///</field>
    ///<field name = "interval" type = "Interval">
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of a bookmark in the document. Value: A string that is the unique bookmark's name.
    ///</field>
};
Section = function() {
    ///<summary>
    ///Defines a section in the document.
    ///</summary>
    ///<field name = "start" type = "Int32">
    ///Gets the section's start position in the document. Value: An integer value specifying the start position.
    ///</field>
    ///<field name = "length" type = "Int32">
    ///Gets the section's character length. Value: An integer value specifying the element length in characters.
    ///</field>
    ///<field name = "interval" type = "Interval">
    ///</field>
    ///<field name = "headers" type = "Array" elementType = "HeaderFooter">
    ///Provides access to the section's headers. Value: An array of HeaderFooter objects storing information about the section's headers.
    ///</field>
    ///<field name = "footers" type = "Array" elementType = "HeaderFooter">
    ///Provides access to the section's footers. Value: An array of HeaderFooter objects storing information about the section's footers.
    ///</field>
};
HeaderFooter = function() {
    ///<summary>
    ///Contains settings defining a header or footer in a document.
    ///</summary>
    ///<field name = "type" type = "HeaderFooterType">
    ///Gets the type of the header (footer). Value: One of the <see cref="HeaderFooterType" /> values.
    ///</field>
    ///<field name = "subDocument" type = "SubDocument">
    ///Provides access to an object implementing the basic document functionality that is common to the header, footer and the main document body. Value: A <see cref="SubDocument" /> object exposing the basic document functionality.
    ///</field>
};
InlinePictureInfo = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "id" type = "Int32">
    ///</field>
    ///<field name = "position" type = "Int32">
    ///</field>
    ///<field name = "initialWidth" type = "Int32">
    ///</field>
    ///<field name = "initialHeight" type = "Int32">
    ///</field>
    ///<field name = "scaleX" type = "Int32">
    ///</field>
    ///<field name = "scaleY" type = "Int32">
    ///</field>
    ///<field name = "actualWidth" type = "Int32">
    ///Gets the actual image width.
    ///</field>
    ///<field name = "actualHeight" type = "Int32">
    ///Gets the actual image height.
    ///</field>
};
RichEditFileInfo = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "folderPath" type = "String">
    ///</field>
    ///<field name = "fileName" type = "String">
    ///</field>
    ///<field name = "documentFormat" type = "DocumentFormat">
    ///</field>
};
RichEditSelection = function() {
    ///<summary>
    ///Contains a set of methods and properties to work with the document selection.
    ///</summary>
    ///<field name = "intervals" type = "Array" elementType = "Interval">
    ///Gets or sets an array of document interval in the selection. Value: An array of Interval objects.
    ///</field>
    ///<field name = "collapsed" type = "Boolean">
    ///Gets or sets a value specifying whether the current selection is collapsed (and represents the cursor position). Value: true, if the selection is collapsed; otherwise, false.
    ///</field>
};
Interval = function() {
    ///<summary>
    ///Defines a document's interval.
    ///</summary>
    ///<field name = "start" type = "Int32">
    ///Gets the interval's start position in the document. Value: An integer value specifying the start position.
    ///</field>
    ///<field name = "length" type = "Int32">
    ///Gets the interval's character length. Value: An integer value specifying the element length in characters.
    ///</field>
};
SpellingInfo = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "spellCheckerState" type = "SpellCheckerState">
    ///</field>
    ///<field name = "misspelledIntervals" type = "Array" elementType = "MisspelledInterval">
    ///</field>
};
MisspelledInterval = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "start" type = "Int32">
    ///</field>
    ///<field name = "length" type = "Int32">
    ///</field>
    ///<field name = "interval" type = "Interval">
    ///</field>
    ///<field name = "errorType" type = "SpellingErrorType">
    ///</field>
    ///<field name = "word" type = "String">
    ///</field>
    ///<field name = "suggestions" type = "Array" elementType = "String">
    ///</field>
};
StyleBase = function() {
    ///<summary>
    ///Serves as a base for objects implementing different element styles.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets or sets the name of the style. Value: A string specifying the style name.
    ///</field>
    ///<field name = "isDeleted" type = "Boolean">
    ///Gets whether the specified style is marked as deleted. Value: true, if the style is deleted; otherwise, false.
    ///</field>
};
ParagraphStyle = function() {
    ///<summary>
    ///Defines the paragraph style settings.
    ///</summary>
    ///<field name = "linkedStyle" type = "CharacterStyle">
    ///Gets or sets the linked style for the current style. Value: A <see cref="CharacterStyle" /> object representing a character style linked to a current style.
    ///</field>
    ///<field name = "nextStyle" type = "ParagraphStyle">
    ///Gets or sets the default style for a paragraph that immediately follows the current paragraph. Value: A <see cref="ParagraphStyle" /> object specifying the style for the next paragraph.
    ///</field>
    ///<field name = "listIndex" type = "Int32">
    ///Gets the index of the list item associated with the paragraph formatted with the current style. Value: An integer value specifying the list item index.
    ///</field>
    ///<field name = "listLevelIndex" type = "Int32">
    ///Gets the index of the list level applied to the paragraph formatted with the current style. Value: An integer that is the list level index.
    ///</field>
    ///<field name = "parent" type = "ParagraphStyle">
    ///Gets or sets the style from which the current style inherits. Value: A <see cref="ParagraphStyle" /> object representing the parent style.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets or sets the name of the style. Value: A string specifying the style name.
    ///</field>
    ///<field name = "isDeleted" type = "Boolean">
    ///Gets whether the specified style is marked as deleted. Value: true, if the style is deleted; otherwise, false.
    ///</field>
};
CharacterStyle = function() {
    ///<summary>
    ///Contains characteristics of a character style in a document.
    ///</summary>
    ///<field name = "linkedStyle" type = "ParagraphStyle">
    ///Gets or sets the linked style for the current style. Value: A <see cref="ParagraphStyle" /> object representing a paragraph style linked to a current style.
    ///</field>
    ///<field name = "parent" type = "CharacterStyle">
    ///Gets the style form which the current style inherits. Value: A <see cref="CharacterStyle" /> object representing the parent style.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets or sets the name of the style. Value: A string specifying the style name.
    ///</field>
    ///<field name = "isDeleted" type = "Boolean">
    ///Gets whether the specified style is marked as deleted. Value: true, if the style is deleted; otherwise, false.
    ///</field>
};
TableStyle = function() {
    ///<summary>
    ///Defines the table style settings.
    ///</summary>
    ///<field name = "parent" type = "TableStyle">
    ///Gets or sets the style from which the current style inherits. Value: A <see cref="TableStyle" /> object that is the parent style.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets or sets the name of the style. Value: A string specifying the style name.
    ///</field>
    ///<field name = "isDeleted" type = "Boolean">
    ///Gets whether the specified style is marked as deleted. Value: true, if the style is deleted; otherwise, false.
    ///</field>
};
SubDocument = function() {
    ///<summary>
    ///Exposes the settings providing the information about the essential document functionality.
    ///</summary>
    ///<field name = "id" type = "Int32">
    ///</field>
    ///<field name = "type" type = "SubDocumentType">
    ///</field>
    ///<field name = "paragraphsInfo" type = "Array" elementType = "Paragraph">
    ///Provides information about paragraphs contained in the document. Value: An array of Paragraph objects storing information about document paragraphs.
    ///</field>
    ///<field name = "fieldsInfo" type = "Array" elementType = "Field">
    ///Provides information about fields in the current document. Value: An array of Field objects storing information about document fields.
    ///</field>
    ///<field name = "tablesInfo" type = "Array" elementType = "Table">
    ///Provides information about tables contained in the document. Value: An array of Table objects storing information about document tables.
    ///</field>
    ///<field name = "bookmarksInfo" type = "Array" elementType = "Bookmark">
    ///Provides information about document bookmarks. Value: An array of Bookmark objects storing information about document bookmarks.
    ///</field>
    ///<field name = "inlinePicturesInfo" type = "Array" elementType = "InlinePictureInfo">
    ///</field>
    ///<field name = "text" type = "String">
    ///Gets the document's textual representation. Value: A string value specifying the document's text.
    ///</field>
    ///<field name = "length" type = "Int32">
    ///Gets the character length of the document. Value: An integer that is the number of character positions in the document.
    ///</field>
};
Table = function() {
    ///<summary>
    ///Defines a table in the document.
    ///</summary>
    ///<field name = "start" type = "Int32">
    ///Gets the table's start position in the document. Value: An integer value specifying the start position.
    ///</field>
    ///<field name = "length" type = "Int32">
    ///Gets the table length in characters. Value: A integer value specifying the character length of the table.
    ///</field>
    ///<field name = "interval" type = "Interval">
    ///</field>
    ///<field name = "rows" type = "Array" elementType = "TableRow">
    ///Provides access to a collection of table rows. Value: An array of TableRow objects storing information about individual table rows.
    ///</field>
    ///<field name = "styleName" type = "String">
    ///Gets the name of the style applied to the table (see name). Value: A string value specifying the style name.
    ///</field>
};
TableRow = function() {
    ///<summary>
    ///Defines a table row in the document.
    ///</summary>
    ///<field name = "start" type = "Int32">
    ///Gets the table row's start position in the document. Value: An integer value specifying the start position.
    ///</field>
    ///<field name = "length" type = "Int32">
    ///Gets the table row's character length. Value: An integer value specifying the element length in characters.
    ///</field>
    ///<field name = "interval" type = "Interval">
    ///</field>
    ///<field name = "cells" type = "Array" elementType = "TableCell">
    ///Provides information about the table row's cells. Value: An array of TableCell objects storing information about cells.
    ///</field>
};
TableCell = function() {
    ///<summary>
    ///Defines a table cell in the document.
    ///</summary>
    ///<field name = "start" type = "Int32">
    ///Gets the table cell's start position in the document. Value: An integer value specifying the start position.
    ///</field>
    ///<field name = "length" type = "Int32">
    ///Gets the table cell's character length. Value: An integer value specifying the element length in characters.
    ///</field>
    ///<field name = "interval" type = "Interval">
    ///</field>
};
RichEditUnitConverter = function() {
    ///<summary>
    ///
    ///</summary>
};
OpenInsertBookmarkDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Bookmark dialog.
    ///</summary>
};
InsertBookmarkCommand = function() {
    ///<summary>
    ///A command to insert a new bookmark that references the current selection.
    ///</summary>
};
DeleteBookmarkCommand = function() {
    ///<summary>
    ///A command to delete a specific bookmark.
    ///</summary>
};
GoToBookmarkCommand = function() {
    ///<summary>
    ///Gets a command to navigate to the specified bookmark in the document.
    ///</summary>
};
PasteCommand = function() {
    ///<summary>
    ///A command to paste the text from the clipboard over the selection.
    ///</summary>
};
CopyCommand = function() {
    ///<summary>
    ///A command to copy the selected text and place it to the clipboard.
    ///</summary>
};
CutCommand = function() {
    ///<summary>
    ///A command to cut the selected text and place it to the clipboard.
    ///</summary>
};
CreateFieldCommand = function() {
    ///<summary>
    ///A command to insert an empty document field at the current position in the document.
    ///</summary>
};
UpdateFieldCommand = function() {
    ///<summary>
    ///A command to update the field's result.
    ///</summary>
};
ShowFieldCodesCommand = function() {
    ///<summary>
    ///A command to display the selected field's field codes.
    ///</summary>
};
ShowAllFieldCodesCommand = function() {
    ///<summary>
    ///A command to display all field codes in place of the fields in the document.
    ///</summary>
};
UpdateAllFieldsCommand = function() {
    ///<summary>
    ///A command to update all fields in the selected range.
    ///</summary>
};
CreateDateFieldCommand = function() {
    ///<summary>
    ///A command to insert a DATE field displaying the current date.
    ///</summary>
};
CreateTimeFieldCommand = function() {
    ///<summary>
    ///A command to insert a TIME field displaying the current time.
    ///</summary>
};
CreatePageFieldCommand = function() {
    ///<summary>
    ///A command to insert a PAGE field displaying the current page number.
    ///</summary>
};
GoToDataRecordCommand = function() {
    ///<summary>
    ///A command to navigate to the next data record of the bound data source.
    ///</summary>
};
DataRecordOptions = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "activeRecordIndex" type = "Int32">
    ///Gets or sets the index of the active data record.
    ///</field>
    ///<field name = "recordCount" type = "Int32">
    ///</field>
};
GoToFirstDataRecordCommand = function() {
    ///<summary>
    ///A command to navigate to the first data record of the bound data source.
    ///</summary>
};
GoToPreviousDataRecordCommand = function() {
    ///<summary>
    ///A command to navigate to the previous data record of the bound data source.
    ///</summary>
};
GoToNextDataRecordCommand = function() {
    ///<summary>
    ///A command to navigate to the next data record of the bound data source.
    ///</summary>
};
GoToLastDataRecordCommand = function() {
    ///<summary>
    ///A command to navigate to the last data record of the bound data source.
    ///</summary>
};
ShowMergedDataCommand = function() {
    ///<summary>
    ///A command to display or hide actual data in MERGEFIELD fields.
    ///</summary>
};
MergeFieldDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Insert Merge Field dialog.
    ///</summary>
};
CreateMergeFieldCommand = function() {
    ///<summary>
    ///A command to insert a MERGEFIELD field (with a data source column name) at the current position in the document.
    ///</summary>
};
MailMergeDialogCommand = function() {
    ///<summary>
    ///Gets a command to invoke the Export Range dialog to start a mail merge.
    ///</summary>
};
MailMergeAndDownloadCommand = function() {
    ///<summary>
    ///A command to start the mail merge process and download the resulting document containing the merged information.
    ///</summary>
};
MailMergeAndSaveAsCommand = function() {
    ///<summary>
    ///A command to start the mail merge process and save the resulting merged document to the server.
    ///</summary>
};
CreatePageCountFieldCommand = function() {
    ///<summary>
    ///A command to insert a NUMPAGES field displaying the total number of pages.
    ///</summary>
};
MailMergeSettings = function() {
    ///<summary>
    ///Contains settings to set up mail merge operations.
    ///</summary>
    ///<field name = "range" type = "MailMergeExportRange">
    ///Gets or sets a value specifying which data rows should be exported into a merged document. Value: One of the <see cref="MailMergeExportRange" /> values.
    ///</field>
    ///<field name = "exportFrom" type = "Int32">
    ///Gets or sets the index of the row from which the exported range starts. Value: An integer value specifying the row index.
    ///</field>
    ///<field name = "exportRecordsCount" type = "Int32">
    ///Gets or sets the number of data rows in the exported mail-merge range. Value: An integer value specifying the row count.
    ///</field>
    ///<field name = "mergeMode" type = "MergeMode">
    ///Gets or sets the merge mode. Value: One of the <see cref="MergeMode" /> values.
    ///</field>
};
FileNewCommand = function() {
    ///<summary>
    ///A command to create a new empty document.
    ///</summary>
};
FileOpenCommand = function() {
    ///<summary>
    ///A command to open the file, specifying its path.
    ///</summary>
};
FileOpenDialogCommand = function() {
    ///<summary>
    ///A command to invoke the File Open dialog allowing one to select and load a document file into RichEdit.
    ///</summary>
};
FileSaveCommand = function() {
    ///<summary>
    ///A command to save the document to a file.
    ///</summary>
};
FileSaveAsCommand = function() {
    ///<summary>
    ///A command to invoke the Save As dialog that prompts for a file name and saves the current document in a file with the specified path.
    ///</summary>
};
FileDownloadCommand = function() {
    ///<summary>
    ///A command to download the document file, specifying its extension.
    ///</summary>
};
FileSaveAsDialogCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
FilePrintCommand = function() {
    ///<summary>
    ///A command to invoke a browser-specific Print dialog allowing one to print the current document.
    ///</summary>
};
OpenFindPanelCommand = function() {
    ///<summary>
    ///A command to invoke the Search Panel allowing end-users to search text and navigate through search results.
    ///</summary>
};
OpenFindAndReplaceDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Find and Replace dialog.
    ///</summary>
};
FindAllCommand = function() {
    ///<summary>
    ///A command to find all matches of the specified text in the document.
    ///</summary>
};
HideFindResultsCommand = function() {
    ///<summary>
    ///A command to hide the search results.
    ///</summary>
};
ReplaceAllCommand = function() {
    ///<summary>
    ///A command to search for a specific text and replace all matches in the document with the specified string.
    ///</summary>
};
ReplaceNextCommand = function() {
    ///<summary>
    ///A command to search for a specific text and replace the next match in the document with the specified string.
    ///</summary>
};
OpenLayoutOptionsDialogCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
InsertFloatingTextBoxCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
ChangeFloatingObjectLockAnchorCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
ChangeFloatingObjectAlignmentPositionCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
ChangeFloatingObjectAbsolutePositionCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
ChangeFloatingObjectRelativePositionCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
ChangeFloatingObjectTextWrappingCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
ChangeFloatingObjectAbsoluteSizeCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
ChangeTextBoxRelativeSizeCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
ChangeFloatingObjectRotationCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
ChangeFloatingObjectLockAspectRatioCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
ChangeFloatingObjectFillColorCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
ChangeFloatingObjectOutlineColorCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
ChangeFloatingObjectOutlineWidthCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
ChangeTextBoxContentMarginsCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
FloatingObjectAlignmentPositionSettings = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "horizontalPositionAlignment" type = "FloatingObjectHorizontalPositionAlignment">
    ///</field>
    ///<field name = "horizontalPositionType" type = "FloatingObjectHorizontalPositionType">
    ///</field>
    ///<field name = "verticalPositionAlignment" type = "FloatingObjectVerticalPositionAlignment">
    ///</field>
    ///<field name = "verticalPositionType" type = "FloatingObjectVerticalPositionType">
    ///</field>
};
FloatingObjectAbsolutePositionSettings = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "horizontalAbsolutePosition" type = "Int32">
    ///</field>
    ///<field name = "horizontalPositionType" type = "FloatingObjectHorizontalPositionType">
    ///</field>
    ///<field name = "verticalAbsolutePosition" type = "Int32">
    ///</field>
    ///<field name = "verticalPositionType" type = "FloatingObjectVerticalPositionType">
    ///</field>
};
FloatingObjectRelativePositionSettings = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "horizontalRelativePosition" type = "Int32">
    ///</field>
    ///<field name = "horizontalPositionType" type = "FloatingObjectHorizontalPositionType">
    ///</field>
    ///<field name = "verticalRelativePosition" type = "Int32">
    ///</field>
    ///<field name = "verticalPositionType" type = "FloatingObjectVerticalPositionType">
    ///</field>
};
FloatingObjectTextWrappingSettings = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "floatingObjectTextWrapType" type = "FloatingObjectTextWrapType">
    ///</field>
    ///<field name = "floatingObjectTextWrapSide" type = "FloatingObjectTextWrapSide">
    ///</field>
    ///<field name = "leftDistance" type = "Int32">
    ///</field>
    ///<field name = "rightDistance" type = "Int32">
    ///</field>
    ///<field name = "topDistance" type = "Int32">
    ///</field>
    ///<field name = "bottomDistance" type = "Int32">
    ///</field>
};
FloatingObjectAbsoluteSizeSettings = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "absoluteWidth" type = "Int32">
    ///</field>
    ///<field name = "absoluteHeight" type = "Int32">
    ///</field>
};
TextBoxRelativeSizeSettings = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "relativeWidth" type = "Int32">
    ///</field>
    ///<field name = "relativeWidthType" type = "FloatingObjectRelativeWidthType">
    ///</field>
    ///<field name = "relativeHeight" type = "Int32">
    ///</field>
    ///<field name = "relativeHeightType" type = "FloatingObjectRelativeHeightType">
    ///</field>
};
FloatingObjectShapeSettings = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "fillColor" type = "String">
    ///</field>
    ///<field name = "outlineColor" type = "String">
    ///</field>
    ///<field name = "outlineWidth" type = "Int32">
    ///</field>
};
UndoCommand = function() {
    ///<summary>
    ///A command to cancel changes caused by the previous command.
    ///</summary>
};
RedoCommand = function() {
    ///<summary>
    ///A command to reverse actions of the previous undo command.
    ///</summary>
};
OpenInsertHyperlinkDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Hyperlink dialog.
    ///</summary>
};
InsertHyperlinkCommand = function() {
    ///<summary>
    ///A command to insert a hyperlink at the current position in the document.
    ///</summary>
};
DeleteHyperlinkCommand = function() {
    ///<summary>
    ///A command to delete the selected hyperlink.
    ///</summary>
};
DeleteHyperlinksCommand = function() {
    ///<summary>
    ///A command to delete all hyperlinks in a selected range.
    ///</summary>
};
OpenHyperlinkCommand = function() {
    ///<summary>
    ///A command to navigate to the document bookmark or URI (uniform resource identifier) specified for the hyperlink.
    ///</summary>
};
HyperlinkSettings = function() {
    ///<summary>
    ///Contains settings to define hyperlinks.
    ///</summary>
    ///<field name = "text" type = "String">
    ///Gets or sets a text displayed for a hyperlink. Value: A string value specifying the hyperlink display text.
    ///</field>
    ///<field name = "tooltip" type = "String">
    ///Gets or sets a text for the tooltip displayed when the mouse hovers over a hyperlink. Value: A string containing the tooltip text.
    ///</field>
    ///<field name = "url" type = "String">
    ///Gets or sets the hyperlink destination. Value: A string value that specifies the destination to which a hyperlink refers.
    ///</field>
    ///<field name = "bookmark" type = "String">
    ///Gets or sets the associated bookmak. Value: A string value specifying the bookmark name.
    ///</field>
};
InsertPageBreakCommand = function() {
    ///<summary>
    ///A command to insert a page break at the current position in the document.
    ///</summary>
};
InsertColumnBreakCommand = function() {
    ///<summary>
    ///A command to insert a column break at the current position in the document.
    ///</summary>
};
InsertSectionBreakNextPageCommand = function() {
    ///<summary>
    ///A command to insert a section break and start a new section on the next page.
    ///</summary>
};
InsertSectionBreakEvenPageCommand = function() {
    ///<summary>
    ///A command to insert a section break and start a new section on the next even-numbered page.
    ///</summary>
};
InsertSectionBreakOddPageCommand = function() {
    ///<summary>
    ///A command to insert a section break and start a new section on the next odd-numbered page.
    ///</summary>
};
InsertLineBreakCommand = function() {
    ///<summary>
    ///A command to insert the line break at the current position in the document.
    ///</summary>
};
ToggleBulletedListCommand = function() {
    ///<summary>
    ///A command to toggle between the bulleted paragraph and normal text.
    ///</summary>
};
ToggleNumberingListCommand = function() {
    ///<summary>
    ///A command to toggle between the numbered paragraph and normal text.
    ///</summary>
};
ToggleMultilevelListCommand = function() {
    ///<summary>
    ///A command to toggle between the multilevel list style and normal text.
    ///</summary>
};
OpenNumberingListDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Bulleted and Numbering dialog.
    ///</summary>
};
OpenCustomNumberingListDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Customize Numbered List dialog.
    ///</summary>
};
ChangeCustomNumberingListCommand = function() {
    ///<summary>
    ///A command to customize the numbered list parameters.
    ///</summary>
};
RestartNumberingListCommand = function() {
    ///<summary>
    ///A command to restart the numbering list.
    ///</summary>
};
IncrementNumberingIndentCommand = function() {
    ///<summary>
    ///A command to increment the indent level of paragraphs in a selected numbered list.
    ///</summary>
};
DecrementNumberingIndentCommand = function() {
    ///<summary>
    ///A command to decrement the indent level of paragraphs in a selected numbered list.
    ///</summary>
};
ContinueNumberingListCommand = function() {
    ///<summary>
    ///A command to continue the list's numbering.
    ///</summary>
};
InsertNumerationCommand = function() {
    ///<summary>
    ///A command to insert numeration to a paragraph making it a numbering list item.
    ///</summary>
};
RemoveNumerationCommand = function() {
    ///<summary>
    ///A command to remove the selected numeration.
    ///</summary>
};
ListLevelSettings = function() {
    ///<summary>
    ///Contains settings to define individual bulleted or numbered list levels.
    ///</summary>
    ///<field name = "displayFormatString" type = "String">
    ///Gets or sets the pattern used to format the list level for display purposes. Value: A string value specifying the format pattern.
    ///</field>
    ///<field name = "format" type = "ListLevelFormat">
    ///Gets or sets the numbering format used for the current list level's paragraph. Value: One of the <see cref="ListLevelFormat" /> values.
    ///</field>
    ///<field name = "start" type = "Int32">
    ///Gets the list level item's start position in the document. Value: An integer value specifying the start position.
    ///</field>
    ///<field name = "alignment" type = "ListLevelNumberAlignment">
    ///Gets or sets the paragraph text alignment within numbered list levels. Value: One of the <see cref="ListLevelNumberAlignment" /> values.
    ///</field>
    ///<field name = "separator" type = "String">
    ///</field>
    ///<field name = "leftIndent" type = "Int32">
    ///Gets or sets the left indent for text within the current list level's paragraph. Value: An integer value specifying the left indent.
    ///</field>
    ///<field name = "firstLineIndent" type = "Int32">
    ///Gets or sets a value specifying the indent of the first line of the current list level's paragraph. Value: An integer value specifying the indent.
    ///</field>
    ///<field name = "firstLineIndentType" type = "ParagraphFirstLineIndent">
    ///Gets or sets a value specifying whether and how the first line of the current list level's paragraph is indented. Value: One of the <see cref="ParagraphFirstLineIndent" /> values.
    ///</field>
    ///<field name = "fontName" type = "String">
    ///Gets or sets the font name of the current list level's paragraph. Value: A string value specifying the font name.
    ///</field>
    ///<field name = "fontColor" type = "String">
    ///Gets or sets the font color of the current list level's paragraph. Value: A string value specifying the font color.
    ///</field>
    ///<field name = "fontSize" type = "Int32">
    ///Gets or sets the font size of the current list level's paragraph. Value: An integer value specifying the font size.
    ///</field>
    ///<field name = "fontBold" type = "Boolean">
    ///Gets or sets whether the font formatting of the current list level's paragraph is bold. Value: true, if the font formatting is bold; otherwise, false.
    ///</field>
    ///<field name = "fontItalic" type = "Boolean">
    ///Gets or sets whether the font formatting of the current list level's paragraph is italic. Value: true, if the font formatting is italic; otherwise, false.
    ///</field>
};
OpenInsertPictureDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Insert Image dialog.
    ///</summary>
};
InsertPictureCommand = function() {
    ///<summary>
    ///A command to insert a picture from a file.
    ///</summary>
};
OpenInsertSymbolDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Symbols dialog.
    ///</summary>
};
InsertSymbolCommand = function() {
    ///<summary>
    ///A command to insert a character into the document.
    ///</summary>
};
InsertParagraphCommand = function() {
    ///<summary>
    ///A command to insert a paragraph break at the current position in the document.
    ///</summary>
};
InsertTextCommand = function() {
    ///<summary>
    ///A command to insert text at the current position in the document.
    ///</summary>
};
DeleteCommand = function() {
    ///<summary>
    ///A command to delete the text in a selected range.
    ///</summary>
};
RemovePrevWordCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
RemoveNextWordCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
BackspaceCommand = function() {
    ///<summary>
    ///A command to move the cursor backwards and erase the character in that space.
    ///</summary>
};
ChangePictureScaleCommand = function() {
    ///<summary>
    ///A command to scale pictures in a selected range.
    ///</summary>
};
MoveContentCommand = function() {
    ///<summary>
    ///A command to move the selected range to a specific position in the document.
    ///</summary>
};
CopyContentCommand = function() {
    ///<summary>
    ///A command to copy the selected text and place it to the specified position.
    ///</summary>
};
InsertTabCommand = function() {
    ///<summary>
    ///A command to insert a tab character at the current position in the document.
    ///</summary>
};
Scale = function() {
    ///<summary>
    ///Defines the scaling settings.
    ///</summary>
    ///<field name = "x" type = "Int32">
    ///</field>
    ///<field name = "y" type = "Int32">
    ///</field>
};
ChangePageMarginsCommand = function() {
    ///<summary>
    ///A command to change page margin settings.
    ///</summary>
};
OpenPageMarginsDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Margins tab of the Page Setup dialog.
    ///</summary>
};
ChangePageOrientationCommand = function() {
    ///<summary>
    ///A command to change the page orientation.
    ///</summary>
};
OpenPagePaperSizeDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Paper tab of the Page Setup dialog.
    ///</summary>
};
SetPageSizeDialogCommand = function() {
    ///<summary>
    ///A command to set the page size.
    ///</summary>
};
ChangePageSizeCommand = function() {
    ///<summary>
    ///A command to change the page size.
    ///</summary>
};
ChangeSectionEqualColumnCountCommand = function() {
    ///<summary>
    ///A command to change the number of section columns having the same width.
    ///</summary>
};
OpenSectionColumnsDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Columns dialog.
    ///</summary>
};
ChangeSectionColumnsCommand = function() {
    ///<summary>
    ///A command to change the settings of individual section columns.
    ///</summary>
};
ChangePageColorCommand = function() {
    ///<summary>
    ///A command to change the background color of the page.
    ///</summary>
};
InsertHeaderCommand = function() {
    ///<summary>
    ///A command to activate the page header and begin editing.
    ///</summary>
};
InsertFooterCommand = function() {
    ///<summary>
    ///A command to activate the page footer and begin editing.
    ///</summary>
};
LinkHeaderFooterToPreviousCommand = function() {
    ///<summary>
    ///A command to link a header/footer to the previous section, so it has the same content.
    ///</summary>
};
GoToFooterCommand = function() {
    ///<summary>
    ///A command to navigate to the page footer from the page header in the header/footer editing mode.
    ///</summary>
};
GoToHeaderCommand = function() {
    ///<summary>
    ///A command to navigate to the page header from the page footer in the header/footer editing mode.
    ///</summary>
};
GoToNextHeaderFooterCommand = function() {
    ///<summary>
    ///A command to navigate to the next page header or footer in the header/footer editing mode.
    ///</summary>
};
GoToPreviousHeaderFooterCommand = function() {
    ///<summary>
    ///A command to navigate to the previous page header or footer in the header/footer editing mode.
    ///</summary>
};
SetDifferentFirstPageHeaderFooterCommand = function() {
    ///<summary>
    ///A command to change the header/footer edit mode, so it allows creation of a different header or footer for the first page of a document or section.
    ///</summary>
};
SetDifferentOddAndEvenPagesHeaderFooterCommand = function() {
    ///<summary>
    ///A command to change the header/footer edit mode so it allows creation of a different header or footer for odd and even pages of a document or section.
    ///</summary>
};
CloseHeaderFooterCommand = function() {
    ///<summary>
    ///A command to finish header/footer editing.
    ///</summary>
};
SectionColumn = function() {
    ///<summary>
    ///Defines a section column in the document.
    ///</summary>
    ///<field name = "width" type = "Int32">
    ///Gets or sets the width of the section column. Value: An integer value specifying the section column width.
    ///</field>
    ///<field name = "spacing" type = "Int32">
    ///Gets or sets the amount of space between adjacent section columns. Value: An integer value specifying the spacing between section columns.
    ///</field>
};
Size = function() {
    ///<summary>
    ///Defines the size settings.
    ///</summary>
    ///<field name = "width" type = "Int32">
    ///Gets or sets the width value. Value: An integer value specifying the width.
    ///</field>
    ///<field name = "height" type = "Int32">
    ///Gets or sets the height value. Value: An integer value specifying the height.
    ///</field>
};
Margins = function() {
    ///<summary>
    ///Defines the margin settings.
    ///</summary>
    ///<field name = "left" type = "Int32">
    ///Gets or sets the left margin. Value: An integer value specifying the left margin.
    ///</field>
    ///<field name = "top" type = "Int32">
    ///Gets or sets the top margin. Value: An integer value specifying the top margin.
    ///</field>
    ///<field name = "right" type = "Int32">
    ///Gets or sets the right margin. Value: An integer value specifying the right margin.
    ///</field>
    ///<field name = "bottom" type = "Int32">
    ///Gets or sets the bottom margin. Value: An integer value specifying the bottom margin.
    ///</field>
};
IncreaseIndentCommand = function() {
    ///<summary>
    ///A command to increment the indent level of paragraphs in a selected range.
    ///</summary>
};
DecreaseIndentCommand = function() {
    ///<summary>
    ///A command to decrement the indent level of paragraphs in a selected range.
    ///</summary>
};
ShowHiddenSymbolsCommand = function() {
    ///<summary>
    ///A command to toggle the visibility of hidden symbols.
    ///</summary>
};
ToggleParagraphAlignmentLeftCommand = function() {
    ///<summary>
    ///A command to toggle left paragraph alignment on and off.
    ///</summary>
};
ToggleParagraphAlignmentCenterCommand = function() {
    ///<summary>
    ///A command to toggle centered paragraph alignment on and off.
    ///</summary>
};
ToggleParagraphAlignmentRightCommand = function() {
    ///<summary>
    ///A command to toggle right paragraph alignment on and off.
    ///</summary>
};
ToggleParagraphAlignmentJustifyCommand = function() {
    ///<summary>
    ///A command to toggle justified paragraph alignment on and off.
    ///</summary>
};
SetSingleParagraphSpacingCommand = function() {
    ///<summary>
    ///A command to format a current paragraph with single line spacing.
    ///</summary>
};
SetSesquialteralParagraphSpacingCommand = function() {
    ///<summary>
    ///A command to format a current paragraph with one and a half line spacing.
    ///</summary>
};
SetDoubleParagraphSpacingCommand = function() {
    ///<summary>
    ///A command to format a current paragraph with double line spacing.
    ///</summary>
};
AddSpacingBeforeParagraphCommand = function() {
    ///<summary>
    ///A command to add spacing before a paragraph.
    ///</summary>
};
AddSpacingAfterParagraphCommand = function() {
    ///<summary>
    ///A command to add spacing after a paragraph.
    ///</summary>
};
RemoveSpacingBeforeParagraphCommand = function() {
    ///<summary>
    ///A command to remove spacing before the selected paragraph.
    ///</summary>
};
RemoveSpacingAfterParagraphCommand = function() {
    ///<summary>
    ///A command to remove spacing after the selected paragraph.
    ///</summary>
};
ChangeParagraphBackColorCommand = function() {
    ///<summary>
    ///A command to change the background color of paragraphs in a selected range.
    ///</summary>
};
OpenParagraphFormattingDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Paragraph dialog allowing end-users to set paragraph formatting.
    ///</summary>
};
ChangeParagraphFormattingCommand = function() {
    ///<summary>
    ///A command to change the formatting of paragraphs in a selected range.
    ///</summary>
};
IncrementParagraphLeftIndentCommand = function() {
    ///<summary>
    ///A command to increment the left indentation of paragraphs in a selected range.
    ///</summary>
};
DecrementParagraphLeftIndentCommand = function() {
    ///<summary>
    ///A command to decrement the left indentation of paragraphs in a selected range.
    ///</summary>
};
OpenTabsDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Tabs paragraph dialog.
    ///</summary>
};
ChangeTabsCommand = function() {
    ///<summary>
    ///A command to change paragraph tab stops.
    ///</summary>
};
TabsSettings = function() {
    ///<summary>
    ///Contains the information about tab stops.
    ///</summary>
    ///<field name = "defaultTabStop" type = "Int32">
    ///Gets or sets the default tab stop value. Value: An integer value specifying the default tab stop.
    ///</field>
    ///<field name = "tabs" type = "Array" elementType = "TabSettings">
    ///Gets or sets a list of tab stops. Value: An array of TabSettings objects containing individual tab stop settings.
    ///</field>
};
TabSettings = function() {
    ///<summary>
    ///Contains settings of a tab stop.
    ///</summary>
    ///<field name = "alignment" type = "TabAlign">
    ///Gets or sets the alignment type, specifying how any text after the tab will be lined up. Value: One of the <see cref="TabAlign" /> values.
    ///</field>
    ///<field name = "leader" type = "TabLeaderType">
    ///Gets or sets the tab leader style, i.e., the symbol used as a tab leader. Value: One of the <see cref="TabLeaderType" /> values.
    ///</field>
    ///<field name = "position" type = "Int32">
    ///Gets or sets the position of the tab stop. Value: A number representing the distance from the left edge of the text area.
    ///</field>
    ///<field name = "deleted" type = "Boolean">
    ///Gets or sets whether the individual tab stop is in effect. Value: true to switch off this tab stop; otherwise, false.
    ///</field>
};
ParagraphFormattingSettings = function() {
    ///<summary>
    ///Contains settings to define the paragraph formatting.
    ///</summary>
    ///<field name = "alignment" type = "ParagraphAlignment">
    ///Gets or sets the paragraph alignment. Value: One of the <see cref="ParagraphAlignment" /> values.
    ///</field>
    ///<field name = "outlineLevel" type = "Int32">
    ///Gets or sets the outline level of a paragraph. Value: An integer specifying the level number.
    ///</field>
    ///<field name = "rightIndent" type = "Int32">
    ///Gets or sets the right indent value for the specified paragraph. Value: An integer value specifying the right indent.
    ///</field>
    ///<field name = "spacingBefore" type = "Int32">
    ///Gets or sets the spacing before the current paragraph. Value: An integer value specifying the spacing before the paragraph.
    ///</field>
    ///<field name = "spacingAfter" type = "Int32">
    ///Gets or sets the spacing after the current paragraph. Value: An integer value specifying the spacing after the paragraph.
    ///</field>
    ///<field name = "lineSpacingType" type = "ParagraphLineSpacingType">
    ///Gets or sets a value which determines the spacing between lines in a paragraph. Value: One of the <see cref="ParagraphLineSpacingType" /> values.
    ///</field>
    ///<field name = "firstLineIndentType" type = "ParagraphFirstLineIndent">
    ///Gets or sets a value specifying whether and how the first line of a paragraph is indented. Value: One of the <see cref="ParagraphFirstLineIndent" /> values.
    ///</field>
    ///<field name = "firstLineIndent" type = "Int32">
    ///Gets or sets a value specifying the indent of the first line of a paragraph. Value: An integer value specifying the indent of the first line.
    ///</field>
    ///<field name = "contextualSpacing" type = "Boolean">
    ///Gets or sets whether to suppress addition of additional space (contextual spacing) between paragraphs of the same style. Value: true to remove extra spacing between paragraphs, false to add extra space.
    ///</field>
    ///<field name = "keepLinesTogether" type = "Boolean">
    ///Gets or sets whether to prevent all page breaks that interrupt a paragraph. Value: true, to keep paragraph lines together; otherwise, false.
    ///</field>
    ///<field name = "pageBreakBefore" type = "Boolean">
    ///Gets or sets whether a page break is inserted automatically before a specified paragraph(s). Value: true, if a page break is inserted automatically before a paragraph(s); otherwise, false.
    ///</field>
    ///<field name = "leftIndent" type = "Int32">
    ///Gets or sets the left indent for text within a paragraph. Value: An integer value specifying the left indent.
    ///</field>
    ///<field name = "lineSpacing" type = "Int32">
    ///Gets or sets a line spacing value. Value: An integer value specifying the line spacing.
    ///</field>
    ///<field name = "backColor" type = "String">
    ///Gets or sets the paragraph background color. Value: A string value specifying the background color.
    ///</field>
};
AssignShortcutCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
OpenSpellingDialogCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
OpenInsertTableDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Insert Table dialog.
    ///</summary>
};
InsertTableCommand = function() {
    ///<summary>
    ///A command to invoke the Insert Table dialog.
    ///</summary>
};
OpenTableFormattingDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Table Properties dialog.
    ///</summary>
};
ChangeTableFormattingCommand = function() {
    ///<summary>
    ///A command to change the selected table's formatting.
    ///</summary>
};
ChangeTableRowPreferredHeightCommand = function() {
    ///<summary>
    ///A command to change the selected table's preferred row height.
    ///</summary>
};
ChangeTableCellPreferredWidthCommand = function() {
    ///<summary>
    ///A command to change the preferred cell width of the selected table rows.
    ///</summary>
};
ChangeTableColumnPreferredWidthCommand = function() {
    ///<summary>
    ///A command to change the selected table's preferred column width.
    ///</summary>
};
ChangeTableCellFormattingCommand = function() {
    ///<summary>
    ///A command to change the cell formatting of the selected table elements.
    ///</summary>
};
InsertTableColumnToTheLeftCommand = function() {
    ///<summary>
    ///A command to insert a table column to the left of the current position in the table.
    ///</summary>
};
InsertTableColumnToTheRightCommand = function() {
    ///<summary>
    ///A command to insert a table column to the right of the current position in the table.
    ///</summary>
};
InsertTableRowBelowCommand = function() {
    ///<summary>
    ///A command to insert a row in a table below the selected row.
    ///</summary>
};
InsertTableRowAboveCommand = function() {
    ///<summary>
    ///A command to insert a row in a table above the selected row.
    ///</summary>
};
DeleteTableRowsCommand = function() {
    ///<summary>
    ///A command to delete the selected table rows.
    ///</summary>
};
DeleteTableColumnsCommand = function() {
    ///<summary>
    ///A command to delete the selected table columns.
    ///</summary>
};
InsertTableCellWithShiftToTheLeftCommand = function() {
    ///<summary>
    ///A command to insert table cells with a horizontal shift into the selected table.
    ///</summary>
};
DeleteTableCellsWithShiftHorizontallyCommand = function() {
    ///<summary>
    ///A command to delete the selected table cells with a horizontal shift.
    ///</summary>
};
DeleteTableCellsWithShiftVerticallyCommand = function() {
    ///<summary>
    ///A command to delete the selected table cells with a vertical shift.
    ///</summary>
};
DeleteTableCommand = function() {
    ///<summary>
    ///A command to delete the selected table.
    ///</summary>
};
InsertTableCellsDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Insert Cells dialog.
    ///</summary>
};
DeleteTableCellsDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Delete Cells dialog.
    ///</summary>
};
MergeTableCellsCommand = function() {
    ///<summary>
    ///A command to merge the selected table cells.
    ///</summary>
};
SplitTableCellsDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Split Cells dialog.
    ///</summary>
};
SplitTableCellsCommand = function() {
    ///<summary>
    ///A command to split the selected table cells based on the specified options.
    ///</summary>
};
InsertTableCellsWithShiftToTheVerticallyCommand = function() {
    ///<summary>
    ///A command to insert table cells with a vertical shift into the selected table.
    ///</summary>
};
OpenTableBordersAndShadingDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Borders and Shading table dialog.
    ///</summary>
};
ChangeTableBordersAndShadingCommand = function() {
    ///<summary>
    ///A command to change borders and shading of the selected table elements.
    ///</summary>
};
ToggleTableCellAlignTopLeftCommand = function() {
    ///<summary>
    ///A command to apply top-left alignment for the selected table cells.
    ///</summary>
};
ToggleTableCellAlignTopCenterCommand = function() {
    ///<summary>
    ///A command to apply top-center alignment for the selected table cells.
    ///</summary>
};
ToggleTableCellAlignTopRightCommand = function() {
    ///<summary>
    ///A command to apply top-right alignment for the selected table cells.
    ///</summary>
};
ToggleTableCellAlignMiddleLeftCommand = function() {
    ///<summary>
    ///A command to apply middle-left alignment for the selected table cells.
    ///</summary>
};
ToggleTableCellAlignMiddleCenterCommand = function() {
    ///<summary>
    ///A command to apply middle-center alignment for the selected table cells.
    ///</summary>
};
ToggleTableCellAlignMiddleRightCommand = function() {
    ///<summary>
    ///A command to apply middle-right alignment for the selected table cells.
    ///</summary>
};
ToggleTableCellAlignBottomLeftCommand = function() {
    ///<summary>
    ///A command to apply bottom-left alignment for the selected table cells.
    ///</summary>
};
ToggleTableCellAlignBottomCenterCommand = function() {
    ///<summary>
    ///A command to apply bottom-center alignment for the selected table cells.
    ///</summary>
};
ToggleTableCellAlignBottomRightCommand = function() {
    ///<summary>
    ///A command to apply bottom-right alignment for the selected table cells.
    ///</summary>
};
ChangeTableStyleCommand = function() {
    ///<summary>
    ///A command to change the selected table's style.
    ///</summary>
};
ToggleTableCellTopBorderCommand = function() {
    ///<summary>
    ///A command to toggle top borders for selected cells on/off.
    ///</summary>
};
ToggleTableCellRightBorderCommand = function() {
    ///<summary>
    ///A command to toggle right borders for selected cells on/off.
    ///</summary>
};
ToggleTableCellBottomBorderCommand = function() {
    ///<summary>
    ///A command to toggle bottom borders for selected cells on/off.
    ///</summary>
};
ToggleTableCellLeftBorderCommand = function() {
    ///<summary>
    ///
    ///</summary>
};
RemoveTableCellBordersCommand = function() {
    ///<summary>
    ///A command to remove the borders of the selected table cells.
    ///</summary>
};
ToggleTableCellAllBordersCommand = function() {
    ///<summary>
    ///A command to toggle all borders for selected cells on/off.
    ///</summary>
};
ToggleTableCellInsideBordersCommand = function() {
    ///<summary>
    ///A command to toggle inner borders for selected cells on/off.
    ///</summary>
};
ToggleTableCellInsideHorizontalBordersCommand = function() {
    ///<summary>
    ///A command to toggle inner horizontal borders for selected cells on/off.
    ///</summary>
};
ToggleTableCellInsideVerticalBordersCommand = function() {
    ///<summary>
    ///A command to toggle inner vertical borders for selected cells on/off.
    ///</summary>
};
ToggleTableCellOutsideBordersCommand = function() {
    ///<summary>
    ///A command to toggle outer borders for selected cells on/off.
    ///</summary>
};
ChangeTableLookCommand = function() {
    ///<summary>
    ///A command to change the selected table's style options.
    ///</summary>
};
ChangeTableBorderRepositoryItemCommand = function() {
    ///<summary>
    ///A command to change the repository item's table border style.
    ///</summary>
};
ChangeTableCellShadingCommand = function() {
    ///<summary>
    ///A command to change cell shading in the selected table elements.
    ///</summary>
};
ShowTableGridLinesCommand = function() {
    ///<summary>
    ///A command to toggle the display of grid lines for a table with no borders applied - on/off.
    ///</summary>
};
TableLookSettings = function() {
    ///<summary>
    ///Contains the table style settings that modify the table appearance.
    ///</summary>
    ///<field name = "applyFirstRow" type = "Boolean">
    ///Gets or sets a value specifying whether special formatting is applied to the first row of the table. Value: true, to apply the formatting; otherwise, false.
    ///</field>
    ///<field name = "applyLastRow" type = "Boolean">
    ///Gets or sets a value specifying whether special formatting is applied to the last row of the table. Value: true, to apply the formatting; otherwise, false.
    ///</field>
    ///<field name = "applyFirstColumn" type = "Boolean">
    ///Gets or sets a value specifying whether special formatting is applied to the first column of the table. Value: true, to apply the formatting; otherwise, false.
    ///</field>
    ///<field name = "applyLastColumn" type = "Boolean">
    ///Gets or sets a value specifying whether special formatting is applied to the last column of the table. Value: true, to apply the formatting; otherwise, false.
    ///</field>
    ///<field name = "doNotApplyRowBanding" type = "Boolean">
    ///Gets or sets a value specifying whether row banding formatting is not applied to the table. Value: true, to apply the formatting; otherwise, false.
    ///</field>
    ///<field name = "doNotApplyColumnBanding" type = "Boolean">
    ///Gets or sets a value specifying whether column banding formatting is not applied to the table. Value: true, to apply the formatting; otherwise, false.
    ///</field>
};
TableBordersSettings = function() {
    ///<summary>
    ///Contains settings to define table borders.
    ///</summary>
    ///<field name = "top" type = "TableBorderSettings">
    ///Gets or sets the top border's settings. Value: A TableBorderSettings object containing the table border settings.
    ///</field>
    ///<field name = "right" type = "TableBorderSettings">
    ///Gets or sets the right border's settings. Value: A TableBorderSettings object containing the table border settings.
    ///</field>
    ///<field name = "bottom" type = "TableBorderSettings">
    ///Gets or sets the bottom border's settings. Value: A TableBorderSettings object containing the table border settings.
    ///</field>
    ///<field name = "left" type = "TableBorderSettings">
    ///Gets or sets the left border's settings. Value: A TableBorderSettings object containing the table border settings.
    ///</field>
    ///<field name = "insideHorizontal" type = "TableBorderSettings">
    ///Gets or sets the inside horizontal border's settings. Value: A TableBorderSettings object containing the table border settings.
    ///</field>
    ///<field name = "insideVertical" type = "TableBorderSettings">
    ///Gets or sets the inside vertical border's settings. Value: A TableBorderSettings object containing the table border settings.
    ///</field>
    ///<field name = "backgroundColor" type = "String">
    ///Gets or sets the background color of table borders. Value: A string value specifying the background color.
    ///</field>
};
TableBorderSettings = function() {
    ///<summary>
    ///Contains settings to define a table border.
    ///</summary>
    ///<field name = "color" type = "String">
    ///Gets or sets the border color. Value: A string value specifying the border color.
    ///</field>
    ///<field name = "width" type = "Int32">
    ///Gets or sets the border line width. Value: An integer value defining the border line width.
    ///</field>
    ///<field name = "style" type = "BorderLineStyle">
    ///Gets or sets the border line style. Value: A <see cref="BorderLineStyle" /> object defining the border line style.
    ///</field>
};
TableCellFormattingSettings = function() {
    ///<summary>
    ///Contains the settings to define the table cell formatting.
    ///</summary>
    ///<field name = "preferredWidth" type = "TableWidthUnit">
    ///Gets or sets a table cell's preferred width. Value: A <see cref="TableWidthUnit" /> object specifying the preferred cell width.
    ///</field>
    ///<field name = "verticalAlignment" type = "TableCellVerticalAlignment">
    ///Gets or sets the vertical alignment of a table cell's content. Value: One the <see cref="TableCellVerticalAlignment" /> values.
    ///</field>
    ///<field name = "noWrap" type = "Boolean">
    ///Gets or sets a value specifying whether text is wrapped in a table cell. Value: true if text is wrapped; false if text is not wrapped.
    ///</field>
    ///<field name = "marginLeft" type = "Int32">
    ///Gets or sets a table cell's left margin. Value: An integer value specifying the left margin.
    ///</field>
    ///<field name = "marginRight" type = "Int32">
    ///Gets or sets a table cell's right margin. Value: An integer value specifying the right margin.
    ///</field>
    ///<field name = "marginTop" type = "Int32">
    ///Gets or sets a table cell's top margin. Value: An integer value specifying the top margin.
    ///</field>
    ///<field name = "marginBottom" type = "Int32">
    ///Gets or sets a table cell's bottom margin. Value: An integer value specifying the bottom margin.
    ///</field>
    ///<field name = "marginsSameAsTable" type = "Boolean">
    ///Gets or sets a value specifying whether a table cell's margins are inherited from the table level settings. Value: true to inherit table level margins; false to use a table cell's own margin settings.
    ///</field>
};
TableFormattingSettings = function() {
    ///<summary>
    ///Contains the settings to format a table.
    ///</summary>
    ///<field name = "preferredWidth" type = "TableWidthUnit">
    ///Gets or sets the preferred width of cells in the table. Value: A <see cref="TableWidthUnit" /> object specifying the width.
    ///</field>
    ///<field name = "alignment" type = "TableRowAlignment">
    ///Gets or sets the alignment of table rows. Value: One of the <see cref="TableRowAlignment" /> values.
    ///</field>
    ///<field name = "indent" type = "Int32">
    ///Gets or sets the table's left indent. Value: An integer value specifying the indent.
    ///</field>
    ///<field name = "spacingBetweenCells" type = "Int32">
    ///Gets or sets the spacing between table cells. Value: An integer value specifying the spacing.
    ///</field>
    ///<field name = "allowSpacingBetweenCells" type = "Boolean">
    ///Gets or sets a value specifying whether spacing is allowed between table cells. Value: true, to allow spacing; otherwise, false.
    ///</field>
    ///<field name = "resizeToFitContent" type = "Boolean">
    ///Gets or sets a value that specifying whether to allow automatic resizing of table cells to fit their contents. Value: true, to allow automatic resizing; otherwise, false.
    ///</field>
    ///<field name = "defaultCellMarginLeft" type = "Int32">
    ///Gets or sets the default left margin for cells in the table. Value: An integer value specifying the margin value.
    ///</field>
    ///<field name = "defaultCellMarginRight" type = "Int32">
    ///Gets or sets the default right margin for cells in the table. Value: An integer value specifying the margin value.
    ///</field>
    ///<field name = "defaultCellMarginTop" type = "Int32">
    ///Gets or sets the default top margin for cells in the table. Value: An integer value specifying the margin value.
    ///</field>
    ///<field name = "defaultCellMarginBottom" type = "Int32">
    ///Gets or sets the default bottom margin for cells in the table. Value: An integer value specifying the margin value.
    ///</field>
};
TableWidthUnit = function() {
    ///<summary>
    ///Contains settings defining the table width's measurement units and value.
    ///</summary>
    ///<field name = "value" type = "Int32">
    ///Gets or sets the table width value. Value: An integer value specifying the table width.
    ///</field>
    ///<field name = "type" type = "TableWidthUnitType">
    ///Gets or sets the unit type for the table width. Value: One of the <see cref="TableWidthUnitType" /> values.
    ///</field>
};
TableHeightUnit = function() {
    ///<summary>
    ///Contains settings defining the table height's measurement units and value.
    ///</summary>
    ///<field name = "value" type = "Int32">
    ///Gets or sets the table height value. Value: An integer value specifying the table height.
    ///</field>
    ///<field name = "type" type = "TableHeightUnitType">
    ///</field>
};
ChangeFontNameCommand = function() {
    ///<summary>
    ///A command to change the font name of characters in a selected range.
    ///</summary>
};
ChangeFontSizeCommand = function() {
    ///<summary>
    ///A command to change the font size of characters in a selected range.
    ///</summary>
};
IncreaseFontSizeCommand = function() {
    ///<summary>
    ///A command to increase the font size of characters in a selected range to the closest larger predefined value.
    ///</summary>
};
DecreaseFontSizeCommand = function() {
    ///<summary>
    ///A command to decrease the font size of characters in a selected range to the closest smaller predefined value.
    ///</summary>
};
MakeTextUpperCaseCommand = function() {
    ///<summary>
    ///A command to convert the selected text to upper case.
    ///</summary>
};
MakeTextLowerCaseCommand = function() {
    ///<summary>
    ///A command to convert the selected text to lower case.
    ///</summary>
};
CapitalizeEachWordTextCaseCommand = function() {
    ///<summary>
    ///A command to capitalize each word in the selected sentence.
    ///</summary>
};
ToggleTextCaseCommand = function() {
    ///<summary>
    ///A command to toggle the case for each character - upper case becomes lower, lower case becomes upper.
    ///</summary>
};
ChangeFontBoldCommand = function() {
    ///<summary>
    ///A command to change the bold formatting of characters in a selected range.
    ///</summary>
};
ChangeFontItalicCommand = function() {
    ///<summary>
    ///A command to change the italic formatting of characters in a selected range.
    ///</summary>
};
ChangeFontUnderlineCommand = function() {
    ///<summary>
    ///A command to change the underline formatting of characters in a selected range.
    ///</summary>
};
ChangeFontStrikeoutCommand = function() {
    ///<summary>
    ///A command to change the strikeout formatting of characters in a selected range.
    ///</summary>
};
ChangeFontSuperscriptCommand = function() {
    ///<summary>
    ///A command to change the superscript formatting of characters in a selected range.
    ///</summary>
};
ChangeFontSubscriptCommand = function() {
    ///<summary>
    ///A command to change the subscript formatting of characters in the selected range.
    ///</summary>
};
ChangeFontForeColorCommand = function() {
    ///<summary>
    ///A command to change the font color of characters in a selected range.
    ///</summary>
};
ChangeFontBackColorCommand = function() {
    ///<summary>
    ///A command to change the background color of characters in a selected range.
    ///</summary>
};
ClearFormattingCommand = function() {
    ///<summary>
    ///A command to reset the selected text's formatting to default.
    ///</summary>
};
ChangeStyleCommand = function() {
    ///<summary>
    ///A command to change the selected range's style.
    ///</summary>
};
OpenFontFormattingDialogCommand = function() {
    ///<summary>
    ///A command to invoke the Font dialog allowing end-users to change the font, size and style of the selected text.
    ///</summary>
};
MakeTextSentenceCaseCommand = function() {
    ///<summary>
    ///A command to convert the text of all selected sentences to sentence case.
    ///</summary>
};
SwitchTextCaseCommand = function() {
    ///<summary>
    ///A command to switch the text case at the current position in the document.
    ///</summary>
};
ChangeFontFormattingCommand = function() {
    ///<summary>
    ///A command to change the font formatting of characters in a selected range.
    ///</summary>
};
FontFormattingSettings = function() {
    ///<summary>
    ///Contains settings to define the font formatting.
    ///</summary>
    ///<field name = "fontName" type = "String">
    ///Gets or sets the character(s) font name. Value: A string value specifying the font name.
    ///</field>
    ///<field name = "size" type = "Int32">
    ///Gets or sets the character(s) font size. Value: An integer value specifying the font size.
    ///</field>
    ///<field name = "foreColor" type = "String">
    ///Gets or sets the foreground color of characters. Value: A string value specifying the foreground color.
    ///</field>
    ///<field name = "backColor" type = "String">
    ///Gets or sets the character background color. Value: A string value specifying the background color.
    ///</field>
    ///<field name = "underline" type = "Boolean">
    ///Gets or sets the type of underline applied to the character(s). Value: true, if characters are underlined; otherwise, false.
    ///</field>
    ///<field name = "underlineColor" type = "String">
    ///Gets or sets the color of the underline for the specified characters. Value: A string value specifying the underline color.
    ///</field>
    ///<field name = "bold" type = "Boolean">
    ///Gets or sets whether the character formatting is bold. Value: true, if characters are bold; otherwise, false.
    ///</field>
    ///<field name = "italic" type = "Boolean">
    ///Gets or sets a value indicating whether a character(s) is italicized. Value: true, if characters are italicized; otherwise, false.
    ///</field>
    ///<field name = "strikeout" type = "Boolean">
    ///</field>
    ///<field name = "underlineWordsOnly" type = "Boolean">
    ///Gets or sets whether only word characters are underlined. Value: true to underline only characters in words; false to underline all characters.
    ///</field>
    ///<field name = "script" type = "CharacterFormattingScript">
    ///Gets or sets a value specifying character script formatting. Value: One of the <see cref="CharacterFormattingScript" /> values.
    ///</field>
    ///<field name = "allCaps" type = "Boolean">
    ///Gets or sets a value indicating whether all characters are capital letters. Value: true, if all characters are capitalized; otherwise, false.
    ///</field>
    ///<field name = "hidden" type = "Boolean">
    ///Gets or sets a value indicating whether a character(s) is hidden. Value: true, if characters are hidden; otherwise, false.
    ///</field>
};
ShowHorizontalRulerCommand = function() {
    ///<summary>
    ///A command to toggle the horizontal ruler's visibility.
    ///</summary>
};
SetFullscreenCommand = function() {
    ///<summary>
    ///A command to toggle the fullscreen mode.
    ///</summary>
};
ASPxClientAppointmentFlags = function() {
    ///<summary>
    ///Holds the information that determines what action types can be performed for appointments.
    ///</summary>
    ///<field name = "allowDelete" type = "Boolean">
    ///Gets a value that specifies whether an end-user is allowed to delete appointments. Value: true if an end-user can delete appointments; otherwise, false. Default is true.
    ///</field>
    ///<field name = "allowEdit" type = "Boolean">
    ///Gets a value that specifies whether an end-user is allowed to edit appointments. Value: true if the end-user can edit appointments; otherwise, false.
    ///</field>
    ///<field name = "allowResize" type = "Boolean">
    ///Gets a value that specifies whether an end-user is allowed to change the time boundaries of appointments. Value: true if appointment resizing is allowed; otherwise, false. Default is true.
    ///</field>
    ///<field name = "allowCopy" type = "Boolean">
    ///Gets a value that specifies whether an end-user is allowed to copy appointments. Value: true if a user can copy appointments; otherwise, false. Default is true.
    ///</field>
    ///<field name = "allowDrag" type = "Boolean">
    ///Gets a value that specifies whether an end-user is allowed to drag and drop appointments to another time slot or date. Value: true if the user can drag and drop appointments; otherwise, false.
    ///</field>
    ///<field name = "allowDragBetweenResources" type = "Boolean">
    ///Gets a value that specifies whether an end-user is allowed to drag and drop appointments between resources. Value: true if the end-user can drag appointment from one resource to another; otherwise, false.
    ///</field>
    ///<field name = "allowInplaceEditor" type = "Boolean">
    ///Gets a value that specifies whether an inplace editor can be activated for an appointment. Value: true if an inplace editor is activated; otherwise, false. Default is true.
    ///</field>
    ///<field name = "allowConflicts" type = "Boolean">
    ///Gets a value that specifies whether an end-user is allowed to share the schedule time between two or more appointments. Value: true if appointments with the same schedule time are allowed; otherwise, false. Default is true.
    ///</field>
};
ASPxClientAppointment = function() {
    ///<summary>
    ///Represents a client-side equivalent of the Appointment class.
    ///</summary>
    ///<field name = "interval" type = "ASPxClientTimeInterval">
    ///Gets the time interval of the appointment for client-side scripting. Value: An ASPxClientTimeInterval object, representing the interval assigned to an appointment.
    ///</field>
    ///<field name = "resources" type = "Array" elementType = "String">
    ///Gets the identifiers of resources associated with the appointment for client-side scripting. Value: An array of string representations for resource identifiers.
    ///</field>
    ///<field name = "appointmentId" type = "String">
    ///Gets the ID of an appointment for use in client-side scripts. Value: A string representation of the appointment ID.
    ///</field>
    ///<field name = "appointmentType" type = "ASPxAppointmentType">
    ///Gets the type of appointment for use in client-side scripts. Value: An ASPxAppointmentType enumeration member, representing the appointment's type.
    ///</field>
    ///<field name = "statusIndex" type = "Int32">
    ///Gets the index of the availability status object associated with the appointment. Value: An integer value that specifies the index of the corresponding Statuses collection.
    ///</field>
    ///<field name = "labelIndex" type = "Int32">
    ///Gets  the index of the label object associated with the appointment for client-side scripting. Value: An integer value that specifies the index of the corresponding Labels collection.
    ///</field>
    ///<field name = "subject" type = "String">
    ///Gets the client appointment value that is equivalent in meaning to the Subject property. Value: A string representing the appointment subject.
    ///</field>
    ///<field name = "description" type = "String">
    ///Gets the client appointment value that is equivalent in meaning to the Description property. Value: A string, representing the description for an appointment.
    ///</field>
    ///<field name = "location" type = "String">
    ///Gets the client appointment value that is equivalent in meaning to the Location property. Value: A string representing the appointment location.
    ///</field>
    ///<field name = "allDay" type = "Boolean">
    ///Gets the client appointment value that is equivalent in meaning to the AllDay property. Value: true indicates the all-day appointment; otherwise, false.
    ///</field>
};
ASPxClientPoint = function() {
    ///<summary>
    ///A client point object.
    ///</summary>
};
ASPxClientRect = function() {
    ///<summary>
    ///A client rectangle object.
    ///</summary>
};
ASPxClientRecurrenceInfo = function() {
    ///<summary>
    ///Contains information defining the occurrences of a recurring client appointment.
    ///</summary>
};
ASPxClientRecurrenceRange = function() {
    ///<summary>
    ///Contains types of the recurrence range.
    ///</summary>
    ///<field name = "NoEndDate" type = "String">
    ///A recurring appointment will not have an end date, i.e. infinite recurrence Value: The "NoEndDate" string.
    ///</field>
    ///<field name = "OccurrenceCount" type = "String">
    ///A recurring appointment will end after its recurrence count exceeds the value specified by the SetOccurrenceCount method. Value: The "OccurrenceCount" string.
    ///</field>
    ///<field name = "EndByDate" type = "String">
    ///A recurring appointment will end after the date specified by the SetEnd method. Value: The "EndByDate" string.
    ///</field>
};
ASPxClientRecurrenceType = function() {
    ///<summary>
    ///Contains recurrence types.
    ///</summary>
    ///<field name = "Daily" type = "String">
    ///The recurring appointment occurs on a daily basis. Value: The "Daily" string.
    ///</field>
    ///<field name = "Weekly" type = "String">
    ///The recurring appointment reoccurs on a weekly basis. Value: The "Weekly" string.
    ///</field>
    ///<field name = "Monthly" type = "String">
    ///The recurring appointment reoccurs on a monthly basis. Value: The "Monthly" string.
    ///</field>
    ///<field name = "Yearly" type = "String">
    ///The recurring appointment reoccurs on an yearly basis. Value: The "Yearly" string.
    ///</field>
    ///<field name = "Hourly" type = "String">
    ///The recurring appointment occurs on an hourly base. Value: The "Hourly" string.
    ///</field>
};
ASPxClientWeekDays = function() {
    ///<summary>
    ///Contains days and groups of days for use in recurrence patterns.
    ///</summary>
    ///<field name = "Sunday" type = "Int32">
    ///Specifies Sunday. Value: The integer 1 value.
    ///</field>
    ///<field name = "Monday" type = "Int32">
    ///Specifies Monday. Value: The integer 2 value.
    ///</field>
    ///<field name = "Tuesday" type = "Int32">
    ///Specifies Tuesday. Value: The integer 4 value.
    ///</field>
    ///<field name = "Wednesday" type = "Int32">
    ///Specifies Wednesday. Value: The integer 8 value.
    ///</field>
    ///<field name = "Thursday" type = "Int32">
    ///Specifies Thursday. Value: The integer 16 value.
    ///</field>
    ///<field name = "Friday" type = "Int32">
    ///Specifies Friday. Value: The integer 32 value.
    ///</field>
    ///<field name = "Saturday" type = "Int32">
    ///Specifies Saturday. Value: The integer 64 value.
    ///</field>
    ///<field name = "WeekendDays" type = "Int32">
    ///Specifies Saturday and Sunday. Value: The integer 65 value.
    ///</field>
    ///<field name = "WorkDays" type = "Int32">
    ///Specifies work days (Monday, Tuesday, Wednesday, Thursday and Friday). Value: The integer 62 value.
    ///</field>
    ///<field name = "EveryDay" type = "Int32">
    ///Specifies every day of the week. Value: The integer 127 value.
    ///</field>
};
ASPxClientWeekOfMonth = function() {
    ///<summary>
    ///Contains number of weeks in a month in which the event occurs.
    ///</summary>
    ///<field name = "None" type = "Int32">
    ///There isn't any recurrence rule based on the weeks in a month. Value: The integer 0 value.
    ///</field>
    ///<field name = "First" type = "Int32">
    ///The recurring event will occur once a month, on the specified day or days of the first week in the month. Value: The integer 1 value.
    ///</field>
    ///<field name = "Second" type = "Int32">
    ///The recurring event will occur once a month, on the specified day or days of the second week in the month. Value: The integer 2 value.
    ///</field>
    ///<field name = "Third" type = "Int32">
    ///The recurring event will occur once a month, on the specified day or days of the third week in the month. Value: The integer 3 value.
    ///</field>
    ///<field name = "Fourth" type = "Int32">
    ///The recurring event will occur once a month, on the specified day or days of the fourth week in the month. Value: The integer 4 value;
    ///</field>
    ///<field name = "Last" type = "Int32">
    ///The recurring event will occur once a month, on the specified day or days of the last week in the month. Value: The integer 5 value;
    ///</field>
};
ASPxSchedulerDateTimeHelper = function() {
    ///<summary>
    ///Exposes static methods that simplify working with JavaScript DateTime values.
    ///</summary>
};
ASPxClientWeekDaysCheckEdit = function() {
    ///<summary>
    ///Represents a client-side equivalent of the WeekDaysCheckEdit control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientRecurrenceRangeControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the RecurrenceRangeControl.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientRecurrenceControlBase = function() {
    ///<summary>
    ///A base for client equivalents of recurrence controls available in the XtraScheduler library.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientDailyRecurrenceControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the DailyRecurrenceControl - a control for specifying the daily recurrence.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientWeeklyRecurrenceControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the WeeklyRecurrenceControl.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientMonthlyRecurrenceControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the MonthlyRecurrenceControl.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientYearlyRecurrenceControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the YearlyRecurrenceControl.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
DefaultRecurrenceRuleValuesAccessor = function() {
    ///<summary>
    ///An object providing access to an ASPxClientRecurrenceControlBase control's editor values.
    ///</summary>
};
DailyRecurrenceValuesAccessor = function() {
    ///<summary>
    ///An object providing access to an ASPxClientDailyRecurrenceControl's editor values.
    ///</summary>
};
WeeklyRecurrenceValuesAccessor = function() {
    ///<summary>
    ///An object providing access to an ASPxClientWeeklyRecurrenceControl's editor values.
    ///</summary>
};
MonthlyRecurrenceValuesAccessor = function() {
    ///<summary>
    ///An object providing access to an ASPxClientMonthlyRecurrenceControl's editor values.
    ///</summary>
};
YearlyRecurrenceValuesAccessor = function() {
    ///<summary>
    ///An object providing access to an ASPxClientYearlyRecurrenceControl's editor values.
    ///</summary>
};
ASPxClientFormBase = function() {
    ///<summary>
    ///Provides base functionality for ASPxClientScheduler's forms.
    ///</summary>
    ///<field name = "FormClosed" type = "ASPxClientEvent">
    ///Occurs when the form has been closed.
    ///</field>
};
ASPxClientRecurrenceTypeEdit = function() {
    ///<summary>
    ///Represents a client-side equivalent of the RecurrenceTypeEdit.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
AppointmentPropertyNames = function() {
    ///<summary>
    ///Contains lists of property names for different appointment types.
    ///</summary>
    ///<field name = "Normal" type = "String">
    ///Gets the list of properties characteristic for appointments of the Normal type. Value: A string array which is composed of the appointment property names.
    ///</field>
    ///<field name = "Pattern" type = "String">
    ///Gets the list of properties characteristic for appointments of the Pattern type. Value: A string array which is composed of the appointment property names.
    ///</field>
};
ASPxClientTimeInterval = function() {
    ///<summary>
    ///Represents the client-side equivalent of the TimeInterval class.
    ///</summary>
};
ASPxClientSchedulerRefreshAction = function() {
    ///<summary>
    ///Holds action types for the client-side Refresh method.
    ///</summary>
    ///<field name = "None" type = "Int32">
    ///Gets the value of the action parameter which initiates a simple reload of the control. Value: An integer representing the action parameter value.
    ///</field>
    ///<field name = "VisibleIntervalChanged" type = "Int32">
    ///Gets the value of the action parameter which initiates reloading of the main ASPxScheduler control and its data-dependent satellites. Value: An integer representing the action parameter value.
    ///</field>
    ///<field name = "ActiveViewTypeChanged" type = "Int32">
    ///Gets the value of the action parameter which initiates reloading of the main ASPxScheduler control and its satellite View controls. Value: An integer representing the action parameter value.
    ///</field>
};
ASPxClientAppointmentOperation = function() {
    ///<summary>
    ///Contains methods allowing you to perform or cancel an operation.
    ///</summary>
};
ASPxClientScheduler = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxScheduler control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientScheduler.
    ///</field>
    ///<field name = "ActiveViewChanging" type = "ASPxClientEvent">
    ///Occurs on the client side when the Scheduler control is about to change its active view.
    ///</field>
    ///<field name = "ActiveViewChanged" type = "ASPxClientEvent">
    ///Client-side event. Occurs after the active view of the ASPxScheduler has been changed.
    ///</field>
    ///<field name = "Shortcut" type = "ASPxClientEvent">
    ///Occurs when an end-user pressers a keyboard shortcut.
    ///</field>
    ///<field name = "AppointmentClick" type = "ASPxClientEvent">
    ///Occurs when the end-user clicks an appointment.
    ///</field>
    ///<field name = "AppointmentDoubleClick" type = "ASPxClientEvent">
    ///Occurs when the end-user double clicks on an appointment.
    ///</field>
    ///<field name = "CellClick" type = "ASPxClientEvent">
    ///Occurs when an end-user clicks a time cell.
    ///</field>
    ///<field name = "CellDoubleClick" type = "ASPxClientEvent">
    ///Occurs when and end-user double-clicks a time cell.
    ///</field>
    ///<field name = "AppointmentsSelectionChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the user selects an appointment.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the time cell selection is changed.
    ///</field>
    ///<field name = "SelectionChanging" type = "ASPxClientEvent">
    ///Occurs on the client side when the time cell selection is about to change.
    ///</field>
    ///<field name = "VisibleIntervalChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the  time interval of the scheduling area is changed.
    ///</field>
    ///<field name = "MoreButtonClicked" type = "ASPxClientEvent">
    ///Occurs when one of  More Buttons is clicked.
    ///</field>
    ///<field name = "MenuItemClicked" type = "ASPxClientEvent">
    ///Client-side event that occurs when a popup menu item is clicked.
    ///</field>
    ///<field name = "AppointmentDrop" type = "ASPxClientEvent">
    ///Client-side event that occurs after an appointment has been dragged and dropped.
    ///</field>
    ///<field name = "AppointmentDrag" type = "ASPxClientEvent">
    ///A client-side event that occurs when an appointment is being dragged.
    ///</field>
    ///<field name = "AppointmentResizing" type = "ASPxClientEvent">
    ///A client-side event that occurs when an appointment is being resized.
    ///</field>
    ///<field name = "AppointmentResize" type = "ASPxClientEvent">
    ///Client-side event that occurs when an appointment is resized.
    ///</field>
    ///<field name = "AppointmentDeleting" type = "ASPxClientEvent">
    ///Client-side event that fires before an appointment is deleted.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxSchedulerViewType = function() {
    ///<summary>
    ///Represents a client-side equivalent of the SchedulerViewType object.
    ///</summary>
    ///<field name = "Day" type = "String">
    ///Gets a string representation equivalent of Day enumeration for use in client scripts. Value: A string "Day", indicating the DayView.
    ///</field>
    ///<field name = "WorkWeek" type = "String">
    ///Gets a string representation equivalent of WorkWeek enumeration for use in client scripts. Value: A string "WorkWeek", indicating the WorkWeekView.
    ///</field>
    ///<field name = "Week" type = "String">
    ///Gets a string representation equivalent of Week enumeration for use in client scripts. Value: A string "Week", indicating the WeekView.
    ///</field>
    ///<field name = "Month" type = "String">
    ///Gets a string representation equivalent of Month enumeration for use in client scripts. Value: A string "Month", indicating the MonthView.
    ///</field>
    ///<field name = "Timeline" type = "String">
    ///Gets a string representation equivalent of Timeline enumeration for use in client scripts. Value: A string "Timeline", indicating the TimelineView.
    ///</field>
    ///<field name = "FullWeek" type = "String">
    ///Gets a string representation equivalent of FullWeek enumeration for use in client scripts. Value: A string "FullWeek", indicating the FullWeekView.
    ///</field>
    ///<field name = "Agenda" type = "String">
    ///Gets a string representation equivalent to the Agenda enumeration for use in client scripts. Value: A string "Agenda", indicating the AgendaView.
    ///</field>
};
ASPxSchedulerGroupType = function() {
    ///<summary>
    ///Represents a client-side equivalent of the SchedulerGroupType enumeration.
    ///</summary>
    ///<field name = "None" type = "String">
    ///Gets a string representation equivalent of None enumeration for use in client scripts. Value: A "None" string value.
    ///</field>
    ///<field name = "Date" type = "String">
    ///Gets a string representation equivalent of Date enumeration for use in client scripts. Value: A "Date" string value.
    ///</field>
    ///<field name = "Resource" type = "String">
    ///Gets a string representation equivalent of Resource enumeration for use in client scripts. Value: A "Resource" string value.
    ///</field>
};
ASPxAppointmentType = function() {
    ///<summary>
    ///Represents a client-side equivalent of the AppointmentType enumeration.
    ///</summary>
    ///<field name = "Normal" type = "String">
    ///Gets a string representation equivalent of Normal enumeration for use in client scripts. Value: A "Normal" string value.
    ///</field>
    ///<field name = "Pattern" type = "String">
    ///Gets a string representation equivalent of Pattern enumeration for use in client scripts. Value: A "Pattern" string value.
    ///</field>
    ///<field name = "Occurrence" type = "String">
    ///Gets a string representation equivalent of Occurrence enumeration for use in client scripts. Value: An "Occurrence" string value.
    ///</field>
    ///<field name = "ChangedOccurrence" type = "String">
    ///Gets a string representation equivalent of ChangedOccurrence enumeration for use in client scripts. Value: A "ChangedOccurrence" string value.
    ///</field>
    ///<field name = "DeletedOccurrence" type = "String">
    ///Gets a string representation equivalent of DeletedOccurrence enumeration for use in client scripts. Value: A "DeletedOccurrence" string value.
    ///</field>
};
ASPxClientAppointmentDeletingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the AppointmentDeleting event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender (typically an ASPxClientScheduler control).
    ///</param>
    ///<param name = "e" type = "ASPxClientAppointmentDeletingEventArgs">
    ///A ASPxClientAppointmentDeletingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointmentDeletingEventArgs = function() {
    ///<summary>
    ///Provides data for the AppointmentDeleting event.
    ///</summary>
    ///<field name = "appointmentIds" type = "Array" elementType = "Object">
    ///Gets client IDs of the appointments that are intended to be removed. Value: An array of client appointment identifiers, representing appointments passed for deletion.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
AppointmentClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the AppointmentClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender (typically an ASPxClientScheduler control).
    ///</param>
    ///<param name = "e" type = "AppointmentClickEventArgs">
    ///A AppointmentClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
AppointmentClickEventArgs = function() {
    ///<summary>
    ///Provides data for the AppointmentDoubleClick events.
    ///</summary>
    ///<field name = "appointmentId" type = "String">
    ///Gets the client appointment ID for the appointment being clicked. Value: A string, representing the client ID of the appointment.
    ///</field>
    ///<field name = "htmlElement" type = "Object">
    ///Gets the HTML element that the event was triggered on. Value: An object containing event data.
    ///</field>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets whether an event is handled, and that default actions are not required. Value: true if no default processing is required; otherwise, false.
    ///</field>
};
AppointmentsSelectionEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the AppointmentsSelectionChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The ASPxScheduler control which fires the event.
    ///</param>
    ///<param name = "e" type = "AppointmentsSelectionEventArgs">
    ///A AppointmentsSelectionEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
AppointmentsSelectionEventArgs = function() {
    ///<summary>
    ///Provides data for the AppointmentsSelectionChanged event.
    ///</summary>
    ///<field name = "appointmentIds" type = "Array" elementType = "String">
    ///Gets identifiers of the selected appointments. Value: A comma separated list of string values, representing appointment IDs.
    ///</field>
};
ShortcutEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the Shortcut event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender (typically an ASPxClientScheduler control).
    ///</param>
    ///<param name = "e" type = "ShortcutEventArgs">
    ///A ShortcutEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ShortcutEventArgs = function() {
    ///<summary>
    ///Provides data for the client-side Shortcut event.
    ///</summary>
    ///<field name = "commandName" type = "String">
    ///Gets the name of a command associated with the keyboard shortcut. Value: A string containing a command name.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets an object containing information about a keyboard shortcut event. Value: An object containing event data.
    ///</field>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets whether an event is handled, and that default actions are not required. Value: true, if no default processing is required; otherwise, false.
    ///</field>
};
ActiveViewChangingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ActiveViewChanging event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The ASPxClientScheduler control which fires the event.
    ///</param>
    ///<param name = "e" type = "ActiveViewChangingEventArgs">
    ///An ActiveViewChangingEventArgs object that contains event data
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ActiveViewChangingEventArgs = function() {
    ///<summary>
    ///Provides data for the client-side ActiveViewChanging event.
    ///</summary>
    ///<field name = "oldView" type = "ASPxSchedulerViewType">
    ///Gets the value of the ActiveView property before modification. Value: A SchedulerViewType enumeration.
    ///</field>
    ///<field name = "newView" type = "ASPxSchedulerViewType">
    ///Gets the new value of the ActiveView property. Value: A string, which is the SchedulerViewType enumeration value.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets whether the change of active view should be canceled. Value: true to cancel the operation; otherwise, false.
    ///</field>
};
MoreButtonClickedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle MoreButtonClicked event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The ASPxClientScheduler control which fires the event.
    ///</param>
    ///<param name = "e" type = "MoreButtonClickedEventArgs">
    ///A MoreButtonClickedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MoreButtonClickedEventArgs = function() {
    ///<summary>
    ///Provides data for the MoreButtonClicked client-side event.
    ///</summary>
    ///<field name = "targetDateTime" type = "DateTime">
    ///Gets the Start or End values of the target appointment. Value: A DateTime value representing the target appointment's boundary.
    ///</field>
    ///<field name = "interval" type = "ASPxClientTimeInterval">
    ///Gets the time interval of the cell where the button is located. Value: An ASPxClientTimeInterval object representing the time interval of the cell which holds the button.
    ///</field>
    ///<field name = "resource" type = "String">
    ///Gets the resource identifier associated with the cell where the button is located. Value: A string, corresponding to ResourceId.
    ///</field>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets whether an event is handled. If it is handled, default actions are not required. Value: true if no default processing is required; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
MenuItemClickedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the MenuItemClicked event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The ASPxClientScheduler control which fires the event.
    ///</param>
    ///<param name = "e" type = "MenuItemClickedEventArgs">
    ///A MenuItemClickedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MenuItemClickedEventArgs = function() {
    ///<summary>
    ///Provides data for the MenuItemClicked event.
    ///</summary>
    ///<field name = "itemName" type = "String">
    ///Gets the name of the menu item which is clicked. Value: A string, containing the menu item name.
    ///</field>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets whether an event is handled, and that default actions are not required. Value: true if no default processing is required; otherwise, false.
    ///</field>
};
AppointmentDragEventHandler = function(source, e) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "source" type = "Object">
    ///
    ///</param>
    ///<param name = "e" type = "ASPxClientAppointmentDragEventArgs">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointmentDragEventArgs = function() {
    ///<summary>
    ///Provides data for the AppointmentDrag event.
    ///</summary>
    ///<field name = "allow" type = "Boolean">
    ///Specifies whether or not appointments can be dropped into the intervals over which they are currently dragged. Value: true to allow dropping appointments; otherwise, false.
    ///</field>
    ///<field name = "mouseEvent" type = "Object">
    ///Gets a mouse event object related to the current drag operation. Value: An object providing event properties specific to mouse events.
    ///</field>
    ///<field name = "dragInformation" type = "Array" elementType = "ASPxClientAppointmentDragInfo">
    ///Provides information about dragged appointments. Value: An array of ASPxClientAppointmentDragInfo objects storing information about dragged appointments.
    ///</field>
};
AppointmentDropEventHandler = function(source, e) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "source" type = "Object">
    ///
    ///</param>
    ///<param name = "e" type = "ASPxClientAppointmentDropEventArgs">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointmentDropEventArgs = function() {
    ///<summary>
    ///Provides data for the AppointmentDrop event.
    ///</summary>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets a value that specifies whether the event is handled, and the default processing is not required. Value: true, if if the event is completely handled by custom code and no default processing is required; otherwise, false.
    ///</field>
    ///<field name = "operation" type = "ASPxClientAppointmentOperation">
    ///Provides access to an object that enables you to choose an operation to perform. Value: An ASPxClientAppointmentOperation object providing methods to perform the required operation.
    ///</field>
    ///<field name = "dragInformation" type = "Array" elementType = "ASPxClientAppointmentDragInfo">
    ///Provides information about dropped appointments. Value: An array of ASPxClientAppointmentDragInfo objects storing information about dropped appointments.
    ///</field>
};
AppointmentResizeEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the AppointmentResize event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender (typically an ASPxClientScheduler control).
    ///</param>
    ///<param name = "e" type = "ASPxClientAppointmentResizeEventArgs">
    ///A ASPxClientAppointmentResizeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointmentResizeEventArgs = function() {
    ///<summary>
    ///Provides data for the AppointmentResize event.
    ///</summary>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets whether default event processing is required. Value: true to process an event using only custom code; otherwise, false.
    ///</field>
    ///<field name = "operation" type = "ASPxClientAppointmentOperation">
    ///Provides access to an object that enables you to choose an operation to perform. Value: An ASPxClientAppointmentOperation object providing methods to perform the required operation.
    ///</field>
    ///<field name = "appointmentId" type = "String">
    ///Gets the resized appointment's identifier. Value: A string containing an appointment identifier.
    ///</field>
    ///<field name = "oldInterval" type = "ASPxClientTimeInterval">
    ///Gets the appointment's interval before resizing. Value: An <see cref="ASPxClientTimeInterval" /> object representing the interval assigned to the appointment.
    ///</field>
    ///<field name = "newInterval" type = "ASPxClientTimeInterval">
    ///Gets the appointment's interval after resizing. Value: An <see cref="ASPxClientTimeInterval" /> object representing the interval assigned to the appointment.
    ///</field>
};
AppointmentResizingEventHandler = function(source, e) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "source" type = "Object">
    ///
    ///</param>
    ///<param name = "e" type = "ASPxClientAppointmentResizingEventArgs">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointmentResizingEventArgs = function() {
    ///<summary>
    ///Provides data for the AppointmentResizing event.
    ///</summary>
    ///<field name = "allow" type = "Boolean">
    ///Specifies whether or not an appointment can be resized to the new time interval. Value: true to allow resizing the appointment; otherwise, false.
    ///</field>
    ///<field name = "mouseEvent" type = "Object">
    ///Gets a mouse event object related to the current appointment resizing operation. Value: An object providing event properties specific to mouse events.
    ///</field>
    ///<field name = "appointmentId" type = "String">
    ///Gets the resized appointment's identifier. Value: A string containing an appointment identifier.
    ///</field>
    ///<field name = "oldInterval" type = "ASPxClientTimeInterval">
    ///Gets the appointment's interval before resizing. Value: An <see cref="ASPxClientTimeInterval" /> object representing the interval assigned to the appointment.
    ///</field>
    ///<field name = "newInterval" type = "ASPxClientTimeInterval">
    ///Gets the appointment's interval after resizing. Value: An <see cref="ASPxClientTimeInterval" /> object representing the interval assigned to the appointment.
    ///</field>
};
ASPxClientAppointmentDragInfo = function() {
    ///<summary>
    ///Stores information about an appointment drag operation.
    ///</summary>
    ///<field name = "appointmentId" type = "String">
    ///Gets the dragged appointment's identifier. Value: A string containing an appointment identifier.
    ///</field>
    ///<field name = "oldInterval" type = "ASPxClientTimeInterval">
    ///Gets the appointment's interval before the drag operation. Value: An <see cref="ASPxClientTimeInterval" /> object representing the interval assigned to the appointment.
    ///</field>
    ///<field name = "oldResources" type = "Array" elementType = "String">
    ///Gets resources that were associated with the appointment before the drag operation. Value: A array of strings containing resource identifiers.
    ///</field>
    ///<field name = "newInterval" type = "ASPxClientTimeInterval">
    ///Gets the appointment's interval after the drag operation. Value: An <see cref="ASPxClientTimeInterval" /> object representing the interval assigned to the appointment.
    ///</field>
    ///<field name = "newResources" type = "Array" elementType = "String">
    ///Gets resources associated with the appointment after the drag operation. Value: An array of strings containing resource identifiers.
    ///</field>
};
CellClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CellClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender (typically an ASPxClientScheduler control).
    ///</param>
    ///<param name = "e" type = "CellClickEventArgs">
    ///A CellClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
CellClickEventArgs = function() {
    ///<summary>
    ///Provides data for the CellDoubleClick events.
    ///</summary>
    ///<field name = "htmlElement" type = "Object">
    ///Provides access to an object containing information about an HTML element representing the clicked time cell. Value: An object containing information about an HTML element.
    ///</field>
    ///<field name = "interval" type = "ASPxClientTimeInterval">
    ///Provides access to a time interval occupied by the clicked time cell. Value: An <see cref="ASPxClientTimeInterval" /> object.
    ///</field>
    ///<field name = "resource" type = "String">
    ///Gets the name of a resource to which the clicked time cell belongs. Value: A string containing the name of a resource.
    ///</field>
};
ASPxClientSchedulerToolTipData = function() {
    ///<summary>
    ///Contains information about a client tooltip.
    ///</summary>
};
ASPxClientToolTipBase = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxSchedulerToolTipBase control.
    ///</summary>
};
ASPxClientSpellChecker = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxSpellChecker class.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeforeCheck" type = "ASPxClientEvent">
    ///Client-side event that occurs before the spell check starts.
    ///</field>
    ///<field name = "CheckCompleteFormShowing" type = "ASPxClientEvent">
    ///Client-side event that occurs before a message box informing about process completion is shown.
    ///</field>
    ///<field name = "AfterCheck" type = "ASPxClientEvent">
    ///Client-side event that occurs when a spell check is finished.
    ///</field>
    ///<field name = "WordChanged" type = "ASPxClientEvent">
    ///Occurs after a word is changed in a checked text.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientBeforeCheckEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BeforeCheck event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The ASPxClientSpellChecker control which fires the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientSpellCheckerBeforeCheckEventArgs">
    ///A ASPxClientSpellCheckerBeforeCheckEventArgs object that contains event data
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellCheckerBeforeCheckEventArgs = function() {
    ///<summary>
    ///Provides data for an event that occurs before a spelling check is started. Represents the client-side equivalent of the BeforeCheckEventArgs class.
    ///</summary>
    ///<field name = "controlId" type = "String">
    ///Gets the programmatic identifier assigned to the control which is going to be checked. Value: A string, containing the control's identifier.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientAfterCheckEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the AfterCheck event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The ASPxClientSpellChecker control which fires the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientSpellCheckerAfterCheckEventArgs">
    ///A ASPxClientSpellCheckerAfterCheckEventArgs object that contains event data
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellCheckerAfterCheckEventArgs = function() {
    ///<summary>
    ///Provides data for the client event that occurs after a spelling check is complete.
    ///</summary>
    ///<field name = "controlId" type = "String">
    ///Gets the programmatic identifier assigned to the control which has been checked. Value: A string, containing the control's identifier.
    ///</field>
    ///<field name = "checkedText" type = "String">
    ///Gets the text that has been checked. Value: A string, containing checked text.
    ///</field>
    ///<field name = "reason" type = "String">
    ///</field>
};
ASPxClientSpellCheckerStopCheckingReason = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "Default" type = "String" static = "true">
    ///</field>
    ///<field name = "User" type = "String" static = "true">
    ///</field>
};
ASPxClientWordChangedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the AfterCheck event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientSpellCheckerAfterCheckEventArgs">
    ///An ASPxClientSpellCheckerAfterCheckEventArgs object which contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheetCustomCommandExecutedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomCommandExecuted event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the Spreadsheet that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientSpreadsheetCustomCommandExecutedEventArgs">
    ///A ASPxClientSpreadsheetCustomCommandExecutedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheetCustomCommandExecutedEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomCommandExecuted event.
    ///</summary>
    ///<field name = "commandName" type = "String">
    ///Gets the name of the processed command. Value: A string value representing the processed command's name.
    ///</field>
    ///<field name = "parameter" type = "String">
    ///Gets an optional parameter that complements the processed command. Value: A string value containing additional information about the processed command.
    ///</field>
    ///<field name = "item" type = "ASPxClientRibbonItem">
    ///This property is now obsolete. Use the commandName property instead.
    ///</field>
};
ASPxClientSpreadsheetDocumentChangedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the DocumentChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the Spreadsheet that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientSpreadsheetDocumentChangedEventArgs">
    ///A ASPxClientSpreadsheetDocumentChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheetDocumentChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the DocumentChanged event.
    ///</summary>
};
ASPxClientSpreadsheetSynchronizationEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the EndSynchronization events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the Spreadsheet that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientSpreadsheetSynchronizationEventArgs">
    ///A ASPxClientSpreadsheetSynchronizationEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheetSynchronizationEventArgs = function() {
    ///<summary>
    ///Provides data for the EndSynchronization events.
    ///</summary>
};
ASPxClientSpreadsheetHyperlinkClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the HyperlinkClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the Spreadsheet that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientSpreadsheetHyperlinkClickEventArgs">
    ///An ASPxClientSpreadsheetHyperlinkClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheetHyperlinkClickEventArgs = function() {
    ///<summary>
    ///Provides data for the HyperlinkClick event.
    ///</summary>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets a value that specifies whether the event is handled, and the default processing is not required. Value: true, if if the event is completely handled by custom code and no default processing is required; otherwise, false.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "hyperlinkType" type = "ASPxClientOfficeDocumentLinkType">
    ///Gets a value identifying the clicked hyperlink type. Value: One of the <see cref="ASPxClientOfficeDocumentLinkType" /> values.
    ///</field>
    ///<field name = "targetUri" type = "String">
    ///Gets the clicked link's URI. Value: A sting value specifying the link's URI.
    ///</field>
};
ASPxClientSpreadsheetPopupMenuShowingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the PopupMenuShowing event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender (typically an ASPxClientSpreadsheet object).
    ///</param>
    ///<param name = "e" type = "ASPxClientSpreadsheetPopupMenuShowingEventArgs">
    ///A ASPxClientSpreadsheetPopupMenuShowingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheetPopupMenuShowingEventArgs = function() {
    ///<summary>
    ///Provides data for the PopupMenuShowing event.
    ///</summary>
    ///<field name = "menuItems" type = "ASPxClientSpreadsheetPopupMenuItemCollection">
    ///Provides access to a collection of menu items in the context menu being invoked. Value: A <see cref="ASPxClientSpreadsheetPopupMenuItemCollection" /> object representing the context menu's item collection.
    ///</field>
    ///<field name = "menuType" type = "ASPxClientSpreadsheetPopupMenuType">
    ///Gets the currently displayed context menu's type. Value: One of the <see cref="ASPxClientSpreadsheetPopupMenuType" /> enumeration values.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientSpreadsheet = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxSpreadsheet object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientSpreadsheet.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Occurs on the client when a selection is changed in the ASPxSpreadsheet.
    ///</field>
    ///<field name = "CustomCommandExecuted" type = "ASPxClientEvent">
    ///Occurs after a custom command has been executed on the client side.
    ///</field>
    ///<field name = "DocumentChanged" type = "ASPxClientEvent">
    ///Fires if any change is made to the Spreadsheet's document on the client.
    ///</field>
    ///<field name = "BeginSynchronization" type = "ASPxClientEvent">
    ///Fires after a client change has been made to the document and the client-server synchronization starts to apply the change on the server.
    ///</field>
    ///<field name = "EndSynchronization" type = "ASPxClientEvent">
    ///Fires after a document change has been applied to the server and server and client document models have been synchronized.
    ///</field>
    ///<field name = "HyperlinkClick" type = "ASPxClientEvent">
    ///Occurs on the client side after a hyperlink is clicked within the Spreadsheet's document.
    ///</field>
    ///<field name = "PopupMenuShowing" type = "ASPxClientEvent">
    ///Occurs before the context menu is displayed and allows menu customization.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientSpreadsheetSelectionChangedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the SelectionChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the button editor that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientSpreadsheetSelectionChangedEventArgs">
    ///An ASPxClientSpreadsheetSelectionChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheetSelectionChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the SelectionChanged event.
    ///</summary>
    ///<field name = "selection" type = "ASPxClientSpreadsheetSelection">
    ///Gets an object that determines the currently selected region within the Spreadsheet. Value: A <see cref="ASPxClientSpreadsheetSelection" /> object defining the current selection.
    ///</field>
};
ASPxClientSpreadsheetSelection = function() {
    ///<summary>
    ///Represents the selection in the Spreadsheet.
    ///</summary>
    ///<field name = "activeCellColumnIndex" type = "Int32">
    ///Gets the column index of the active cell. Value: An integer value specifying the active cell column index.
    ///</field>
    ///<field name = "activeCellRowIndex" type = "Int32">
    ///Gets the row index of the active cell. Value: An integer value specifying the active cell row index.
    ///</field>
    ///<field name = "leftColumnIndex" type = "Int32">
    ///Gets the index of the selection's left column. Value: An integer value specifying the index of the left column within the selection.
    ///</field>
    ///<field name = "topRowIndex" type = "Int32">
    ///Gets the index of the selection's top row. Value: An integer value specifying the index of the top row within the selection.
    ///</field>
    ///<field name = "rightColumnIndex" type = "Int32">
    ///Gets the index of the selection's right column. Value: An integer value specifying the index of the right column within the selection.
    ///</field>
    ///<field name = "bottomRowIndex" type = "Int32">
    ///Gets the index of the selection's bottom row. Value: An integer value specifying the index of the bottom row within the selection.
    ///</field>
};
ASPxClientSpreadsheetPopupMenuItem = function() {
    ///<summary>
    ///Represents an individual item of the Spreadsheet's context menu.
    ///</summary>
    ///<field name = "parent" type = "ASPxClientSpreadsheetPopupMenuItem">
    ///Gets the immediate parent menu item to which the current menu item belongs. Value: A ASPxClientSpreadsheetPopupMenuItem object representing the menu item's immediate parent.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets or sets the unique identifier name for the current menu item. Value: A string value that specifies the item's unique identifier name.
    ///</field>
    ///<field name = "text" type = "String">
    ///Gets or sets the text content of the current menu item. Value: A string value that specifies the text content of the menu item.
    ///</field>
    ///<field name = "enabled" type = "Boolean">
    ///Gets or sets a value that indicates whether the menu item is enabled, allowing the item to respond to end-user interactions. Value: true if the item is enabled; otherwise, false.
    ///</field>
    ///<field name = "imageClassName" type = "String">
    ///Gets or sets the CSS class name defining the menu item's image. Value: A string value specifying the class name.
    ///</field>
    ///<field name = "navigateUrl" type = "String">
    ///Gets or sets an URL which defines the navigation location. Value: A string value which represents an URL where the client web browser will navigate.
    ///</field>
    ///<field name = "imageUrl" type = "String">
    ///Gets or sets the URL of the menu item's image. Value: A string value that specifies the location of an image.
    ///</field>
    ///<field name = "beginGroup" type = "Boolean">
    ///Gets or sets a value that specifies whether the current menu item starts a group. Value: true if the current menu item starts a group; otherwise, false.
    ///</field>
    ///<field name = "tooltip" type = "String">
    ///Gets or sets the current menu item's tooltip text. Value: A string which specifies the text content of the current menu item's tooltip.
    ///</field>
    ///<field name = "target" type = "String">
    ///Gets or sets the window or frame at which to target the contents of the URL associated with the current menu item. Value: A string which identifies the window or frame at which to target the URL content.
    ///</field>
};
ASPxClientSpreadsheetPopupMenuItemCollection = function() {
    ///<summary>
    ///Represents a collection of items in the Spreadhseet's context menu.
    ///</summary>
};
ASPxClientTreeList = function() {
    ///<summary>
    ///Represents the client ASPxTreeList.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientTreeList.
    ///</field>
    ///<field name = "ContextMenu" type = "ASPxClientEvent">
    ///Enables you to display a context menu.
    ///</field>
    ///<field name = "CustomButtonClick" type = "ASPxClientEvent">
    ///Occurs when a custom command button has been clicked.
    ///</field>
    ///<field name = "ToolbarItemClick" type = "ASPxClientEvent">
    ///Fires after a toolbar item has been clicked.
    ///</field>
    ///<field name = "NodeFocusing" type = "ASPxClientEvent">
    ///Fires before the focused node has been changed.
    ///</field>
    ///<field name = "FocusedNodeChanged" type = "ASPxClientEvent">
    ///Fires in response to changing node focus.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed via end-user interaction.
    ///</field>
    ///<field name = "CustomizationWindowCloseUp" type = "ASPxClientEvent">
    ///Fires after the Customization Window has been closed.
    ///</field>
    ///<field name = "CustomDataCallback" type = "ASPxClientEvent">
    ///Fires after the callback has been processed in the CustomDataCallback event handler.
    ///</field>
    ///<field name = "NodeClick" type = "ASPxClientEvent">
    ///Fires on the client when a node is clicked.
    ///</field>
    ///<field name = "NodeDblClick" type = "ASPxClientEvent">
    ///Fires on the client when a node is double clicked.
    ///</field>
    ///<field name = "NodeExpanding" type = "ASPxClientEvent">
    ///Fires before a node is expanded.
    ///</field>
    ///<field name = "NodeCollapsing" type = "ASPxClientEvent">
    ///Fires before a node is collapsed.
    ///</field>
    ///<field name = "StartDragNode" type = "ASPxClientEvent">
    ///Occurs before a node is dragged by an end-user.
    ///</field>
    ///<field name = "EndDragNode" type = "ASPxClientEvent">
    ///Occurs after a node drag and drop operation is completed.
    ///</field>
    ///<field name = "ColumnResizing" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being resized.
    ///</field>
    ///<field name = "ColumnResized" type = "ASPxClientEvent">
    ///Occurs after a column's width has been changed by an end-user.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientTreeListColumn = function() {
    ///<summary>
    ///Represents a client column.
    ///</summary>
    ///<field name = "index" type = "Int32">
    ///Gets the column's position within the collection. Value: An integer zero-bazed index that specifies the column's position within the collection.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the column. Value: A string value assigned to the column's Name property.
    ///</field>
    ///<field name = "fieldName" type = "String">
    ///Gets the name of the database field assigned to the current column. Value: A String value that specifies the name of a data field.
    ///</field>
};
ASPxClientTreeListCustomDataCallbackEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomDataCallback event.
    ///</summary>
    ///<field name = "arg" type = "String">
    ///Gets the information that has been collected on the client-side and sent to the  server-side CustomDataCallback event. Value: A string value that represents the information that has been collected on the client-side and sent to the server-side CustomDataCallback event.
    ///</field>
    ///<field name = "result" type = "Object">
    ///Gets the information passed from the server-side CustomDataCallback event. Value: An object that represents the information passed from the server-side CustomDataCallback event.
    ///</field>
};
ASPxClientTreeListCustomDataCallbackEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomDataCallback event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientTreeListCustomDataCallbackEventArgs">
    ///An ASPxClientTreeListCustomDataCallbackEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListNodeEventArgs = function() {
    ///<summary>
    ///Provides data for the NodeDblClick events.
    ///</summary>
    ///<field name = "nodeKey" type = "String">
    ///Gets the processed node's key value. Value: A String value that identifies the processed node.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Provides access to the parameters associated with the NodeDblClick events. Value: An object that contains parameters associated with the event.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientTreeListNodeEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the NodeDblClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientTreeListNodeEventArgs">
    ///An ASPxClientTreeListNodeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListContextMenuEventArgs = function() {
    ///<summary>
    ///Provides data for the ContextMenu event.
    ///</summary>
    ///<field name = "objectType" type = "String">
    ///Identifies which tree list element has been right-clicked. Value: A string value that identifies which tree list element ('Header' or 'Node') has been right-clicked.
    ///</field>
    ///<field name = "objectKey" type = "Object">
    ///Gets a value that identifies the right-clicked object. Value: The right-clicked object's identifier.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that relates to the processed event.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets whether to invoke the browser's context menu. Value: true to hide the browser's context menu; otherwise, false.
    ///</field>
};
ASPxClientTreeListContextMenuEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ContextMenu event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientTreeListContextMenuEventArgs">
    ///An ASPxClientTreeListContextMenuEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListStartDragNodeEventArgs = function() {
    ///<summary>
    ///Provides data for the StartDragNode event.
    ///</summary>
    ///<field name = "targets" type = "Array" elementType = "Object">
    ///Gets an array of targets where a node can be dragged. Value: An array of objects that represent targets for the dragged node.
    ///</field>
    ///<field name = "nodeKey" type = "String">
    ///Gets the processed node's key value. Value: A String value that identifies the processed node.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Provides access to the parameters associated with the NodeDblClick events. Value: An object that contains parameters associated with the event.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientTreeListStartDragNodeEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the StartDragNode event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientTreeListStartDragNodeEventArgs">
    ///An ASPxClientTreeListStartDragNodeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListEndDragNodeEventArgs = function() {
    ///<summary>
    ///Provides data for the EndDragNode event.
    ///</summary>
    ///<field name = "targetElement" type = "Object">
    ///Gets the target element. Value: An object that represents the target element to which the dragged node has been dropped.
    ///</field>
    ///<field name = "nodeKey" type = "String">
    ///Gets the processed node's key value. Value: A String value that identifies the processed node.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Provides access to the parameters associated with the NodeDblClick events. Value: An object that contains parameters associated with the event.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientTreeListEndDragNodeEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the EndDragNode event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientTreeListEndDragNodeEventArgs">
    ///An ASPxClientTreeListEndDragNodeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListCustomButtonEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomButtonClick event.
    ///</summary>
    ///<field name = "nodeKey" type = "String">
    ///Gets the key value of the node whose custom button has been clicked. Value: A string value that uniquely identifies the node whose custom button has been clicked.
    ///</field>
    ///<field name = "buttonIndex" type = "Int32">
    ///Gets the button's index. Value: An integer value that specifies the button's position within the CustomButtons collection.
    ///</field>
    ///<field name = "buttonID" type = "String">
    ///Gets the value which identifies the custom button. Value: A String value that identifies the clicked custom button.
    ///</field>
};
ASPxClientTreeListCustomButtonEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomButtonClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientTreeListCustomButtonEventArgs">
    ///An ASPxClientTreeListCustomButtonEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListValuesCallback = function(result) {
    ///<summary>
    ///A JavaScript function which receives the list of row values when a specific client method (such as the GetSelectedNodeValues) is called.
    ///</summary>
    ///<param name = "result" type = "Object">
    ///An object that represents the list of row values received from the server.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListColumnResizingEventArgs = function() {
    ///<summary>
    ///Provides data for the ColumnResizing event.
    ///</summary>
    ///<field name = "column" type = "ASPxClientTreeListColumn">
    ///Gets the processed client column. Value: An <see cref="ASPxClientTreeListColumn" /> object that is the processed column.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientTreeListColumnResizingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ColumnResizing event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientTreeListColumnResizingEventArgs">
    ///A ASPxClientTreeListColumnResizingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListColumnResizedEventArgs = function() {
    ///<summary>
    ///Provides data for the ColumnResized event.
    ///</summary>
    ///<field name = "column" type = "ASPxClientTreeListColumn">
    ///Gets the processed client column. Value: An <see cref="ASPxClientTreeListColumn" /> object that is the processed column.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTreeListColumnResizedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ColumnResized event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientTreeListColumnResizedEventArgs">
    ///A ASPxClientTreeListColumnResizedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeListToolbarItemClickEventArgs = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "toolbarIndex" type = "Int32">
    ///Gets the toolbar index related to the event. Value: An integer value that is the toolbar index.
    ///</field>
    ///<field name = "item" type = "ASPxClientMenuItem">
    ///Gets the toolbar item related to the event. Value: An ASPxClientMenuItem object that is the toolbar item.
    ///</field>
    ///<field name = "usePostBack" type = "Boolean">
    ///Specifies whether a postback or a callback is used to finally process the event on the server side. Value: true to perform the round trip to the server side via postback; false to perform the round trip to the server side via callback.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTreeListToolbarItemClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ToolbarItemClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientTreeListToolbarItemClickEventArgs">
    ///An ASPxClientTreeListToolbarItemClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientAccordion = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapAccordion control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after an item has been clicked.
    ///</field>
    ///<field name = "ExpandedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a group's expansion state has been changed.
    ///</field>
    ///<field name = "ExpandedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the expansion state of a group is changed.
    ///</field>
    ///<field name = "HeaderClick" type = "ASPxClientEvent">
    ///Fires when a group header is clicked.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientNavBar.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientBinaryImage = function() {
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientButton = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapButton control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the button's checked state is changed.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the button receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the button loses input focus.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after a button is clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientCalendar = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapCalendar control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the selected date has been changed within the calendar.
    ///</field>
    ///<field name = "VisibleMonthChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the month displayed within the calendar is changed.
    ///</field>
    ///<field name = "CustomDisabledDate" type = "ASPxClientEvent">
    ///Allows you to disable the calendar's days.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after the callback server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCalendar.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientCallbackPanel = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapCallbackPanel control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the BootstrapClientCallbackPanel.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientChartBase = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Done" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "LegendClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "PointClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "PointHoverChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "PointSelectionChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "TooltipHidden" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "TooltipShown" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "ArgumentAxisClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "SeriesClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "SeriesHoverChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "SeriesSelectionChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientChart = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ZoomStart" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "ZoomEnd" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "Done" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "LegendClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "PointClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "PointHoverChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "PointSelectionChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "TooltipHidden" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "TooltipShown" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "ArgumentAxisClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "SeriesClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "SeriesHoverChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "SeriesSelectionChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientPolarChart = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Done" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "LegendClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "PointClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "PointHoverChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "PointSelectionChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "TooltipHidden" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "TooltipShown" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "ArgumentAxisClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "SeriesClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "SeriesHoverChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "SeriesSelectionChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientPieChart = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Done" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "LegendClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "PointClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "PointHoverChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "PointSelectionChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "TooltipHidden" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "TooltipShown" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "ArgumentAxisClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "SeriesClick" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "SeriesHoverChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "SeriesSelectionChanged" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientChartBaseDoneEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartBaseLegendClickEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCoordinateSystemChartArgumentAxisClickEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartBasePointClickEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartBasePointHoverChangedEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartBasePointSelectionChangedEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartBaseTooltipHiddenEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartBaseTooltipShownEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCoordinateSystemChartSeriesClickEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCoordinateSystemChartSeriesHoverChangedEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCoordinateSystemChartSeriesSelectionChangedEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartZoomStartEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartZoomEndEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetEventArgsBase = function() {
};
BootstrapClientChartZoomEndEventArgs = function() {
};
BootstrapClientCheckBox = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapCheckBox control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the editor's checked state is changed.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientRadioButton = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapRadioButton control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the editor's checked state is changed.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientComboBox = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapComboBox control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientComboBox.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "QueryCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientDateEdit = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapDateEdit control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DateChanged" type = "ASPxClientEvent">
    ///Fires after the selected date has been changed within the date editor.
    ///</field>
    ///<field name = "ParseDate" type = "ASPxClientEvent">
    ///Enables you to convert the value entered by an end user into the value that will be stored by the date editor.
    ///</field>
    ///<field name = "CalendarCustomDisabledDate" type = "ASPxClientEvent">
    ///Allows you to disable the calendar's days.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///This event is not in effect for the ASPxClientDateEdit. Use the DateChanged event instead.
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "QueryCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientDropDownEdit = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapDropDownEdit control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "QueryCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientFormLayout = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapFormLayout control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientGridView = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapGridView control.
    ///</summary>
    ///<field name = "batchEditApi" type = "ASPxClientGridViewBatchEditApi">
    ///Provides access to the batch editing client API. Value: A <see cref="ASPxClientGridViewBatchEditApi" /> object that exposes the batch editing client API methods.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CustomButtonClick" type = "ASPxClientEvent">
    ///Occurs when a custom command button has been clicked.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed.
    ///</field>
    ///<field name = "ColumnSorting" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being sorted.
    ///</field>
    ///<field name = "FocusedRowChanged" type = "ASPxClientEvent">
    ///Fires in response to changing row focus.
    ///</field>
    ///<field name = "ColumnGrouping" type = "ASPxClientEvent">
    ///Enables you to cancel data grouping.
    ///</field>
    ///<field name = "ColumnStartDragging" type = "ASPxClientEvent">
    ///Fires when an end-user starts dragging the column's header and enables you to cancel this operation.
    ///</field>
    ///<field name = "ColumnResizing" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being resized.
    ///</field>
    ///<field name = "ColumnResized" type = "ASPxClientEvent">
    ///Occurs after a column's width has been changed by an end-user.
    ///</field>
    ///<field name = "ColumnMoving" type = "ASPxClientEvent">
    ///Enables you to control column movement.
    ///</field>
    ///<field name = "RowExpanding" type = "ASPxClientEvent">
    ///Fires before a group row is expanded.
    ///</field>
    ///<field name = "RowCollapsing" type = "ASPxClientEvent">
    ///Fires before a group row is collapsed.
    ///</field>
    ///<field name = "DetailRowExpanding" type = "ASPxClientEvent">
    ///Fires before a detail row is expanded.
    ///</field>
    ///<field name = "DetailRowCollapsing" type = "ASPxClientEvent">
    ///Fires before a detail row is collapsed.
    ///</field>
    ///<field name = "RowClick" type = "ASPxClientEvent">
    ///Fires on the client when a data row is clicked.
    ///</field>
    ///<field name = "RowDblClick" type = "ASPxClientEvent">
    ///Fires on the client when a data row is double clicked.
    ///</field>
    ///<field name = "ContextMenu" type = "ASPxClientEvent">
    ///Occurs after an end-user right clicks in the GridView, and enables you to provide a custom context menu.
    ///</field>
    ///<field name = "ContextMenuItemClick" type = "ASPxClientEvent">
    ///Fires on the client side when a context menu item has been clicked.
    ///</field>
    ///<field name = "BatchEditRowValidating" type = "ASPxClientEvent">
    ///Enables you to specify whether row data is valid and provide an error text.
    ///</field>
    ///<field name = "BatchEditConfirmShowing" type = "ASPxClientEvent">
    ///Enables you to prevent a batch edit confirmation message from being displayed.
    ///</field>
    ///<field name = "BatchEditStartEditing" type = "ASPxClientEvent">
    ///Occurs when a grid switches to batch edit mode.
    ///</field>
    ///<field name = "BatchEditEndEditing" type = "ASPxClientEvent">
    ///Occurs when a grid leaves the batch edit mode.
    ///</field>
    ///<field name = "BatchEditTemplateCellFocused" type = "ASPxClientEvent">
    ///Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
    ///</field>
    ///<field name = "BatchEditChangesSaving" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are saved in batch edit mode.
    ///</field>
    ///<field name = "BatchEditChangesCanceling" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are canceled in batch edit mode.
    ///</field>
    ///<field name = "BatchEditRowInserting" type = "ASPxClientEvent">
    ///Occurs on the client side before a data row is inserted in batch edit mode.
    ///</field>
    ///<field name = "BatchEditRowDeleting" type = "ASPxClientEvent">
    ///Occurs on the client side before a data row is deleted in batch edit mode.
    ///</field>
    ///<field name = "FocusedCellChanging" type = "ASPxClientEvent">
    ///Occurs on the client side when the focused cell is about to be changed.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientGridView.
    ///</field>
    ///<field name = "CustomizationWindowCloseUp" type = "ASPxClientEvent">
    ///Fires after the Customization Window has been closed.
    ///</field>
    ///<field name = "ToolbarItemClick" type = "ASPxClientEvent">
    ///Fires after a toolbar item has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientHyperLink = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapHyperLink control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientImage = function() {
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Click" type = "ASPxClientEvent">
    ///Occurs on the client side after an end-user clicks within a static editor.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientListBox = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapListBox control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientListBox.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list box has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "ItemDoubleClick" type = "ASPxClientEvent">
    ///Occurs on the client when the editor's item is double clicked.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientCheckBoxList = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the check box list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientRadioButtonList = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientMenu = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapMenu control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after a menu item has been clicked.
    ///</field>
    ///<field name = "ItemMouseOver" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor is moved into a menu item.
    ///</field>
    ///<field name = "ItemMouseOut" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor moves outside a menu item.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu pops up.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu closes.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientPager = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientPopupControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapPopupControl control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CloseButtonClick" type = "ASPxClientEvent">
    ///Occurs when a popup window's close button is clicked.
    ///</field>
    ///<field name = "BeforeResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing initiates.
    ///</field>
    ///<field name = "AfterResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing completes.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the control.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window closes or hides.
    ///</field>
    ///<field name = "Closing" type = "ASPxClientEvent">
    ///Enables you to cancel window closing on the client side.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window is invoked.
    ///</field>
    ///<field name = "Resize" type = "ASPxClientEvent">
    ///Occurs on the client side after a window has been resized.
    ///</field>
    ///<field name = "Shown" type = "ASPxClientEvent">
    ///Occurs on the client side after a control's window has been invoked.
    ///</field>
    ///<field name = "PinnedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the window pin state is changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientPopupMenu = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapPopupMenu control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after a menu item has been clicked.
    ///</field>
    ///<field name = "ItemMouseOver" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor is moved into a menu item.
    ///</field>
    ///<field name = "ItemMouseOut" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor moves outside a menu item.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu pops up.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu closes.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientProgressBar = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapProgressBar control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientSpinEdit = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapSpinEdit control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "NumberChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the editor's value is altered in any way.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///This event is not in effect for the ASPxClientSpinEditBase. Use the ASPxClientTimeEdit.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientTabControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapTabControl control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "TabClick" type = "ASPxClientEvent">
    ///Fires when a tab is clicked.
    ///</field>
    ///<field name = "ActiveTabChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the active tab has been changed within a tab control.
    ///</field>
    ///<field name = "ActiveTabChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the active tab is changed within a tab control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by a client tab control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientPageControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapPageControl control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "TabClick" type = "ASPxClientEvent">
    ///Fires when a tab is clicked.
    ///</field>
    ///<field name = "ActiveTabChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the active tab has been changed within a tab control.
    ///</field>
    ///<field name = "ActiveTabChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the active tab is changed within a tab control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by a client tab control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientTextBox = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapTextBox control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientMemo = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapMemo control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientButtonEdit = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapButtonEdit control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapClientTreeView = function() {
    ///<summary>
    ///Represents a client-side equivalent of the BootstrapTreeView control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "NodeClick" type = "ASPxClientEvent">
    ///Fires on the client side after a node has been clicked.
    ///</field>
    ///<field name = "ExpandedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a node's expansion state has been changed by end-user interaction.
    ///</field>
    ///<field name = "ExpandedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the expansion state of a node is changed via end-user interaction.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the node's checked state is changed by clicking on a check box.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientTreeView.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
BootstrapUIWidgetBase = function() {
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
};
BootstrapUIWidgetInitializedEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetDrawnEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetDisposingEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetExportedEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetOptionChangedEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetOptionChangedEventArgs = function() {
};
BootstrapUIWidgetExportingEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetFileSavingEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetExportEventArgs = function() {
};
BootstrapUIWidgetErrorEventHandler = function(source, e) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetErrorEventArgs = function() {
};
BootstrapUIWidgetElementActionEventArgs = function() {
};
BootstrapUIWidgetElementClickEventArgs = function() {
};
BootstrapClientUploadControl = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "FileUploadComplete" type = "ASPxClientEvent">
    ///Occurs on the client after a file has been uploaded.
    ///</field>
    ///<field name = "FilesUploadComplete" type = "ASPxClientEvent">
    ///Occurs on the client after upload of all selected files has been completed.
    ///</field>
    ///<field name = "FileUploadStart" type = "ASPxClientEvent">
    ///Occurs on the client side before upload of the specified files starts.
    ///</field>
    ///<field name = "FilesUploadStart" type = "ASPxClientEvent">
    ///Occurs on the client side before file upload is started.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the text within the control's edit box is changed while the control has focus.
    ///</field>
    ///<field name = "UploadingProgressChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the progress bar indicator position is changed.
    ///</field>
    ///<field name = "FileInputCountChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the file input elements count is changed.
    ///</field>
    ///<field name = "ValidationErrorOccurred" type = "ASPxClientEvent">
    ///Enables you to specify whether the selected file(s) are valid and provide an error text.
    ///</field>
    ///<field name = "DropZoneEnter" type = "ASPxClientEvent">
    ///Fires when the mouse enters a drop zone or an external drop zone element while dragging a file.
    ///</field>
    ///<field name = "DropZoneLeave" type = "ASPxClientEvent">
    ///Fires when the mouse leaves a drop zone or an external drop zone element while dragging a file.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientCalendar = function() {
    ///<summary>
    ///A client-side counterpart of the Calendar and CalendarFor extensions.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the selected date has been changed within the calendar.
    ///</field>
    ///<field name = "VisibleMonthChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the month displayed within the calendar is changed.
    ///</field>
    ///<field name = "CustomDisabledDate" type = "ASPxClientEvent">
    ///Allows you to disable the calendar's days.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after the callback server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCalendar.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientCallbackPanel = function() {
    ///<summary>
    ///A client-side counterpart of the CallbackPanel extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCallbackPanel.
    ///</field>
    ///<field name = "Collapsed" type = "ASPxClientEvent">
    ///Occurs when the expanded panel is closed.
    ///</field>
    ///<field name = "Expanded" type = "ASPxClientEvent">
    ///Occurs when an end-user opens the expand panel.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientCardView = function() {
    ///<summary>
    ///A client-side counterpart of the CardView extension.
    ///</summary>
    ///<field name = "batchEditApi" type = "ASPxClientCardViewBatchEditApi">
    ///Provides access to the batch editing client API. Value: A <see cref="ASPxClientCardViewBatchEditApi" /> object that exposes the batch editing client API methods.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "CustomButtonClick" type = "ASPxClientEvent">
    ///Occurs when a custom command button has been clicked.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed.
    ///</field>
    ///<field name = "ColumnSorting" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being sorted.
    ///</field>
    ///<field name = "BatchEditStartEditing" type = "ASPxClientEvent">
    ///Occurs when a grid switches to batch edit mode.
    ///</field>
    ///<field name = "BatchEditEndEditing" type = "ASPxClientEvent">
    ///Occurs when a grid leaves batch edit mode.
    ///</field>
    ///<field name = "BatchEditConfirmShowing" type = "ASPxClientEvent">
    ///Enables you to prevent a batch edit confirmation message from being displayed.
    ///</field>
    ///<field name = "BatchEditTemplateCellFocused" type = "ASPxClientEvent">
    ///Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
    ///</field>
    ///<field name = "BatchEditCardValidating" type = "ASPxClientEvent">
    ///Enables you to specify whether card data is valid and provide an error text.
    ///</field>
    ///<field name = "BatchEditChangesSaving" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are saved in batch edit mode.
    ///</field>
    ///<field name = "BatchEditChangesCanceling" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are canceled in batch edit mode.
    ///</field>
    ///<field name = "BatchEditCardInserting" type = "ASPxClientEvent">
    ///Occurs on the client side before a card is inserted in batch edit mode.
    ///</field>
    ///<field name = "BatchEditCardDeleting" type = "ASPxClientEvent">
    ///Occurs on the client side before a card is deleted in batch edit mode.
    ///</field>
    ///<field name = "FocusedCellChanging" type = "ASPxClientEvent">
    ///Occurs on the client side when the focused cell is about to be changed.
    ///</field>
    ///<field name = "CardClick" type = "ASPxClientEvent">
    ///Fires on the client when a card is clicked.
    ///</field>
    ///<field name = "CardDblClick" type = "ASPxClientEvent">
    ///Fires on the client when a card is double clicked.
    ///</field>
    ///<field name = "FocusedCardChanged" type = "ASPxClientEvent">
    ///Fires in response to changing card focus.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientCardView.
    ///</field>
    ///<field name = "CustomizationWindowCloseUp" type = "ASPxClientEvent">
    ///Fires after the customization window has been closed.
    ///</field>
    ///<field name = "ToolbarItemClick" type = "ASPxClientEvent">
    ///Fires after a toolbar item has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientChart = function() {
    ///<summary>
    ///A client-side counterpart of the Chart extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientWebChartControl.
    ///</field>
    ///<field name = "ObjectHotTracked" type = "ASPxClientEvent">
    ///Occurs on the client side when any chart element is hot-tracked.
    ///</field>
    ///<field name = "CustomDrawCrosshair" type = "ASPxClientEvent">
    ///Occurs before crosshair items are drawn when the chart's contents are being drawn.
    ///</field>
    ///<field name = "ObjectSelected" type = "ASPxClientEvent">
    ///Occurs on the client side when any chart element is selected.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientComboBox = function() {
    ///<summary>
    ///A client-side counterpart of the ComboBox and ComboBoxFor extensions.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientComboBox.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "QueryCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientDataView = function() {
    ///<summary>
    ///A client-side counterpart of the DataView extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientDataView.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientDateEdit = function() {
    ///<summary>
    ///A client-side counterpart of the DateEdit extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DateChanged" type = "ASPxClientEvent">
    ///Fires after the selected date has been changed within the date editor.
    ///</field>
    ///<field name = "ParseDate" type = "ASPxClientEvent">
    ///Enables you to convert the value entered by an end user into the value that will be stored by the date editor.
    ///</field>
    ///<field name = "CalendarCustomDisabledDate" type = "ASPxClientEvent">
    ///Allows you to disable the calendar's days.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///This event is not in effect for the ASPxClientDateEdit. Use the DateChanged event instead.
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "QueryCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientDockManager = function() {
    ///<summary>
    ///A client-side counterpart of the DockManager extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeforeDock" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterDock" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is docked in a zone.
    ///</field>
    ///<field name = "BeforeFloat" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is made floating (undocked from a zone) and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterFloat" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is undocked from a zone.
    ///</field>
    ///<field name = "StartPanelDragging" type = "ASPxClientEvent">
    ///Occurs when a panel dragging operation is started.
    ///</field>
    ///<field name = "EndPanelDragging" type = "ASPxClientEvent">
    ///Occurs after a panel dragging operation is complete.
    ///</field>
    ///<field name = "PanelClosing" type = "ASPxClientEvent">
    ///Occurs on the client side before a panel is closed, and allows you to cancel the action.
    ///</field>
    ///<field name = "PanelCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a panel is closed.
    ///</field>
    ///<field name = "PanelPopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a panel pops up.
    ///</field>
    ///<field name = "PanelShown" type = "ASPxClientEvent">
    ///Occurs on the client side after a panel has been invoked.
    ///</field>
    ///<field name = "PanelResize" type = "ASPxClientEvent">
    ///Occurs on the client side after a panel has been resized.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientDockPanel = function() {
    ///<summary>
    ///A client-side counterpart of the DockPanel extension.
    ///</summary>
    ///<field name = "panelUID" type = "String">
    ///Gets or sets the unique identifier of a panel on a page. Value: A string that is the unique identifier of a panel.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "BeforeDock" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterDock" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is docked in a zone.
    ///</field>
    ///<field name = "BeforeFloat" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is made floating (undocked from a zone) and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterFloat" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is undocked from a zone.
    ///</field>
    ///<field name = "StartDragging" type = "ASPxClientEvent">
    ///Occurs when a panel dragging operation is started.
    ///</field>
    ///<field name = "EndDragging" type = "ASPxClientEvent">
    ///Occurs after a panel dragging operation is complete.
    ///</field>
    ///<field name = "BeforeResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing initiates.
    ///</field>
    ///<field name = "AfterResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing completes.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the control.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window closes or hides.
    ///</field>
    ///<field name = "Closing" type = "ASPxClientEvent">
    ///Enables you to cancel window closing on the client side.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window is invoked.
    ///</field>
    ///<field name = "Resize" type = "ASPxClientEvent">
    ///Occurs on the client side after a window has been resized.
    ///</field>
    ///<field name = "Shown" type = "ASPxClientEvent">
    ///Occurs on the client side after a control's window has been invoked.
    ///</field>
    ///<field name = "PinnedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the window pin state is changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientFileManager = function() {
    ///<summary>
    ///A client-side counterpart of the FileManager extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientFileManager.
    ///</field>
    ///<field name = "SelectedFileChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the selected file has been changed.
    ///</field>
    ///<field name = "SelectedFileOpened" type = "ASPxClientEvent">
    ///Fires on the client side when an end-user opens a file by double-clicking it or pressing the Enter key.
    ///</field>
    ///<field name = "FocusedItemChanged" type = "ASPxClientEvent">
    ///Fires after the focused item has been changed.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed.
    ///</field>
    ///<field name = "CurrentFolderChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the current folder has been changed within a file manager.
    ///</field>
    ///<field name = "FolderCreating" type = "ASPxClientEvent">
    ///Fires on the client side before the folder is created, and allows you to cancel the action.
    ///</field>
    ///<field name = "FolderCreated" type = "ASPxClientEvent">
    ///Occurs on the client side after a folder has been created.
    ///</field>
    ///<field name = "ItemRenaming" type = "ASPxClientEvent">
    ///Fires on the client side before an item is renamed and allows you to cancel the action.
    ///</field>
    ///<field name = "ItemRenamed" type = "ASPxClientEvent">
    ///Occurs on the client side after a file manager's item has been renamed.
    ///</field>
    ///<field name = "ItemDeleting" type = "ASPxClientEvent">
    ///Fires on the client side before an item is deleted and allows you to cancel the action.
    ///</field>
    ///<field name = "ItemDeleted" type = "ASPxClientEvent">
    ///Occurs on the client side after a file manager's item has been deleted.
    ///</field>
    ///<field name = "ItemsDeleted" type = "ASPxClientEvent">
    ///Occurs on the client side after all the selected items have been deleted.
    ///</field>
    ///<field name = "ItemMoving" type = "ASPxClientEvent">
    ///Fires on the client side before an item is moved and allows you to cancel the action.
    ///</field>
    ///<field name = "ItemMoved" type = "ASPxClientEvent">
    ///Occurs on the client side after a file manager's item has been moved.
    ///</field>
    ///<field name = "ItemsMoved" type = "ASPxClientEvent">
    ///Occurs on the client side after all the selected items have been moved .
    ///</field>
    ///<field name = "ItemCopying" type = "ASPxClientEvent">
    ///Fires on the client side before an item is copied and allows you to cancel the action.
    ///</field>
    ///<field name = "ItemCopied" type = "ASPxClientEvent">
    ///Occurs on the client side after a file manager item has been copied.
    ///</field>
    ///<field name = "ItemsCopied" type = "ASPxClientEvent">
    ///Occurs on the client side after all the selected items have been copied.
    ///</field>
    ///<field name = "ErrorOccurred" type = "ASPxClientEvent">
    ///Fires on the client if any error occurs while editing an item.
    ///</field>
    ///<field name = "ErrorAlertDisplaying" type = "ASPxClientEvent">
    ///Enables you to display the alert with the result error description.
    ///</field>
    ///<field name = "CustomCommand" type = "ASPxClientEvent">
    ///Fires when a custom item is clicked, allowing you to perform custom actions.
    ///</field>
    ///<field name = "ToolbarUpdating" type = "ASPxClientEvent">
    ///Fires on the client side when the file manager updates the state of toolbar or context menu items.
    ///</field>
    ///<field name = "HighlightItemTemplate" type = "ASPxClientEvent">
    ///Enables you to highlight the search text, which is specified using the filter box, in templates.
    ///</field>
    ///<field name = "FileUploading" type = "ASPxClientEvent">
    ///Fires on the client side before a file upload starts, and allows you to cancel the action.
    ///</field>
    ///<field name = "FilesUploading" type = "ASPxClientEvent">
    ///Fires on the client side before the selected items are uploaded and allows you to cancel the action.
    ///</field>
    ///<field name = "FileUploaded" type = "ASPxClientEvent">
    ///Occurs on the client side after a file has been uploaded.
    ///</field>
    ///<field name = "FilesUploaded" type = "ASPxClientEvent">
    ///Occurs on the client side after upload of all selected files has been completed.
    ///</field>
    ///<field name = "FileUploadValidationErrorOccurred" type = "ASPxClientEvent">
    ///Enables you to specify whether the selected file(s) are valid and provide an error text.
    ///</field>
    ///<field name = "FileDownloading" type = "ASPxClientEvent">
    ///Fires on the client side before a file download starts, and allows you to cancel the action.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientGridView = function() {
    ///<summary>
    ///A client-side counterpart of the GridView extension.
    ///</summary>
    ///<field name = "batchEditApi" type = "ASPxClientGridViewBatchEditApi">
    ///Provides access to the batch editing client API. Value: A <see cref="ASPxClientGridViewBatchEditApi" /> object that exposes the batch editing client API methods.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "CustomButtonClick" type = "ASPxClientEvent">
    ///Occurs when a custom command button has been clicked.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed.
    ///</field>
    ///<field name = "ColumnSorting" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being sorted.
    ///</field>
    ///<field name = "FocusedRowChanged" type = "ASPxClientEvent">
    ///Fires in response to changing row focus.
    ///</field>
    ///<field name = "ColumnGrouping" type = "ASPxClientEvent">
    ///Enables you to cancel data grouping.
    ///</field>
    ///<field name = "ColumnStartDragging" type = "ASPxClientEvent">
    ///Fires when an end-user starts dragging the column's header and enables you to cancel this operation.
    ///</field>
    ///<field name = "ColumnResizing" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being resized.
    ///</field>
    ///<field name = "ColumnResized" type = "ASPxClientEvent">
    ///Occurs after a column's width has been changed by an end-user.
    ///</field>
    ///<field name = "ColumnMoving" type = "ASPxClientEvent">
    ///Enables you to control column movement.
    ///</field>
    ///<field name = "RowExpanding" type = "ASPxClientEvent">
    ///Fires before a group row is expanded.
    ///</field>
    ///<field name = "RowCollapsing" type = "ASPxClientEvent">
    ///Fires before a group row is collapsed.
    ///</field>
    ///<field name = "DetailRowExpanding" type = "ASPxClientEvent">
    ///Fires before a detail row is expanded.
    ///</field>
    ///<field name = "DetailRowCollapsing" type = "ASPxClientEvent">
    ///Fires before a detail row is collapsed.
    ///</field>
    ///<field name = "RowClick" type = "ASPxClientEvent">
    ///Fires on the client when a data row is clicked.
    ///</field>
    ///<field name = "RowDblClick" type = "ASPxClientEvent">
    ///Fires on the client when a data row is double clicked.
    ///</field>
    ///<field name = "ContextMenu" type = "ASPxClientEvent">
    ///Occurs after an end-user right clicks in the GridView, and enables you to provide a custom context menu.
    ///</field>
    ///<field name = "ContextMenuItemClick" type = "ASPxClientEvent">
    ///Fires on the client side when a context menu item has been clicked.
    ///</field>
    ///<field name = "BatchEditRowValidating" type = "ASPxClientEvent">
    ///Enables you to specify whether row data is valid and provide an error text.
    ///</field>
    ///<field name = "BatchEditConfirmShowing" type = "ASPxClientEvent">
    ///Enables you to prevent a batch edit confirmation message from being displayed.
    ///</field>
    ///<field name = "BatchEditStartEditing" type = "ASPxClientEvent">
    ///Occurs when a grid switches to batch edit mode.
    ///</field>
    ///<field name = "BatchEditEndEditing" type = "ASPxClientEvent">
    ///Occurs when a grid leaves the batch edit mode.
    ///</field>
    ///<field name = "BatchEditTemplateCellFocused" type = "ASPxClientEvent">
    ///Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
    ///</field>
    ///<field name = "BatchEditChangesSaving" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are saved in batch edit mode.
    ///</field>
    ///<field name = "BatchEditChangesCanceling" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are canceled in batch edit mode.
    ///</field>
    ///<field name = "BatchEditRowInserting" type = "ASPxClientEvent">
    ///Occurs on the client side before a data row is inserted in batch edit mode.
    ///</field>
    ///<field name = "BatchEditRowDeleting" type = "ASPxClientEvent">
    ///Occurs on the client side before a data row is deleted in batch edit mode.
    ///</field>
    ///<field name = "FocusedCellChanging" type = "ASPxClientEvent">
    ///Occurs on the client side when the focused cell is about to be changed.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientGridView.
    ///</field>
    ///<field name = "CustomizationWindowCloseUp" type = "ASPxClientEvent">
    ///Fires after the Customization Window has been closed.
    ///</field>
    ///<field name = "ToolbarItemClick" type = "ASPxClientEvent">
    ///Fires after a toolbar item has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientHtmlEditor = function() {
    ///<summary>
    ///A client-side counterpart of the HtmlEditor extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "DialogInitialized" type = "ASPxClientEvent">
    ///Occurs on the client side after a dialog has been initialized.
    ///</field>
    ///<field name = "DialogClosing" type = "ASPxClientEvent">
    ///Fires on the client side before a dialog is going to be closed.
    ///</field>
    ///<field name = "DialogClosed" type = "ASPxClientEvent">
    ///Occurs on the client side after a dialog is closed.
    ///</field>
    ///<field name = "CommandExecuting" type = "ASPxClientEvent">
    ///Occurs before a default or custom command has been executed and allows you to cancel the action.
    ///</field>
    ///<field name = "CustomCommand" type = "ASPxClientEvent">
    ///Enables you to implement a custom command's logic.
    ///</field>
    ///<field name = "CommandExecuted" type = "ASPxClientEvent">
    ///Occurs after a default or custom command has been executed on the client side.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's Design View Area receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's Design View Area loses input focus.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Occurs on the client when a selection is changed within the ASPxHtmlEditor.
    ///</field>
    ///<field name = "HtmlChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the content of the editor changes.
    ///</field>
    ///<field name = "CustomDialogOpened" type = "ASPxClientEvent">
    ///Occurs on the client side after a custom dialog is opened.
    ///</field>
    ///<field name = "CustomDialogClosing" type = "ASPxClientEvent">
    ///Fires on the client side before a custom dialog is closed.
    ///</field>
    ///<field name = "CustomDialogClosed" type = "ASPxClientEvent">
    ///Occurs on the client side after a custom dialog is closed.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the ASPxHtmlEditor is valid.
    ///</field>
    ///<field name = "ContextMenuShowing" type = "ASPxClientEvent">
    ///Occurs on the client side before a context menu is shown.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientHtmlEditor.
    ///</field>
    ///<field name = "CustomDataCallback" type = "ASPxClientEvent">
    ///Fires after a callback, sent by the CustomDataCallback event handler.
    ///</field>
    ///<field name = "SpellingChecked" type = "ASPxClientEvent">
    ///Occurs on the client side after the editor content is spell checked.
    ///</field>
    ///<field name = "ActiveTabChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the active tab has been changed within a control.
    ///</field>
    ///<field name = "ActiveTabChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the active tab is changed within a control.
    ///</field>
    ///<field name = "BeforePaste" type = "ASPxClientEvent">
    ///Occurs before an HTML code is pasted to editor content, and allows you to modify it.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientImageGallery = function() {
    ///<summary>
    ///A client-side counterpart of the ImageGallery extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "FullscreenViewerShowing" type = "ASPxClientEvent">
    ///Fires on the client side before the fullscreen viewer is shown and allows you to cancel the action.
    ///</field>
    ///<field name = "FullscreenViewerActiveItemIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after an active item has been changed within the fullscreen viewer.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientDataView.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientListBox = function() {
    ///<summary>
    ///A client-side counterpart of the ListBox and ListBoxFor extensions.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientListBox.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list box has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "ItemDoubleClick" type = "ASPxClientEvent">
    ///Occurs on the client when the editor's item is double clicked.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientNavBar = function() {
    ///<summary>
    ///A client-side counterpart of the NavBar extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after an item has been clicked.
    ///</field>
    ///<field name = "ExpandedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a group's expansion state has been changed.
    ///</field>
    ///<field name = "ExpandedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the expansion state of a group is changed.
    ///</field>
    ///<field name = "HeaderClick" type = "ASPxClientEvent">
    ///Fires when a group header is clicked.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientNavBar.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientPivotGrid = function() {
    ///<summary>
    ///A client-side counterpart of the PivotGrid extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientPivotGrid.
    ///</field>
    ///<field name = "AfterCallback" type = "ASPxClientEvent">
    ///Fires after a callback that has been processed on the server returns back to the client.
    ///</field>
    ///<field name = "BeforeCallback" type = "ASPxClientEvent">
    ///Fires before a callback is sent to the server for server-side processing.
    ///</field>
    ///<field name = "CustomizationFieldsVisibleChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the customization form's visible state has been changed.
    ///</field>
    ///<field name = "CellClick" type = "ASPxClientEvent">
    ///Occurs when a cell is clicked.
    ///</field>
    ///<field name = "CellDblClick" type = "ASPxClientEvent">
    ///Occurs when a cell is double clicked.
    ///</field>
    ///<field name = "PopupMenuItemClick" type = "ASPxClientEvent">
    ///Occurs when a custom menu item has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientPopupControl = function() {
    ///<summary>
    ///A client-side counterpart of the PopupControl extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "CloseButtonClick" type = "ASPxClientEvent">
    ///Occurs when a popup window's close button is clicked.
    ///</field>
    ///<field name = "BeforeResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing initiates.
    ///</field>
    ///<field name = "AfterResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing completes.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the control.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window closes or hides.
    ///</field>
    ///<field name = "Closing" type = "ASPxClientEvent">
    ///Enables you to cancel window closing on the client side.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window is invoked.
    ///</field>
    ///<field name = "Resize" type = "ASPxClientEvent">
    ///Occurs on the client side after a window has been resized.
    ///</field>
    ///<field name = "Shown" type = "ASPxClientEvent">
    ///Occurs on the client side after a control's window has been invoked.
    ///</field>
    ///<field name = "PinnedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the window pin state is changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientDocumentViewer = function() {
    ///<summary>
    ///A client-side equivalent of the MVCxDocumentViewer class.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeforeExportRequest" type = "ASPxClientEvent">
    ///Occurs before performing a document export request.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientDocumentViewer.
    ///</field>
    ///<field name = "ToolbarItemValueChanged" type = "ASPxClientEvent">
    ///Occurs when the value of an item within the Document Viewer's report toolbar is changed.
    ///</field>
    ///<field name = "ToolbarItemClick" type = "ASPxClientEvent">
    ///Occurs when an item within the Document Viewer's report toolbar is clicked.
    ///</field>
    ///<field name = "PageLoad" type = "ASPxClientEvent">
    ///Occurs on the client side when a report page is loaded into this ASPxClientDocumentViewer instance.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientReportViewer = function() {
    ///<summary>
    ///Obsolete. Use the MVCxClientDocumentViewer class instead.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "BeforeExportRequest" type = "ASPxClientEvent">
    ///Occurs before performing a document export request.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientReportViewer.
    ///</field>
    ///<field name = "PageLoad" type = "ASPxClientEvent">
    ///Occurs on the client side when another report page is loaded into this ASPxClientReportViewer instance.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientBeforeExportRequestEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BeforeExportRequest event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object which is the event source. Identifies the client object that raised the event.
    ///</param>
    ///<param name = "e" type = "MVCxClientBeforeExportRequestEventArgs">
    ///A MVCxClientBeforeExportRequestEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientBeforeExportRequestEventArgs = function() {
    ///<summary>
    ///Provides data for client BeforeExportRequest events.
    ///</summary>
    ///<field name = "customArgs" type = "Object">
    ///Gets an object containing specific information (if any, as name/value pairs) that should be passed as a request parameter from the client to the server side for further processing. Value: A hash table object containing named values to be passed from the client to the server side via request parameters.
    ///</field>
};
MVCxClientReportDesigner = function() {
    ///<summary>
    ///A client-side equivalent of the MVCxReportDesigner class.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "SaveCommandExecuted" type = "ASPxClientEvent">
    ///Occurs after executing the Save command on the client.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientReportDesigner.
    ///</field>
    ///<field name = "SaveCommandExecute" type = "ASPxClientEvent">
    ///Occurs when executing the Save command on the client.
    ///</field>
    ///<field name = "CustomizeMenuActions" type = "ASPxClientEvent">
    ///Enables you to customize the menu actions of the Web Report Designer.
    ///</field>
    ///<field name = "CustomizeParameterEditors" type = "ASPxClientEvent">
    ///Occurs each time a standard editor is created for a report parameter based on a parameter type.
    ///</field>
    ///<field name = "CustomizeParameterLookUpSource" type = "ASPxClientEvent">
    ///Occurs each time a look-up editor is created for a report parameter.
    ///</field>
    ///<field name = "ExitDesigner" type = "ASPxClientEvent">
    ///Occurs on the client side when the Report Designer is being closed.
    ///</field>
    ///<field name = "ReportSaving" type = "ASPxClientEvent">
    ///Occurs when a report is about to be saved in the Web Report Designer.
    ///</field>
    ///<field name = "ReportSaved" type = "ASPxClientEvent">
    ///Occurs when a report has been saved in the Web Report Designer.
    ///</field>
    ///<field name = "ReportOpening" type = "ASPxClientEvent">
    ///Occurs when a report is about to be opened in the Web Report Designer.
    ///</field>
    ///<field name = "ReportOpened" type = "ASPxClientEvent">
    ///Occurs when a report has been opened in the Web Report Designer.
    ///</field>
    ///<field name = "OnServerError" type = "ASPxClientEvent">
    ///Occurs on the client each time a server-side error raises.
    ///</field>
    ///<field name = "ComponentAdded" type = "ASPxClientEvent">
    ///Occurs after a component has been added to the report currently being edited in the Web Report Designer.
    ///</field>
    ///<field name = "CustomizeElements" type = "ASPxClientEvent">
    ///Enables you to customize UI elements of the Web Report Designer.
    ///</field>
    ///<field name = "CustomizeSaveDialog" type = "ASPxClientEvent">
    ///Enables you to customize the Save dialog of the Web Report Designer.
    ///</field>
    ///<field name = "CustomizeSaveAsDialog" type = "ASPxClientEvent">
    ///Enables you to customize the Save Report dialog of the Web Report Designer.
    ///</field>
    ///<field name = "CustomizeOpenDialog" type = "ASPxClientEvent">
    ///Enables you to customize the Open Report dialog of the Web Report Designer.
    ///</field>
    ///<field name = "CustomizeToolbox" type = "ASPxClientEvent">
    ///Enables you to customize the Toolbox of the Web Report Designer.
    ///</field>
    ///<field name = "PreviewDocumentReady" type = "ASPxClientEvent">
    ///Occurs after a report has been switched to Print Preview.
    ///</field>
    ///<field name = "PreviewEditingFieldChanged" type = "ASPxClientEvent">
    ///Occurs each time a value of an editing field changes in Print Preview.
    ///</field>
    ///<field name = "PreviewCustomizeElements" type = "ASPxClientEvent">
    ///Enables you to customize UI elements of a Document Viewer built into a Web Report Designer.
    ///</field>
    ///<field name = "PreviewCustomizeMenuActions" type = "ASPxClientEvent">
    ///Enables you to customize the actions of a Document Viewer built into a Web Report Designer.
    ///</field>
    ///<field name = "PreviewClick" type = "ASPxClientEvent">
    ///Occurs when the left mouse button has been clicked over a report document in Print Preview.
    ///</field>
    ///<field name = "PreviewParametersReset" type = "ASPxClientEvent">
    ///Occurs after report parameter values have been reset to their default values in Print Preview.
    ///</field>
    ///<field name = "PreviewParametersSubmitted" type = "ASPxClientEvent">
    ///Occurs after report parameter values have been submitted in Print Preview.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientReportDesignerSaveCommandExecutedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the SaveCommandExecuted event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object which is the event source. Identifies the client object that raised the event.
    ///</param>
    ///<param name = "e" type = "MVCxClientReportDesignerSaveCommandExecutedEventArgs">
    ///A MVCxClientBeforeExportRequestEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesignerSaveCommandExecutedEventArgs = function() {
    ///<summary>
    ///Provides data for the SaveCommandExecuted event.
    ///</summary>
    ///<field name = "Result" type = "String">
    ///Returns the operation result. Value: A String value, specifying the operation result.
    ///</field>
};
MVCxClientRichEdit = function() {
    ///<summary>
    ///A client-side counterpart of the RichEdit extension.
    ///</summary>
    ///<field name = "document" type = "RichEditDocument">
    ///Provides access to document structural elements. Value: A <see cref="RichEditDocument" /> object that lists RichEdit's document structural elements.
    ///</field>
    ///<field name = "commands" type = "RichEditCommands">
    ///Provides access to RichEdit's client-side commands. Value: A <see cref="RichEditCommands" /> object that lists RichEdit's client-side commands.
    ///</field>
    ///<field name = "selection" type = "RichEditSelection">
    ///Provides access to the client methods that changes the selection. Value: A <see cref="RichEditSelection" /> object that lists methods to work with the selection.
    ///</field>
    ///<field name = "unitConverter" type = "RichEditUnitConverter">
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "CustomCommandExecuted" type = "ASPxClientEvent">
    ///Occurs after a custom command has been executed on the client side.
    ///</field>
    ///<field name = "BeginSynchronization" type = "ASPxClientEvent">
    ///Fires after a client change has been made to the document and the client-server synchronization starts to apply the change on the server.
    ///</field>
    ///<field name = "EndSynchronization" type = "ASPxClientEvent">
    ///Fires after a document change has been applied to the server and server and client document models have been synchronized.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the RichEdit.
    ///</field>
    ///<field name = "DocumentChanged" type = "ASPxClientEvent">
    ///Fires if any change is made to the RichEdit's document on the client.
    ///</field>
    ///<field name = "HyperlinkClick" type = "ASPxClientEvent">
    ///Occurs when a hyperlink is clicked within the document.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Occurs when the selection is changed within the document.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientRoundPanel = function() {
    ///<summary>
    ///A client-side counterpart of the RoundPanel extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "CollapsedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a panel has been expanded or collapsed via end-user interactions, i.e., by clicking a panel header or collapse button.
    ///</field>
    ///<field name = "CollapsedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is expanded or collapsed by end-user interactions, i.e., by clicking a panel header or collapse button.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientRoundPanel.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientScheduler = function() {
    ///<summary>
    ///A client-side counterpart of the Scheduler extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ToolTipDisplaying" type = "ASPxClientEvent">
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientScheduler.
    ///</field>
    ///<field name = "ActiveViewChanging" type = "ASPxClientEvent">
    ///Occurs on the client side when the Scheduler control is about to change its active view.
    ///</field>
    ///<field name = "ActiveViewChanged" type = "ASPxClientEvent">
    ///Client-side event. Occurs after the active view of the ASPxScheduler has been changed.
    ///</field>
    ///<field name = "Shortcut" type = "ASPxClientEvent">
    ///Occurs when an end-user pressers a keyboard shortcut.
    ///</field>
    ///<field name = "AppointmentClick" type = "ASPxClientEvent">
    ///Occurs when the end-user clicks an appointment.
    ///</field>
    ///<field name = "AppointmentDoubleClick" type = "ASPxClientEvent">
    ///Occurs when the end-user double clicks on an appointment.
    ///</field>
    ///<field name = "CellClick" type = "ASPxClientEvent">
    ///Occurs when an end-user clicks a time cell.
    ///</field>
    ///<field name = "CellDoubleClick" type = "ASPxClientEvent">
    ///Occurs when and end-user double-clicks a time cell.
    ///</field>
    ///<field name = "AppointmentsSelectionChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the user selects an appointment.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the time cell selection is changed.
    ///</field>
    ///<field name = "SelectionChanging" type = "ASPxClientEvent">
    ///Occurs on the client side when the time cell selection is about to change.
    ///</field>
    ///<field name = "VisibleIntervalChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the  time interval of the scheduling area is changed.
    ///</field>
    ///<field name = "MoreButtonClicked" type = "ASPxClientEvent">
    ///Occurs when one of  More Buttons is clicked.
    ///</field>
    ///<field name = "MenuItemClicked" type = "ASPxClientEvent">
    ///Client-side event that occurs when a popup menu item is clicked.
    ///</field>
    ///<field name = "AppointmentDrop" type = "ASPxClientEvent">
    ///Client-side event that occurs after an appointment has been dragged and dropped.
    ///</field>
    ///<field name = "AppointmentDrag" type = "ASPxClientEvent">
    ///A client-side event that occurs when an appointment is being dragged.
    ///</field>
    ///<field name = "AppointmentResizing" type = "ASPxClientEvent">
    ///A client-side event that occurs when an appointment is being resized.
    ///</field>
    ///<field name = "AppointmentResize" type = "ASPxClientEvent">
    ///Client-side event that occurs when an appointment is resized.
    ///</field>
    ///<field name = "AppointmentDeleting" type = "ASPxClientEvent">
    ///Client-side event that fires before an appointment is deleted.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientSchedulerTemplateToolTip = function() {
    ///<summary>
    ///A template that is rendered to display a tooltip.
    ///</summary>
    ///<field name = "type" type = "MVCxSchedulerToolTipType">
    ///</field>
};
MVCxClientSchedulerToolTipDisplayingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ToolTipDisplaying event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object which is the event source. Identifies the client object that raised the event.
    ///</param>
    ///<param name = "e" type = "MVCxClientSchedulerToolTipDisplayingEventArgs">
    ///A MVCxClientSchedulerToolTipDisplayingEventArgs object that contains the related arguments.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSchedulerToolTipDisplayingEventArgs = function() {
    ///<summary>
    ///Provides data for the ToolTipDisplaying event.
    ///</summary>
    ///<field name = "toolTip" type = "MVCxClientSchedulerTemplateToolTip">
    ///</field>
    ///<field name = "data" type = "ASPxClientSchedulerToolTipData">
    ///</field>
};
MVCxSchedulerToolTipType = function() {
    ///<summary>
    ///Lists available tooltip types.
    ///</summary>
    ///<field name = "Appointment" type = "Int32" static = "true">
    ///The tooltip is displayed for a selected appointment.
    ///</field>
    ///<field name = "AppointmentDrag" type = "Int32" static = "true">
    ///The tooltip is displayed for a dragged appointment.
    ///</field>
    ///<field name = "Selection" type = "Int32" static = "true">
    ///The tooltip is displayed for a selected time interval.
    ///</field>
};
MVCxClientSpreadsheet = function() {
    ///<summary>
    ///A client-side counterpart of the Spreadsheet extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientSpreadsheet.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Occurs on the client when a selection is changed in the ASPxSpreadsheet.
    ///</field>
    ///<field name = "CustomCommandExecuted" type = "ASPxClientEvent">
    ///Occurs after a custom command has been executed on the client side.
    ///</field>
    ///<field name = "DocumentChanged" type = "ASPxClientEvent">
    ///Fires if any change is made to the Spreadsheet's document on the client.
    ///</field>
    ///<field name = "BeginSynchronization" type = "ASPxClientEvent">
    ///Fires after a client change has been made to the document and the client-server synchronization starts to apply the change on the server.
    ///</field>
    ///<field name = "EndSynchronization" type = "ASPxClientEvent">
    ///Fires after a document change has been applied to the server and server and client document models have been synchronized.
    ///</field>
    ///<field name = "HyperlinkClick" type = "ASPxClientEvent">
    ///Occurs on the client side after a hyperlink is clicked within the Spreadsheet's document.
    ///</field>
    ///<field name = "PopupMenuShowing" type = "ASPxClientEvent">
    ///Occurs before the context menu is displayed and allows menu customization.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientPageControl = function() {
    ///<summary>
    ///A client-side counterpart of the PageControl extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "TabClick" type = "ASPxClientEvent">
    ///Fires when a tab is clicked.
    ///</field>
    ///<field name = "ActiveTabChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the active tab has been changed within a tab control.
    ///</field>
    ///<field name = "ActiveTabChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the active tab is changed within a tab control.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by a client tab control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientTokenBox = function() {
    ///<summary>
    ///A client-side counterpart of the TokenBox and TokenBoxFor extensions.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "TokensChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the token collection has been changed.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientComboBox.
    ///</field>
    ///<field name = "SelectedIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after a different item in the list has been selected (focus has been moved from one item to another).
    ///</field>
    ///<field name = "DropDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when the drop down window is opened.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when the drop down window is closed.
    ///</field>
    ///<field name = "QueryCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side before the drop down window is closed and allows you to cancel the operation.
    ///</field>
    ///<field name = "ButtonClick" type = "ASPxClientEvent">
    ///Occurs on the client side after an editor button is clicked.
    ///</field>
    ///<field name = "KeyDown" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses a key while the editor has focus.
    ///</field>
    ///<field name = "KeyPress" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user presses and releases a key while the editor has focus.
    ///</field>
    ///<field name = "KeyUp" type = "ASPxClientEvent">
    ///Occurs on the client-side when an end-user releases a pressed key while the editor has focus.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the editor's text is changed and focus moves out of the editor by end-user interactions.
    ///</field>
    ///<field name = "GotFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor receives input focus.
    ///</field>
    ///<field name = "LostFocus" type = "ASPxClientEvent">
    ///Fires on the client side when the editor loses input focus.
    ///</field>
    ///<field name = "Validation" type = "ASPxClientEvent">
    ///Allows you to specify whether the value entered into the editor is valid, and whether the editor is allowed to lose focus.
    ///</field>
    ///<field name = "ValueChanged" type = "ASPxClientEvent">
    ///Fires after the editor's value has been changed by end-user interactions.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientTreeList = function() {
    ///<summary>
    ///A client-side counterpart of the TreeList extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientTreeList.
    ///</field>
    ///<field name = "ContextMenu" type = "ASPxClientEvent">
    ///Enables you to display a context menu.
    ///</field>
    ///<field name = "CustomButtonClick" type = "ASPxClientEvent">
    ///Occurs when a custom command button has been clicked.
    ///</field>
    ///<field name = "ToolbarItemClick" type = "ASPxClientEvent">
    ///Fires after a toolbar item has been clicked.
    ///</field>
    ///<field name = "NodeFocusing" type = "ASPxClientEvent">
    ///Fires before the focused node has been changed.
    ///</field>
    ///<field name = "FocusedNodeChanged" type = "ASPxClientEvent">
    ///Fires in response to changing node focus.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed via end-user interaction.
    ///</field>
    ///<field name = "CustomizationWindowCloseUp" type = "ASPxClientEvent">
    ///Fires after the Customization Window has been closed.
    ///</field>
    ///<field name = "CustomDataCallback" type = "ASPxClientEvent">
    ///Fires after the callback has been processed in the CustomDataCallback event handler.
    ///</field>
    ///<field name = "NodeClick" type = "ASPxClientEvent">
    ///Fires on the client when a node is clicked.
    ///</field>
    ///<field name = "NodeDblClick" type = "ASPxClientEvent">
    ///Fires on the client when a node is double clicked.
    ///</field>
    ///<field name = "NodeExpanding" type = "ASPxClientEvent">
    ///Fires before a node is expanded.
    ///</field>
    ///<field name = "NodeCollapsing" type = "ASPxClientEvent">
    ///Fires before a node is collapsed.
    ///</field>
    ///<field name = "StartDragNode" type = "ASPxClientEvent">
    ///Occurs before a node is dragged by an end-user.
    ///</field>
    ///<field name = "EndDragNode" type = "ASPxClientEvent">
    ///Occurs after a node drag and drop operation is completed.
    ///</field>
    ///<field name = "ColumnResizing" type = "ASPxClientEvent">
    ///Enables you to prevent columns from being resized.
    ///</field>
    ///<field name = "ColumnResized" type = "ASPxClientEvent">
    ///Occurs after a column's width has been changed by an end-user.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientTreeView = function() {
    ///<summary>
    ///A client-side counterpart of the TreeView extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "NodeClick" type = "ASPxClientEvent">
    ///Fires on the client side after a node has been clicked.
    ///</field>
    ///<field name = "ExpandedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a node's expansion state has been changed by end-user interaction.
    ///</field>
    ///<field name = "ExpandedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the expansion state of a node is changed via end-user interaction.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the node's checked state is changed by clicking on a check box.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientTreeView.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientUploadControl = function() {
    ///<summary>
    ///A client-side counterpart of the UploadControl extension.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "FileUploadComplete" type = "ASPxClientEvent">
    ///Occurs on the client after a file has been uploaded.
    ///</field>
    ///<field name = "FilesUploadComplete" type = "ASPxClientEvent">
    ///Occurs on the client after upload of all selected files has been completed.
    ///</field>
    ///<field name = "FileUploadStart" type = "ASPxClientEvent">
    ///Occurs on the client side before upload of the specified files starts.
    ///</field>
    ///<field name = "FilesUploadStart" type = "ASPxClientEvent">
    ///Occurs on the client side before file upload is started.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the text within the control's edit box is changed while the control has focus.
    ///</field>
    ///<field name = "UploadingProgressChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the progress bar indicator position is changed.
    ///</field>
    ///<field name = "FileInputCountChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the file input elements count is changed.
    ///</field>
    ///<field name = "ValidationErrorOccurred" type = "ASPxClientEvent">
    ///Enables you to specify whether the selected file(s) are valid and provide an error text.
    ///</field>
    ///<field name = "DropZoneEnter" type = "ASPxClientEvent">
    ///Fires when the mouse enters a drop zone or an external drop zone element while dragging a file.
    ///</field>
    ///<field name = "DropZoneLeave" type = "ASPxClientEvent">
    ///Fires when the mouse leaves a drop zone or an external drop zone element while dragging a file.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientUtils = function() {
    ///<summary>
    ///An object containing a service static function that can be useful when performing client-side processing.
    ///</summary>
};
MVCxClientBeginCallbackEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle client BeginCallback events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object which is the event source. Identifies the client object that raised the event.
    ///</param>
    ///<param name = "e" type = "MVCxClientBeginCallbackEventArgs">
    ///A MVCxClientBeginCallbackEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientBeginCallbackEventArgs = function() {
    ///<summary>
    ///Provides data for client BeginCallback events.
    ///</summary>
    ///<field name = "customArgs" type = "Object">
    ///Gets an object containing specific information (if any, as name/value pairs) that should be passed as a request parameter from the client to the server side for further processing. Value: A hash table object containing named values to be passed from the client to the server side via request parameters.
    ///</field>
    ///<field name = "command" type = "String">
    ///Gets a command name that identifies which client action forced a callback to be occurred. Value: A string value that represents the name of the command which initiated a callback.
    ///</field>
};
MVCxClientGlobalBeginCallbackEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BeginCallback event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object which is the event source. Identifies the client object that raised the event.
    ///</param>
    ///<param name = "e" type = "MVCxClientGlobalBeginCallbackEventArgs">
    ///A MVCxClientGlobalBeginCallbackEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGlobalBeginCallbackEventArgs = function() {
    ///<summary>
    ///Provides data for the BeginCallback event.
    ///</summary>
    ///<field name = "customArgs" type = "Object">
    ///Gets an object containing specific information (if any, as name/value pairs) that should be passed as a request parameter from the client to the server side for further processing. Value: A hash table object containing named values to be passed from the client to the server side via request parameters.
    ///</field>
    ///<field name = "control" type = "ASPxClientControl">
    ///Gets an object that initiated a callback. Value: An <see cref="ASPxClientControl" /> class descendant object that is the control that initiated a callback.
    ///</field>
    ///<field name = "command" type = "String">
    ///Gets a command name that identifies which client action forced a callback to be occurred. Value: A string value that represents the name of the command which initiated a callback.
    ///</field>
};
MVCxClientGlobalEvents = function() {
    ///<summary>
    ///An ASP.NET MVC equivalent of the client ASPxClientGlobalEvents component.
    ///</summary>
    ///<field name = "ControlsInitialized" type = "ASPxClientEvent">
    ///Occurs on the client side after client object models of all DevExpress MVC extensions contained within the page have been initialized.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs on the client when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by a DevExpress MVC extension.
    ///</field>
};
MVCxClientVerticalGrid = function() {
    ///<summary>
    ///A client-side counterpart of the VerticalGrid extension.
    ///</summary>
    ///<field name = "batchEditApi" type = "ASPxClientVerticalGridBatchEditApi">
    ///Provides access to the batch editing client API. Value: A <see cref="ASPxClientVerticalGridBatchEditApi" /> object that exposes the batch editing client API methods.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "CustomButtonClick" type = "ASPxClientEvent">
    ///Occurs when a custom command button has been clicked.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed.
    ///</field>
    ///<field name = "BatchEditStartEditing" type = "ASPxClientEvent">
    ///Occurs when a grid switches to batch edit mode.
    ///</field>
    ///<field name = "BatchEditEndEditing" type = "ASPxClientEvent">
    ///Occurs when a grid leaves the batch edit mode.
    ///</field>
    ///<field name = "BatchEditConfirmShowing" type = "ASPxClientEvent">
    ///Enables you to prevent a batch edit confirmation message from being displayed.
    ///</field>
    ///<field name = "BatchEditTemplateCellFocused" type = "ASPxClientEvent">
    ///Enables you to provide navigation for editors contained in a templated cell in Batch Edit mode.
    ///</field>
    ///<field name = "BatchEditChangesSaving" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are saved in batch edit mode.
    ///</field>
    ///<field name = "BatchEditChangesCanceling" type = "ASPxClientEvent">
    ///Occurs on the client side before data changes are canceled in batch edit mode.
    ///</field>
    ///<field name = "BatchEditRecordInserting" type = "ASPxClientEvent">
    ///Occurs on the client side before a record is inserted in batch edit mode.
    ///</field>
    ///<field name = "BatchEditRecordDeleting" type = "ASPxClientEvent">
    ///Occurs on the client side before a record is deleted in batch edit mode.
    ///</field>
    ///<field name = "BatchEditRecordValidating" type = "ASPxClientEvent">
    ///Enables you to specify whether record data is valid and provide an error text.
    ///</field>
    ///<field name = "FocusedCellChanging" type = "ASPxClientEvent">
    ///Occurs on the client side when the focused cell is about to be changed.
    ///</field>
    ///<field name = "RowSorting" type = "ASPxClientEvent">
    ///Enables you to prevent rows from being sorted.
    ///</field>
    ///<field name = "RowExpandedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the expansion state of a row is changed by end-user interaction.
    ///</field>
    ///<field name = "RowExpandedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a row's expansion state has been changed by end-user interaction.
    ///</field>
    ///<field name = "RecordClick" type = "ASPxClientEvent">
    ///Fires on the client when a record is clicked.
    ///</field>
    ///<field name = "RecordDblClick" type = "ASPxClientEvent">
    ///Fires on the client when a record is double clicked.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any unhandled server error occurs during server-side processing of a callback sent by the ASPxClientVerticalGrid.
    ///</field>
    ///<field name = "ToolbarItemClick" type = "ASPxClientEvent">
    ///Fires after a toolbar item has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
MVCxClientWebDocumentViewer = function() {
    ///<summary>
    ///A client-side equivalent of the MVCxWebDocumentViewer class.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DocumentReady" type = "ASPxClientEvent">
    ///Occurs after a report document has been loaded to the Web Document Viewer.
    ///</field>
    ///<field name = "EditingFieldChanged" type = "ASPxClientEvent">
    ///Occurs each time a value of an editing field changes.
    ///</field>
    ///<field name = "CustomizeElements" type = "ASPxClientEvent">
    ///Enables you to customize UI elements of the Web Document Viewer.
    ///</field>
    ///<field name = "CustomizeMenuActions" type = "ASPxClientEvent">
    ///Enables you to customize the menu actions of a Web Document Viewer.
    ///</field>
    ///<field name = "CustomizeParameterEditors" type = "ASPxClientEvent">
    ///Occurs each time a standard editor is created for a report parameter based on a parameter type.
    ///</field>
    ///<field name = "CustomizeParameterLookUpSource" type = "ASPxClientEvent">
    ///Occurs each time a look-up editor is created for a report parameter.
    ///</field>
    ///<field name = "PreviewClick" type = "ASPxClientEvent">
    ///Occurs when the left mouse button has been clicked over a report document.
    ///</field>
    ///<field name = "ParametersReset" type = "ASPxClientEvent">
    ///Occurs after report parameter values have been reset to their default values.
    ///</field>
    ///<field name = "ParametersSubmitted" type = "ASPxClientEvent">
    ///Occurs after report parameter values have been submitted.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientControlBase = function() {
    ///<summary>
    ///Serves as the base type for all the objects included in the client-side object model.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientControl = function() {
    ///<summary>
    ///Serves as the base type for all the objects included in the client-side object model.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientCallback = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxCallback control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCallback.
    ///</field>
    ///<field name = "CallbackComplete" type = "ASPxClientEvent">
    ///Fires on the client side when a callback initiated by the client Callback event's handler returns back to the client.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientCallbackCompleteEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client events related to completion of callback server-side processing.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the web control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientCallbackCompleteEventArgs">
    ///An ASPxClientCallbackCompleteEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEventArgs = function() {
    ///<summary>
    ///Serves as the base class for arguments of the web controls' client-side events.
    ///</summary>
};
ASPxClientCallbackCompleteEventArgs = function() {
    ///<summary>
    ///Provides data for events concerning the final processing of a callback.
    ///</summary>
    ///<field name = "parameter" type = "String">
    ///Gets a string that contains specific information (if any) passed from the client side for server-side processing. Value: A string value representing specific information passed from the client to the server side.
    ///</field>
    ///<field name = "result" type = "String">
    ///Gets a string that contains specific information (if any) that has been passed from the server to the client side for further processing. Value: A string value representing specific information passed from the server back to the client side.
    ///</field>
};
ASPxClientPanelBase = function() {
    ///<summary>
    ///Serves as the base class for controls that implement panel functionality.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientPanel = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxPanel control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Collapsed" type = "ASPxClientEvent">
    ///Occurs when the expanded panel is closed.
    ///</field>
    ///<field name = "Expanded" type = "ASPxClientEvent">
    ///Occurs when an end-user opens the expand panel.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientCallbackPanel = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxCallbackPanel control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientCallbackPanel.
    ///</field>
    ///<field name = "Collapsed" type = "ASPxClientEvent">
    ///Occurs when the expanded panel is closed.
    ///</field>
    ///<field name = "Expanded" type = "ASPxClientEvent">
    ///Occurs when an end-user opens the expand panel.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientEvent = function() {
    ///<summary>
    ///Represents the event object used for client-side events.
    ///</summary>
};
ASPxClientEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client-side events of a web control's client-side equivalent.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientEventArgs">
    ///An ASPxClientEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the cancelable events of a web control's client-side equivalent.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the web control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientCancelEventArgs">
    ///An ASPxClientCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCancelEventArgs = function() {
    ///<summary>
    ///Provides data for cancelable client events.
    ///</summary>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientProcessingModeEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client events which can't be cancelled and allow the event's processing to be passed to the server side.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the web control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientProcessingModeEventArgs">
    ///An ASPxClientProcessingModeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProcessingModeEventArgs = function() {
    ///<summary>
    ///Provides data for the client events which can't be cancelled and allow the event's processing to be passed to the server side.
    ///</summary>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientProcessingModeCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the cancelable client-side events which allow the event's processing to be passed to the server side.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the web control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientProcessingModeCancelEventArgs">
    ///An ASPxClientProcessingModeCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProcessingModeCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the cancelable client-side events which allow the event's processing to be passed to the server side.
    ///</summary>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
KnockoutObservableBoolean = function() {
    ///<summary>
    ///Provides access to an observable boolean, that allows you to detect and respond to changes.
    ///</summary>
};
KnockoutObservableArray = function() {
    ///<summary>
    ///Provides access to observable arrays that allow you to detect and respond to changes in a collection of things.
    ///</summary>
};
ASPxClientDataCallback = function(sender, result) {
    ///<summary>
    ///A JavaScript function which receives a callback data obtained via a call to a specific client method (such as the PerformDataCallback).
    ///</summary>
    ///<param name = "sender" type = "Object">
    ///An object whose client method generated a callback.
    ///</param>
    ///<param name = "result" type = "String">
    ///A string value that represents the result of server-side callback processing.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxCloudControl control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after an item has been clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientCloudControlItemEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle client events concerning manipulations with items.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the cloud control object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientCloudControlItemEventArgs">
    ///An ASPxClientCloudControlItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControlItemEventArgs = function() {
    ///<summary>
    ///Provides data for events which involve clicking on the control's items.
    ///</summary>
    ///<field name = "name" type = "Object">
    ///Gets the name that uniquely identifies the processed item. Value: A string value that represents the value assigned to the item's Name property.
    ///</field>
    ///<field name = "htmlElement" type = "Object">
    ///Gets the HTML object that contains the processed item. Value: An object representing a container for the item related to the event.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientBeginCallbackEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle client BeginCallback events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the web control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientBeginCallbackEventArgs">
    ///An ASPxClientBeginCallbackEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBeginCallbackEventArgs = function() {
    ///<summary>
    ///Provides data for client events related to the beginning of a callback processing round trip.
    ///</summary>
    ///<field name = "command" type = "String">
    ///Gets a command name that identifies which client action forced a callback to be occurred. Value: A string value that represents the name of the command which initiated a callback.
    ///</field>
};
ASPxClientGlobalBeginCallbackEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BeginCallback event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGlobalBeginCallbackEventArgs">
    ///An ASPxDataValidationEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGlobalBeginCallbackEventArgs = function() {
    ///<summary>
    ///Provides data for the BeginCallback event.
    ///</summary>
    ///<field name = "control" type = "ASPxClientControl">
    ///Gets an object that initiated a callback. Value: An <see cref="ASPxClientControl" /> class descendant object that is the control that initiated a callback.
    ///</field>
    ///<field name = "command" type = "String">
    ///Gets a command name that identifies which client action forced a callback to be occurred. Value: A string value that represents the name of the command which initiated a callback.
    ///</field>
};
ASPxClientEndCallbackEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle client EndCallback events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientEndCallbackEventArgs">
    ///A MenuItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEndCallbackEventArgs = function() {
    ///<summary>
    ///Provides data for client events related to the completion of a callback processing round trip.
    ///</summary>
};
ASPxClientGlobalEndCallbackEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the EndCallback event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGlobalEndCallbackEventArgs">
    ///An ASPxDataValidationEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGlobalEndCallbackEventArgs = function() {
    ///<summary>
    ///Provides data for the EndCallback event.
    ///</summary>
    ///<field name = "control" type = "ASPxClientControl">
    ///Gets an object that initiated a callback. Value: An <see cref="ASPxClientControl" /> class descendant object that is the control that initiated a callback.
    ///</field>
};
ASPxClientCustomDataCallbackEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client CustomCallback event of some controls.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientCustomDataCallbackEventArgs">
    ///An ASPxClientCustomDataCallbackEventHandler object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCustomDataCallbackEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomCallback event.
    ///</summary>
    ///<field name = "result" type = "String">
    ///Gets a string that contains specific information (if any) that has been passed from the server to the client side for further processing, related to the CustomCallback event. Value: A string value representing specific information passed from the server back to the client side.
    ///</field>
};
ASPxClientCallbackErrorEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle client CallbackError events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientCallbackErrorEventArgs">
    ///A ASPxClientCallbackErrorEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackErrorEventArgs = function() {
    ///<summary>
    ///Provides data for client events related to server-side errors that occured during callback processing.
    ///</summary>
    ///<field name = "message" type = "String">
    ///Gets the error message that describes the server error that occurred. Value: A string value that represents the error message.
    ///</field>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets whether the event is handled and the default error handling actions are not required. Value: true if the error is handled and no default processing is required; otherwise false.
    ///</field>
};
ASPxClientGlobalCallbackErrorEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CallbackError event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientGlobalCallbackErrorEventArgs">
    ///An ASPxDataValidationEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGlobalCallbackErrorEventArgs = function() {
    ///<summary>
    ///Provides data for the CallbackError event.
    ///</summary>
    ///<field name = "control" type = "ASPxClientControl">
    ///Gets an object that initiated a callback. Value: An <see cref="ASPxClientControl" /> class descendant object that is the control that initiated a callback.
    ///</field>
    ///<field name = "message" type = "String">
    ///Gets the error message that describes the server error that occurred. Value: A string value that represents the error message.
    ///</field>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets whether the event is handled and the default error handling actions are not required. Value: true if the error is handled and no default processing is required; otherwise false.
    ///</field>
};
ASPxClientValidationCompletedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ValidationCompleted event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the ASPxClientGlobalEvents object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientValidationCompletedEventArgs">
    ///An ASPxClientValidationCompletedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationCompletedEventArgs = function() {
    ///<summary>
    ///Provides data for the ValidationCompleted client event that allows you to centrally validate user input within all DevExpress web controls to which validation is applied.
    ///</summary>
    ///<field name = "container" type = "Object">
    ///Gets a container object that holds the validated control(s). Value: An object that represents a container of the validated control(s).
    ///</field>
    ///<field name = "validationGroup" type = "String">
    ///Gets the name of the validation group name to which validation has been applied. Value: A string value that represents the name of the validation group that has been validated.
    ///</field>
    ///<field name = "invisibleControlsValidated" type = "Boolean">
    ///Gets a value that indicates whether validation has been applied to both visible and invisible controls. Value: true if validation has been applied to both visible and invisible controls; false if only visible controls have been validated.
    ///</field>
    ///<field name = "isValid" type = "Boolean">
    ///Gets a value specifying whether the validation has been completed successfully. Value: true if the validation has been completed successfully; otherwise, false.
    ///</field>
    ///<field name = "firstInvalidControl" type = "ASPxClientControl">
    ///Gets the first control (either visible or invisible) that hasn't passed the validation applied. Value: An ASPxClientControl object that represents the first invalid control.
    ///</field>
    ///<field name = "firstVisibleInvalidControl" type = "ASPxClientControl">
    ///Gets the first visible control that hasn't passed the validation applied. Value: An ASPxClientControl object that represents the first visible invalid control.
    ///</field>
};
ASPxClientControlsInitializedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client ControlsInitialized event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientControlsInitializedEventArgs">
    ///An ASPxClientControlsInitializedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControlsInitializedEventArgs = function() {
    ///<summary>
    ///Provides data for the client ControlsInitialized event.
    ///</summary>
    ///<field name = "isCallback" type = "Boolean">
    ///Gets a value that specifies whether a callback is sent during a controls initialization. Value: true if a callback is sent; otherwise, false.
    ///</field>
};
ASPxClientControlPredicate = function(control) {
    ///<summary>
    ///A JavaScript function which returns a value specifying whether an object meets the criteria defined within the method specified by this delegate.
    ///</summary>
    ///<param name = "control" type = "Object">
    ///An object to compare against the criteria defined within the method.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the object meets the criteria; otherwise, false.
    ///</returns>
};
ASPxClientControlAction = function(control) {
    ///<summary>
    ///Represents a JavaScript function which receives the action to perform for a control when the client ForEachControl method is called.
    ///</summary>
    ///<param name = "control" type = "Object">
    ///An object that specifies a control.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControlCollection = function() {
    ///<summary>
    ///A collection object used on the client side to maintain particular client control objects
    ///</summary>
    ///<field name = "ControlsInitialized" type = "ASPxClientEvent">
    ///Occurs on the client side after client object models of all DevExpress web controls contained within the page have been initialized.
    ///</field>
    ///<field name = "BrowserWindowResized" type = "ASPxClientEvent">
    ///Occurs when the browser window is being resized.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated by any DevExpress control.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side, after server-side processing of a callback initiated by any DevExpress web control, has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by any DevExpress web control.
    ///</field>
    ///<field name = "ValidationCompleted" type = "ASPxClientEvent">
    ///Occurs after the validation initiated for a DevExpress web control (or a group of DevExpress web controls) has been completed.
    ///</field>
};
ASPxClientDataView = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxDataView object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientDataView.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientDockingFilterPredicate = function(item) {
    ///<summary>
    ///A JavaScript function which returns a value specifying whether an object meets the criteria defined within the method specified by this delegate.
    ///</summary>
    ///<param name = "item" type = "Object">
    ///An object to compare against the criteria defined within the method.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the object meets the criteria; otherwise, false.
    ///</returns>
};
ASPxClientDockManager = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxDockManager   object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeforeDock" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterDock" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is docked in a zone.
    ///</field>
    ///<field name = "BeforeFloat" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is made floating (undocked from a zone) and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterFloat" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is undocked from a zone.
    ///</field>
    ///<field name = "StartPanelDragging" type = "ASPxClientEvent">
    ///Occurs when a panel dragging operation is started.
    ///</field>
    ///<field name = "EndPanelDragging" type = "ASPxClientEvent">
    ///Occurs after a panel dragging operation is complete.
    ///</field>
    ///<field name = "PanelClosing" type = "ASPxClientEvent">
    ///Occurs on the client side before a panel is closed, and allows you to cancel the action.
    ///</field>
    ///<field name = "PanelCloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a panel is closed.
    ///</field>
    ///<field name = "PanelPopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a panel pops up.
    ///</field>
    ///<field name = "PanelShown" type = "ASPxClientEvent">
    ///Occurs on the client side after a panel has been invoked.
    ///</field>
    ///<field name = "PanelResize" type = "ASPxClientEvent">
    ///Occurs on the client side after a panel has been resized.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientDockManagerProcessingModeCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BeforeDock event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the dock manager object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientDockManagerProcessingModeCancelEventArgs">
    ///An ASPxClientDockManagerProcessingModeCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManagerProcessingModeCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the BeforeDock event.
    ///</summary>
    ///<field name = "panel" type = "ASPxClientDockPanel">
    ///Gets the panel currently being processed. Value: An ASPxClientDockPanel object that is the processed panel.
    ///</field>
    ///<field name = "zone" type = "ASPxClientDockZone">
    ///Gets the zone currently being processed. Value: An ASPxClientDockZone object that is the processed zone.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientDockManagerProcessingModeEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the AfterDock event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the dock manager object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientDockManagerProcessingModeEventArgs">
    ///An ASPxClientDockManagerProcessingModeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManagerProcessingModeEventArgs = function() {
    ///<summary>
    ///Provides data for the AfterDock event.
    ///</summary>
    ///<field name = "panel" type = "ASPxClientDockPanel">
    ///Gets the panel currently being processed. Value: An ASPxClientDockPanel object that is the processed panel.
    ///</field>
    ///<field name = "zone" type = "ASPxClientDockZone">
    ///Gets the zone currently being processed. Value: An ASPxClientDockZone object that is the processed zone.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientDockManagerEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle client-side events concerning manipulations with panels.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the dock manager object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientDockManagerEventArgs">
    ///An ASPxClientDockManagerEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManagerEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern manipulations on panels.
    ///</summary>
    ///<field name = "panel" type = "ASPxClientDockPanel">
    ///Gets the panel currently being processed. Value: An ASPxClientDockPanel object that is the processed panel.
    ///</field>
};
ASPxClientDockManagerCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the PanelClosing event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the dock manager object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientDockManagerCancelEventArgs">
    ///An ASPxClientDockManagerCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManagerCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the BeforeDock event.
    ///</summary>
    ///<field name = "panel" type = "ASPxClientDockPanel">
    ///Gets the panel currently being processed. Value: An ASPxClientDockPanel object that is the processed panel.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientPopupControlBase = function() {
    ///<summary>
    ///Serves as a base class for the ASPxClientPopupControl classes.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeforeResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing initiates.
    ///</field>
    ///<field name = "AfterResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing completes.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the control.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window closes or hides.
    ///</field>
    ///<field name = "Closing" type = "ASPxClientEvent">
    ///Enables you to cancel window closing on the client side.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window is invoked.
    ///</field>
    ///<field name = "Resize" type = "ASPxClientEvent">
    ///Occurs on the client side after a window has been resized.
    ///</field>
    ///<field name = "Shown" type = "ASPxClientEvent">
    ///Occurs on the client side after a control's window has been invoked.
    ///</field>
    ///<field name = "PinnedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the window pin state is changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientDockPanel = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxDockPanel object.
    ///</summary>
    ///<field name = "panelUID" type = "String">
    ///Gets or sets the unique identifier of a panel on a page. Value: A string that is the unique identifier of a panel.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeforeDock" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterDock" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is docked in a zone.
    ///</field>
    ///<field name = "BeforeFloat" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is made floating (undocked from a zone) and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterFloat" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is undocked from a zone.
    ///</field>
    ///<field name = "StartDragging" type = "ASPxClientEvent">
    ///Occurs when a panel dragging operation is started.
    ///</field>
    ///<field name = "EndDragging" type = "ASPxClientEvent">
    ///Occurs after a panel dragging operation is complete.
    ///</field>
    ///<field name = "BeforeResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing initiates.
    ///</field>
    ///<field name = "AfterResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing completes.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the control.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window closes or hides.
    ///</field>
    ///<field name = "Closing" type = "ASPxClientEvent">
    ///Enables you to cancel window closing on the client side.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window is invoked.
    ///</field>
    ///<field name = "Resize" type = "ASPxClientEvent">
    ///Occurs on the client side after a window has been resized.
    ///</field>
    ///<field name = "Shown" type = "ASPxClientEvent">
    ///Occurs on the client side after a control's window has been invoked.
    ///</field>
    ///<field name = "PinnedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the window pin state is changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientDockPanelProcessingModeCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BeforeDock event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///A ASPxClientDockPanel object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientDockPanelProcessingModeCancelEventArgs">
    ///A ASPxClientDockPanelProcessingModeCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanelProcessingModeCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the BeforeDock event.
    ///</summary>
    ///<field name = "zone" type = "ASPxClientDockZone">
    ///Gets the zone currently being processed. Value: An ASPxClientDockZone object that is the processed zone.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientDockPanelProcessingModeEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the AfterFloat event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///A ASPxClientDockPanel object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientDockPanelProcessingModeEventArgs">
    ///A ASPxClientDockPanelProcessingModeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanelProcessingModeEventArgs = function() {
    ///<summary>
    ///Provides data for the AfterFloat event.
    ///</summary>
    ///<field name = "zone" type = "ASPxClientDockZone">
    ///Gets the zone currently being processed. Value: An ASPxClientDockZone object that is the processed zone.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientDockZone = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxDockZone object.
    ///</summary>
    ///<field name = "zoneUID" type = "String">
    ///Gets or sets the unique identifier of a zone on a page. Value: A string that is the unique identifier of a zone.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeforeDock" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is docked in a zone and allows you to cancel the action.
    ///</field>
    ///<field name = "AfterDock" type = "ASPxClientEvent">
    ///Fires on the client side after a panel is docked in a zone.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientDockZoneCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the BeforeDock event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the zone object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientDockZoneCancelEventArgs">
    ///A ASPxClientDockZoneCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZoneCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the BeforeDock event.
    ///</summary>
    ///<field name = "panel" type = "ASPxClientDockPanel">
    ///Gets the panel currently being processed. Value: An ASPxClientDockPanel object that is the processed panel.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientDockZoneProcessingModeEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the AfterDock event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the zone object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientDockZoneProcessingModeEventArgs">
    ///An  ASPxClientDockZoneProcessingModeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZoneProcessingModeEventArgs = function() {
    ///<summary>
    ///Provides data for the AfterDock event.
    ///</summary>
    ///<field name = "panel" type = "ASPxClientDockPanel">
    ///Gets the panel currently being processed. Value: An ASPxClientDockPanel object that is the processed panel.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientFileManager = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxFileManager control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientFileManager.
    ///</field>
    ///<field name = "SelectedFileChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the selected file has been changed.
    ///</field>
    ///<field name = "SelectedFileOpened" type = "ASPxClientEvent">
    ///Fires on the client side when an end-user opens a file by double-clicking it or pressing the Enter key.
    ///</field>
    ///<field name = "FocusedItemChanged" type = "ASPxClientEvent">
    ///Fires after the focused item has been changed.
    ///</field>
    ///<field name = "SelectionChanged" type = "ASPxClientEvent">
    ///Fires after the selection has been changed.
    ///</field>
    ///<field name = "CurrentFolderChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the current folder has been changed within a file manager.
    ///</field>
    ///<field name = "FolderCreating" type = "ASPxClientEvent">
    ///Fires on the client side before the folder is created, and allows you to cancel the action.
    ///</field>
    ///<field name = "FolderCreated" type = "ASPxClientEvent">
    ///Occurs on the client side after a folder has been created.
    ///</field>
    ///<field name = "ItemRenaming" type = "ASPxClientEvent">
    ///Fires on the client side before an item is renamed and allows you to cancel the action.
    ///</field>
    ///<field name = "ItemRenamed" type = "ASPxClientEvent">
    ///Occurs on the client side after a file manager's item has been renamed.
    ///</field>
    ///<field name = "ItemDeleting" type = "ASPxClientEvent">
    ///Fires on the client side before an item is deleted and allows you to cancel the action.
    ///</field>
    ///<field name = "ItemDeleted" type = "ASPxClientEvent">
    ///Occurs on the client side after a file manager's item has been deleted.
    ///</field>
    ///<field name = "ItemsDeleted" type = "ASPxClientEvent">
    ///Occurs on the client side after all the selected items have been deleted.
    ///</field>
    ///<field name = "ItemMoving" type = "ASPxClientEvent">
    ///Fires on the client side before an item is moved and allows you to cancel the action.
    ///</field>
    ///<field name = "ItemMoved" type = "ASPxClientEvent">
    ///Occurs on the client side after a file manager's item has been moved.
    ///</field>
    ///<field name = "ItemsMoved" type = "ASPxClientEvent">
    ///Occurs on the client side after all the selected items have been moved .
    ///</field>
    ///<field name = "ItemCopying" type = "ASPxClientEvent">
    ///Fires on the client side before an item is copied and allows you to cancel the action.
    ///</field>
    ///<field name = "ItemCopied" type = "ASPxClientEvent">
    ///Occurs on the client side after a file manager item has been copied.
    ///</field>
    ///<field name = "ItemsCopied" type = "ASPxClientEvent">
    ///Occurs on the client side after all the selected items have been copied.
    ///</field>
    ///<field name = "ErrorOccurred" type = "ASPxClientEvent">
    ///Fires on the client if any error occurs while editing an item.
    ///</field>
    ///<field name = "ErrorAlertDisplaying" type = "ASPxClientEvent">
    ///Enables you to display the alert with the result error description.
    ///</field>
    ///<field name = "CustomCommand" type = "ASPxClientEvent">
    ///Fires when a custom item is clicked, allowing you to perform custom actions.
    ///</field>
    ///<field name = "ToolbarUpdating" type = "ASPxClientEvent">
    ///Fires on the client side when the file manager updates the state of toolbar or context menu items.
    ///</field>
    ///<field name = "HighlightItemTemplate" type = "ASPxClientEvent">
    ///Enables you to highlight the search text, which is specified using the filter box, in templates.
    ///</field>
    ///<field name = "FileUploading" type = "ASPxClientEvent">
    ///Fires on the client side before a file upload starts, and allows you to cancel the action.
    ///</field>
    ///<field name = "FilesUploading" type = "ASPxClientEvent">
    ///Fires on the client side before the selected items are uploaded and allows you to cancel the action.
    ///</field>
    ///<field name = "FileUploaded" type = "ASPxClientEvent">
    ///Occurs on the client side after a file has been uploaded.
    ///</field>
    ///<field name = "FilesUploaded" type = "ASPxClientEvent">
    ///Occurs on the client side after upload of all selected files has been completed.
    ///</field>
    ///<field name = "FileUploadValidationErrorOccurred" type = "ASPxClientEvent">
    ///Enables you to specify whether the selected file(s) are valid and provide an error text.
    ///</field>
    ///<field name = "FileDownloading" type = "ASPxClientEvent">
    ///Fires on the client side before a file download starts, and allows you to cancel the action.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientFileManagerCallback = function(result) {
    ///<summary>
    ///A JavaScript function that receives callback data obtained via a call to the SetCurrentFolderPath method.
    ///</summary>
    ///<param name = "result" type = "Object">
    ///An object that contains a callback data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerItem = function() {
    ///<summary>
    ///A client-side equivalent of the file manager's FileManagerItem object and serves as a base class for client file and folder objects.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the name of the current item. Value: A string value that is the item's name.
    ///</field>
    ///<field name = "id" type = "String">
    ///Gets the item's unique identifier. Value: A String value that specifies the item's unique identifier.
    ///</field>
    ///<field name = "isFolder" type = "Boolean">
    ///Gets a value that indicates if the current file manager item is a folder. Value: true if the current item is a folder or parent folder; false if the current item is a file.
    ///</field>
};
ASPxClientFileManagerFile = function() {
    ///<summary>
    ///Represents the client-side equivalent of the FileManagerFile object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the name of the current item. Value: A string value that is the item's name.
    ///</field>
    ///<field name = "id" type = "String">
    ///Gets the item's unique identifier. Value: A String value that specifies the item's unique identifier.
    ///</field>
    ///<field name = "isFolder" type = "Boolean">
    ///Gets a value that indicates if the current file manager item is a folder. Value: true if the current item is a folder or parent folder; false if the current item is a file.
    ///</field>
};
ASPxClientFileManagerFolder = function() {
    ///<summary>
    ///A client-side equivalent of the FileManagerFolder object.
    ///</summary>
    ///<field name = "isParentFolder" type = "Boolean">
    ///Gets a value specifying whether an item is a parent folder. Value: true if an item is a parent folder; false if an item is a file or folder.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the current item. Value: A string value that is the item's name.
    ///</field>
    ///<field name = "id" type = "String">
    ///Gets the item's unique identifier. Value: A String value that specifies the item's unique identifier.
    ///</field>
    ///<field name = "isFolder" type = "Boolean">
    ///Gets a value that indicates if the current file manager item is a folder. Value: true if the current item is a folder or parent folder; false if the current item is a file.
    ///</field>
};
ASPxClientFileManagerAllItemsCallback = function(items) {
    ///<summary>
    ///A JavaScript function which receives callback data obtained by a call to the client GetAllItems method.
    ///</summary>
    ///<param name = "items" elementType = "ASPxClientFileManagerItem" type = "Array">
    ///An array of ASPxClientFileManagerItem objects that are items contained in the current folder.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFileEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the SelectedFileOpened events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerFileEventArgs">
    ///An ASPxClientFileManagerFileEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFileEventArgs = function() {
    ///<summary>
    ///Provides data for the SelectedFileOpened events.
    ///</summary>
    ///<field name = "file" type = "ASPxClientFileManagerFile">
    ///Gets a file related to the event. Value: An ASPxClientFileManagerFile object that represents a file currently being processed.
    ///</field>
};
ASPxClientFileManagerFileOpenedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the SelectedFileOpened event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the file manager object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerFileOpenedEventArgs">
    ///An ASPxClientFileManagerFileOpenedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFileOpenedEventArgs = function() {
    ///<summary>
    ///Provides data for the SelectedFileOpened event.
    ///</summary>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
    ///<field name = "file" type = "ASPxClientFileManagerFile">
    ///Gets a file related to the event. Value: An ASPxClientFileManagerFile object that represents a file currently being processed.
    ///</field>
};
ASPxClientFileManagerActionEventArgsBase = function() {
    ///<summary>
    ///Serves as a base for classes that are used as arguments for events generated on the client side.
    ///</summary>
    ///<field name = "fullName" type = "String">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the currently processed item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "isFolder" type = "Boolean">
    ///Gets a value specifying whether the current processed item is a folder. Value: true if the processed  item is a folder; false if the processed item is a file.
    ///</field>
};
ASPxClientFileManagerItemEditingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ItemRenaming events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerItemEditingEventArgs">
    ///A ASPxClientFileManagerItemEditingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerItemEditingEventArgs = function() {
    ///<summary>
    ///Provides data for the item editing event.
    ///</summary>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "fullName" type = "String">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the currently processed item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "isFolder" type = "Boolean">
    ///Gets a value specifying whether the current processed item is a folder. Value: true if the processed  item is a folder; false if the processed item is a file.
    ///</field>
};
ASPxClientFileManagerItemRenamedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ItemRenamed event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerItemRenamedEventArgs">
    ///A ASPxClientFileManagerItemRenamedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerItemRenamedEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemRenamed event.
    ///</summary>
    ///<field name = "oldName" type = "String">
    ///Gets the previous name of the renamed item. Value: A  string value that specifies the item name.
    ///</field>
    ///<field name = "fullName" type = "String">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the currently processed item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "isFolder" type = "Boolean">
    ///Gets a value specifying whether the current processed item is a folder. Value: true if the processed  item is a folder; false if the processed item is a file.
    ///</field>
};
ASPxClientFileManagerItemDeletedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ItemDeleted event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerItemDeletedEventArgs">
    ///A ASPxClientFileManagerItemDeletedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerItemDeletedEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemDeleted event.
    ///</summary>
    ///<field name = "fullName" type = "String">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the currently processed item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "isFolder" type = "Boolean">
    ///Gets a value specifying whether the current processed item is a folder. Value: true if the processed  item is a folder; false if the processed item is a file.
    ///</field>
};
ASPxClientFileManagerItemsDeletedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ItemsDeleted event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerItemsDeletedEventArgs">
    ///A ASPxClientFileManagerItemsDeletedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerItemsDeletedEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemsDeleted event.
    ///</summary>
    ///<field name = "items" type = "Array" elementType = "ASPxClientFileManagerItem">
    ///Gets an array of the currently processed items. Value: An array of ASPxClientFileManagerItem objects that are items currently being processed.
    ///</field>
};
ASPxClientFileManagerItemMovedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ItemMoved event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerItemMovedEventArgs">
    ///A ASPxClientFileManagerItemMovedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerItemMovedEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemMoved event.
    ///</summary>
    ///<field name = "oldFolderFullName" type = "String">
    ///Gets the full name of the folder from which an item is moved. Value: A string value that specifies the folder's full name.
    ///</field>
    ///<field name = "fullName" type = "String">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the currently processed item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "isFolder" type = "Boolean">
    ///Gets a value specifying whether the current processed item is a folder. Value: true if the processed  item is a folder; false if the processed item is a file.
    ///</field>
};
ASPxClientFileManagerItemsMovedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ItemsMoved event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerItemsMovedEventArgs">
    ///A ASPxClientFileManagerItemsMovedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerItemsMovedEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemsMoved event.
    ///</summary>
    ///<field name = "items" type = "Array" elementType = "ASPxClientFileManagerItem">
    ///Gets an array of the currently processed items. Value: An array of ASPxClientFileManagerItem objects that are items currently being processed.
    ///</field>
    ///<field name = "oldFolderFullName" type = "String">
    ///Gets the full name of the folder from which items are moved. Value: A string value that specifies the folder's full name.
    ///</field>
};
ASPxClientFileManagerItemCopiedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ItemCopied event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerItemCopiedEventArgs">
    ///A ASPxClientFileManagerItemCopiedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerItemCopiedEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemCopied event.
    ///</summary>
    ///<field name = "oldFolderFullName" type = "String">
    ///Gets the full name of the folder from which an item is copied. Value: A string value that specifies the folder's full name.
    ///</field>
    ///<field name = "fullName" type = "String">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the currently processed item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "isFolder" type = "Boolean">
    ///Gets a value specifying whether the current processed item is a folder. Value: true if the processed  item is a folder; false if the processed item is a file.
    ///</field>
};
ASPxClientFileManagerItemsCopiedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ItemsCopied event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerItemsCopiedEventArgs">
    ///A ASPxClientFileManagerItemsCopiedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerItemsCopiedEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemsCopied event.
    ///</summary>
    ///<field name = "items" type = "Array" elementType = "ASPxClientFileManagerItem">
    ///Gets an array of the currently processed items. Value: An array of ASPxClientFileManagerItem objects that are items currently being processed.
    ///</field>
    ///<field name = "oldFolderFullName" type = "String">
    ///Gets the full name of the folder from which items are copied. Value: A string value that specifies the folder's full name.
    ///</field>
};
ASPxClientFileManagerItemCreatedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FolderCreated event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerItemCreatedEventArgs">
    ///A ASPxClientFileManagerItemCreatedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerItemCreatedEventArgs = function() {
    ///<summary>
    ///Provides data for the FolderCreated event.
    ///</summary>
    ///<field name = "fullName" type = "String">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the currently processed item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "isFolder" type = "Boolean">
    ///Gets a value specifying whether the current processed item is a folder. Value: true if the processed  item is a folder; false if the processed item is a file.
    ///</field>
};
ASPxClientFileManagerErrorEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client ErrorOccurred event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerErrorEventArgs">
    ///An ASPxClientFileManagerErrorEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerErrorEventArgs = function() {
    ///<summary>
    ///Provides data for the ErrorOccurred event.
    ///</summary>
    ///<field name = "commandName" type = "String">
    ///Gets the name of the processed command. Value: A string value representing the processed command's name.
    ///</field>
    ///<field name = "errorText" type = "String">
    ///Gets or sets the error description. Value: A string value specifying the error description.
    ///</field>
    ///<field name = "showAlert" type = "Boolean">
    ///Gets or sets a value specifying whether an event error message is sent to the ErrorAlertDisplaying event. Value: true to sent an error message; otherwise, false.
    ///</field>
    ///<field name = "errorCode" type = "Int32">
    ///Gets a specifically generated code that uniquely identifies an error, which occurs while editing an item. Value: An integer value that specifies the code uniquely identifying an error.
    ///</field>
};
ASPxClientFileManagerErrorAlertDisplayingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ErrorAlertDisplaying event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerErrorAlertDisplayingEventArgs">
    ///A ASPxClientFileManagerErrorAlertDisplayingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerErrorAlertDisplayingEventArgs = function() {
    ///<summary>
    ///Provides data for the ErrorAlertDisplaying event.
    ///</summary>
    ///<field name = "commandName" type = "String">
    ///Gets the name of the processed command. Value: A string value that is the processed command's name.
    ///</field>
    ///<field name = "errorText" type = "String">
    ///Gets or sets the errors description. Value: A string that is the errors description.
    ///</field>
    ///<field name = "showAlert" type = "Boolean">
    ///Gets or sets a value specifying whether an alert message is displayed when the event fires. Value: true to display an alert message; otherwise, false.
    ///</field>
};
ASPxClientFileManagerFileUploadingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FileUploading event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerFileUploadingEventArgs">
    ///A ASPxClientFileManagerFileUploadingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFileUploadingEventArgs = function() {
    ///<summary>
    ///Provides data for the FileUploading event.
    ///</summary>
    ///<field name = "folder" type = "String">
    ///Gets the path to the folder where a file is being uploaded. Value: A string value specifying the path where a file is being uploaded.
    ///</field>
    ///<field name = "fileName" type = "String">
    ///Gets the name of a file selected for upload. Value: A string value that specifies the file name.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientFileManagerFilesUploadingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FilesUploading event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerFilesUploadingEventArgs">
    ///A ASPxClientFileManagerFilesUploadingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFilesUploadingEventArgs = function() {
    ///<summary>
    ///Provides data for the FilesUploading event.
    ///</summary>
    ///<field name = "folder" type = "String">
    ///Gets the path to the folder where files are being uploaded. Value: A string value specifying the folder path.
    ///</field>
    ///<field name = "fileNames" type = "Array" elementType = "String">
    ///Gets the names of files selected for upload. Value: An array of string values that are the file names.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientFileManagerFileUploadedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FileUploaded event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerFileUploadedEventArgs">
    ///A ASPxClientFileManagerFileUploadedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFileUploadedEventArgs = function() {
    ///<summary>
    ///Provides data for the FileUploaded event.
    ///</summary>
    ///<field name = "folder" type = "String">
    ///Gets the path to the folder where a file is uploaded. Value: A string value specifying the uploaded file path.
    ///</field>
    ///<field name = "fileName" type = "String">
    ///Gets the name of the uploaded file. Value: A string value that specifies the file name.
    ///</field>
};
ASPxClientFileManagerFilesUploadedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FilesUploaded event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerFilesUploadedEventArgs">
    ///A ASPxClientFileManagerFilesUploadedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFilesUploadedEventArgs = function() {
    ///<summary>
    ///Provides data for the FilesUploaded event.
    ///</summary>
    ///<field name = "folder" type = "String">
    ///Gets the path to the folder where files are uploaded. Value: A string value specifying the uploaded files path.
    ///</field>
    ///<field name = "fileNames" type = "Array" elementType = "String">
    ///Gets an array of uploaded file names. Value: An array of string values that are the file names.
    ///</field>
};
ASPxClientFileManagerFileDownloadingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FileDownloading event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerFileDownloadingEventArgs">
    ///A ASPxClientFileManagerFileDownloadingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFileDownloadingEventArgs = function() {
    ///<summary>
    ///Provides data for the FileDownloading event.
    ///</summary>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event, should be canceled. Value: true, if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "file" type = "ASPxClientFileManagerFile">
    ///Gets a file related to the event. Value: An ASPxClientFileManagerFile object that represents a file currently being processed.
    ///</field>
};
ASPxClientFileManagerFocusedItemChangedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FocusedItemChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerFocusedItemChangedEventArgs">
    ///A ASPxClientFileManagerFocusedItemChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFocusedItemChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the FocusedItemChanged event.
    ///</summary>
    ///<field name = "item" type = "ASPxClientFileManagerItem">
    ///Gets the file manager item object related to the event. Value: An <see cref="ASPxClientFileManagerItem" /> object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the focused item. Value: A string value that specifies the item's name.
    ///</field>
    ///<field name = "fullName" type = "String">
    ///Gets the full name of the item currently being processed. Value: A string value that is the item's full name.
    ///</field>
};
ASPxClientFileManagerCurrentFolderChangedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CurrentFolderChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerCurrentFolderChangedEventArgs">
    ///A ASPxClientFileManagerCurrentFolderChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerCurrentFolderChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the CurrentFolderChanged event.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the name of the currently processed folder. Value: A string value that specifies the folder's name.
    ///</field>
    ///<field name = "fullName" type = "String">
    ///Gets the full name of the folder currently being processed. Value: A string value that is the folder's full name.
    ///</field>
};
ASPxClientFileManagerSelectionChangedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the SelectionChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxFileManager control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerSelectionChangedEventArgs">
    ///A ASPxClientFileManagerSelectionChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerSelectionChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the SelectionChanged event.
    ///</summary>
    ///<field name = "item" type = "ASPxClientFileManagerItem">
    ///Gets the file manager item object related to the event. Value: An <see cref="ASPxClientFileManagerItem" /> object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the currently processed file. Value: A string value that specifies the file's name.
    ///</field>
    ///<field name = "fullName" type = "String">
    ///Gets the full name of the file currently being processed. Value: A string value that is the file's full name.
    ///</field>
    ///<field name = "isSelected" type = "Boolean">
    ///Gets whether the item has been selected. Value: true if the file has been selected; otherwise, false.
    ///</field>
};
ASPxClientFileManagerCustomCommandEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomCommand event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerCustomCommandEventArgs">
    ///An ASPxClientFileManagerCustomCommandEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerCustomCommandEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomCommand event.
    ///</summary>
    ///<field name = "commandName" type = "String">
    ///Gets the name of the processed command. Value: A string value that is the processed command's name.
    ///</field>
};
ASPxClientFileManagerToolbarUpdatingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ToolbarUpdating event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerToolbarUpdatingEventArgs">
    ///An ASPxClientFileManagerToolbarUpdatingEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerToolbarUpdatingEventArgs = function() {
    ///<summary>
    ///Provides data for the ToolbarUpdating event.
    ///</summary>
    ///<field name = "activeAreaName" type = "String">
    ///Gets the name of the currently active file manager area. Value: A string value that identifies the active area.
    ///</field>
};
ASPxClientFileManagerHighlightItemTemplateEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the HighlightItemTemplate event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the file manager object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientFileManagerHighlightItemTemplateEventArgs">
    ///An ASPxClientFileManagerHighlightItemTemplateEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerHighlightItemTemplateEventArgs = function() {
    ///<summary>
    ///Provides data for the HighlightItemTemplate event.
    ///</summary>
    ///<field name = "filterValue" type = "String">
    ///Gets a string that is a filter value specified by the filter box. Value: A string that is a filter value.
    ///</field>
    ///<field name = "itemName" type = "String">
    ///Gets the name of the item currently being processed. Value: A string that is the item name.
    ///</field>
    ///<field name = "templateElement" type = "String">
    ///Gets an element containing the item template. Value: An object that is an element containing the item template.
    ///</field>
    ///<field name = "highlightCssClassName" type = "String">
    ///Get the name of the cascading style sheet (CSS) class associated with an item in the highlighted state. Value: A string that is the name of a CSS class.
    ///</field>
};
ASPxClientFileManagerCommandConsts = function() {
    ///<summary>
    ///Declares client constants that contain the names of ASPxFileManager's commands.
    ///</summary>
    ///<field name = "Rename" type = "String" static = "true">
    ///The name of a command that is executed when an end-user renames an item.
    ///</field>
    ///<field name = "Move" type = "String" static = "true">
    ///The name of a command that is executed when an end-user moves an item.
    ///</field>
    ///<field name = "Delete" type = "String" static = "true">
    ///The name of a command that is executed when an end-user deletes an item.
    ///</field>
    ///<field name = "Create" type = "String" static = "true">
    ///The name of a command that is executed when an end-user creates a folder.
    ///</field>
    ///<field name = "Upload" type = "String" static = "true">
    ///The name of a command that is executed when an end-user uploads a file.
    ///</field>
    ///<field name = "Download" type = "String" static = "true">
    ///The name of a command that is executed when an end-user downloads an item.
    ///</field>
    ///<field name = "Copy" type = "String" static = "true">
    ///The name of a command that is executed when an end-user copies an item.
    ///</field>
    ///<field name = "Open" type = "String" static = "true">
    ///The name of a command that is executed when an end-user opens an item.
    ///</field>
};
ASPxClientFileManagerErrorConsts = function() {
    ///<summary>
    ///Declares client constants containing codes of errors, that can occur while editing files.
    ///</summary>
    ///<field name = "FileNotFound" type = "Int32" static = "true">
    ///The specified file is not found.    Return Value: 0
    ///</field>
    ///<field name = "FolderNotFound" type = "Int32" static = "true">
    ///The specified folder is not found.    Return Value: 1
    ///</field>
    ///<field name = "AccessDenied" type = "Int32" static = "true">
    ///Access is denied.    Return Value: 2
    ///</field>
    ///<field name = "UnspecifiedIO" type = "Int32" static = "true">
    ///Unspecified IO error occurs.    Return Value: 3
    ///</field>
    ///<field name = "Unspecified" type = "Int32" static = "true">
    ///Unspecified error occurs.    Return Value: 4
    ///</field>
    ///<field name = "EmptyName" type = "Int32" static = "true">
    ///The file/folder name is empty.    Return Value: 5
    ///</field>
    ///<field name = "CanceledOperation" type = "Int32" static = "true">
    ///The operation was canceled.    Return Value: 6
    ///</field>
    ///<field name = "InvalidSymbols" type = "Int32" static = "true">
    ///The specified name contains invalid characters.    Return Value: 7
    ///</field>
    ///<field name = "WrongExtension" type = "Int32" static = "true">
    ///The specified file extension is not allowed.    Return Value: 8
    ///</field>
    ///<field name = "UsedByAnotherProcess" type = "Int32" static = "true">
    ///The file/folder is being used by another process.    Return Value: 9
    ///</field>
    ///<field name = "AlreadyExists" type = "Int32" static = "true">
    ///The specified file/folder already exists.    Return Value: 10
    ///</field>
};
ASPxClientMenuItem = function() {
    ///<summary>
    ///Represents a client-side equivalent of the menu's MenuItem object.
    ///</summary>
    ///<field name = "menu" type = "ASPxClientMenuBase">
    ///Gets the menu object to which the current item belongs. Value: An ASPxClientMenuBase object representing the menu to which the item belongs.
    ///</field>
    ///<field name = "parent" type = "ASPxClientMenuItem">
    ///Gets the immediate parent item to which the current item belongs. Value: An ASPxClientMenuItem object representing the item's immediate parent.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets the item's index within the parent's collection of items. Value: An integer value representing the item's zero-based index within the Items collection of the parent object (a menu or item) to which the item belongs.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the menu item. Value: A string value that represents the value assigned to the item's Name property.
    ///</field>
    ///<field name = "indexPath" type = "String">
    ///For internal use only.
    ///</field>
};
ASPxClientFileManagerToolbarItem = function() {
    ///<summary>
    ///A client-side equivalent of the file manager's FileManagerToolbarItemBase object.
    ///</summary>
    ///<field name = "menu" type = "ASPxClientMenuBase">
    ///This property is not in effect for the ASPxClientFileManagerToolbarItem class.
    ///</field>
    ///<field name = "parent" type = "ASPxClientMenuItem">
    ///This property is not in effect for the ASPxClientFileManagerToolbarItem class.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///This property is not in effect for the ASPxClientFileManagerToolbarItem class.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the menu item. Value: A string value that represents the value assigned to the item's Name property.
    ///</field>
    ///<field name = "indexPath" type = "String">
    ///For internal use only.
    ///</field>
};
ASPxClientLayoutItem = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxFormLayout's LayoutItem object.
    ///</summary>
    ///<field name = "formLayout" type = "ASPxClientFormLayout">
    ///Gets the form layout object to which the current item belongs. Value: An <see cref="ASPxClientFormLayout" /> object representing the form layout to which the item belongs.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the layout item. Value: A string value that represents the value assigned to the layout item's Name property.
    ///</field>
    ///<field name = "parent" type = "ASPxClientLayoutItem">
    ///Gets the immediate parent layout item to which the current layout item belongs. Value: An <see cref="ASPxClientLayoutItem" /> object representing the item's immediate parent.
    ///</field>
};
ASPxClientFormLayout = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxFormLayout object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientGlobalEvents = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxGlobalEvents component.
    ///</summary>
    ///<field name = "ControlsInitialized" type = "ASPxClientEvent">
    ///Occurs on the client side after client object models of all DevExpress web controls contained within the page have been initialized.
    ///</field>
    ///<field name = "BrowserWindowResized" type = "ASPxClientEvent">
    ///Occurs when the browser window is being resized.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated by any DevExpress control.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side, after server-side processing of a callback initiated by any DevExpress web control, has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by any of DevExpress web controls.
    ///</field>
    ///<field name = "ValidationCompleted" type = "ASPxClientEvent">
    ///Occurs on the client side after the validation initiated for a DevExpress web control (or a group of DevExpress web controls) has been completed.
    ///</field>
};
ASPxClientHiddenField = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxHiddenField control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientHiddenField.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientHint = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Showing" type = "ASPxClientEvent">
    ///Occurs on the client side when a hint is about to be shown.
    ///</field>
    ///<field name = "Hiding" type = "ASPxClientEvent">
    ///Occurs on the client side when a hint is about to be hidden.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientHintWindow = function() {
    ///<summary>
    ///
    ///</summary>
};
ASPxClientHintShowingEventHandler = function(sender, e) {
    ///<summary>
    ///A method that will handle the Showing event.
    ///</summary>
    ///<param name = "sender" type = "ASPxClientHintWindow">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientHintShowingEventArgs">
    ///A ASPxClientHintShowingEventArgs object that contains the required data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHintShowingEventArgs = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "targetElement" type = "Object">
    ///Gets the object that is the hint's target element. Value: An object representing the hint's target element related to the event.
    ///</field>
    ///<field name = "hintElement" type = "Object">
    ///Gets the object that is the hint. Value: An object representing the hint related to the event.
    ///</field>
    ///<field name = "contentElement" type = "Object">
    ///Gets the object that is the hint's content. Value: An object representing the hint's content element related to the event.
    ///</field>
    ///<field name = "titleElement" type = "Object">
    ///Gets the object that is the hint's title. Value: An object representing the hint's title element related to the event.
    ///</field>
};
ASPxClientHintHidingEventHandler = function(sender, e) {
    ///<summary>
    ///A method that will handle the Hiding event.
    ///</summary>
    ///<param name = "sender" type = "ASPxClientHintWindow">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientHintHidingEventArgs">
    ///A ASPxClientHintHidingEventArgs object that contains the required data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHintHidingEventArgs = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "targetElement" type = "Object">
    ///Gets the object that is the hint's target element. Value: An object representing the hint's target element.
    ///</field>
    ///<field name = "hintElement" type = "Object">
    ///Gets the object that is the hint element. Value: An object representing the hint related to the event.
    ///</field>
    ///<field name = "contentElement" type = "Object">
    ///Gets the object that is the hint's content. Value: An object representing the hint's content element related to the event.
    ///</field>
    ///<field name = "titleElement" type = "Object">
    ///Gets the object that is the hint's title. Value: An object representing the hint's title element related to the event.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the event should be canceled. Value: true, if the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientHintOptions = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "triggerAction" type = "String">
    ///Gets or sets which user action triggers a hint. Value: A string value that is a user action.
    ///</field>
    ///<field name = "appearAfter" type = "Int32">
    ///Gets or sets the delay in displaying the hint. Value: An integer value that specifies the time interval, in milliseconds, after which a hint is displayed.
    ///</field>
    ///<field name = "disappearAfter" type = "Int32">
    ///Gets or sets the duration after which a hint disappears when the mouse pointer is no longer positioned over the target element. Value: The length of time (in milliseconds) a hint is displayed after the mouse pointer is no longer positioned over the target element.
    ///</field>
    ///<field name = "showCallout" type = "Boolean">
    ///Gets or sets a value that specifies whether a hint is displayed in a callout box. Value: true, to display a hint in a callout box; otherwise, false.
    ///</field>
    ///<field name = "position" type = "String">
    ///Gets or sets where a hint should be positioned. Value: A string value that specifies a hint position.
    ///</field>
    ///<field name = "className" type = "String">
    ///Gets or sets a custom CSS class name that will be assigned to the root ASPxHint element. Value: A string value that is the CSS class name.
    ///</field>
    ///<field name = "contentAttribute" type = "String">
    ///Gets or sets the attribute name. Value: A string value that is the attribute name.
    ///</field>
    ///<field name = "titleAttribute" type = "String">
    ///Gets or sets the attribute name. Value: A string value that is the attribute name.
    ///</field>
    ///<field name = "content" type = "String">
    ///Gets or sets the hint's content. Value: A string value that is the hint's content.
    ///</field>
    ///<field name = "title" type = "String">
    ///Gets or sets a value that is the hint's title. Value: A string value that is the title text.
    ///</field>
    ///<field name = "container" type = "String">
    ///Gets or sets a value that is the HTML DOM-element. Value: A string that is the DOM-element.
    ///</field>
    ///<field name = "onShowing" type = "ASPxClientHintShowingEventHandler">
    ///A handler for the Showing event. Value: An <see cref="ASPxClientHintShowingEventHandler" /> delegate method allowing you to implement custom processing.
    ///</field>
    ///<field name = "onHiding" type = "ASPxClientHintHidingEventHandler">
    ///A handler for the Hiding event. Value: An <see cref="ASPxClientHintHidingEventHandler" /> delegate method allowing you to implement custom processing.
    ///</field>
    ///<field name = "width" type = "String">
    ///Gets or sets a value that is the hint's width. Value: A string value that is the hint's width.
    ///</field>
    ///<field name = "height" type = "String">
    ///Gets or sets a value that is the hint's height. Value: A string value that is the hint's height.
    ///</field>
    ///<field name = "x" type = "Int32">
    ///Gets or sets the X coordinate. Value: An integer value that is the X coordinate.
    ///</field>
    ///<field name = "y" type = "Int32">
    ///Gets or sets the Y coordinate. Value: An integer value that is the Y coordinate.
    ///</field>
    ///<field name = "allowFlip" type = "Boolean">
    ///Gets or sets a value that specifies whether to flip the hint to the opposite position relative to the target element. Value: true, to flip the hint; otherwise, false.
    ///</field>
    ///<field name = "allowShift" type = "Boolean">
    ///Gets or sets a value that specifies whether to shift a hint if its content and title are hidden outside of the client area. Value: true, to shift the hint; otherwise, false.
    ///</field>
    ///<field name = "animation" type = "JavaScriptObject">
    ///Gets or sets whether it should use animation effects when a hint appears. Value: true if animation is enabled; otherwise false.
    ///</field>
    ///<field name = "offset" type = "Int32">
    ///Gets the offset of a hint. Value: An integer value.
    ///</field>
};
ASPxClientImageGallery = function() {
    ///<summary>
    ///The client-side equivalent of the ASPxImageGallery control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "FullscreenViewerShowing" type = "ASPxClientEvent">
    ///Fires on the client side before the fullscreen viewer is shown and allows you to cancel the action.
    ///</field>
    ///<field name = "FullscreenViewerActiveItemIndexChanged" type = "ASPxClientEvent">
    ///Occurs on the client side after an active item has been changed within the fullscreen viewer.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientDataView.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientImageGalleryCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FullscreenViewerShowing event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxImageGallery control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientImageGalleryCancelEventArgs">
    ///An ASPxClientImageGalleryCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGalleryCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the FullscreenViewerShowing event.
    ///</summary>
    ///<field name = "index" type = "Int32">
    ///Gets the index of the item related to the event. Value: An <see cref="Int32" /> value that is the related item's index.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique identifier name of the item related to the event. Value: A string value that specifies the item's unique identifier name.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientImageGalleryFullscreenViewerEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FullscreenViewerActiveItemIndexChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxImageGallery control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientImageGalleryFullscreenViewerEventArgs">
    ///An ASPxClientImageGalleryFullscreenViewerEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGalleryFullscreenViewerEventArgs = function() {
    ///<summary>
    ///Provides data for the FullscreenViewerActiveItemIndexChanged event.
    ///</summary>
    ///<field name = "index" type = "Int32">
    ///Gets the index of the item related to the event. Value: An <see cref="Int32" /> value that is the related item's index.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the unique identifier name of the item related to the event. Value: A string value that specifies the item's unique identifier name.
    ///</field>
};
ASPxClientImageSlider = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxImageSlider object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ActiveItemChanged" type = "ASPxClientEvent">
    ///Occurs after the active image, displayed within the image area, is changed.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after an image item has been clicked within the image area.
    ///</field>
    ///<field name = "ThumbnailItemClick" type = "ASPxClientEvent">
    ///Occurs on the client side when a thumbnail is clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientImageSliderItemEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ItemClick events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxImageSlider control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientImageSliderItemEventArgs">
    ///An ASPxClientImageSliderItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageSliderItemEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemClick events.
    ///</summary>
    ///<field name = "item" type = "ASPxClientImageSliderItem">
    ///Gets an item object related to the event. Value: An <see cref="ASPxClientImageSliderItem" /> object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientImageSliderItem = function() {
    ///<summary>
    ///A client-side equivalent of the image slider's ImageSliderItem object.
    ///</summary>
    ///<field name = "imageSlider" type = "ASPxClientImageSlider">
    ///Gets an image slider to which the current item belongs. Value: An <see cref="ASPxClientImageSlider" /> object that is the item's owner.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets the item's index within an items collection. Value: An integer value is the item's zero-based index within the Items collection.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the image slider item. Value: A string value that is the value assigned to the item's Name property.
    ///</field>
    ///<field name = "imageUrl" type = "String">
    ///Gets or sets the path to the image displayed within the ASPxClientImageSliderItem. Value: A <see cref="String" /> value specifying the path to the image.
    ///</field>
    ///<field name = "text" type = "String">
    ///Gets the item's display text. Value: A string value that is the item's display text.
    ///</field>
};
ASPxClientImageZoomNavigator = function() {
    ///<summary>
    ///The client-side equivalent of the ASPxImageZoomNavigator object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ActiveItemChanged" type = "ASPxClientEvent">
    ///Occurs after the active image, displayed within the image area, is changed.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after an image item has been clicked within the image area.
    ///</field>
    ///<field name = "ThumbnailItemClick" type = "ASPxClientEvent">
    ///Occurs on the client side when a thumbnail is clicked.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientImageZoom = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxImageZoom object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientLoadingPanel = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxLoadingPanel control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientMediaFileSelector = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientMenuBase = function() {
    ///<summary>
    ///Serves as the base type for the ASPxClientPopupMenu objects.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after a menu item has been clicked.
    ///</field>
    ///<field name = "ItemMouseOver" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor is moved into a menu item.
    ///</field>
    ///<field name = "ItemMouseOut" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor moves outside a menu item.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu pops up.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu closes.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientMenuCollection = function() {
    ///<summary>
    ///Represents a client collection that maintains client menu objects.
    ///</summary>
    ///<field name = "ControlsInitialized" type = "ASPxClientEvent">
    ///Occurs on the client side after client object models of all DevExpress web controls contained within the page have been initialized.
    ///</field>
    ///<field name = "BrowserWindowResized" type = "ASPxClientEvent">
    ///Occurs when the browser window is being resized.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated by any DevExpress control.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side, after server-side processing of a callback initiated by any DevExpress web control, has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by any DevExpress web control.
    ///</field>
    ///<field name = "ValidationCompleted" type = "ASPxClientEvent">
    ///Occurs after the validation initiated for a DevExpress web control (or a group of DevExpress web controls) has been completed.
    ///</field>
};
ASPxClientMenu = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxMenu object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after a menu item has been clicked.
    ///</field>
    ///<field name = "ItemMouseOver" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor is moved into a menu item.
    ///</field>
    ///<field name = "ItemMouseOut" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor moves outside a menu item.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu pops up.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu closes.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientMenuItemEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the menu's client events concerning manipulations with an item.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the menu object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientMenuItemEventArgs">
    ///An ASPxClientMenuItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItemEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern manipulations on menu items.
    ///</summary>
    ///<field name = "item" type = "ASPxClientMenuItem">
    ///Gets the menu item object related to the event. Value: An ASPxClientMenuItem object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientMenuItemMouseEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ItemMouseOver events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientMenuItemMouseEventArgs">
    ///A MenuItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItemMouseEventArgs = function() {
    ///<summary>
    ///Provides data for client events which relate to mouse hovering (such as entering or leaving) over menu items.
    ///</summary>
    ///<field name = "htmlElement" type = "Object">
    ///Gets the HTML object that contains the processed item. Value: An HTML object representing a container for the item related to the event.
    ///</field>
    ///<field name = "item" type = "ASPxClientMenuItem">
    ///Gets the menu item object related to the event. Value: An ASPxClientMenuItem object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientMenuItemClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle client ItemClick events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientMenuItemClickEventArgs">
    ///A MenuItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItemClickEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern clicking on the control's items.
    ///</summary>
    ///<field name = "item" type = "ASPxClientMenuItem">
    ///Gets the menu item object related to the event. Value: An ASPxClientMenuItem object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "htmlElement" type = "Object">
    ///Gets the HTML object that contains the processed item. Value: An object representing a container for the item related to the event.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTouchUIOptions = function() {
    ///<summary>
    ///Contains options affecting the touch scrolling functionality.
    ///</summary>
    ///<field name = "showHorizontalScrollbar" type = "Boolean">
    ///Gets or sets a value that specifies whether or not the horizontal scroll bar should be displayed. Value: true to display the horizontal scroll bar; otherwise, false. The default value is true.
    ///</field>
    ///<field name = "showVerticalScrollbar" type = "Boolean">
    ///Gets or sets a value that specifies whether or not the vertical scroll bar should be displayed. Value: true to display the vertical scroll bar; otherwise, false. The default value is true.
    ///</field>
    ///<field name = "vScrollClassName" type = "String">
    ///Gets or sets the name of the CSS class defining the vertical scroll bar's appearance. Value: A string value specifying the class name.
    ///</field>
    ///<field name = "hScrollClassName" type = "String">
    ///Gets or sets the name of the CSS class defining the horizontal scroll bar's appearance. Value: A string value specifying the class name.
    ///</field>
};
ASPxClientTouchUI = function() {
    ///<summary>
    ///Contains scroll extender methods that can be used to support scrolling under touch UI devices.
    ///</summary>
};
ScrollExtender = function() {
    ///<summary>
    ///Contains a method allowing you to apply the current scroll extender to a specific element.
    ///</summary>
};
ASPxClientNavBar = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxNavBar control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after an item has been clicked.
    ///</field>
    ///<field name = "ExpandedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a group's expansion state has been changed.
    ///</field>
    ///<field name = "ExpandedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the expansion state of a group is changed.
    ///</field>
    ///<field name = "HeaderClick" type = "ASPxClientEvent">
    ///Fires when a group header is clicked.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientNavBar.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientNavBarGroup = function() {
    ///<summary>
    ///Represents a client-side equivalent of the navbar's NavBarGroup object.
    ///</summary>
    ///<field name = "navBar" type = "ASPxClientNavBar">
    ///Gets the navbar to which the current group belongs. Value: An ASPxClientNavBar object representing the navbar to which the group belongs.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets the group's index within a collection of a navbar's groups. Value: An integer value representing the group's zero-based index within the Groups collection of the navbar to which the group belongs.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the group. Value: A string value that represents the value assigned to the group's Name property.
    ///</field>
};
ASPxClientNavBarItem = function() {
    ///<summary>
    ///Represents a client-side equivalent of the navbar's NavBarItem object.
    ///</summary>
    ///<field name = "navBar" type = "ASPxClientNavBar">
    ///Gets the navbar to which the current item belongs. Value: An ASPxClientNavBar object representing the navbar to which the item belongs.
    ///</field>
    ///<field name = "group" type = "ASPxClientNavBarGroup">
    ///Gets the group to which the current item belongs. Value: An ASPxClientNavBarGroup object representing the group to which the item belongs.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets the item's index within a collection of a group's items. Value: An integer value representing the item's zero-based index within the Items collection of the group to which the item belongs.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the item. Value: A string value that represents the value assigned to the item's Name property.
    ///</field>
};
ASPxClientNavBarItemEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the navbar's client events concerning manipulations with an item.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the navbar object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientNavBarItemEventArgs">
    ///An ASPxClientNavBarItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarItemEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern manipulations on items.
    ///</summary>
    ///<field name = "item" type = "ASPxClientNavBarItem">
    ///Gets the item object related to the event. Value: An ASPxClientNavBarItem object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "htmlElement" type = "Object">
    ///Gets the HTML object that contains the processed navbar item. Value: An object representing a container for the navbar item related to the event.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientNavBarGroupEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the navbar's client events concerning manipulations with a group.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the navbar object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientNavBarGroupEventArgs">
    ///An ASPxClientNavBarGroupEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroupEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern manipulations on groups.
    ///</summary>
    ///<field name = "group" type = "ASPxClientNavBarGroup">
    ///Gets the group object related to the event. Value: An ASPxClientNavBarGroup object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientNavBarGroupCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the navbar's cancelable client events concerning manipulations with a group.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the navbar object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientNavBarGroupCancelEventArgs">
    ///An ASPxClientNavBarGroupCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroupCancelEventArgs = function() {
    ///<summary>
    ///Provides data for cancellable events which concern manipulations on groups.
    ///</summary>
    ///<field name = "group" type = "ASPxClientNavBarGroup">
    ///Gets the group object related to the event. Value: An ASPxClientNavBarGroup object representing the group manipulations on which forced the navbar to raise the event.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientNavBarGroupClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the navbar's client events concerning clicks on groups.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the navbar object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientNavBarGroupClickEventArgs">
    ///An ASPxClientNavBarGroupClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroupClickEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern clicking on the control's group headers.
    ///</summary>
    ///<field name = "htmlElement" type = "Object">
    ///Gets the HTML object that contains the processed group. Value: An object representing a container for the group related to the event.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "group" type = "ASPxClientNavBarGroup">
    ///Gets the group object related to the event. Value: An ASPxClientNavBarGroup object representing the group manipulations on which forced the navbar to raise the event.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientNewsControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxNewsControl object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "TailClick" type = "ASPxClientEvent">
    ///Fires after an item's tail has been clicked.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientDataView.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientNewsControlItemEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the news control's client events concerning manipulations with an item.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the news control object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientNewsControlItemEventArgs">
    ///An ASPxClientNewsControlItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControlItemEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern tail clicking within the control's items.
    ///</summary>
    ///<field name = "name" type = "Object">
    ///Gets the name that uniquely identifies the processed item. Value: A string value that represents the value assigned to the processed item's Name property.
    ///</field>
    ///<field name = "htmlElement" type = "Object">
    ///Gets the HTML object that contains the processed item. Value: An object representing a container for the item related to the event.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientObjectContainer = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxObjectContainer control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "FlashScriptCommand" type = "ASPxClientEvent">
    ///Occurs on the client side when the FSCommand action is called within the associated flash object's action script.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientFlashScriptCommandEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FlashScriptCommand event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientFlashScriptCommandEventArgs">
    ///A ASPxClientFlashScriptCommandEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFlashScriptCommandEventArgs = function() {
    ///<summary>
    ///Provides data for the FlashScriptCommand client event.
    ///</summary>
    ///<field name = "command" type = "String">
    ///Gets a command passed via the FSCommand action of the flash object. Value: A string that represents the value of the FSCommand action's command parameter.
    ///</field>
    ///<field name = "args" type = "String">
    ///Gets arguments passed via the FSCommand action of the flash object. Value: A string that represents the value of the FSCommand action's args parameter.
    ///</field>
};
ASPxClientOfficeDocumentLinkType = function() {
    ///<summary>
    ///Lists the available link types within office documents.
    ///</summary>
};
ASPxClientPager = function() {
    ///<summary>
    ///
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientPopupControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxPopupControl control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CloseButtonClick" type = "ASPxClientEvent">
    ///Occurs when a popup window's close button is clicked.
    ///</field>
    ///<field name = "BeforeResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing initiates.
    ///</field>
    ///<field name = "AfterResizing" type = "ASPxClientEvent">
    ///Occurs on the client side when window resizing completes.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the control.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window closes or hides.
    ///</field>
    ///<field name = "Closing" type = "ASPxClientEvent">
    ///Enables you to cancel window closing on the client side.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a control's window is invoked.
    ///</field>
    ///<field name = "Resize" type = "ASPxClientEvent">
    ///Occurs on the client side after a window has been resized.
    ///</field>
    ///<field name = "Shown" type = "ASPxClientEvent">
    ///Occurs on the client side after a control's window has been invoked.
    ///</field>
    ///<field name = "PinnedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the window pin state is changed.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientPopupWindow = function() {
    ///<summary>
    ///Represents a client-side equivalent of a popup control's PopupWindow object.
    ///</summary>
    ///<field name = "popupControl" type = "ASPxClientPopupControl">
    ///Gets the popup control to which the current popup window belongs. Value: An ASPxClientPopupControl object representing the popup control to which the window belongs.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets the index of the current popup window within the popup control's Windows collection. Value: An integer value representing the zero-based index of the current popup window within the Windows collection of the popup control to which the window belongs.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the current popup window. Value: A string value that represents a value assigned to the popup window's Name property.
    ///</field>
};
ASPxClientPopupWindowEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the popup control's client events when a popup window is manipulated.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the popup control object (ASPxClientPopupControl) that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientPopupWindowEventArgs">
    ///An ASPxClientPopupWindowEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindowEventArgs = function() {
    ///<summary>
    ///Provides data for events concerning client manipulations on popup windows.
    ///</summary>
    ///<field name = "window" type = "ASPxClientPopupWindow">
    ///Gets the popup window object related to the event. Value: An ASPxClientPopupWindow object representing the popup window that was manipulated, causing the popup control to raise the event.
    ///</field>
};
ASPxClientPopupWindowCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the popup window's cancelable client events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the popup window object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientPopupWindowCancelEventArgs">
    ///An ASPxClientPopupWindowCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindowCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the popup control's cancellable client events, such as the Closing.
    ///</summary>
    ///<field name = "window" type = "ASPxClientPopupWindow">
    ///Gets the popup window object related to the event. Value: An ASPxClientPopupWindow object representing the popup window that was manipulated, causing the popup control to raise the event.
    ///</field>
    ///<field name = "closeReason" type = "ASPxClientPopupControlCloseReason">
    ///Gets the value that identifies the reason the popup window is about to close. Value: One of the ASPxClientPopupControlCloseReason enumeration values.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientPopupWindowCloseUpEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CloseUp event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientPopupWindowCloseUpEventArgs">
    ///An ASPxClientPopupWindowCloseUpEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindowCloseUpEventArgs = function() {
    ///<summary>
    ///Provides data for the CloseUp event.
    ///</summary>
    ///<field name = "closeReason" type = "ASPxClientPopupControlCloseReason">
    ///Gets the value that identifies the reason the popup window closes. Value: One of the ASPxClientPopupControlCloseReason enumeration values.
    ///</field>
    ///<field name = "window" type = "ASPxClientPopupWindow">
    ///Gets the popup window object related to the event. Value: An ASPxClientPopupWindow object representing the popup window that was manipulated, causing the popup control to raise the event.
    ///</field>
};
ASPxClientPopupWindowResizeEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the Resize event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientPopupWindowResizeEventArgs">
    ///A ASPxClientPopupWindowResizeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindowResizeEventArgs = function() {
    ///<summary>
    ///Provides data for the Resize event.
    ///</summary>
    ///<field name = "resizeState" type = "Int32">
    ///Returns the value indicating the window state after resizing. Value: The integer value indicating the window resize state.
    ///</field>
    ///<field name = "window" type = "ASPxClientPopupWindow">
    ///Gets the popup window object related to the event. Value: An ASPxClientPopupWindow object representing the popup window that was manipulated, causing the popup control to raise the event.
    ///</field>
};
ASPxClientPopupWindowPinnedChangedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the PinnedChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientPopupWindowPinnedChangedEventArgs">
    ///A ASPxClientPopupWindowPinnedChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindowPinnedChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the PinnedChanged event.
    ///</summary>
    ///<field name = "pinned" type = "Boolean">
    ///Gets a value indicating whether the processed popup window has been pinned. Value: true, if the window has been pinned; otherwise, false.
    ///</field>
    ///<field name = "window" type = "ASPxClientPopupWindow">
    ///Gets the popup window object related to the event. Value: An ASPxClientPopupWindow object representing the popup window that was manipulated, causing the popup control to raise the event.
    ///</field>
};
ASPxClientPopupControlCollection = function() {
    ///<summary>
    ///Represents a client collection that maintains client popup control objects.
    ///</summary>
    ///<field name = "ControlsInitialized" type = "ASPxClientEvent">
    ///Occurs on the client side after client object models of all DevExpress web controls contained within the page have been initialized.
    ///</field>
    ///<field name = "BrowserWindowResized" type = "ASPxClientEvent">
    ///Occurs when the browser window is being resized.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated by any DevExpress control.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side, after server-side processing of a callback initiated by any DevExpress web control, has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by any DevExpress web control.
    ///</field>
    ///<field name = "ValidationCompleted" type = "ASPxClientEvent">
    ///Occurs after the validation initiated for a DevExpress web control (or a group of DevExpress web controls) has been completed.
    ///</field>
};
ASPxClientPopupControlResizeState = function() {
    ///<summary>
    ///Declares client constants that contain the identifiers of the window states.
    ///</summary>
    ///<field name = "Resized" type = "Int32" static = "true">
    ///A window has been resized. Returns 0.
    ///</field>
    ///<field name = "Collapsed" type = "Int32" static = "true">
    ///A window has been collapsed. Returns 1.
    ///</field>
    ///<field name = "Expanded" type = "Int32" static = "true">
    ///A window has been expanded. Returns 2.
    ///</field>
    ///<field name = "Maximized" type = "Int32" static = "true">
    ///A window has been maximized. Returns 3.
    ///</field>
    ///<field name = "RestoredAfterMaximized" type = "Int32" static = "true">
    ///A window has been restored after maximizing. Returns 4.
    ///</field>
};
ASPxClientPopupControlCloseReason = function() {
    ///<summary>
    ///Declares client constants that identify the reason the popup window closes.
    ///</summary>
    ///<field name = "API" type = "String" static = "true">
    ///The window has been closed by an API.
    ///</field>
    ///<field name = "CloseButton" type = "String" static = "true">
    ///An end-user clicks the close header button.
    ///</field>
    ///<field name = "OuterMouseClick" type = "String" static = "true">
    ///An end-user clicks outside the window's region
    ///</field>
    ///<field name = "MouseOut" type = "String" static = "true">
    ///An end-user moves the mouse pointer out of the window region.
    ///</field>
    ///<field name = "Escape" type = "String" static = "true">
    ///An end-user presses the ESC key.
    ///</field>
};
ASPxClientPopupMenu = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxPopupMenu object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after a menu item has been clicked.
    ///</field>
    ///<field name = "ItemMouseOver" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor is moved into a menu item.
    ///</field>
    ///<field name = "ItemMouseOut" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor moves outside a menu item.
    ///</field>
    ///<field name = "PopUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu pops up.
    ///</field>
    ///<field name = "CloseUp" type = "ASPxClientEvent">
    ///Occurs on the client side when a submenu closes.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientRatingControl = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxRatingControl control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires on the server after an item has been clicked.
    ///</field>
    ///<field name = "ItemMouseOver" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor is moved into a rating control item.
    ///</field>
    ///<field name = "ItemMouseOut" type = "ASPxClientEvent">
    ///Occurs on the client side when the mouse cursor moves outside a rating control item.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientRatingControlItemClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client ItemClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientRatingControlItemClickEventArgs">
    ///A ASPxClientRatingControlItemClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControlItemClickEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemClick event.
    ///</summary>
    ///<field name = "index" type = "Int32">
    ///Gets the index of the item related to the event. Value: An integer value that represents the clicked item's index.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientRatingControlItemMouseEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ItemMouseOver events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientRatingControlItemMouseEventArgs">
    ///An ASPxClientRatingControlItemMouseEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControlItemMouseEventArgs = function() {
    ///<summary>
    ///Provides data for the rating control's ItemMouseOver and ItemMouseOut client events (such as ItemMouseOut).
    ///</summary>
    ///<field name = "index" type = "Int32">
    ///Gets the index of the item related to the event. Value: An integer value that represents the related item's index.
    ///</field>
};
ASPxClientRibbon = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ASPxRibbon control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CommandExecuted" type = "ASPxClientEvent">
    ///Occurs after an end-user executes an action on a ribbon item.
    ///</field>
    ///<field name = "ActiveTabChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the active tab has been changed within a ribbon control.
    ///</field>
    ///<field name = "MinimizationStateChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the ribbon minimization state is changed by end-user actions.
    ///</field>
    ///<field name = "FileTabClicked" type = "ASPxClientEvent">
    ///Occurs when the file tab is clicked.
    ///</field>
    ///<field name = "DialogBoxLauncherClicked" type = "ASPxClientEvent">
    ///Fires on the client side after a dialog box launcher has been clicked.
    ///</field>
    ///<field name = "KeyTipsClosedOnEscape" type = "ASPxClientEvent">
    ///Fires after key tips are closed by pressing Esc.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientRibbonTab = function() {
    ///<summary>
    ///A client-side equivalent of the ribbon's RibbonTab object.
    ///</summary>
    ///<field name = "ribbon" type = "ASPxClientRibbon">
    ///Gets the client ribbon object to which the current tab belongs. Value: An <see cref="ASPxClientRibbon" /> object to which the tab belongs.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets or sets the tab's index within the collection. Value: An integer value that is the zero-based index of the tab within the collection.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the current ribbon tab. Value: A string value that is the tab's name.
    ///</field>
};
ASPxClientRibbonGroup = function() {
    ///<summary>
    ///A client-side equivalent of the ribbon's RibbonGroup object.
    ///</summary>
    ///<field name = "ribbon" type = "ASPxClientRibbon">
    ///Gets the client ribbon object to which the current group belongs. Value: An <see cref="ASPxClientRibbon" /> object to which the group belongs.
    ///</field>
    ///<field name = "tab" type = "ASPxClientRibbonTab">
    ///Gets the client tab object to which the current group belongs. Value: An <see cref="ASPxClientRibbonTab" /> object to which the group belongs.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets or sets the group's index within the collection. Value: An integer value that is the zero-based index of the group within the collection.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the current ribbon group. Value: A string value that is the group's name.
    ///</field>
};
ASPxClientRibbonItem = function() {
    ///<summary>
    ///A client-side equivalent of the ribbon's RibbonItemBase object.
    ///</summary>
    ///<field name = "group" type = "ASPxClientRibbonGroup">
    ///Gets the client group object to which the current item belongs. Value: An <see cref="ASPxClientRibbonGroup" /> object to which the item belongs.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets or sets the item's index within the collection. Value: An integer value that is the zero-based index of the item within the collection.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the current ribbon item. Value: A string value that is the item's name.
    ///</field>
    ///<field name = "ribbon" type = "ASPxClientRibbon">
    ///Gets the client ribbon object to which the current item belongs. Value: An <see cref="ASPxClientRibbon" /> object to which the item belongs.
    ///</field>
};
ASPxClientRibbonCommandExecutedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CommandExecuted event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxRibbon control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientRibbonCommandExecutedEventArgs">
    ///An ASPxClientRibbonCommandExecutedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbonCommandExecutedEventArgs = function() {
    ///<summary>
    ///Provides data for the CommandExecuted event.
    ///</summary>
    ///<field name = "item" type = "ASPxClientRibbonItem">
    ///Gets an item object related to the event. Value: An <see cref="ASPxClientRibbonItem" /> object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "parameter" type = "String">
    ///Gets an optional parameter that complements the processed command. Value: A string value containing additional information about the processed command.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientRibbonTabEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ActiveTabChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxRibbon control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientRibbonTabEventArgs">
    ///A ASPxClientRibbonTabEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbonTabEventArgs = function() {
    ///<summary>
    ///Provides data for the ActiveTabChanged event.
    ///</summary>
    ///<field name = "tab" type = "ASPxClientRibbonTab">
    ///Gets the tab object related to the event. Value: An <see cref="ASPxClientRibbonTab" /> object that is the tab, manipulations on which forced the ribbon control to raise the event.
    ///</field>
};
ASPxClientRibbonMinimizationStateEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the MinimizationStateChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxRibbon control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientRibbonMinimizationStateEventArgs">
    ///An ASPxClientRibbonMinimizationStateEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbonMinimizationStateEventArgs = function() {
    ///<summary>
    ///Provides data for the MinimizationStateChanged event.
    ///</summary>
    ///<field name = "ribbonState" type = "Int32">
    ///Returns the value indicating the new ribbon state. Value: The integer value indicating the ribbon minimization state.
    ///</field>
};
ASPxClientRibbonDialogBoxLauncherClickedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the DialogBoxLauncherClicked event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the ribbon object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientRibbonDialogBoxLauncherClickedEventArgs">
    ///An ASPxClientRibbonDialogBoxLauncherClickedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbonDialogBoxLauncherClickedEventArgs = function() {
    ///<summary>
    ///Provides data for the DialogBoxLauncherClicked event.
    ///</summary>
    ///<field name = "group" type = "ASPxClientRibbonGroup">
    ///Gets the client group object to which the clicked dialog box launcher belongs. Value: An <see cref="ASPxClientRibbonGroup" /> object to which the dialog box launcher belongs.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientRibbonState = function() {
    ///<summary>
    ///Declares client constants that contain the identifiers of ribbon minimization states.
    ///</summary>
    ///<field name = "Normal" type = "Int32" static = "true">
    ///A ribbon is in the normal state. Returns 0
    ///</field>
    ///<field name = "Minimized" type = "Int32" static = "true">
    ///A ribbon is minimized. Returns 1
    ///</field>
    ///<field name = "TemporaryShown" type = "Int32" static = "true">
    ///A ribbon is temporarily shown. Returns 2
    ///</field>
};
ASPxClientRoundPanel = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxRoundPanel control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "CollapsedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a panel has been expanded or collapsed via end-user interactions, i.e., by clicking a panel header or collapse button.
    ///</field>
    ///<field name = "CollapsedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before a panel is expanded or collapsed by end-user interactions, i.e., by clicking a panel header or collapse button.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientRoundPanel.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientSplitter = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxSplitter object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "PaneResizing" type = "ASPxClientEvent">
    ///Fires before a pane is resized.
    ///</field>
    ///<field name = "PaneResized" type = "ASPxClientEvent">
    ///Fires after a pane has been resized.
    ///</field>
    ///<field name = "PaneCollapsing" type = "ASPxClientEvent">
    ///Fires before a pane is collapsed.
    ///</field>
    ///<field name = "PaneCollapsed" type = "ASPxClientEvent">
    ///Fires after a pane has been collapsed.
    ///</field>
    ///<field name = "PaneExpanding" type = "ASPxClientEvent">
    ///Fires before a pane is expanded.
    ///</field>
    ///<field name = "PaneExpanded" type = "ASPxClientEvent">
    ///Fires after a pane has been expanded.
    ///</field>
    ///<field name = "PaneResizeCompleted" type = "ASPxClientEvent">
    ///Occurs when a pane resize operation has been completed.
    ///</field>
    ///<field name = "PaneContentUrlLoaded" type = "ASPxClientEvent">
    ///Fires after a specific web page has been loaded into a pane.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientSplitterPane = function() {
    ///<summary>
    ///Represents a client-side equivalent of the splitter's SplitterPane object.
    ///</summary>
    ///<field name = "index" type = "Int32">
    ///Gets the index of the current pane within the pane collection to which it belongs. Value: An integer value representing the zero-based index of the current pane within the SplitterPaneCollection collection.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the current splitter pane. Value: A string value that represents the value assigned to the pane's Name property.
    ///</field>
};
ASPxClientSplitterPaneEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the splitter's client events concerning pane manipulations.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the splitter object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientSplitterPaneEventArgs">
    ///An ASPxClientSplitterPaneEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPaneEventArgs = function() {
    ///<summary>
    ///A method that will handle the splitter's client events concerning manipulations with a pane.
    ///</summary>
    ///<field name = "pane" type = "ASPxClientSplitterPane">
    ///Gets the pane object related to the event. Value: An ASPxClientSplitterPane object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientSplitterPaneCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle a splitter control's cancelable client events concerning pane manipulations.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the splitter control object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientSplitterPaneCancelEventArgs">
    ///An ASPxClientSplitterPaneCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPaneCancelEventArgs = function() {
    ///<summary>
    ///Provides data for a splitter control's cancelable client events concerning manipulations with a pane.
    ///</summary>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "pane" type = "ASPxClientSplitterPane">
    ///Gets the pane object related to the event. Value: An ASPxClientSplitterPane object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientTabControlBase = function() {
    ///<summary>
    ///Represents a base for the ASPxClientPageControl objects.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "TabClick" type = "ASPxClientEvent">
    ///Fires when a tab is clicked.
    ///</field>
    ///<field name = "ActiveTabChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the active tab has been changed within a tab control.
    ///</field>
    ///<field name = "ActiveTabChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the active tab is changed within a tab control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by a client tab control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientTabControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxTabControl object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "TabClick" type = "ASPxClientEvent">
    ///Fires when a tab is clicked.
    ///</field>
    ///<field name = "ActiveTabChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the active tab has been changed within a tab control.
    ///</field>
    ///<field name = "ActiveTabChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the active tab is changed within a tab control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by a client tab control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientPageControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxPageControl object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "TabClick" type = "ASPxClientEvent">
    ///Fires when a tab is clicked.
    ///</field>
    ///<field name = "ActiveTabChanged" type = "ASPxClientEvent">
    ///Fires on the client side after the active tab has been changed within a tab control.
    ///</field>
    ///<field name = "ActiveTabChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the active tab is changed within a tab control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by a client tab control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientTab = function() {
    ///<summary>
    ///Represents a client-side equivalent of a tab control's TabPage object.
    ///</summary>
    ///<field name = "tabControl" type = "ASPxClientTabControlBase">
    ///Gets the tab control to which the current tab belongs. Value: An ASPxClientTabControlBase object representing the control to which the tab belongs.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets the index of the current tab (tabbed page) within the control's collection of tabs (tabbed pages). Value: An integer value representing the zero-based index of the current tab (tabbed page) within the TabPages) collection of the control to which the tab belongs.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the current tab. Value: A string value that represents the value assigned to the tab's Name property.
    ///</field>
};
ASPxClientTabControlTabEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle a tab control's client events concerning manipulations with a tab.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the tab control object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientTabControlTabEventArgs">
    ///An ASPxClientTabControlTabEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlTabEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern manipulations on tabs.
    ///</summary>
    ///<field name = "tab" type = "ASPxClientTab">
    ///Gets the tab object related to the event. Value: An ASPxClientTab object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientTabControlTabCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle a tab control's cancelable client events concerning manipulations with a tab.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the tab control object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientTabControlTabCancelEventArgs">
    ///An ASPxClientTabControlTabCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlTabCancelEventArgs = function() {
    ///<summary>
    ///Provides data for cancellable events which concern manipulations on tabs.
    ///</summary>
    ///<field name = "tab" type = "ASPxClientTab">
    ///Gets the tab object related to the event. Value: An ASPxClientTab object representing the tab manipulations on which forced the tab control to raise the event.
    ///</field>
    ///<field name = "reloadContentOnCallback" type = "Boolean">
    ///Gets or sets a value specifying whether a callback should be sent to the server to reload the content of the page being activated. Value: true to reload the page's content; otherwise, false.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTabControlTabClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle client events concerning clicks on tabs.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the tab control object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientTabControlTabClickEventArgs">
    ///An ASPxClientTabControlTabClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlTabClickEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern clicking on the control's tabs.
    ///</summary>
    ///<field name = "htmlElement" type = "Object">
    ///Gets the HTML object that contains the processed tab. Value: An object representing a container for the tab related to the event.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "tab" type = "ASPxClientTab">
    ///Gets the tab object related to the event. Value: An ASPxClientTab object representing the tab manipulations on which forced the tab control to raise the event.
    ///</field>
    ///<field name = "reloadContentOnCallback" type = "Boolean">
    ///Gets or sets a value specifying whether a callback should be sent to the server to reload the content of the page being activated. Value: true to reload the page's content; otherwise, false.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTimer = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxTimer object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Tick" type = "ASPxClientEvent">
    ///Fires on the client side when the specified timer interval has elapsed, and the timer is enabled.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientTitleIndex = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxTitleIndex object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ItemClick" type = "ASPxClientEvent">
    ///Fires after an item has been clicked.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientTitleIndex.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientTitleIndexItemEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the title index control's client events concerning manipulations with an item.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the title index control object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientTitleIndexItemEventArgs">
    ///An ASPxClientTitleIndexItemEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndexItemEventArgs = function() {
    ///<summary>
    ///Provides data for events which concern manipulations on the control's items.
    ///</summary>
    ///<field name = "name" type = "Object">
    ///Gets the name that uniquely identifies the processed item. Value: A string value that represents the value assigned to the processed item's Name property.
    ///</field>
    ///<field name = "htmlElement" type = "Object">
    ///Gets the HTML object that contains the processed item. Value: An object representing a container for the item related to the event.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTreeView = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxTreeView object.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "NodeClick" type = "ASPxClientEvent">
    ///Fires on the client side after a node has been clicked.
    ///</field>
    ///<field name = "ExpandedChanged" type = "ASPxClientEvent">
    ///Fires on the client side after a node's expansion state has been changed by end-user interaction.
    ///</field>
    ///<field name = "ExpandedChanging" type = "ASPxClientEvent">
    ///Fires on the client side before the expansion state of a node is changed via end-user interaction.
    ///</field>
    ///<field name = "CheckedChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the node's checked state is changed by clicking on a check box.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientTreeView.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientTreeViewNode = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxTreeView's TreeViewNode object.
    ///</summary>
    ///<field name = "treeView" type = "ASPxClientTreeView">
    ///Gets the client representation of the ASPxTreeView control to which the current node belongs. Value: An ASPxClientTreeView object representing the control to which the node belongs.
    ///</field>
    ///<field name = "parent" type = "ASPxClientTreeViewNode">
    ///Gets the current node's parent node. Value: An ASPxClientTreeViewNode object representing the node's immediate parent.
    ///</field>
    ///<field name = "index" type = "Int32">
    ///Gets the node's index within the parent's collection of nodes. Value: An integer value representing the node's zero-based index within the Nodes collection of the node to which the node belongs.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name that uniquely identifies the node. Value: A string value that represents the value assigned to the node's Name property.
    ///</field>
};
ASPxClientTreeViewNodeProcessingModeEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client events concerned with node processing.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event source. Identifies the ASPxClientTreeView control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientTreeViewNodeProcessingModeEventArgs">
    ///An ASPxClientTreeViewNodeProcessingModeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNodeProcessingModeEventArgs = function() {
    ///<summary>
    ///Provides data for the client events concerned with node processing, and that allow the event's processing to be passed to the server side.
    ///</summary>
    ///<field name = "node" type = "ASPxClientTreeViewNode">
    ///Gets a node object related to the event. Value: An ASPxClientTreeViewNode object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTreeViewNodeClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the NodeClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The ASPxClientTreeView control which fires the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientTreeViewNodeClickEventArgs">
    ///An ASPxClientTreeViewNodeClickEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNodeClickEventArgs = function() {
    ///<summary>
    ///Provides data for the NodeClick event.
    ///</summary>
    ///<field name = "htmlElement" type = "Object">
    ///Gets the HTML object that contains the processed node. Value: An object representing a container for the node related to the event.
    ///</field>
    ///<field name = "htmlEvent" type = "Object">
    ///Gets a DHTML event object that relates to the processed event. Value: An object that maintains DHTML event-specific information.
    ///</field>
    ///<field name = "node" type = "ASPxClientTreeViewNode">
    ///Gets a node object related to the event. Value: An ASPxClientTreeViewNode object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientTreeViewNodeEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ASPxTreeView control's client events, concerning manipulations with a node.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the ASPxClientTreeView control object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientTreeViewNodeEventArgs">
    ///An ASPxClientTreeViewNodeEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNodeEventArgs = function() {
    ///<summary>
    ///Provides data for the ExpandedChanged events.
    ///</summary>
    ///<field name = "node" type = "ASPxClientTreeViewNode">
    ///Gets a node object related to the event. Value: An ASPxClientTreeViewNode object, manipulations on which forced the event to be raised.
    ///</field>
};
ASPxClientTreeViewNodeCancelEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ASPxTreeView's cancelable client events, concerning manipulations with nodes.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the ASPxClientTreeView object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientTreeViewNodeCancelEventArgs">
    ///An ASPxClientTreeViewNodeCancelEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNodeCancelEventArgs = function() {
    ///<summary>
    ///Provides data for the ExpandedChanging event.
    ///</summary>
    ///<field name = "node" type = "ASPxClientTreeViewNode">
    ///Gets a node object related to the event. Value: An ASPxClientTreeViewNode object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientUploadControl = function() {
    ///<summary>
    ///Represents a client-side equivalent of the ASPxUploadControl control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "FileUploadComplete" type = "ASPxClientEvent">
    ///Occurs on the client after a file has been uploaded.
    ///</field>
    ///<field name = "FilesUploadComplete" type = "ASPxClientEvent">
    ///Occurs on the client after upload of all selected files has been completed.
    ///</field>
    ///<field name = "FileUploadStart" type = "ASPxClientEvent">
    ///Occurs on the client side before upload of the specified files starts.
    ///</field>
    ///<field name = "FilesUploadStart" type = "ASPxClientEvent">
    ///Occurs on the client side before file upload is started.
    ///</field>
    ///<field name = "TextChanged" type = "ASPxClientEvent">
    ///Fires on the client side when the text within the control's edit box is changed while the control has focus.
    ///</field>
    ///<field name = "UploadingProgressChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the progress bar indicator position is changed.
    ///</field>
    ///<field name = "FileInputCountChanged" type = "ASPxClientEvent">
    ///Occurs on the client side when the file input elements count is changed.
    ///</field>
    ///<field name = "ValidationErrorOccurred" type = "ASPxClientEvent">
    ///Enables you to specify whether the selected file(s) are valid and provide an error text.
    ///</field>
    ///<field name = "DropZoneEnter" type = "ASPxClientEvent">
    ///Fires when the mouse enters a drop zone or an external drop zone element while dragging a file.
    ///</field>
    ///<field name = "DropZoneLeave" type = "ASPxClientEvent">
    ///Fires when the mouse leaves a drop zone or an external drop zone element while dragging a file.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientUploadControlFilesUploadStartEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the FilesUploadStart event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the ASPxUploadControl control that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientUploadControlFilesUploadStartEventArgs">
    ///A ASPxClientUploadControlFilesUploadStartEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlFilesUploadStartEventArgs = function() {
    ///<summary>
    ///Provides data for the FilesUploadStart event.
    ///</summary>
    ///<field name = "cancel" type = "Boolean">
    ///Gets or sets a value indicating whether the action which raised the event should be canceled. Value: true if the action that raised the event should be canceled; otherwise, false.
    ///</field>
};
ASPxClientUploadControlFileUploadCompleteEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the corresponding client event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the upload control which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientUploadControlFileUploadCompleteEventArgs">
    ///An ASPxClientUploadControlFileUploadCompleteEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlFileUploadCompleteEventArgs = function() {
    ///<summary>
    ///Provides data for the FileUploadComplete event.
    ///</summary>
    ///<field name = "inputIndex" type = "Int32">
    ///Gets the index of a file input element within the ASPxUploadControl. Value: An integer value that specifies the file input element's index.
    ///</field>
    ///<field name = "isValid" type = "Boolean">
    ///Gets or sets a value indicating whether the uploaded file passes validation. Value: true if the file is valid; otherwise, false.
    ///</field>
    ///<field name = "errorText" type = "String">
    ///Gets the error text to be displayed within the ASPxUploadControl's error frame. Value: A string value that represents the error text.
    ///</field>
    ///<field name = "callbackData" type = "String">
    ///Gets a string that contains specific information (if any) passed from the server side for further client processing. Value: A string value representing callback data passed from the server.
    ///</field>
};
ASPxClientUploadControlFilesUploadCompleteEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the client FilesUploadComplete event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the upload control which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientUploadControlFilesUploadCompleteEventArgs">
    ///A  object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlFilesUploadCompleteEventArgs = function() {
    ///<summary>
    ///Provides data for the FilesUploadComplete client event, which enables you to perform specific actions after all selected files have been uploaded.
    ///</summary>
    ///<field name = "errorText" type = "String">
    ///Gets the error text to be displayed within the upload control's error frame. Value: A string value that is the error text.
    ///</field>
    ///<field name = "callbackData" type = "String">
    ///Gets a string that contains specific information (if any) passed from the server side for further client processing. Value: A string value that is the callback data passed from the server.
    ///</field>
};
ASPxClientUploadControlTextChangedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the TextChanged client event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the upload control which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientUploadControlTextChangedEventArgs">
    ///An ASPxClientUploadControlTextChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlTextChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the TextChanged client event that allows you to respond to an end-user changing an edit box's text.
    ///</summary>
    ///<field name = "inputIndex" type = "Int32">
    ///Gets the index of a file input element within the ASPxUploadControl. Value: An integer value that specifies the file input element's index.
    ///</field>
};
ASPxClientUploadControlUploadingProgressChangedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ASPxUploadControl's client event concerning the uploading process being changed.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///An object representing the event's source. Identifies the ASPxUploadControl object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientUploadControlUploadingProgressChangedEventArgs">
    ///An ASPxClientUploadControlUploadingProgressChangedEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlUploadingProgressChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the UploadingProgressChanged event.
    ///</summary>
    ///<field name = "fileCount" type = "Int32">
    ///Gets the number of the files selected for upload. Value: An integer value that represents the total number of selected files.
    ///</field>
    ///<field name = "currentFileName" type = "String">
    ///Gets the name of the file being currently uploaded. Value: A string value that represents the file name.
    ///</field>
    ///<field name = "currentFileContentLength" type = "Int32">
    ///Gets the content length of the currently uploaded file. Value: An integer value specifying the content length.
    ///</field>
    ///<field name = "currentFileUploadedContentLength" type = "Int32">
    ///Gets the content length of the current file already uploaded to the server. Value: An integer value that is the content length.
    ///</field>
    ///<field name = "currentFileProgress" type = "Int32">
    ///Gets the position of the current file upload progress. Value: An <see cref="Int32" /> value specifying the upload progress position.
    ///</field>
    ///<field name = "totalContentLength" type = "Int32">
    ///Gets the content length of the files selected for upload. Value: An integer value specifying the total content length of the selected files.
    ///</field>
    ///<field name = "uploadedContentLength" type = "Int32">
    ///Gets the content length of the files already uploaded to the server. Value: An integer value that represents the content length.
    ///</field>
    ///<field name = "progress" type = "Int32">
    ///Gets the current position of total upload progress. Value: An <see cref="Int32" /> value specifying the total upload progress position.
    ///</field>
};
ASPxClientUploadControlValidationErrorOccurredEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ValidationErrorOccurred event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientUploadControlValidationErrorOccurredEventArgs">
    ///An ASPxClientUploadControlValidationErrorOccurredEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlValidationErrorOccurredEventArgs = function() {
    ///<summary>
    ///Provides data for the ValidationErrorOccurred event.
    ///</summary>
    ///<field name = "errorText" type = "String">
    ///Gets or sets the error text. Value: A string value that represents the error text.
    ///</field>
    ///<field name = "showAlert" type = "Boolean">
    ///Gets or sets a value specifying whether an alert message is displayed when the ValidationErrorOccurred event fires. Value: true, to display an alert message; otherwise, false.
    ///</field>
    ///<field name = "validationSettings" type = "ASPxClientUploadControlValidationSettings">
    ///Gets the validation settings for the selected files. Value: An ASPxClientUploadControlValidationSettings object that provides validation settings.
    ///</field>
    ///<field name = "invalidFiles" type = "Array" elementType = "ASPxClientUploadControlInvalidFileInfo">
    ///Returns an array of invalid files. Value: An array of the ASPxClientUploadControlInvalidFileInfo objects.
    ///</field>
};
ASPxClientUploadControlValidationSettings = function() {
    ///<summary>
    ///Contains settings that relate to the ValidationErrorOccurred client event.
    ///</summary>
    ///<field name = "maxFileSize" type = "Int64">
    ///Gets the maximum file size. Value: An <see cref="Int64" /> value that specifies the maximum file size, in bytes.
    ///</field>
    ///<field name = "maxFileCount" type = "Int32">
    ///Gets the maximum count of files that can be selected for uploading at once. Value: An integer value that specifies the maximum count of files.
    ///</field>
    ///<field name = "allowedFileExtensions" type = "Array" elementType = "String">
    ///Gets the allowed file extensions. Value: An array of string values that contains file extensions that are allowed.
    ///</field>
    ///<field name = "invalidFileNameCharacters" type = "Array" elementType = "String">
    ///Gets which characters in a file name are not allowed. Value: An array of string values that contains characters that are not allowed.
    ///</field>
};
ASPxClientUploadControlInvalidFileInfo = function() {
    ///<summary>
    ///Contains settings of the file that hasn't passed validation.
    ///</summary>
    ///<field name = "fileName" type = "String">
    ///Gets the name of the invalid file. Value: A string value that specifies the file name.
    ///</field>
    ///<field name = "fileSize" type = "Int32">
    ///Gets the size of the invalid file. Value: An integer value that specifies the file size.
    ///</field>
    ///<field name = "errorType" type = "ASPxClientUploadControlValidationErrorTypeConsts">
    ///Gets the error type. Value: An ASPxClientUploadControlValidationErrorTypeConsts object that provides possible types of errors.
    ///</field>
};
ASPxClientUploadControlValidationErrorTypeConsts = function() {
    ///<summary>
    ///Declares client constants containing codes of validation errors that can occur while selecting files for uploading.
    ///</summary>
    ///<field name = "MaxFileSizeExceeded" type = "Int32" static = "true">
    ///The allowed maximum file size is exceeded.  Return Value: 1
    ///</field>
    ///<field name = "NotAllowedFileExtension" type = "Int32" static = "true">
    ///The file's extension is not allowed.  Return Value: 2
    ///</field>
    ///<field name = "MaxFileCountExceeded" type = "Int32" static = "true">
    ///The allowed maximum count of the files is exceeded.  Return Value: 3
    ///</field>
    ///<field name = "FileNameContainsInvalidCharacter" type = "Int32" static = "true">
    ///A file name contains invalid character.Return Value: 4
    ///</field>
};
ASPxClientUploadControlFile = function() {
    ///<summary>
    ///Represents a client file that corresponds to a particular file selected for uploading in the upload control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the name of the file selected for uploading. Value: A string value that specifies the file's name.
    ///</field>
    ///<field name = "size" type = "Int64">
    ///Gets the size of the file selected for uploading. Value: An Int64 value specifying the file's size, in bytes.
    ///</field>
    ///<field name = "sourceFileObject" type = "JavaScriptObject">
    ///Provides access to the file as a native Javascript object. Value: A JavaScript object that is the file selected for uploading.
    ///</field>
};
ASPxClientUploadControlDropZoneEnterEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the DropZoneEnter event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the upload control object which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientUploadControlDropZoneEnterEventArgs">
    ///An ASPxClientUploadControlDropZoneEnterEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlDropZoneEnterEventArgs = function() {
    ///<summary>
    ///Provides data for the DropZoneEnter event.
    ///</summary>
    ///<field name = "dropZone" type = "Object">
    ///Gets a drop zone object related to the processed event. Value: An object that is a drop zone related to the processed event.
    ///</field>
};
ASPxClientUploadControlDropZoneLeaveEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the DropZoneLeave event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. Identifies the upload control object that raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientUploadControlDropZoneLeaveEventArgs">
    ///A ASPxClientUploadControlDropZoneLeaveEventArgs object that contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControlDropZoneLeaveEventArgs = function() {
    ///<summary>
    ///Provides data for the DropZoneLeave event.
    ///</summary>
    ///<field name = "dropZone" type = "Object">
    ///Gets a drop zone object related to the processed event. Value: An object that is a drop zone related to the processed event.
    ///</field>
};
ASPxClientUtils = function() {
    ///<summary>
    ///Represents an object containing service static functions and properties which can be useful when performing client-side processing.
    ///</summary>
    ///<field name = "agent" type = "String" static = "true">
    ///Gets the user-agent string, which identifies the client browser and provides certain system details of the client computer. Value: A string value representing the browser's user-agent string.
    ///</field>
    ///<field name = "opera" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser is Opera. Value: true if the client browser is Opera; otherwise, false.
    ///</field>
    ///<field name = "opera9" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser is Opera version 9. Value: true if the client browser is Opera version 9; otherwise, false.
    ///</field>
    ///<field name = "safari" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser is Safari. Value: true if the client browser is Safari; otherwise, false.
    ///</field>
    ///<field name = "safari3" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser is Safari version 3. Value: true if the client browser is Safari version 3; otherwise, false.
    ///</field>
    ///<field name = "safariMacOS" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser is Safari, running under a MacOS operating system. Value: true if the client browser is Safari, running under a MacOS operating system; otherwise, false.
    ///</field>
    ///<field name = "chrome" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser is Google Chrome. Value: true if the client browser is Google Chrome; otherwise, false.
    ///</field>
    ///<field name = "ie" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser is Internet Explorer. Value: true if the client browser is Intenet Explorer; otherwise, false.
    ///</field>
    ///<field name = "ie7" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser is Internet Explorer version 7. Value: true if the client browser is Intenet Explorer version 7; otherwise, false.
    ///</field>
    ///<field name = "firefox" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser is Firefox. Value: true if the client browser is Firefox; otherwise, false.
    ///</field>
    ///<field name = "firefox3" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser is Firefox version 3. Value: true if the client browser is Firefox version 3; otherwise, false.
    ///</field>
    ///<field name = "mozilla" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser is Mozilla. Value: true if the client browser is Mozilla; otherwise, false.
    ///</field>
    ///<field name = "netscape" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser is Netscape. Value: true if the client browser is Netscape; otherwise, false.
    ///</field>
    ///<field name = "browserVersion" type = "Double" static = "true">
    ///Gets a value that specifies a client browser's full version. Value: A double precision floating-point value that specifies a client browser's version.
    ///</field>
    ///<field name = "browserMajorVersion" type = "Int32" static = "true">
    ///Gets a value that specifies a client browser's major version. Value: An integer value that specifies a client browser's major version.
    ///</field>
    ///<field name = "macOSPlatform" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the application is run under a MacOS platform. Value: true if the application is run under the MacOS platform; otherwise, false.
    ///</field>
    ///<field name = "windowsPlatform" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the application is run under the Windows platform. Value: true if the application is run under the Windows platform; otherwise, false.
    ///</field>
    ///<field name = "webKitFamily" type = "Boolean" static = "true">
    ///Gets a value that specifies whether a client browser is based on WebKit. Value: true if the client browser is based on WebKit; otherwise, false.
    ///</field>
    ///<field name = "netscapeFamily" type = "Boolean" static = "true">
    ///Gets a value that specifies whether a client browser is based on Netscape. Value: true if client browser is based on Netscape; otherwise, false.
    ///</field>
    ///<field name = "touchUI" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser supports touch. Value: true if the client browser supports touch; otherwise, false.
    ///</field>
    ///<field name = "webKitTouchUI" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser supports the WebKit touch user interface. Value: true if the client browser supports the WebKit touch user interface; otherwise, false.
    ///</field>
    ///<field name = "msTouchUI" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the client browser supports the Microsoft touch user interface. Value: true if the client browser supports the Microsoft touch user interface; otherwise, false.
    ///</field>
    ///<field name = "iOSPlatform" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the application is run under an iOS platform. Value: true if the application is run under the iOS platform; otherwise, false.
    ///</field>
    ///<field name = "androidPlatform" type = "Boolean" static = "true">
    ///Gets a value that specifies whether the application is run under the Android platform. Value: true if the application is run under the Android platform; otherwise, false.
    ///</field>
};
ASPxClientChartDesigner = function() {
    ///<summary>
    ///The JavaScript equivalent of the ASPxChartDesigner class.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientChartDesigner.
    ///</field>
    ///<field name = "SaveCommandExecute" type = "ASPxClientEvent">
    ///Occurs when executing the Save command on the client.
    ///</field>
    ///<field name = "CustomizeMenuActions" type = "ASPxClientEvent">
    ///Enables you to customize the menu actions of a Client Chart Designer.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientChartDesignerSaveCommandExecuteEventHandler = function(source, e) {
    ///<summary>
    ///Represents a method that will handle the SaveCommandExecute event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the ASPxChartDesigner which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientChartDesignerSaveCommandExecuteEventArgs">
    ///A ASPxClientChartDesignerSaveCommandExecuteEventArgs object which contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartDesignerSaveCommandExecuteEventArgs = function() {
    ///<summary>
    ///Provides data for a chart control's SaveCommandExecute event.
    ///</summary>
    ///<field name = "handled" type = "Boolean">
    ///Gets or sets a value specifying whether an event has been handled. Value: true, if the event hasn't been handled by a control; otherwise, false.
    ///</field>
};
ASPxClientChartDesignerCustomizeMenuActionsEventHandler = function(source, e) {
    ///<summary>
    ///Represents a method that will handle the CustomizeMenuActions event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the ASPxChartDesigner which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientChartDesignerCustomizeMenuActionsEventArgs">
    ///An ASPxClientChartDesignerCustomizeMenuActionsEventArgs object which contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartDesignerMenuAction = function() {
    ///<summary>
    ///An action of the Client Chart Designer's menu.
    ///</summary>
    ///<field name = "text" type = "String">
    ///Provides access to the text for the command. Value: A String value.
    ///</field>
    ///<field name = "imageClassName" type = "String">
    ///Provides access to the CSS class of the command's glyph. Value: A String value.
    ///</field>
    ///<field name = "clickAction" type = "Delegate">
    ///Provides access to the action performed when the Client Chart Designer's button is clicked. Value: The specific action implementation.
    ///</field>
    ///<field name = "disabled" type = "Boolean">
    ///Provides access to the value that specifies whether or not the command is disabled by default. Value: true, if the command is disabled by default; otherwise, false.
    ///</field>
    ///<field name = "visible" type = "Boolean">
    ///Provides access to the value that specifies whether or not the command is visible in the designer user interface. Value: true if the command is visible; otherwise false.
    ///</field>
    ///<field name = "hotKey" type = "String">
    ///Provides access to the keyboard shortcut used to invoke the command. Value: A String value.
    ///</field>
    ///<field name = "hasSeparator" type = "String">
    ///Provides access to the value that specifies whether or not the command has a visual separator. Value: true, if the command has a visual separator; otherwise, false.
    ///</field>
    ///<field name = "container" type = "String">
    ///Provides access to the location of the displayed command. Value: A String value.
    ///</field>
};
ASPxClientChartDesignerCustomizeMenuActionsEventArgs = function() {
    ///<summary>
    ///Provides data for a chart control's CustomizeMenuActions event on the client side.
    ///</summary>
    ///<field name = "actions" type = "Array" elementType = "ASPxClientChartDesignerMenuAction">
    ///Returns an array of the Client Chart Designer's menu actions. Value: An array of the ASPxClientChartDesignerMenuAction objects.
    ///</field>
};
ASPxClientWebChartControl = function() {
    ///<summary>
    ///A class which provides access to the entire hierarchy of chart elements on the client side.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client side after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientWebChartControl.
    ///</field>
    ///<field name = "ObjectHotTracked" type = "ASPxClientEvent">
    ///Occurs on the client side when any chart element is hot-tracked.
    ///</field>
    ///<field name = "CustomDrawCrosshair" type = "ASPxClientEvent">
    ///Occurs before crosshair items are drawn when the chart's contents are being drawn.
    ///</field>
    ///<field name = "ObjectSelected" type = "ASPxClientEvent">
    ///Occurs on the client side when any chart element is selected.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientWebChartControlCustomDrawCrosshairEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomDrawCrosshair event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the chartControl which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientWebChartControlCustomDrawCrosshairEventArgs">
    ///An ASPxClientWebChartControlCustomDrawCrosshairEventArgs object which contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControlCustomDrawCrosshairEventArgs = function() {
    ///<summary>
    ///Provides data for a chart control's CustomDrawCrosshair event.
    ///</summary>
    ///<field name = "crosshairElements" type = "ASPxClientCrosshairElement">
    ///Gets crosshair elements settings  to custom draw a crosshair cursor. Value: An  ASPxClientCrosshairElement object.
    ///</field>
    ///<field name = "cursorCrosshairAxisLabelElements" type = "ASPxClientCrosshairAxisLabelElement">
    ///Gets the settings of crosshair axis label elements to customize their appearance. Value: An ASPxClientCrosshairAxisLabelElement object.
    ///</field>
    ///<field name = "cursorCrosshairLineElement" type = "ASPxClientCrosshairLineElement">
    ///Gets crosshair line element settings that are used to custom draw a crosshair cursor. Value: An ASPxClientCrosshairLineElement object that contains crosshair line element settings.
    ///</field>
    ///<field name = "crosshairGroupHeaderElements" type = "ASPxClientCrosshairGroupHeaderElement">
    ///Gets the settings of crosshair group header elements to customize their appearance. Value: An ASPxClientCrosshairGroupHeaderElement object.
    ///</field>
    ///<field name = "crosshairElementGroups" type = "ASPxClientCrosshairElementGroup">
    ///Provides access to the settings of crosshair elements and crosshair group header elements to customize their appearance. Value: An ASPxClientCrosshairElementGroup object.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientCrosshairElement = function() {
    ///<summary>
    ///Represents the client-side equivalent of the CrosshairElement class.
    ///</summary>
    ///<field name = "Series" type = "ASPxClientSeries">
    ///Gets a series that a crosshair element hovers over when implementing a custom draw. Value: An ASPxClientSeries object which represents the series currently being painted.
    ///</field>
    ///<field name = "Point" type = "ASPxClientSeriesPoint">
    ///Gets the series point that a crosshair element hovers over when implementing a custom draw. Value: An ASPxClientSeriesPoint object, representing the series point that a crosshair element hovers over.
    ///</field>
    ///<field name = "LineElement" type = "ASPxClientCrosshairLineElement">
    ///Gets or sets the crosshair line element to custom draw a crosshair cursor. Value: An ASPxClientCrosshairLineElement object, representing the crosshair line element.
    ///</field>
    ///<field name = "AxisLabelElement" type = "ASPxClientCrosshairAxisLabelElement">
    ///Provides access to the crosshair axis label element. Value: An ASPxClientCrosshairAxisLabelElement object, representing the crosshair axis label element.
    ///</field>
    ///<field name = "LabelElement" type = "ASPxClientCrosshairSeriesLabelElement">
    ///Gets the crosshair label element. Value: An ASPxClientCrosshairSeriesLabelElement object, representing the crosshair label element.
    ///</field>
    ///<field name = "visible" type = "Boolean">
    ///Specifies whether the crosshair element is visible when implementing custom drawing in the crosshair cursor. Value: true, if the crosshair element is visible; otherwise, false.
    ///</field>
};
ASPxClientCrosshairLineElement = function() {
    ///<summary>
    ///Represents the client-side equivalent of the CrosshairLineElement class.
    ///</summary>
};
ASPxClientCrosshairAxisLabelElement = function() {
    ///<summary>
    ///Represents the client-side equivalent of the CrosshairAxisLabelElement class.
    ///</summary>
};
ASPxClientCrosshairGroupHeaderElement = function() {
    ///<summary>
    ///The client-side equivalent of the CrosshairGroupHeaderElement class.
    ///</summary>
};
ASPxClientCrosshairSeriesLabelElement = function() {
    ///<summary>
    ///The client-side equivalent of the CrosshairLabelElement class.
    ///</summary>
};
ASPxClientCrosshairElementGroup = function() {
    ///<summary>
    ///Represents the client-side equivalent of the CrosshairElementGroup class.
    ///</summary>
};
ASPxClientWebChartControlHotTrackEventHandler = function(source, e) {
    ///<summary>
    ///Represents a method that will handle the ObjectSelected events.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event source. This parameter identifies the ASPxClientWebChartControl which raised the event.
    ///</param>
    ///<param name = "e" type = "ASPxClientWebChartControlHotTrackEventArgs">
    ///An ASPxClientWebChartControlHotTrackEventArgs object which contains event data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControlHotTrackEventArgs = function() {
    ///<summary>
    ///Provides data for a chart control's ObjectSelected events on the client side.
    ///</summary>
    ///<field name = "hitObject" type = "ASPxClientWebChartElement">
    ///Provides access on the client side to the chart element, for which the event was raised. Value: An ASPxClientWebChartElement object, which represents the chart element for which the event was raised.
    ///</field>
    ///<field name = "additionalHitObject" type = "ASPxClientWebChartElement">
    ///Provides access on the client side to the object, which is in some way related to the object being hit. The returned value depends on the hitObject type and hit point location. Value: An ASPxClientWebChartElement object representing an additional object that relates to the one being hit.
    ///</field>
    ///<field name = "hitInfo" type = "ASPxClientWebChartHitInfo">
    ///Gets details on the chart elements located at the point where an end-user has clicked when hot-tracking or selecting a chart element on the client side. Value: An ASPxClientWebChartHitInfo object, which contains information about the chart elements located at the point where an end-user has clicked.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Provides access on the client side to the chart and all its elements. Value: An ASPxClientWebChart object, which provides access to chart properties.
    ///</field>
    ///<field name = "htmlElement" type = "Object">
    ///Gets the HTML object that contains the processed item. Value: An object representing a container for the item related to the event.
    ///</field>
    ///<field name = "x" type = "Int32">
    ///Gets the X-coordinate of the hit test point, relative to the top left corner of the chart. Value: An integer value specifying X-coordinate of the hit test point (in pixels).
    ///</field>
    ///<field name = "y" type = "Int32">
    ///Gets the Y-coordinate of the hit test point, relative to the top left corner of the chart. Value: An integer value specifying Y-coordinate of the hit test point (in pixels).
    ///</field>
    ///<field name = "absoluteX" type = "Int32">
    ///Gets the X-coordinate of the hit test point, relative to the top left corner of the Web Page containing this chart. Value: An integer value specifying X-coordinate of the hit test point (in pixels).
    ///</field>
    ///<field name = "absoluteY" type = "Int32">
    ///Gets the Y-coordinate of the hit test point, relative to the top left corner of the Web Page containing this chart. Value: An integer value specifying Y-coordinate of the hit test point (in pixels).
    ///</field>
    ///<field name = "cancel" type = "Boolean">
    ///Gets a value indicating whether the hot-tracking or object selection should be canceled. Value: true to cancel the hot-tracking or selection of an object; otherwise, false.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientHitObject = function() {
    ///<summary>
    ///Represents an object under the hit test point within a chart control, on the client side.
    ///</summary>
    ///<field name = "Object" type = "ASPxClientWebChartElement">
    ///Gets the chart element for which the event was raised. Value: An ASPxClientWebChartElement object, representing the chart element for which the event was raised.
    ///</field>
    ///<field name = "AdditionalObject" type = "ASPxClientWebChartElement">
    ///Provides access to an object, which is in some way related to the object being hit. The returned value depends on the Object type and hit point location. Value: An ASPxClientWebChartElement object that represents an additional object related to the one being hit.
    ///</field>
};
ASPxClientWebChartHitInfo = function() {
    ///<summary>
    ///Contains information about a specific test point within a chart control, on the client side.
    ///</summary>
    ///<field name = "inChart" type = "Boolean">
    ///Gets a value indicating whether the test point is within the chart. Value: true if the test point is within a chart; otherwise, false.
    ///</field>
    ///<field name = "inChartTitle" type = "Boolean">
    ///Gets a value indicating whether the test point is within the chart title. Value: true if the test point is within a chart title; otherwise, false.
    ///</field>
    ///<field name = "inAxis" type = "Boolean">
    ///Gets a value indicating whether the test point is within the axis. Value: true if the test point is within an axis; otherwise, false.
    ///</field>
    ///<field name = "inAxisLabelItem" type = "Boolean">
    ///Gets a value indicating whether the test point is within the axis label item. Value: true if the test point is within an axis label item; otherwise, false.
    ///</field>
    ///<field name = "inAxisTitle" type = "Boolean">
    ///Gets a value indicating whether the test point is within the axis title. Value: true if the test point is within an axis title; otherwise, false.
    ///</field>
    ///<field name = "inConstantLine" type = "Boolean">
    ///Gets a value indicating whether the test point is within the constant line. Value: true if the test point is within a constant line; otherwise, false.
    ///</field>
    ///<field name = "inDiagram" type = "Boolean">
    ///Gets a value indicating whether the test point is within the diagram. Value: true if the test point is within a diagram; otherwise, false.
    ///</field>
    ///<field name = "inNonDefaultPane" type = "Boolean">
    ///Gets a value indicating whether the test point is within the non-default pane. Value: true if the test point is within a non-default pane; otherwise, false.
    ///</field>
    ///<field name = "inLegend" type = "Boolean">
    ///Gets a value indicating whether the test point is within the legend. Value: true if the test point is within a legend; otherwise, false.
    ///</field>
    ///<field name = "inCustomLegendItem" type = "Boolean">
    ///Gets the value indicating whether or not the test point is within a custom legend item. Value: true if the test point is within a custom legend item; otherwise, false.
    ///</field>
    ///<field name = "inSeries" type = "Boolean">
    ///Gets a value indicating whether the test point is within the series. Value: true if the test point is within a series; otherwise, false.
    ///</field>
    ///<field name = "inSeriesLabel" type = "Boolean">
    ///Gets a value indicating whether the test point is within the series label. Value: true if the test point is within a series label; otherwise, false.
    ///</field>
    ///<field name = "inSeriesPoint" type = "Boolean">
    ///Gets a value indicating whether the test point is within the series point. Value: true if the test point is within a series point; otherwise, false.
    ///</field>
    ///<field name = "inSeriesTitle" type = "Boolean">
    ///Gets a value indicating whether the test point is within the series title. Value: true if the test point is within a series title; otherwise, false.
    ///</field>
    ///<field name = "inTrendLine" type = "Boolean">
    ///Gets a value indicating whether the test point is within the trendline. Value: true if the test point is within a trendline; otherwise, false.
    ///</field>
    ///<field name = "inFibonacciIndicator" type = "Boolean">
    ///Gets a value indicating whether the test point is within the Fibonacci Indicator. Value: true if the test point is within a Fibonacci Indicator; otherwise, false.
    ///</field>
    ///<field name = "inRegressionLine" type = "Boolean">
    ///Gets a value indicating whether the test point is within the regression line. Value: true if the test point is within a regression line; otherwise, false.
    ///</field>
    ///<field name = "inIndicator" type = "Boolean">
    ///Gets a value specifying whether the test point is within an indicator. Value: true if the test point is within an indicator; otherwise, false.
    ///</field>
    ///<field name = "inAnnotation" type = "Boolean">
    ///Gets a value indicating whether the test point is within an annotation. Value: true if the test point is within an annotation; otherwise, false.
    ///</field>
    ///<field name = "inHyperlink" type = "Boolean">
    ///Gets a value indicating whether the test point is within a hyperlink. Value: true, if the test point is within a hyperlink; otherwise, false.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the client-side chart instance from under the test point. Value: An ASPxClientWebChart object.
    ///</field>
    ///<field name = "chartTitle" type = "ASPxClientChartTitle">
    ///Gets the client-side chart title instance from under the test point. Value: An ASPxClientChartTitle object.
    ///</field>
    ///<field name = "axis" type = "ASPxClientAxisBase">
    ///Gets the client-side axis instance from under the test point. Value: An ASPxClientAxisBase descendant.
    ///</field>
    ///<field name = "constantLine" type = "ASPxClientConstantLine">
    ///Gets the client-side constant line instance from under the test point. Value: An ASPxClientConstantLine object.
    ///</field>
    ///<field name = "diagram" type = "ASPxClientXYDiagramBase">
    ///Gets the client-side diagram instance from under the test point. Value: An ASPxClientXYDiagramBase descendant.
    ///</field>
    ///<field name = "nonDefaultPane" type = "ASPxClientXYDiagramPane">
    ///Gets the client-side non-default pane instance from under the test point. Value: An ASPxClientXYDiagramPane object.
    ///</field>
    ///<field name = "legend" type = "ASPxClientLegend">
    ///Gets the client-side legend instance from under the test point. Value: An ASPxClientLegend object.
    ///</field>
    ///<field name = "customLegendItem" type = "ASPxClientCustomLegendItem">
    ///Gets a custom legend item which is located under the test point. Value: An ASPxClientCustomLegendItem object which represents the item located under the test point.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the client-side series instance from under the test point. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "seriesLabel" type = "ASPxClientSeriesLabel">
    ///Gets the client-side series label instance from under the test point. Value: An ASPxClientSeriesLabel object.
    ///</field>
    ///<field name = "seriesTitle" type = "ASPxClientSeriesTitle">
    ///Gets the client-side series title instance from under the test point. Value: An ASPxClientSeriesTitle object.
    ///</field>
    ///<field name = "trendLine" type = "ASPxClientTrendLine">
    ///Gets the client-side trendline instance from under the test point. Value: An ASPxClientTrendLine object.
    ///</field>
    ///<field name = "fibonacciIndicator" type = "ASPxClientFibonacciIndicator">
    ///Gets the client-side Fibonacci indicator instance from under the test point. Value: An ASPxClientFibonacciIndicator object.
    ///</field>
    ///<field name = "regressionLine" type = "ASPxClientRegressionLine">
    ///Gets the client-side regression line instance from under the test point. Value: An ASPxClientRegressionLine object.
    ///</field>
    ///<field name = "indicator" type = "ASPxClientIndicator">
    ///Gets the client-side indicator instance from under the test point. Value: An ASPxClientIndicator descendant.
    ///</field>
    ///<field name = "annotation" type = "ASPxClientAnnotation">
    ///Gets the client-side annotation instance from under the test point. Value: An ASPxClientAnnotation object.
    ///</field>
    ///<field name = "seriesPoint" type = "ASPxClientSeriesPoint">
    ///Gets the client-side series point instance from under the test point. Value: An ASPxClientSeriesPoint object.
    ///</field>
    ///<field name = "axisLabelItem" type = "ASPxClientAxisLabelItem">
    ///Gets the client-side axis label item instance from under the test point. Value: An ASPxClientAxisLabelItem object.
    ///</field>
    ///<field name = "axisTitle" type = "ASPxClientAxisTitle">
    ///Gets the client-side axis title instance from under the test point. Value: An ASPxClientAxisTitle object.
    ///</field>
    ///<field name = "hyperlink" type = "String">
    ///Returns a hyperlink which is located under the test point. Value: A String object representing a hyperlink.
    ///</field>
};
ASPxClientDiagramCoordinates = function() {
    ///<summary>
    ///Represents the client-side equivalent of the DiagramCoordinates class.
    ///</summary>
    ///<field name = "argumentScaleType" type = "String">
    ///Gets the type of the argument scale. Value: A string object which contains the current scale type.
    ///</field>
    ///<field name = "valueScaleType" type = "String">
    ///Gets the type of the value scale. Value: A string object which contains the current scale type.
    ///</field>
    ///<field name = "qualitativeArgument" type = "String">
    ///Gets the argument of the data point as a text string. Value: A string object, representing a data point's argument.
    ///</field>
    ///<field name = "numericalArgument" type = "Double">
    ///Gets the numerical representation of the data point's argument. Value: A Double value, representing the data point's argument.
    ///</field>
    ///<field name = "dateTimeArgument" type = "DateTime">
    ///Gets the date-time representation of the data point's argument. Value: A date object, representing the point's argument.
    ///</field>
    ///<field name = "numericalValue" type = "Double">
    ///Gets the numerical representation of the data point's value. Value: A Double value, representing the data point's value.
    ///</field>
    ///<field name = "dateTimeValue" type = "DateTime">
    ///Gets the date-time representation of the data point's value. Value: A date object, representing the point's value.
    ///</field>
    ///<field name = "axisX" type = "ASPxClientAxisBase">
    ///Gets the X-axis of the diagram point. Value: An ASPxClientAxisBase descendant, representing the axis of arguments (X-axis).
    ///</field>
    ///<field name = "axisY" type = "ASPxClientAxisBase">
    ///Gets the Y-axis of the diagram point. Value: An ASPxClientAxisBase descendant, representing the axis of values (Y-axis).
    ///</field>
    ///<field name = "pane" type = "ASPxClientXYDiagramPane">
    ///Gets the pane of the diagram point. Value: An ASPxClientXYDiagramPane descendant, representing the pane.
    ///</field>
};
ASPxClientAxisValue = function() {
    ///<summary>
    ///Contains the information about an axis value.
    ///</summary>
    ///<field name = "scaleType" type = "String">
    ///Gets the axis scale type. Value: A String value, specifying the axis scale type.
    ///</field>
    ///<field name = "qualitativeValue" type = "String">
    ///Gets the axis value, if the axis scale type is qualitative. Value: A String value, specifying the axis value.
    ///</field>
    ///<field name = "numericalValue" type = "Double">
    ///Gets the axis value, if the axis scale type is numerical. Value: A Double value, specifying the axis value.
    ///</field>
    ///<field name = "dateTimeValue" type = "DateTime">
    ///Gets the axis value, if the axis scale type is date-time. Value: A DateTime value, specifying the axis value.
    ///</field>
};
ASPxClientControlCoordinates = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ControlCoordinates class.
    ///</summary>
    ///<field name = "pane" type = "ASPxClientXYDiagramPane">
    ///Gets the point's pane. Value: An ASPxClientXYDiagramPane object.
    ///</field>
    ///<field name = "x" type = "Int32">
    ///Gets the point's X-coordinate, in pixels. Value: An integer value, specifying the X-coordinate (in pixels).
    ///</field>
    ///<field name = "y" type = "Int32">
    ///Gets the point's Y-coordinate, in pixels. Value: An integer value, specifying the Y-coordinate (in pixels).
    ///</field>
    ///<field name = "visibility" type = "String">
    ///Gets the point's visibility state. Value: "Visible", "Hidden", or "Undefined".
    ///</field>
};
ASPxClientWebChartElement = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ChartElement class.
    ///</summary>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientWebChartEmptyElement = function() {
    ///<summary>
    ///Represents a base class for chart elements, which are not necessarily required to be present on the client side.
    ///</summary>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientWebChartRequiredElement = function() {
    ///<summary>
    ///Represents a base class for chart elements, which are required to be present on the client side.
    ///</summary>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientWebChartElementNamed = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ChartElementNamed class.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientWebChart = function() {
    ///<summary>
    ///Represents the client-side equivalent of the WebChartControl control.
    ///</summary>
    ///<field name = "chartControl" type = "ASPxClientWebChartControl">
    ///Gets the client-side Chart Control that owns the current chart. Value: An ASPxClientWebChartControl object, to which the chart belongs.
    ///</field>
    ///<field name = "diagram" type = "ASPxClientWebChartElement">
    ///Gets the chart's diagram and provides access to its settings. Value: An ASPxClientRadarDiagram),  that represents the chart's diagram.
    ///</field>
    ///<field name = "series" type = "Array" elementType = "ASPxClientSeries">
    ///Provides access to the chart's collection of series. Value: An array of ASPxClientSeries objects that represent the collection of series.
    ///</field>
    ///<field name = "titles" type = "Array" elementType = "ASPxClientChartTitle">
    ///Provides access to the collection of chart titles. Value: An array of ASPxClientChartTitle objects, that represent the collection of chart titles.
    ///</field>
    ///<field name = "annotations" type = "Array" elementType = "ASPxClientAnnotation">
    ///Provides access to the chart's collection of annotations. Value: An array of ASPxClientAnnotation objects, representing the collection of annotations.
    ///</field>
    ///<field name = "legend" type = "ASPxClientLegend">
    ///Gets the chart's legend and provides access to its settings. Value: An ASPxClientLegend object that represents the chart's legend.
    ///</field>
    ///<field name = "legends" type = "Array" elementType = "ASPxClientLegend">
    ///Returns the collection of legends. Value: An array of ASPxClientLegend objects.
    ///</field>
    ///<field name = "appearanceName" type = "String">
    ///Gets the name of the appearance, which is currently used to draw the chart's elements. Value: A string value that represents the appearance name.
    ///</field>
    ///<field name = "paletteName" type = "String">
    ///Gets the name of the palette currently used to draw the chart's series. Value: A string value that represents the palette name.
    ///</field>
    ///<field name = "showSeriesToolTip" type = "Boolean">
    ///Gets a value indicating whether series tooltips should be shown. Value: true to show tooltips for series; otherwise, false.
    ///</field>
    ///<field name = "showPointToolTip" type = "Boolean">
    ///Gets a value indicating whether point tooltips should be shown. Value: true to show tooltips for series points; otherwise, false.
    ///</field>
    ///<field name = "showCrosshair" type = "Boolean">
    ///Gets a value indicating whether a crosshair cursor should be shown. Value: true to show a crosshair cursor; otherwise, false.
    ///</field>
    ///<field name = "toolTipPosition" type = "ASPxClientToolTipPosition">
    ///Gets a value that contains information on how the tooltip position is defined, for example, relative to a mouse pointer or chart element. Value: An ASPxClientToolTipPosition class descendant that defines the tooltip position type.
    ///</field>
    ///<field name = "toolTipController" type = "ASPxClientToolTipController">
    ///Returns the tooltip controller that shows tooltips for chart elements. Value: An ASPxClientToolTipController object.
    ///</field>
    ///<field name = "crosshairOptions" type = "ASPxClientCrosshairOptions">
    ///Gets the settings for a crosshair cursor concerning its position and appearance on a diagram. Value: An ASPxClientCrosshairOptions object descendant which provides access to crosshair cursor options on a diagram.
    ///</field>
    ///<field name = "cssPostfix" type = "String">
    ///Gets a css postfix for a chart. Value: A string value.
    ///</field>
    ///<field name = "selectionMode" type = "String">
    ///Gets or sets a value which specifies how the chart elements are selected. Value: A String object representing the name of the selection mode.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSimpleDiagram = function() {
    ///<summary>
    ///Represents the client-side equivalent of the SimpleDiagram class.
    ///</summary>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientXYDiagramBase = function() {
    ///<summary>
    ///Represents the base class for all diagram classes, which have X and Y axes.
    ///</summary>
    ///<field name = "axisX" type = "ASPxClientAxisBase">
    ///Gets the X-axis. Value: An ASPxClientAxisBase object which represents the X-axis.
    ///</field>
    ///<field name = "axisY" type = "ASPxClientAxisBase">
    ///Gets the Y-axis. Value: An ASPxClientAxisBase object which represents the Y-axis.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientXYDiagram2D = function() {
    ///<summary>
    ///Represents the client-side equivalent of the XYDiagram2D class.
    ///</summary>
    ///<field name = "secondaryAxesX" type = "Array" elementType = "ASPxClientAxis">
    ///Provides access to a collection of secondary X-axes for a given 2D XY-diagram. Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
    ///</field>
    ///<field name = "secondaryAxesY" type = "Array" elementType = "ASPxClientAxis">
    ///Provides access to a collection of secondary Y-axes for a given 2D XY-diagram. Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
    ///</field>
    ///<field name = "defaultPane" type = "ASPxClientXYDiagramPane">
    ///Provides access to a default pane object. Value: An ASPxClientXYDiagramPane object which represents the default pane of a chart.
    ///</field>
    ///<field name = "panes" type = "Array" elementType = "ASPxClientXYDiagramPane">
    ///Provides access to an array of a diagram's panes. Value: An array of ASPxClientXYDiagramPane objects.
    ///</field>
    ///<field name = "axisX" type = "ASPxClientAxisBase">
    ///Gets the X-axis. Value: An ASPxClientAxisBase object which represents the X-axis.
    ///</field>
    ///<field name = "axisY" type = "ASPxClientAxisBase">
    ///Gets the Y-axis. Value: An ASPxClientAxisBase object which represents the Y-axis.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientXYDiagram = function() {
    ///<summary>
    ///Represents the client-side equivalent of the XYDiagram class.
    ///</summary>
    ///<field name = "rotated" type = "Boolean">
    ///Gets a value indicating whether the diagram is rotated. Value: true if the diagram is rotated; otherwise, false.
    ///</field>
    ///<field name = "secondaryAxesX" type = "Array" elementType = "ASPxClientAxis">
    ///Provides access to a collection of secondary X-axes for a given 2D XY-diagram. Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
    ///</field>
    ///<field name = "secondaryAxesY" type = "Array" elementType = "ASPxClientAxis">
    ///Provides access to a collection of secondary Y-axes for a given 2D XY-diagram. Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
    ///</field>
    ///<field name = "defaultPane" type = "ASPxClientXYDiagramPane">
    ///Provides access to a default pane object. Value: An ASPxClientXYDiagramPane object which represents the default pane of a chart.
    ///</field>
    ///<field name = "panes" type = "Array" elementType = "ASPxClientXYDiagramPane">
    ///Provides access to an array of a diagram's panes. Value: An array of ASPxClientXYDiagramPane objects.
    ///</field>
    ///<field name = "axisX" type = "ASPxClientAxisBase">
    ///Gets the X-axis. Value: An ASPxClientAxisBase object which represents the X-axis.
    ///</field>
    ///<field name = "axisY" type = "ASPxClientAxisBase">
    ///Gets the Y-axis. Value: An ASPxClientAxisBase object which represents the Y-axis.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSwiftPlotDiagram = function() {
    ///<summary>
    ///Represents the client-side equivalent of the SwiftPlotDiagram class.
    ///</summary>
    ///<field name = "secondaryAxesX" type = "Array" elementType = "ASPxClientAxis">
    ///Provides access to a collection of secondary X-axes for a given 2D XY-diagram. Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
    ///</field>
    ///<field name = "secondaryAxesY" type = "Array" elementType = "ASPxClientAxis">
    ///Provides access to a collection of secondary Y-axes for a given 2D XY-diagram. Value: An array of ASPxClientAxis objects, that is a collection of secondary X-axes.
    ///</field>
    ///<field name = "defaultPane" type = "ASPxClientXYDiagramPane">
    ///Provides access to a default pane object. Value: An ASPxClientXYDiagramPane object which represents the default pane of a chart.
    ///</field>
    ///<field name = "panes" type = "Array" elementType = "ASPxClientXYDiagramPane">
    ///Provides access to an array of a diagram's panes. Value: An array of ASPxClientXYDiagramPane objects.
    ///</field>
    ///<field name = "axisX" type = "ASPxClientAxisBase">
    ///Gets the X-axis. Value: An ASPxClientAxisBase object which represents the X-axis.
    ///</field>
    ///<field name = "axisY" type = "ASPxClientAxisBase">
    ///Gets the Y-axis. Value: An ASPxClientAxisBase object which represents the Y-axis.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientXYDiagramPane = function() {
    ///<summary>
    ///Represents the client-side equivalent of the XYDiagramPane class.
    ///</summary>
    ///<field name = "diagram" type = "ASPxClientXYDiagram">
    ///Gets the diagram that owns the current pane object. Value: An ASPxClientXYDiagram object, to which the pane belongs.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientXYDiagram3D = function() {
    ///<summary>
    ///Represents the client-side equivalent of the XYDiagram3D class.
    ///</summary>
    ///<field name = "axisX" type = "ASPxClientAxisBase">
    ///Gets the X-axis. Value: An ASPxClientAxisBase object which represents the X-axis.
    ///</field>
    ///<field name = "axisY" type = "ASPxClientAxisBase">
    ///Gets the Y-axis. Value: An ASPxClientAxisBase object which represents the Y-axis.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientRadarDiagram = function() {
    ///<summary>
    ///Represents the client-side equivalent of the RadarDiagram class.
    ///</summary>
    ///<field name = "axisX" type = "ASPxClientAxisBase">
    ///Gets the X-axis. Value: An ASPxClientAxisBase object which represents the X-axis.
    ///</field>
    ///<field name = "axisY" type = "ASPxClientAxisBase">
    ///Gets the Y-axis. Value: An ASPxClientAxisBase object which represents the Y-axis.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxisBase = function() {
    ///<summary>
    ///Represents the client-side equivalent of the AxisBase class.
    ///</summary>
    ///<field name = "diagram" type = "ASPxClientXYDiagramBase">
    ///Provides access to the XY-diagram which contains the current axis. Value: An ASPxClientXYDiagramBase class descendant.
    ///</field>
    ///<field name = "range" type = "ASPxClientAxisRange">
    ///Provides acess to the range of the axis coordinates. Value: An ASPxClientAxisRange object, which contains the common range settings of the axis coordinates.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxis2D = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Axis2D class.
    ///</summary>
    ///<field name = "axisTitle" type = "ASPxClientAxisTitle">
    ///Provides access to an axis title object. Value: An ASPxClientAxisTitle object which represents the axis title.
    ///</field>
    ///<field name = "strips" type = "Array" elementType = "ASPxClientStrip">
    ///Provides access to the axis strips collection. Value: An array of ASPxClientStrip objects.
    ///</field>
    ///<field name = "constantLines" type = "Array" elementType = "ASPxClientConstantLine">
    ///Provides access to the collection of the axis constant lines. Value: An array of ASPxClientConstantLine objects which represent constant lines that belong to this axis.
    ///</field>
    ///<field name = "diagram" type = "ASPxClientXYDiagramBase">
    ///Provides access to the XY-diagram which contains the current axis. Value: An ASPxClientXYDiagramBase class descendant.
    ///</field>
    ///<field name = "range" type = "ASPxClientAxisRange">
    ///Provides acess to the range of the axis coordinates. Value: An ASPxClientAxisRange object, which contains the common range settings of the axis coordinates.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxis = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Axis class.
    ///</summary>
    ///<field name = "reverse" type = "Boolean">
    ///Gets a value indicating whether the axis is reversed. Value: true if the axis is reversed; otherwise, false.
    ///</field>
    ///<field name = "axisTitle" type = "ASPxClientAxisTitle">
    ///Provides access to an axis title object. Value: An ASPxClientAxisTitle object which represents the axis title.
    ///</field>
    ///<field name = "strips" type = "Array" elementType = "ASPxClientStrip">
    ///Provides access to the axis strips collection. Value: An array of ASPxClientStrip objects.
    ///</field>
    ///<field name = "constantLines" type = "Array" elementType = "ASPxClientConstantLine">
    ///Provides access to the collection of the axis constant lines. Value: An array of ASPxClientConstantLine objects which represent constant lines that belong to this axis.
    ///</field>
    ///<field name = "diagram" type = "ASPxClientXYDiagramBase">
    ///Provides access to the XY-diagram which contains the current axis. Value: An ASPxClientXYDiagramBase class descendant.
    ///</field>
    ///<field name = "range" type = "ASPxClientAxisRange">
    ///Provides acess to the range of the axis coordinates. Value: An ASPxClientAxisRange object, which contains the common range settings of the axis coordinates.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSwiftPlotDiagramAxis = function() {
    ///<summary>
    ///Represents the client-side equivalent of the SwiftPlotDiagramAxis class.
    ///</summary>
    ///<field name = "axisTitle" type = "ASPxClientAxisTitle">
    ///Provides access to an axis title object. Value: An ASPxClientAxisTitle object which represents the axis title.
    ///</field>
    ///<field name = "strips" type = "Array" elementType = "ASPxClientStrip">
    ///Provides access to the axis strips collection. Value: An array of ASPxClientStrip objects.
    ///</field>
    ///<field name = "constantLines" type = "Array" elementType = "ASPxClientConstantLine">
    ///Provides access to the collection of the axis constant lines. Value: An array of ASPxClientConstantLine objects which represent constant lines that belong to this axis.
    ///</field>
    ///<field name = "diagram" type = "ASPxClientXYDiagramBase">
    ///Provides access to the XY-diagram which contains the current axis. Value: An ASPxClientXYDiagramBase class descendant.
    ///</field>
    ///<field name = "range" type = "ASPxClientAxisRange">
    ///Provides acess to the range of the axis coordinates. Value: An ASPxClientAxisRange object, which contains the common range settings of the axis coordinates.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxis3D = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Axis3D class.
    ///</summary>
    ///<field name = "diagram" type = "ASPxClientXYDiagramBase">
    ///Provides access to the XY-diagram which contains the current axis. Value: An ASPxClientXYDiagramBase class descendant.
    ///</field>
    ///<field name = "range" type = "ASPxClientAxisRange">
    ///Provides acess to the range of the axis coordinates. Value: An ASPxClientAxisRange object, which contains the common range settings of the axis coordinates.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientRadarAxis = function() {
    ///<summary>
    ///Represents the client-side equivalent of the RadarAxis class.
    ///</summary>
    ///<field name = "diagram" type = "ASPxClientXYDiagramBase">
    ///Provides access to the XY-diagram which contains the current axis. Value: An ASPxClientXYDiagramBase class descendant.
    ///</field>
    ///<field name = "range" type = "ASPxClientAxisRange">
    ///Provides acess to the range of the axis coordinates. Value: An ASPxClientAxisRange object, which contains the common range settings of the axis coordinates.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxisTitle = function() {
    ///<summary>
    ///Represents the client-side equivalent of the AxisTitle class.
    ///</summary>
    ///<field name = "axis" type = "ASPxClientAxisBase">
    ///Gets the axis to which the axis title belongs. Value: An ASPxClientAxisBase descendant, which identifies the axis.
    ///</field>
    ///<field name = "text" type = "String">
    ///Gets the text of the axis title. Value: A string object which contains the axis title's text.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxisLabelItem = function() {
    ///<summary>
    ///Represents the client-side equivalent of the AxisLabelItem class.
    ///</summary>
    ///<field name = "axis" type = "ASPxClientAxisBase">
    ///Gets the axis to which an axis label item belongs. Value: An ASPxClientAxisBase descendant, which identifies the axis.
    ///</field>
    ///<field name = "text" type = "String">
    ///Gets the text of an axis label item. Value: A string object which contains the axis label item's text.
    ///</field>
    ///<field name = "axisValue" type = "Object">
    ///Gets the axis value to which an axis label item corresponds. Value: An object that specifies the axis value.
    ///</field>
    ///<field name = "axisValueInternal" type = "Double">
    ///Gets the internal representation of the axis value to which an axis label item corresponds. Value: A Double value which specifies the internal representation of the axis value.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAxisRange = function() {
    ///<summary>
    ///Represents the client-side equivalent of the AxisRange class.
    ///</summary>
    ///<field name = "axis" type = "ASPxClientAxisBase">
    ///Gets the axis that owns the current axis range object. Value: An ASPxClientAxisBase object, to which the axis range belongs.
    ///</field>
    ///<field name = "minValue" type = "Object">
    ///Gets the minimum value to display on an axis. Value: An object representing the minimum value of the axis range.
    ///</field>
    ///<field name = "maxValue" type = "Object">
    ///Gets the maximum value to display on an axis. Value: An object representing the maximum value of the axis range.
    ///</field>
    ///<field name = "minValueInternal" type = "Double">
    ///Gets the internal float representation of the range minimum value. Value: A Double value which specifies the internal representation of the range minimum value.
    ///</field>
    ///<field name = "maxValueInternal" type = "Double">
    ///Gets the internal float representation of the range maximum value. Value: A Double value which specifies the internal representation of the range maximum value.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientStrip = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Strip class.
    ///</summary>
    ///<field name = "axis" type = "ASPxClientAxis">
    ///Gets the axis that owns the current strip object. Value: An ASPxClientAxis object, to which the strip belongs.
    ///</field>
    ///<field name = "minValue" type = "Object">
    ///Gets the minimum value of the strip's range. Value: An object that represents the minimum value of the strip's range.
    ///</field>
    ///<field name = "maxValue" type = "Object">
    ///Gets the maximum value of the strip's range. Value: An object that represents the maximum value of the strip's range.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientConstantLine = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ConstantLine class.
    ///</summary>
    ///<field name = "axis" type = "ASPxClientAxis">
    ///Gets the axis that owns the current constant line object. Value: An ASPxClientAxis object, to which the constant line belongs.
    ///</field>
    ///<field name = "value" type = "Object">
    ///Gets the constant line's position along the axis. Value: An object that specifies the constant line's position.
    ///</field>
    ///<field name = "title" type = "String">
    ///Gets the constant line title. Value: A string object, representing the title's text.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSeries = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Series class.
    ///</summary>
    ///<field name = "viewType" type = "String">
    ///Gets a value that specifies the view type of the series. Value: A string object which contains the current view type.
    ///</field>
    ///<field name = "argumentScaleType" type = "String">
    ///Gets a value that specifies the scale type for the argument data of the series' data points. Value: A string object which contains the current scale type.
    ///</field>
    ///<field name = "valueScaleType" type = "String">
    ///Gets a value that specifies the scale type for the value data of the series' data points. Value: A string object which contains the current scale type.
    ///</field>
    ///<field name = "axisX" type = "String">
    ///Gets the X-Axis that is used to plot the current series on the XY-diagram. Value: A string object, which represents the X-axis name.
    ///</field>
    ///<field name = "axisY" type = "String">
    ///Gets the Y-Axis that is used to plot the current series on the XY-diagram. Value: A string object, which represents the Y-axis name.
    ///</field>
    ///<field name = "pane" type = "String">
    ///Gets the pane that is used to plot the current series on the XY-diagram. Value: A string object, which represents the pane's name.
    ///</field>
    ///<field name = "visible" type = "Boolean">
    ///Gets a value indicating whether the series is visible. Value: true if the series is visible; otherwise, false.
    ///</field>
    ///<field name = "toolTipEnabled" type = "Boolean">
    ///Gets a value that specifies whether or not a tooltip is enabled for a chart. Value: true - a tooltip is enabled for a chart; false - a tooltip is disabled.
    ///</field>
    ///<field name = "toolTipText" type = "String">
    ///Gets the text to be displayed within series tooltips. Value: A string value.
    ///</field>
    ///<field name = "toolTipImage" type = "String">
    ///Gets an image to be displayed within series tooltips. Value: A string value.
    ///</field>
    ///<field name = "label" type = "ASPxClientSeriesLabel">
    ///Gets the settings of series labels. Value: An ASPxClientSeriesLabel object, which provides the series label settings.
    ///</field>
    ///<field name = "points" type = "Array" elementType = "ASPxClientSeriesPoint">
    ///Gets the series' collection of data points. Value: An array of ASPxClientSeriesPoint objects, that represent the series' data points.
    ///</field>
    ///<field name = "titles" type = "Array" elementType = "ASPxClientSeriesTitle">
    ///Provides access to the collection of series titles. Value: An array of ASPxClientSeriesTitle objects, that represent the collection of series titles.
    ///</field>
    ///<field name = "indicators" type = "Array" elementType = "ASPxClientIndicator">
    ///Gets the series' collection of indicators. Value: An array of ASPxClientIndicator objects, that belong to the series.
    ///</field>
    ///<field name = "regressionLines" type = "Array" elementType = "ASPxClientRegressionLine">
    ///Provides access to the collection of regression lines. Value: An array of ASPxClientRegressionLine objects which represent regression lines available for the series.
    ///</field>
    ///<field name = "trendLines" type = "Array" elementType = "ASPxClientTrendLine">
    ///Provides access to the collection of trendlines. Value: An array of ASPxClientTrendLine objects, that represent the collection of trendlines.
    ///</field>
    ///<field name = "fibonacciIndicators" type = "Array" elementType = "ASPxClientFibonacciIndicator">
    ///Provides access to the collection of Fibonacci Indicators. Value: An array of ASPxClientFibonacciIndicator objects, that represent the collection of Fibonacci Indicators.
    ///</field>
    ///<field name = "color" type = "String">
    ///Gets the color of a series. Value: A string value.
    ///</field>
    ///<field name = "stackedGroup" type = "String">
    ///Gets a value that defines a group for stacked series. Value: A string value.
    ///</field>
    ///<field name = "crosshairLabelPattern" type = "String">
    ///Gets a string which represents the pattern specifying the text to be displayed within a crosshair label for the current Series  type. Value: A Empty.
    ///</field>
    ///<field name = "groupedElementsPattern" type = "String">
    ///This property is intended for internal use only. Value: A String value.
    ///</field>
    ///<field name = "crosshairValueItems" type = "Array" elementType = "ASPxClientCrosshairValueItem">
    ///Returns a collection of crosshair value items. Value: An array of ASPxClientCrosshairValueItem objects.
    ///</field>
    ///<field name = "actualCrosshairEnabled" type = "Boolean">
    ///Gets a value indicating whether a crosshair cursor is enabled. Value: true if a crosshair cursor is enabled; otherwise, false.
    ///</field>
    ///<field name = "actualCrosshairLabelVisibility" type = "Boolean">
    ///Gets a value indicating whether a crosshair label should be shown for this series. Value: true if crosshair labels are visible; otherwise, false.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSeriesLabel = function() {
    ///<summary>
    ///Represents the client-side equivalent of the SeriesLabelBase class.
    ///</summary>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the series that owns the current series label object. Value: An ASPxClientSeries object, to which the series label belongs.
    ///</field>
    ///<field name = "text" type = "String">
    ///Gets the common text for all series point labels. Value: Returns an empty string object.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSeriesPoint = function() {
    ///<summary>
    ///Represents the client-side equivalent of the SeriesPoint class.
    ///</summary>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the series that owns the current series point object. Value: An ASPxClientSeries object, to which the series point belongs.
    ///</field>
    ///<field name = "argument" type = "Object">
    ///Gets the data point's argument. Value: An object that specifies the data point's argument.
    ///</field>
    ///<field name = "values" type = "Array" elementType = "Object">
    ///Gets the point's data value(s). Value: An array of objects that represent the data value(s) of the series data point.
    ///</field>
    ///<field name = "toolTipText" type = "String">
    ///Gets the text to be displayed within series points tooltips. Value: A string value.
    ///</field>
    ///<field name = "color" type = "String">
    ///Gets the color of a series point. Value: A string value.
    ///</field>
    ///<field name = "percentValue" type = "Double">
    ///Gets the percent value of a series point. Value: A float value.
    ///</field>
    ///<field name = "toolTipHint" type = "String">
    ///Gets a hint that is shown in series points tooltips. Value: A string value.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientLegend = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Legend class.
    ///</summary>
    ///<field name = "useCheckBoxes" type = "Boolean">
    ///Returns a value which determines whether to use checkboxes instead of markers on a chart legend for all legend items. Value: true, if legend checkboxes are shown instead of markers for all legend items; otherwise, false.
    ///</field>
    ///<field name = "customItems" type = "Array" elementType = "ASPxClientCustomLegendItem">
    ///Returns a collection of custom legend items of the legend. Value: A collection of ASPxClientCustomLegendItem objects.
    ///</field>
    ///<field name = "name" type = "String">
    ///Returns the name of the legend. Value: The string value representing the name of the legend.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientTitleBase = function() {
    ///<summary>
    ///Represents the base for ASPxClientSeriesTitle classes.
    ///</summary>
    ///<field name = "lines" type = "Array" elementType = "String">
    ///Gets the lines of text within a title. Value: An array of string values containing the text of a title.
    ///</field>
    ///<field name = "alignment" type = "String">
    ///Gets the alignment of the title. Value: A string value containing the text, which specifies the alignment of a title.
    ///</field>
    ///<field name = "dock" type = "String">
    ///Gets a value that specifies to which edges of a parent element the title should be docked. Value: A string value.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientChartTitle = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ChartTitle class.
    ///</summary>
    ///<field name = "lines" type = "Array" elementType = "String">
    ///Gets the lines of text within a title. Value: An array of string values containing the text of a title.
    ///</field>
    ///<field name = "alignment" type = "String">
    ///Gets the alignment of the title. Value: A string value containing the text, which specifies the alignment of a title.
    ///</field>
    ///<field name = "dock" type = "String">
    ///Gets a value that specifies to which edges of a parent element the title should be docked. Value: A string value.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSeriesTitle = function() {
    ///<summary>
    ///Represents the client-side equivalent of the SeriesTitle class.
    ///</summary>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the series that owns the current title object. Value: An ASPxClientSeries object, to which the series title belongs.
    ///</field>
    ///<field name = "lines" type = "Array" elementType = "String">
    ///Gets the lines of text within a title. Value: An array of string values containing the text of a title.
    ///</field>
    ///<field name = "alignment" type = "String">
    ///Gets the alignment of the title. Value: A string value containing the text, which specifies the alignment of a title.
    ///</field>
    ///<field name = "dock" type = "String">
    ///Gets a value that specifies to which edges of a parent element the title should be docked. Value: A string value.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientIndicator = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Indicator class.
    ///</summary>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientFinancialIndicator = function() {
    ///<summary>
    ///Represents the client-side equivalent of the FinancialIndicator class.
    ///</summary>
    ///<field name = "point1" type = "ASPxClientFinancialIndicatorPoint">
    ///Gets the first point of the financial indicator. Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's first point.
    ///</field>
    ///<field name = "point2" type = "ASPxClientFinancialIndicatorPoint">
    ///Gets the second point of the financial indicator. Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's second point.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientTrendLine = function() {
    ///<summary>
    ///Represents the client-side equivalent of the TrendLine class.
    ///</summary>
    ///<field name = "point1" type = "ASPxClientFinancialIndicatorPoint">
    ///Gets the first point of the financial indicator. Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's first point.
    ///</field>
    ///<field name = "point2" type = "ASPxClientFinancialIndicatorPoint">
    ///Gets the second point of the financial indicator. Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's second point.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientFibonacciIndicator = function() {
    ///<summary>
    ///Represents the client-side equivalent of the FibonacciIndicator class.
    ///</summary>
    ///<field name = "point1" type = "ASPxClientFinancialIndicatorPoint">
    ///Gets the first point of the financial indicator. Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's first point.
    ///</field>
    ///<field name = "point2" type = "ASPxClientFinancialIndicatorPoint">
    ///Gets the second point of the financial indicator. Value: An ASPxClientFinancialIndicatorPoint object, which represents a financial indicator's second point.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientFinancialIndicatorPoint = function() {
    ///<summary>
    ///Represents the client-side equivalent of the FinancialIndicatorPoint class.
    ///</summary>
    ///<field name = "financialIndicator" type = "ASPxClientFinancialIndicator">
    ///Gets the financial indicator that owns the current financial indicator point. Value: An ASPxClientFinancialIndicator object, to which the point belongs.
    ///</field>
    ///<field name = "argument" type = "Object">
    ///Gets the argument of the financial indicator's point. Value: An object that specifies the point argument.
    ///</field>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value, indicating how the value of a financial indicator's point is obtained. Value: A string value, which indicates how to obtain a financial indicator point's value.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSingleLevelIndicator = function() {
    ///<summary>
    ///The client-side equivalent of the SingleLevelIndicator class.
    ///</summary>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value specifying the value level to which the single-level indicator corresponds. Value: A string value.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientRegressionLine = function() {
    ///<summary>
    ///Represents the client-side equivalent of the RegressionLine class.
    ///</summary>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value specifying the value level to which the single-level indicator corresponds. Value: A string value.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientMovingAverage = function() {
    ///<summary>
    ///The client-side equivalent of the MovingAverage class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the moving average. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "kind" type = "String">
    ///Gets a value specifying whether to display a Moving Average, Envelope, or both. Value: A string value.
    ///</field>
    ///<field name = "envelopePercent" type = "Double">
    ///Gets a value specifying the Envelope percent. Value: A double value which specifies the Envelope percent.
    ///</field>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value specifying the value level to which the single-level indicator corresponds. Value: A string value.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientSimpleMovingAverage = function() {
    ///<summary>
    ///The client-side equivalent of the SimpleMovingAverage class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the moving average. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "kind" type = "String">
    ///Gets a value specifying whether to display a Moving Average, Envelope, or both. Value: A string value.
    ///</field>
    ///<field name = "envelopePercent" type = "Double">
    ///Gets a value specifying the Envelope percent. Value: A double value which specifies the Envelope percent.
    ///</field>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value specifying the value level to which the single-level indicator corresponds. Value: A string value.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientExponentialMovingAverage = function() {
    ///<summary>
    ///The client-side equivalent of the ExponentialMovingAverage class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the moving average. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "kind" type = "String">
    ///Gets a value specifying whether to display a Moving Average, Envelope, or both. Value: A string value.
    ///</field>
    ///<field name = "envelopePercent" type = "Double">
    ///Gets a value specifying the Envelope percent. Value: A double value which specifies the Envelope percent.
    ///</field>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value specifying the value level to which the single-level indicator corresponds. Value: A string value.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientWeightedMovingAverage = function() {
    ///<summary>
    ///The client-side equivalent of the WeightedMovingAverage class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the moving average. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "kind" type = "String">
    ///Gets a value specifying whether to display a Moving Average, Envelope, or both. Value: A string value.
    ///</field>
    ///<field name = "envelopePercent" type = "Double">
    ///Gets a value specifying the Envelope percent. Value: A double value which specifies the Envelope percent.
    ///</field>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value specifying the value level to which the single-level indicator corresponds. Value: A string value.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientTriangularMovingAverage = function() {
    ///<summary>
    ///The client-side equivalent of the TriangularMovingAverage class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the moving average. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "kind" type = "String">
    ///Gets a value specifying whether to display a Moving Average, Envelope, or both. Value: A string value.
    ///</field>
    ///<field name = "envelopePercent" type = "Double">
    ///Gets a value specifying the Envelope percent. Value: A double value which specifies the Envelope percent.
    ///</field>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value specifying the value level to which the single-level indicator corresponds. Value: A string value.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientTripleExponentialMovingAverageTema = function() {
    ///<summary>
    ///Represents the client-side equivalent of the TripleExponentialMovingAverageTema class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the moving average. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "kind" type = "String">
    ///Gets a value specifying whether to display a Moving Average, Envelope, or both. Value: A string value.
    ///</field>
    ///<field name = "envelopePercent" type = "Double">
    ///Gets a value specifying the Envelope percent. Value: A double value which specifies the Envelope percent.
    ///</field>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value specifying the value level to which the single-level indicator corresponds. Value: A string value.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientBollingerBands = function() {
    ///<summary>
    ///Represents the client-side equivalent of the BollingerBands class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the indicator values. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value, indicating whose series point values are used to calculate the indicator's values. Value: A string value, which indicates which series point value should be used to calculate indicator values.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientMedianPrice = function() {
    ///<summary>
    ///Represents the client-side equivalent of the MedianPrice class.
    ///</summary>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientTypicalPrice = function() {
    ///<summary>
    ///Represents the client-side equivalent of the TypicalPrice class.
    ///</summary>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientWeightedClose = function() {
    ///<summary>
    ///Represents the client-side equivalent of the WeightedClose class.
    ///</summary>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxSeparatePaneIndicator = function() {
    ///<summary>
    ///Represents the client-side equivalent of the SeparatePaneIndicator class.
    ///</summary>
    ///<field name = "axisY" type = "String">
    ///Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram. Value: A string value specifying the Y-axis name.
    ///</field>
    ///<field name = "pane" type = "String">
    ///Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram. Value: A string that is the name of a pane.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAverageTrueRange = function() {
    ///<summary>
    ///Represents the client-side equivalent of the AverageTrueRange class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the indicator values. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "axisY" type = "String">
    ///Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram. Value: A string value specifying the Y-axis name.
    ///</field>
    ///<field name = "pane" type = "String">
    ///Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram. Value: A string that is the name of a pane.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientChaikinsVolatility = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ChaikinsVolatility class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the indicator values. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "axisY" type = "String">
    ///Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram. Value: A string value specifying the Y-axis name.
    ///</field>
    ///<field name = "pane" type = "String">
    ///Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram. Value: A string that is the name of a pane.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientCommodityChannelIndex = function() {
    ///<summary>
    ///Represents the client-side equivalent of the CommodityChannelIndex class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the indicator values. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "axisY" type = "String">
    ///Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram. Value: A string value specifying the Y-axis name.
    ///</field>
    ///<field name = "pane" type = "String">
    ///Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram. Value: A string that is the name of a pane.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientDetrendedPriceOscillator = function() {
    ///<summary>
    ///Represents the client-side equivalent of the DetrendedPriceOscillator class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the indicator values. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value, indicating whose series point values are used to calculate the indicator's values. Value: A string value, which indicates which series point value should be used to calculate indicator values.
    ///</field>
    ///<field name = "axisY" type = "String">
    ///Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram. Value: A string value specifying the Y-axis name.
    ///</field>
    ///<field name = "pane" type = "String">
    ///Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram. Value: A string that is the name of a pane.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientMassIndex = function() {
    ///<summary>
    ///Represents the client-side equivalent of the MassIndex class.
    ///</summary>
    ///<field name = "movingAveragePointsCount" type = "Int32">
    ///Returns the count of points used to calculate the exponential moving average (EMA). Value: An integer value, specifying the count of points used to calculate EMA.
    ///</field>
    ///<field name = "sumPointsCount" type = "Int32">
    ///Returns the count of summable values. Value: An integer value specifying the count of summable ratios.
    ///</field>
    ///<field name = "axisY" type = "String">
    ///Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram. Value: A string value specifying the Y-axis name.
    ///</field>
    ///<field name = "pane" type = "String">
    ///Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram. Value: A string that is the name of a pane.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientMovingAverageConvergenceDivergence = function() {
    ///<summary>
    ///Represents the client-side equivalent of the MovingAverageConvergenceDivergence class.
    ///</summary>
    ///<field name = "shortPeriod" type = "Int32">
    ///Returns the short period value required to calculate the indicator. Value: An integer value specifying the short period value.
    ///</field>
    ///<field name = "longPeriod" type = "Int32">
    ///Returns the long period value required to calculate the indicator. Value: An integer value specifying the long period.
    ///</field>
    ///<field name = "signalSmoothingPeriod" type = "Int32">
    ///Returns the smoothing period value required to calculate the indicator. Value: An integer value specifying the smoothing period value.
    ///</field>
    ///<field name = "axisY" type = "String">
    ///Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram. Value: A string value specifying the Y-axis name.
    ///</field>
    ///<field name = "pane" type = "String">
    ///Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram. Value: A string that is the name of a pane.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientRateOfChange = function() {
    ///<summary>
    ///Represents the client-side equivalent of the RateOfChange class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the indicator values. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value, indicating whose series point values are used to calculate the indicator's values. Value: A string value, which indicates which series point value should be used to calculate indicator values.
    ///</field>
    ///<field name = "axisY" type = "String">
    ///Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram. Value: A string value specifying the Y-axis name.
    ///</field>
    ///<field name = "pane" type = "String">
    ///Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram. Value: A string that is the name of a pane.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientRelativeStrengthIndex = function() {
    ///<summary>
    ///Represents the client-side equivalent of the RelativeStrengthIndex class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the indicator values. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value, indicating whose series point values are used to calculate the indicator's values. Value: A string value, which indicates which series point value should be used to calculate indicator values.
    ///</field>
    ///<field name = "axisY" type = "String">
    ///Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram. Value: A string value specifying the Y-axis name.
    ///</field>
    ///<field name = "pane" type = "String">
    ///Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram. Value: A string that is the name of a pane.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientStandardDeviation = function() {
    ///<summary>
    ///Represents the client-side equivalent of the StandardDeviation class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the indicator values. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value, indicating whose series point values are used to calculate the indicator's values. Value: A string value, which indicates which series point value should be used to calculate indicator values.
    ///</field>
    ///<field name = "axisY" type = "String">
    ///Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram. Value: A string value specifying the Y-axis name.
    ///</field>
    ///<field name = "pane" type = "String">
    ///Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram. Value: A string that is the name of a pane.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientTripleExponentialMovingAverageTrix = function() {
    ///<summary>
    ///Represents the client-side equivalent of the TripleExponentialMovingAverageTrix class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the indicator values. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "valueLevel" type = "String">
    ///Gets a value, indicating whose series point values are used to calculate the indicator's values. Value: A string value, which indicates which series point value should be used to calculate indicator values.
    ///</field>
    ///<field name = "axisY" type = "String">
    ///Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram. Value: A string value specifying the Y-axis name.
    ///</field>
    ///<field name = "pane" type = "String">
    ///Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram. Value: A string that is the name of a pane.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientWilliamsR = function() {
    ///<summary>
    ///Represents the client-side equivalent of the WilliamsR class.
    ///</summary>
    ///<field name = "pointsCount" type = "Int32">
    ///Gets the number of data points used to calculate the indicator values. Value: An integer value, specifying the number of points.
    ///</field>
    ///<field name = "axisY" type = "String">
    ///Returns the name of the Y-axis that is used to plot the current indicator on a ASPxClientXYDiagram. Value: A string value specifying the Y-axis name.
    ///</field>
    ///<field name = "pane" type = "String">
    ///Returns the name of a pane, used to plot the separate pane indicator on an XYDiagram. Value: A string that is the name of a pane.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientFixedValueErrorBars = function() {
    ///<summary>
    ///Represents the client-side equivalent of the FixedValueErrorBars class.
    ///</summary>
    ///<field name = "positiveError" type = "Double">
    ///Gets or sets the fixed positive error value. Value: A double value specifying the positive error value.
    ///</field>
    ///<field name = "negativeError" type = "Double">
    ///Returns the fixed negative error value. Value: A double value specifying the negative error value.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientPercentageErrorBars = function() {
    ///<summary>
    ///Represents the client-side equivalent of the PercentageErrorBars class.
    ///</summary>
    ///<field name = "percent" type = "Double">
    ///Returns the value specifying the percentage of error values of series point values. Value: A double value specifying the percentage. Values less than or equal to 0 are not allowed.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientStandardDeviationErrorBars = function() {
    ///<summary>
    ///Represents the client-side equivalent of the StandardDeviationErrorBars class.
    ///</summary>
    ///<field name = "multiplier" type = "Double">
    ///Returns the multiplier on which the standard deviation value is multiplied before display. Value: A double value specifying the multiplier. Values less than 0 are not allowed.
    ///</field>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientStandardErrorBars = function() {
    ///<summary>
    ///Represents the client-side equivalent of the StandardErrorBars class.
    ///</summary>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientDataSourceBasedErrorBars = function() {
    ///<summary>
    ///Represents the client-side equivalent of the DataSourceBasedErrorBars class.
    ///</summary>
    ///<field name = "series" type = "ASPxClientSeries">
    ///Gets the indicator's associated series. Value: An ASPxClientSeries object.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientAnnotation = function() {
    ///<summary>
    ///Represents the client-side equivalent of the Annotation class.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientTextAnnotation = function() {
    ///<summary>
    ///Represents the client-side equivalent of the TextAnnotation class.
    ///</summary>
    ///<field name = "lines" type = "Array" elementType = "String">
    ///Gets the lines of text within an annotation. Value: An array of string values containing the text of a title.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientImageAnnotation = function() {
    ///<summary>
    ///Represents the client-side equivalent of the ImageAnnotation class.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientCrosshairValueItem = function() {
    ///<summary>
    ///The client-side equivalent of the CrosshairValueItem class.
    ///</summary>
    ///<field name = "value" type = "Double">
    ///Gets the value that is displayed in a crosshair label. Value: A float value.
    ///</field>
    ///<field name = "pointIndex" type = "Int32">
    ///Gets an index of a point for which this crosshair value item is displayed. Value: An integer value.
    ///</field>
};
ASPxClientToolTipController = function() {
    ///<summary>
    ///The client-side equivalent of the ChartToolTipController class.
    ///</summary>
    ///<field name = "showImage" type = "Boolean">
    ///Gets a value indicating whether an image should be shown in tooltips. Value: true to show an image in tooltips; otherwise, false.
    ///</field>
    ///<field name = "showText" type = "Boolean">
    ///Gets a value indicating whether it is necessary to show text in tooltips. Value: true to show text in tooltips; otherwise, false.
    ///</field>
    ///<field name = "imagePosition" type = "String">
    ///Gets a value that defines the position of an image within a tooltip. Value: A string value.
    ///</field>
    ///<field name = "openMode" type = "String">
    ///Gets a value that defines when tooltips should be invoked. Value: A string value.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientToolTipPosition = function() {
    ///<summary>
    ///The client-side equivalent of the ToolTipPosition class.
    ///</summary>
};
ASPxClientToolTipRelativePosition = function() {
    ///<summary>
    ///The client-side equivalent of the ToolTipRelativePosition class.
    ///</summary>
    ///<field name = "offsetX" type = "Int32">
    ///Gets the horizontal offset of a tooltip. Value: An integer value.
    ///</field>
    ///<field name = "offsetY" type = "Int32">
    ///Gets the vertical offset of a tooltip. Value: An integer value.
    ///</field>
};
ASPxClientToolTipFreePosition = function() {
    ///<summary>
    ///The client-side equivalent of the ToolTipFreePosition class.
    ///</summary>
    ///<field name = "offsetX" type = "Int32">
    ///Gets the horizontal offset of a tooltip. Value: An integer value.
    ///</field>
    ///<field name = "offsetY" type = "Int32">
    ///Gets the vertical offset of a tooltip. Value: An integer value.
    ///</field>
    ///<field name = "paneID" type = "Int32">
    ///Gets the ID of a pane. Value: An integer value.
    ///</field>
    ///<field name = "dockPosition" type = "String">
    ///Gets an object containing settings that define how a tooltip should be docked. Value: A string value.
    ///</field>
};
ASPxClientCrosshairPosition = function() {
    ///<summary>
    ///The client-side equivalent of the CrosshairLabelPosition class.
    ///</summary>
    ///<field name = "offsetX" type = "Int32">
    ///Gets the horizontal offset of a crosshair cursor. Value: An integer value that is the X-offset.
    ///</field>
    ///<field name = "offsetY" type = "Int32">
    ///Gets the vertical offset of a crosshair cursor. Value: An integer value that is the Y-offset.
    ///</field>
};
ASPxClientCrosshairMousePosition = function() {
    ///<summary>
    ///The client-side equivalent of the CrosshairMousePosition class.
    ///</summary>
    ///<field name = "offsetX" type = "Int32">
    ///Gets the horizontal offset of a crosshair cursor. Value: An integer value that is the X-offset.
    ///</field>
    ///<field name = "offsetY" type = "Int32">
    ///Gets the vertical offset of a crosshair cursor. Value: An integer value that is the Y-offset.
    ///</field>
};
ASPxClientCrosshairFreePosition = function() {
    ///<summary>
    ///The client-side equivalent of the CrosshairFreePosition class.
    ///</summary>
    ///<field name = "paneID" type = "Int32">
    ///Gets a Pane's ID when the crosshair cursor is in the free position mode. Value: An integer value that is the pane's ID.
    ///</field>
    ///<field name = "dockPosition" type = "String">
    ///Gets a string containing information on a crosshair label's dock position when the crosshair cursor is in the free position mode. Value: A string value containing information on a crosshair label's dock position.
    ///</field>
    ///<field name = "offsetX" type = "Int32">
    ///Gets the horizontal offset of a crosshair cursor. Value: An integer value that is the X-offset.
    ///</field>
    ///<field name = "offsetY" type = "Int32">
    ///Gets the vertical offset of a crosshair cursor. Value: An integer value that is the Y-offset.
    ///</field>
};
ASPxClientLineStyle = function() {
    ///<summary>
    ///Defines line style settings.
    ///</summary>
    ///<field name = "dashStyle" type = "String">
    ///Gets the dash style used to paint the line. Value: A string value that contains information about the style used to paint the line.
    ///</field>
    ///<field name = "thickness" type = "Int32">
    ///Gets the thickness that corresponds to the value of the current ASPxClientLineStyle object. Value: An integer value which specifies the thickness, in pixels.
    ///</field>
    ///<field name = "lineJoin" type = "String">
    ///Returns the join style for the ends of consecutive lines. Value: A string representing the name of the line join type.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientCrosshairOptions = function() {
    ///<summary>
    ///The client-side equivalent of the CrosshairOptions class.
    ///</summary>
    ///<field name = "showAxisXLabels" type = "Boolean">
    ///Gets a value indicating whether it is necessary to show a crosshair label for the X-axis. Value: true to show a crosshair label for the X-axis; otherwise, false.
    ///</field>
    ///<field name = "showAxisYLabels" type = "Boolean">
    ///Gets a value indicating whether it is necessary to show a crosshair label for the Y-axis. Value: true to show the crosshair label for the Y-axis; otherwise, false.
    ///</field>
    ///<field name = "showCrosshairLabels" type = "Boolean">
    ///Gets a value that defines whether a crosshair label of a series point indicated by a crosshair cursor is shown on a diagram. Value: true if a crosshair label indicated by a crosshair cursor is shown on a diagram; otherwise, false.
    ///</field>
    ///<field name = "showArgumentLine" type = "Boolean">
    ///Gets a value that indicates whether a crosshair cursor argument line is shown for a series point on a diagram. Value: true if a crosshair cursor argument line is displayed on a diagram;  otherwise, false.
    ///</field>
    ///<field name = "showValueLine" type = "Boolean">
    ///Specifies whether to show a value line of a series point indicated by a crosshair cursor on a diagram. Value: true to display a value line indicated by a crosshair cursor on a diagram; otherwise, false.
    ///</field>
    ///<field name = "showOnlyInFocusedPane" type = "Boolean">
    ///Gets a value that specifies whether to show a crosshair cursor in a focused pane only. Value: true to display a crosshair cursor in a focused pane; otherwise, false.
    ///</field>
    ///<field name = "snapMode" type = "String">
    ///Specifies the current snap mode of a crosshair cursor. Value: A string value.
    ///</field>
    ///<field name = "crosshairLabelMode" type = "String">
    ///Specifies the way in which the crosshair label is shown for a series on a diagram. Value: A string value that specifies how the crosshair label is shown for a series.
    ///</field>
    ///<field name = "showGroupHeaders" type = "Boolean">
    ///Gets a value that indicates whether to show a header for each series group in crosshair cursor labels. Value: true, to show a group header in crosshair cursor labels; otherwise, false.
    ///</field>
    ///<field name = "groupHeaderPattern" type = "String">
    ///Gets a string which represents the  pattern specifying the group header text to be displayed within the crosshair label. Value: A String, which represents the group header's pattern.
    ///</field>
    ///<field name = "showOutOfRangePoints" type = "Boolean">
    ///Gets a value that specifies whether the Crosshair cursor should show points that are out of visual range. Value: true if the out of visual range points should be shown in the Crosshair label; otherwise false.
    ///</field>
    ///<field name = "valueSelectionMode" type = "String">
    ///Gets the identifier specifying the behavior of the selection of points shown in the crosshair label. Value: The selection behavior identifier.
    ///</field>
    ///<field name = "argumentLineColor" type = "String">
    ///Gets the color of a crosshair argument line. Value: A String value, specifying the color of a crosshair argument line.
    ///</field>
    ///<field name = "valueLineColor" type = "String">
    ///Gets the color of a crosshair value line. Value: A String value, specifying the color of a crosshair value line.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientChartPrintOptions = function() {
    ///<summary>
    ///The chart print options storage.
    ///</summary>
};
ASPxClientCustomLegendItem = function() {
    ///<summary>
    ///Represents the client-side equivalent of the CustomLegendItem class.
    ///</summary>
    ///<field name = "text" type = "String">
    ///Returns the text displayed by the custom legend item. Value: A string value that specifies legend item text.
    ///</field>
    ///<field name = "name" type = "String">
    ///Gets the name of the chart element. Value: A string object representing the name of the chart element.
    ///</field>
    ///<field name = "chart" type = "ASPxClientWebChart">
    ///Gets the chart that owns the current chart element. Value: An ASPxClientWebChart object, to which the chart element belongs.
    ///</field>
};
ASPxClientDocumentViewer = function() {
    ///<summary>
    ///The client-side equivalent of the ASPxDocumentViewer control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientDocumentViewer.
    ///</field>
    ///<field name = "ToolbarItemValueChanged" type = "ASPxClientEvent">
    ///Occurs when the value of an item within the Document Viewer's report toolbar is changed.
    ///</field>
    ///<field name = "ToolbarItemClick" type = "ASPxClientEvent">
    ///Occurs when an item within the Document Viewer's report toolbar is clicked.
    ///</field>
    ///<field name = "PageLoad" type = "ASPxClientEvent">
    ///Occurs on the client side when a report page is loaded into this ASPxClientDocumentViewer instance.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientToolbarItemValueChangedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ToolbarItemValueChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///A Object that is the event source.
    ///</param>
    ///<param name = "e" type = "ASPxClientToolbarItemValueChangedEventArgs">
    ///An ASPxClientToolbarItemValueChangedEventArgs object, containing the event arguments.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientToolbarItemValueChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the ItemValueChanged event.
    ///</summary>
    ///<field name = "item" type = "ASPxClientMenuItem">
    ///Gets the menu item object related to the event. Value: An ASPxClientMenuItem object, manipulations on which forced the event to be raised.
    ///</field>
    ///<field name = "editor" type = "ASPxClientControl">
    ///Provides access to the toolbar's value editor on the client. Value: An ASPxClientControl descendant.
    ///</field>
    ///<field name = "processOnServer" type = "Boolean">
    ///Gets or sets a value that specifies whether the event should be finally processed on the server side. Value: true to process the event on the server side; false to completely handle it on the client side.
    ///</field>
};
ASPxClientQueryBuilder = function() {
    ///<summary>
    ///The client-side equivalent of the ASPxQueryBuilder control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientQueryBuilder.
    ///</field>
    ///<field name = "CustomizeToolbarActions" type = "ASPxClientEvent">
    ///Enables you to customize the menu actions of a Query Builder.
    ///</field>
    ///<field name = "SaveCommandExecute" type = "ASPxClientEvent">
    ///Occurs when executing the Save command on the client.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientQueryBuilderSaveCommandExecuteEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the SaveCommandExecute event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientQueryBuilderSaveCommandExecuteEventArgs">
    ///An ASPxClientQueryBuilderSaveCommandExecuteEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientQueryBuilderSaveCommandExecuteEventArgs = function() {
    ///<summary>
    ///Provides data for the SaveCommandExecute event.
    ///</summary>
    ///<field name = "handled" type = "Boolean">
    ///Specifies whether or not the event was handled. Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
    ///</field>
};
ASPxClientQueryBuilderCustomizeToolbarActionsEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomizeToolbarActions event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientCustomizeMenuActionsEventArgs">
    ///An ASPxClientCustomizeMenuActionsEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner = function() {
    ///<summary>
    ///The client-side equivalent of the Web Report Designer control.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientReportDesigner.
    ///</field>
    ///<field name = "SaveCommandExecute" type = "ASPxClientEvent">
    ///Occurs when executing the Save command on the client.
    ///</field>
    ///<field name = "CustomizeMenuActions" type = "ASPxClientEvent">
    ///Enables you to customize the menu actions of the Web Report Designer.
    ///</field>
    ///<field name = "CustomizeParameterEditors" type = "ASPxClientEvent">
    ///Occurs each time a standard editor is created for a report parameter based on a parameter type.
    ///</field>
    ///<field name = "CustomizeParameterLookUpSource" type = "ASPxClientEvent">
    ///Occurs each time a look-up editor is created for a report parameter.
    ///</field>
    ///<field name = "ExitDesigner" type = "ASPxClientEvent">
    ///Occurs on the client side when the Report Designer is being closed.
    ///</field>
    ///<field name = "ReportSaving" type = "ASPxClientEvent">
    ///Occurs when a report is about to be saved in the Web Report Designer.
    ///</field>
    ///<field name = "ReportSaved" type = "ASPxClientEvent">
    ///Occurs when a report has been saved in the Web Report Designer.
    ///</field>
    ///<field name = "ReportOpening" type = "ASPxClientEvent">
    ///Occurs when a report is about to be opened in the Web Report Designer.
    ///</field>
    ///<field name = "ReportOpened" type = "ASPxClientEvent">
    ///Occurs when a report has been opened in the Web Report Designer.
    ///</field>
    ///<field name = "OnServerError" type = "ASPxClientEvent">
    ///Occurs on the client each time a server-side error raises.
    ///</field>
    ///<field name = "ComponentAdded" type = "ASPxClientEvent">
    ///Occurs after a component has been added to the report currently being edited in the Web Report Designer.
    ///</field>
    ///<field name = "CustomizeElements" type = "ASPxClientEvent">
    ///Enables you to customize UI elements of the Web Report Designer.
    ///</field>
    ///<field name = "CustomizeSaveDialog" type = "ASPxClientEvent">
    ///Enables you to customize the Save dialog of the Web Report Designer.
    ///</field>
    ///<field name = "CustomizeSaveAsDialog" type = "ASPxClientEvent">
    ///Enables you to customize the Save Report dialog of the Web Report Designer.
    ///</field>
    ///<field name = "CustomizeOpenDialog" type = "ASPxClientEvent">
    ///Enables you to customize the Open Report dialog of the Web Report Designer.
    ///</field>
    ///<field name = "CustomizeToolbox" type = "ASPxClientEvent">
    ///Enables you to customize the Toolbox of the Web Report Designer.
    ///</field>
    ///<field name = "PreviewDocumentReady" type = "ASPxClientEvent">
    ///Occurs after a report has been switched to Print Preview.
    ///</field>
    ///<field name = "PreviewEditingFieldChanged" type = "ASPxClientEvent">
    ///Occurs each time a value of an editing field changes in Print Preview.
    ///</field>
    ///<field name = "PreviewCustomizeElements" type = "ASPxClientEvent">
    ///Enables you to customize UI elements of a Document Viewer built into a Web Report Designer.
    ///</field>
    ///<field name = "PreviewCustomizeMenuActions" type = "ASPxClientEvent">
    ///Enables you to customize the actions of a Document Viewer built into a Web Report Designer.
    ///</field>
    ///<field name = "PreviewClick" type = "ASPxClientEvent">
    ///Occurs when the left mouse button has been clicked over a report document in Print Preview.
    ///</field>
    ///<field name = "PreviewParametersReset" type = "ASPxClientEvent">
    ///Occurs after report parameter values have been reset to their default values in Print Preview.
    ///</field>
    ///<field name = "PreviewParametersSubmitted" type = "ASPxClientEvent">
    ///Occurs after report parameter values have been submitted in Print Preview.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientReportDesignerSaveCommandExecuteEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the SaveCommandExecute event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientReportDesignerSaveCommandExecuteEventArgs">
    ///An ASPxClientReportDesignerSaveCommandExecuteEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerSaveCommandExecuteEventArgs = function() {
    ///<summary>
    ///Provides data for the SaveCommandExecute event.
    ///</summary>
    ///<field name = "handled" type = "Boolean">
    ///Specifies whether or not the event was handled. Value: true if the event was handled and default processing should not occur; false if the event should be handled using default processing.
    ///</field>
};
ASPxClientReportDesignerExitDesignerEventArgs = function() {
    ///<summary>
    ///Provides data for the ExitDesigner event.
    ///</summary>
};
ASPxClientReportDesignerDialogEventArgs = function() {
    ///<summary>
    ///Provides data for the events related to opening and saving reports in the Web Report Designer.
    ///</summary>
    ///<field name = "Url" type = "String">
    ///Specifies the URL of the report currently being processed. Value: A string that specifies the URL of the report currently being processed.
    ///</field>
    ///<field name = "Report" type = "Object">
    ///Specifies the report currently being processed. Value: An object that specifies the report currently being processed.
    ///</field>
    ///<field name = "Cancel" type = "Boolean">
    ///Specifies whether or not the operation performed with a report should be canceled. Value: true, if the operation should be canceled; otherwise, false.
    ///</field>
};
ASPxClientReportDesignerErrorEventArgs = function() {
    ///<summary>
    ///Provides data for the OnServerError event.
    ///</summary>
    ///<field name = "Error" type = "Object">
    ///Provides access to information about a server-side error. Value: An object that provides information about an error.
    ///</field>
};
ASPxClientReportDesignerComponentAddedEventArgs = function() {
    ///<summary>
    ///Provides data for the ComponentAdded event.
    ///</summary>
    ///<field name = "Model" type = "Object">
    ///Gets the model of a component that has been added to a report. Value: An object that specifies the component model.
    ///</field>
    ///<field name = "Parent" type = "Object">
    ///Gets the parent of a component that has been added to a report. Value: An object that specifies the component parent.
    ///</field>
};
ASPxClientReportDesignerCustomizeSaveDialogEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomizeSaveDialog event.
    ///</summary>
    ///<field name = "Popup" type = "ASPxDesignerSaveDialog">
    ///Provides access to the Save dialog. Value: An object that specifies the Save dialog.
    ///</field>
};
ASPxClientReportDesignerCustomizeSaveAsDialogEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomizeSaveAsDialog event.
    ///</summary>
    ///<field name = "Popup" type = "ASPxDesignerSaveAsDialog">
    ///Provides access to the Save Report dialog. Value: An object that specifies the  Save Report dialog.
    ///</field>
};
ASPxClientReportDesignerCustomizeOpenDialogEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomizeOpenDialog event.
    ///</summary>
    ///<field name = "Popup" type = "ASPxDesignerOpenDialog">
    ///Provides access to the Open Report dialog. Value: An object that specifies the Open Report dialog.
    ///</field>
};
ASPxClientReportDesignerCustomizeToolboxEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomizeToolbox event.
    ///</summary>
    ///<field name = "ControlsFactory" type = "ASPxDesignerControlsFactory">
    ///Provides information about all controls available in the Toolbox. Value: An ASPxDesignerControlsFactory object that provides information about toolbox controls.
    ///</field>
};
ASPxClientReportDesignerCustomizeMenuActionsEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomizeMenuActions event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientCustomizeMenuActionsEventArgs">
    ///An ASPxClientCustomizeMenuActionsEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerCustomizeParameterLookUpSourceEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomizeParameterLookUpSource event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientCustomizeParameterLookUpSourceEventArgs">
    ///An ASPxClientCustomizeParameterLookUpSourceEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerCustomizeParameterEditorsEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomizeParameterEditors event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientCustomizeParameterEditorsEventArgs">
    ///An ASPxClientCustomizeParameterEditorsEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerCustomizeElementsEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomizeElements event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientCustomizeElementsEventArgs">
    ///An ASPxClientCustomizeElementsEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerExitDesignerEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ExitDesigner event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientReportDesignerExitDesignerEventArgs">
    ///An ASPxClientReportDesignerExitDesignerEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerReportSavingEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ReportSaving event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientReportDesignerDialogEventArgs">
    ///An ASPxClientReportDesignerDialogEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerReportSavedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ReportSaved event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientReportDesignerDialogEventArgs">
    ///An ASPxClientReportDesignerDialogEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerReportOpeningEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ReportOpening event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientReportDesignerDialogEventArgs">
    ///An ASPxClientReportDesignerDialogEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerReportOpenedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ReportOpened event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientReportDesignerDialogEventArgs">
    ///An ASPxClientReportDesignerDialogEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerErrorEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the OnServerError event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientReportDesignerErrorEventArgs">
    ///An ASPxClientReportDesignerErrorEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerComponentAddedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the ComponentAdded event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientReportDesignerComponentAddedEventArgs">
    ///An ASPxClientReportDesignerComponentAddedEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerCustomizeSaveDialogEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomizeSaveDialog event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientReportDesignerCustomizeSaveDialogEventArgs">
    ///An ASPxClientReportDesignerCustomizeSaveDialogEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerCustomizeSaveAsDialogEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomizeSaveAsDialog event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientReportDesignerCustomizeSaveAsDialogEventArgs">
    ///An ASPxClientReportDesignerCustomizeSaveAsDialogEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerCustomizeOpenDialogEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomizeOpenDialog event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientReportDesignerCustomizeOpenDialogEventArgs">
    ///An ASPxClientReportDesignerCustomizeOpenDialogEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerCustomizeToolboxEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomizeToolbox event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientReportDesignerCustomizeToolboxEventArgs">
    ///An ASPxClientReportDesignerCustomizeToolboxEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerEditorOptions = function() {
    ///<summary>
    ///Provides information about a value editor used in the Property Grid.
    ///</summary>
    ///<field name = "header" type = "String">
    ///Provides access to the name of an HTML template specifying the editor and header of a complex object. Value: A string that specifies the HTML template.
    ///</field>
    ///<field name = "content" type = "String">
    ///Provides access to the name of an HTML template used by a complex object's editor. Value: A string that specifies the name of an HTML template.
    ///</field>
    ///<field name = "editorType" type = "Object">
    ///Provides access to the type of the editor model. Value: An object that specifies the editor type.
    ///</field>
};
ASPxDesignerUndoEngine = function() {
    ///<summary>
    ///Provides functionality to an undo/redo engine in the Web Report Designer.
    ///</summary>
    ///<field name = "redoEnabled" type = "KnockoutObservable">
    ///Provides access to a value that specifies whether or not the redo action can currently be performed. Value: A knockout observable boolean object, whose value is true if the redo action can be performed, and false otherwise.
    ///</field>
    ///<field name = "undoEnabled" type = "KnockoutObservable">
    ///Provides access to a value that specifies whether or not the undo action can currently be performed. Value: A knockout observable boolean object, whose value is true if the undo action can be performed, and false otherwise.
    ///</field>
    ///<field name = "isDirty" type = "KnockoutObservable">
    ///Provides access to a value that specifies whether or not a report has been changed. Value: A knockout observable boolean object, whose value is true if the report has been modified, and false otherwise.
    ///</field>
};
ASPxDesignerNavigateTab = function() {
    ///<summary>
    ///Provides functionality for a tab displayed a report in the Web Report Designer.
    ///</summary>
    ///<field name = "displayName" type = "KnockoutComputed">
    ///Provides access to a value that specifies the display name of the current tab. Value: A knockout computed string that specifies the tab's display name.
    ///</field>
    ///<field name = "isDirty" type = "KnockoutComputed">
    ///Provides access to a value that specifies whether or not the report in the current tab has been changed. Value: A knockout computed boolean object, whose value is true if the report has been modified, and false otherwise.
    ///</field>
    ///<field name = "report" type = "KnockoutObservable">
    ///Provides access to a report opened in the current tab. Value: A knockout observable object that specifies a report opened in the current tab.
    ///</field>
    ///<field name = "undoEngine" type = "ASPxDesignerUndoEngine">
    ///Provides access to an engine that manages undo and redo operations in the Web Report Designer. Value: An object that specifies an undo/redo engine.
    ///</field>
    ///<field name = "url" type = "KnockoutObservable">
    ///Provides access to the URL of a report opened in the current tab. Value: A knockout observable string that specifies the report URL.
    ///</field>
};
ASPxDesignerDialogModel = function() {
    ///<summary>
    ///A model of dialogs used to save and open reports in the Web Report Designer.
    ///</summary>
    ///<field name = "popupButtons" type = "Array" elementType = "Object">
    ///Provides access to the collection of buttons displayed in a dialog. Value: An array of objects that specify buttons displayed in a dialog.
    ///</field>
};
ASPxDesignerReportDialogBase = function() {
    ///<summary>
    ///Provides the base functionality for dialogs used to open and save reports on the client side of the Web Report Designer.
    ///</summary>
    ///<field name = "width" type = "KnockoutObservable">
    ///Provides access to a dialog's width. Value: A knockout observable object that specifies a dialog's width.
    ///</field>
    ///<field name = "height" type = "KnockoutObservable">
    ///Provides access to a dialog's height. Value: A knockout observable object that specifies a dialog's height.
    ///</field>
    ///<field name = "template" type = "KnockoutObservable">
    ///Provides access to the name of an HTML template used by a dialog. Value: A knockout observable string that specifies the name of the HTML template used by a dialog.
    ///</field>
    ///<field name = "buttons" type = "Array" elementType = "Object">
    ///Provides access to buttons displayed in a dialog. Value: An array of objects that specify buttons displayed in the dialog.
    ///</field>
    ///<field name = "model" type = "KnockoutObservable">
    ///Provides access to a dialog's model. Value: A knockout observable object of the ASPxDesignerDialogModel type.
    ///</field>
    ///<field name = "tab" type = "KnockoutObservable">
    ///Provides access to a report tab for which a dialog appears. Value: A knockout observable object of the ASPxDesignerNavigateTab type.
    ///</field>
    ///<field name = "visible" type = "KnockoutObservable">
    ///Provides access to a value that specifies a dialog's visibility state. Value: true, if the dialog is visible; otherwise, false;
    ///</field>
    ///<field name = "title" type = "String">
    ///Provides access to a dialog's title. Value: A string that specifies a dialog's title.
    ///</field>
};
ASPxDesignerSaveDialog = function() {
    ///<summary>
    ///Provides functionality for the Save dialog on the client side of the Web Report Designer.
    ///</summary>
    ///<field name = "saveReportDialog" type = "ASPxDesignerSaveAsDialog">
    ///Provides access to the Save Report dialog that appears if a user selected to save changes in the Save dialog. Value: An object that specifies the Save As dialog.
    ///</field>
    ///<field name = "width" type = "KnockoutObservable">
    ///Provides access to a dialog's width. Value: A knockout observable object that specifies a dialog's width.
    ///</field>
    ///<field name = "height" type = "KnockoutObservable">
    ///Provides access to a dialog's height. Value: A knockout observable object that specifies a dialog's height.
    ///</field>
    ///<field name = "template" type = "KnockoutObservable">
    ///Provides access to the name of an HTML template used by a dialog. Value: A knockout observable string that specifies the name of the HTML template used by a dialog.
    ///</field>
    ///<field name = "buttons" type = "Array" elementType = "Object">
    ///Provides access to buttons displayed in a dialog. Value: An array of objects that specify buttons displayed in the dialog.
    ///</field>
    ///<field name = "model" type = "KnockoutObservable">
    ///Provides access to a dialog's model. Value: A knockout observable object of the ASPxDesignerDialogModel type.
    ///</field>
    ///<field name = "tab" type = "KnockoutObservable">
    ///Provides access to a report tab for which a dialog appears. Value: A knockout observable object of the ASPxDesignerNavigateTab type.
    ///</field>
    ///<field name = "visible" type = "KnockoutObservable">
    ///Provides access to a value that specifies a dialog's visibility state. Value: true, if the dialog is visible; otherwise, false;
    ///</field>
    ///<field name = "title" type = "String">
    ///Provides access to a dialog's title. Value: A string that specifies a dialog's title.
    ///</field>
};
ASPxDesignerSaveAsDialog = function() {
    ///<summary>
    ///Provides functionality for the Save Report dialog on the client side of the Web Report Designer.
    ///</summary>
    ///<field name = "width" type = "KnockoutObservable">
    ///Provides access to a dialog's width. Value: A knockout observable object that specifies a dialog's width.
    ///</field>
    ///<field name = "height" type = "KnockoutObservable">
    ///Provides access to a dialog's height. Value: A knockout observable object that specifies a dialog's height.
    ///</field>
    ///<field name = "template" type = "KnockoutObservable">
    ///Provides access to the name of an HTML template used by a dialog. Value: A knockout observable string that specifies the name of the HTML template used by a dialog.
    ///</field>
    ///<field name = "buttons" type = "Array" elementType = "Object">
    ///Provides access to buttons displayed in a dialog. Value: An array of objects that specify buttons displayed in the dialog.
    ///</field>
    ///<field name = "model" type = "KnockoutObservable">
    ///Provides access to a dialog's model. Value: A knockout observable object of the ASPxDesignerDialogModel type.
    ///</field>
    ///<field name = "tab" type = "KnockoutObservable">
    ///Provides access to a report tab for which a dialog appears. Value: A knockout observable object of the ASPxDesignerNavigateTab type.
    ///</field>
    ///<field name = "visible" type = "KnockoutObservable">
    ///Provides access to a value that specifies a dialog's visibility state. Value: true, if the dialog is visible; otherwise, false;
    ///</field>
    ///<field name = "title" type = "String">
    ///Provides access to a dialog's title. Value: A string that specifies a dialog's title.
    ///</field>
};
ASPxDesignerOpenDialog = function() {
    ///<summary>
    ///Provides functionality for the Open Report dialog on the client side of the Web Report Designer.
    ///</summary>
    ///<field name = "width" type = "KnockoutObservable">
    ///Provides access to a dialog's width. Value: A knockout observable object that specifies a dialog's width.
    ///</field>
    ///<field name = "height" type = "KnockoutObservable">
    ///Provides access to a dialog's height. Value: A knockout observable object that specifies a dialog's height.
    ///</field>
    ///<field name = "template" type = "KnockoutObservable">
    ///Provides access to the name of an HTML template used by a dialog. Value: A knockout observable string that specifies the name of the HTML template used by a dialog.
    ///</field>
    ///<field name = "buttons" type = "Array" elementType = "Object">
    ///Provides access to buttons displayed in a dialog. Value: An array of objects that specify buttons displayed in the dialog.
    ///</field>
    ///<field name = "model" type = "KnockoutObservable">
    ///Provides access to a dialog's model. Value: A knockout observable object of the ASPxDesignerDialogModel type.
    ///</field>
    ///<field name = "tab" type = "KnockoutObservable">
    ///Provides access to a report tab for which a dialog appears. Value: A knockout observable object of the ASPxDesignerNavigateTab type.
    ///</field>
    ///<field name = "visible" type = "KnockoutObservable">
    ///Provides access to a value that specifies a dialog's visibility state. Value: true, if the dialog is visible; otherwise, false;
    ///</field>
    ///<field name = "title" type = "String">
    ///Provides access to a dialog's title. Value: A string that specifies a dialog's title.
    ///</field>
};
ASPxDesignerToolboxItem = function() {
    ///<summary>
    ///Provides information about a toolbox control item.
    ///</summary>
    ///<field name = "info" type = "Array" elementType = "ASPxDesignerElementSerializationInfo">
    ///Provides access to information required to serialize a toolbox control. Value: An array of ASPxDesignerElementSerializationInfo objects that provide information required to serialize an element.
    ///</field>
    ///<field name = "surfaceType" type = "Type">
    ///Provides access to a surface type of toolbox control. Value: A surface type of toolbox control.
    ///</field>
    ///<field name = "type" type = "Type">
    ///Provides access to a toolbox control type. Value: A toolbox control type.
    ///</field>
    ///<field name = "toolboxIndex" type = "Int32">
    ///Provides access to a zero-based index of a control in the toolbox. Value: An integer value that specifies a control index in the toolbox.
    ///</field>
    ///<field name = "defaultVal" type = "Object">
    ///Provides access to the default property values used for a toolbox control. Value: An object that specifies default propery values.
    ///</field>
    ///<field name = "popularProperties" type = "Array" elementType = "String">
    ///Provides access to popular properties of a toolbox control. Value: An array of strings that specify names of popular properties.
    ///</field>
    ///<field name = "isToolboxItem" type = "Boolean">
    ///</field>
};
ASPxDesignerControlsFactory = function() {
    ///<summary>
    ///Enables you to customize controls available in the Toolbox of the Web Report Designer.
    ///</summary>
};
ASPxDesignerParameterType = function() {
    ///<summary>
    ///Provides information about a report parameter type.
    ///</summary>
    ///<field name = "value" type = "String">
    ///Provides access to an actual parameter type. Value: A string that specifies the parameter type.
    ///</field>
    ///<field name = "displayValue" type = "String">
    ///Provides access to a text displayed to end-users when creating parameters of the current type. Value: A string displayed to end-users.
    ///</field>
    ///<field name = "defaultVal" type = "Object">
    ///Provides access to the default value for parameters of the current type. Value: An object that specifies the default value.
    ///</field>
    ///<field name = "specifics" type = "String">
    ///Provides access to the specifics of a current parameter type. Value: Parameter type specifics.
    ///</field>
};
ASPxClientReportDocumentMap = function() {
    ///<summary>
    ///The client-side equivalent of the ASPxClientDocumentViewer control's Document Map.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "ContentChanged" type = "ASPxClientEvent">
    ///Occurs after the content of the Document Viewer's document map is updated.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientReportParametersPanel = function() {
    ///<summary>
    ///The client-side equivalent of the ASPxClientDocumentViewer control's Parameters Panel.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientReportParameterInfo = function() {
    ///<summary>
    ///Provides information about a report parameter on the client side.
    ///</summary>
    ///<field name = "Path" type = "String">
    ///Specifies the parameter path, relative to its parent container (e.g., "subreport1.subreportParameter1" for a subreport's parameter, or "parameter1" for a report's parameter). Value: A String value, specifying the parameter path (e.g., "subreport1.subreportParameter1").
    ///</field>
    ///<field name = "Value" type = "Object">
    ///Provides access to a parameter value on the client. Value: A Object value.
    ///</field>
};
ASPxClientReportToolbar = function() {
    ///<summary>
    ///The client-side equivalent of the ASPxClientDocumentViewer control's toolbar.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientReportViewer = function() {
    ///<summary>
    ///The client-side equivalent of the ReportViewer.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "BeginCallback" type = "ASPxClientEvent">
    ///Occurs when a callback for server-side processing is initiated.
    ///</field>
    ///<field name = "EndCallback" type = "ASPxClientEvent">
    ///Occurs on the client after a callback's server-side processing has been completed.
    ///</field>
    ///<field name = "CallbackError" type = "ASPxClientEvent">
    ///Fires on the client if any server error occurs during server-side processing of a callback sent by the ASPxClientReportViewer.
    ///</field>
    ///<field name = "PageLoad" type = "ASPxClientEvent">
    ///Occurs on the client side when another report page is loaded into this ASPxClientReportViewer instance.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientReportViewerPageLoadEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the PageLoad event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientReportViewerPageLoadEventArgs">
    ///An ASPxClientReportViewerPageLoadEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewerPageLoadEventArgs = function() {
    ///<summary>
    ///Provides data for the PageLoad events on the client side.
    ///</summary>
    ///<field name = "PageIndex" type = "Int32">
    ///Gets a value specifying a zero-based index of a page to be displayed in a report viewer. Returns: $
    ///</field>
    ///<field name = "PageCount" type = "Int32">
    ///Gets a value specifying the total number of pages displayed in a report viewer. Returns: $
    ///</field>
};
ASPxClientCustomizeParameterEditorsEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomizeParameterEditors events.
    ///</summary>
    ///<field name = "parameter" type = "ASPxDesignerElementParameterDescriptor">
    ///Provides access to an object that stores information about a parameter. Value: An ASPxDesignerElementParameterDescriptor object.
    ///</field>
    ///<field name = "info" type = "ASPxDesignerElementSerializationInfo">
    ///Provides access to an object that stores information required to serialize a parameter editor. Value: An ASPxDesignerElementSerializationInfo object.
    ///</field>
};
ASPxClientCustomizeParameterLookUpSourceEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomizeParameterLookUpSource events.
    ///</summary>
    ///<field name = "parameter" type = "ASPxDesignerElementParameterDescriptor">
    ///Provides access to an object that stores information about a parameter. Value: An ASPxDesignerElementParameterDescriptor object that stores information about the parameter.
    ///</field>
    ///<field name = "items" type = "Array" elementType = "ASPxDesignerElementEditorItem">
    ///Provides access to the collection of look-up parameter values. Value: An array of ASPxDesignerElementEditorItem objects that store information about look-up parameter values.
    ///</field>
    ///<field name = "dataSource" type = "Object">
    ///Specifies the data source that provides look-up values for the parameter editor. Value: An Object specifying the data source that provides look-up values to the parameter editor.
    ///</field>
};
ASPxClientMenuAction = function() {
    ///<summary>
    ///Provides information about a command available in the toolbar or menu.
    ///</summary>
    ///<field name = "text" type = "String">
    ///Provides access to the text for the command. Value: A string that is the command text.
    ///</field>
    ///<field name = "imageClassName" type = "String">
    ///Provides access to the CSS class of the command's glyph. Value: A string that specifies the name of the CSS class.
    ///</field>
    ///<field name = "clickAction" type = "Delegate">
    ///Provides access to the action performed when a button is clicked. Value: The specific action implementation.
    ///</field>
    ///<field name = "disabled" type = "Boolean">
    ///Provides access to the value that specifies whether or not the command is disabled by default. Value: true, if the command is disabled by default; otherwise, false.
    ///</field>
    ///<field name = "visible" type = "Boolean">
    ///Provides access to the value that specifies whether or not the command is visible in the user interface. Value: true if the command is visible; otherwise false.
    ///</field>
    ///<field name = "hotKey" type = "ASPxClientMenuActionHotKey">
    ///Provides access to the keyboard shortcut used to invoke the command. Value: An ASPxClientMenuActionHotKey object that specifies the keyboard shortcut.
    ///</field>
    ///<field name = "hasSeparator" type = "String">
    ///Provides access to the value that specifies whether or not the command has a visual separator. Value: true, if the command has a visual separator; otherwise, false.
    ///</field>
    ///<field name = "container" type = "String">
    ///Provides access to a value that specifies the command location. Value: A string that specifies the command location.
    ///</field>
};
ASPxClientMenuActionHotKey = function() {
    ///<summary>
    ///Provides information about a hot key used to perform an action assigned to a menu item.
    ///</summary>
    ///<field name = "keyCode" type = "Int32">
    ///Provides access to a hot key code. Value: An integer value that specifies the hot key code.
    ///</field>
    ///<field name = "ctrlKey" type = "Boolean">
    ///Provides access to a value that specifies whether the CTRL key is used in combination with a hot key. Value: true, if the CTRL key is included into the key combination; otherwise, false.
    ///</field>
};
ASPxClientCustomizeMenuActionsEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomizeMenuActions.
    ///</summary>
    ///<field name = "Actions" type = "Array" elementType = "ASPxClientMenuAction">
    ///Provides access to the collection of actions available in the toolbar and menu. Value: An array of ASPxClientMenuAction objects.
    ///</field>
};
ASPxClientCustomizeElementsEventArgs = function() {
    ///<summary>
    ///Provides data for the CustomizeElements events.
    ///</summary>
    ///<field name = "Elements" type = "Array" elementType = "ASPxReportUIElement">
    ///Provides access to the collection of UI elements. Value: An array of the ASPxReportUIElement objects.
    ///</field>
};
ASPxDesignerElementParameterDescriptor = function() {
    ///<summary>
    ///Provides general information about a report parameter.
    ///</summary>
    ///<field name = "description" type = "String">
    ///Provides access to the parameter description. Value: A String value, specifying the parameter description.
    ///</field>
    ///<field name = "name" type = "String">
    ///Provides access to the parameter name. Value: A String value, specifying the parameter name.
    ///</field>
    ///<field name = "type" type = "String">
    ///Provides access to the parameter type. Value: A String value, specifying the parameter type.
    ///</field>
    ///<field name = "value" type = "Object">
    ///Provides access to the parameter value. Value: A Object, specifying the parameter value.
    ///</field>
    ///<field name = "visible" type = "Boolean">
    ///Provides access to the parameter visibility state. Value: true if the parameter is visible; otherwise false.
    ///</field>
};
ASPxDesignerElementSerializationInfo = function() {
    ///<summary>
    ///Provides information required to serialize an element.
    ///</summary>
    ///<field name = "propertyName" type = "String">
    ///Gets the property name that will be used in the model to store the property value. Value: A String value.
    ///</field>
    ///<field name = "displayName" type = "String">
    ///Gets the property name in the model that is displayed in the Property grid. Value: A String value.
    ///</field>
    ///<field name = "modelName" type = "String">
    ///Gets the property name that will be used during serialization to store the property value. Value: A String value.
    ///</field>
    ///<field name = "defaultVal" type = "Object">
    ///Gets the default property value used for serialization. Value: A Object value.
    ///</field>
    ///<field name = "info" type = "Array" elementType = "ASPxDesignerElementSerializationInfo">
    ///Gets the information about a complex object's content. Value: An array of ASPxDesignerElementSerializationInfo objects.
    ///</field>
    ///<field name = "array" type = "Boolean">
    ///Gets a value indicating whether or not the property returns an array. Value: true if the property returns an array; otherwise false.
    ///</field>
    ///<field name = "link" type = "Boolean">
    ///Gets a value indicating whether an object should be serialized to the ComponentStorage property. Value: true to serialize an object to the ObjectStorage; otherwise false.
    ///</field>
    ///<field name = "editor" type = "ASPxDesignerElementEditor">
    ///Gets a value specifying the type of value editor for the Property Grid. Value: An ASPxDesignerElementEditor object.
    ///</field>
    ///<field name = "valuesArray" type = "Array" elementType = "ASPxDesignerElementEditorItem">
    ///Gets the collection of values displayed in the Property grid. Value: An array of ASPxDesignerElementEditorItem objects.
    ///</field>
    ///<field name = "validationRules" type = "Array" elementType = "Object">
    ///Gets the rules for validating the property value entered into its editor. Value: An array of Object values.
    ///</field>
    ///<field name = "visible" type = "Object">
    ///Gets the visibility state of the value editor in the Property Grid. Value: A Object value.
    ///</field>
    ///<field name = "disabled" type = "Object">
    ///Gets a value, indicating whether or not the property value can be edited. Value: true to disable the property editing; otherwise false.
    ///</field>
};
ASPxDesignerElementEditor = function() {
    ///<summary>
    ///Provides information about a serialized property's value editor used in the Property Grid.
    ///</summary>
    ///<field name = "header" type = "String">
    ///Gets the name of an HTML template specifying the editor and header of a complex object (i.e., an object having its content properties specified). Value: A String value.
    ///</field>
    ///<field name = "content" type = "String">
    ///Gets a nullable value, specifying the name of an HTML template used by a complex object's editor. Value: A String value.
    ///</field>
    ///<field name = "extendedOptions" type = "Object">
    ///</field>
    ///<field name = "editorType" type = "Object">
    ///Gets a nullable value, specifying the type of the editor's model. Value: A Object value.
    ///</field>
};
ASPxDesignerElementEditorItem = function() {
    ///<summary>
    ///Provides information about property values.
    ///</summary>
    ///<field name = "value" type = "Object">
    ///Gets an actual property value. Value: A Object value.
    ///</field>
    ///<field name = "displayValue" type = "String">
    ///Gets a value displayed by a property editor. Value: A String value.
    ///</field>
};
ASPxReportUIElement = function() {
    ///<summary>
    ///Provides information about a UI element of the Web Report Designer or Web Document Viewer.
    ///</summary>
    ///<field name = "model" type = "Object">
    ///Provides access to an element model. Value: An object that specifies the element model.
    ///</field>
    ///<field name = "templateName" type = "String">
    ///Provides access to the name of an HTML template used by an element. Value: A string that specifies the name of the HTML template.
    ///</field>
};
ASPxClientWebDocumentViewerDocumentReadyEventArgs = function() {
    ///<summary>
    ///Provides data for the PreviewDocumentReady events.
    ///</summary>
    ///<field name = "ReportId" type = "String">
    ///Specifies the report ID.
    ///</field>
    ///<field name = "DocumentId" type = "String">
    ///Specifies the report document ID.
    ///</field>
    ///<field name = "PageCount" type = "Int32">
    ///Specifies the total number of pages in a report document.
    ///</field>
};
ASPxClientWebDocumentViewerEditingFieldChangedEventArgs = function() {
    ///<summary>
    ///Provides data for the PreviewEditingFieldChanged events.
    ///</summary>
    ///<field name = "Field" type = "ASPxClientWebDocumentViewerEditingField">
    ///Gets an editing field whose value has been changed. Value: An object that specifies an editing field whose content has been changed.
    ///</field>
    ///<field name = "OldValue" type = "Object">
    ///Provides access to a previous value of an editing field. Value: An object that specifies an editing field's previous value.
    ///</field>
    ///<field name = "NewValue" type = "Object">
    ///Provides access to a new value of an editing field. Value: An object that specifies an editing field's new value.
    ///</field>
};
ASPxClientWebDocumentViewerEditingField = function() {
    ///<summary>
    ///Provides functionality for a field whose content can be edited in the Web Document Viewer.
    ///</summary>
    ///<field name = "readOnly" type = "KnockoutObservable">
    ///Provides access to a value that specifies whether or not an editing field's content can be customized in Print Preview. Returns: true, if a field cannot be edited in Print Preview; otherwise, false.
    ///</field>
    ///<field name = "editValue" type = "KnockoutObservable">
    ///Provides access to the current value of an editing field. Returns: An object that specifies the current field value.
    ///</field>
};
ASPxClientParametersSubmittedEventArgs = function() {
    ///<summary>
    ///Provides data for the PreviewParametersSubmitted events.
    ///</summary>
    ///<field name = "ParametersViewModel" type = "Object">
    ///Provides access to a View Model for report parameters. Value: A View Model object.
    ///</field>
    ///<field name = "Parameters" type = "Dictionary">
    ///Provides access to report parameters and their submitted values. Value: A dictionary containing the parameter names along with their values.
    ///</field>
};
ASPxClientParametersResetEventArgs = function() {
    ///<summary>
    ///Provides data for the PreviewParametersReset events.
    ///</summary>
    ///<field name = "ParametersViewModel" type = "Object">
    ///Provides access to a View Model for report parameters. Value: A View Model object.
    ///</field>
    ///<field name = "Parameters" type = "Array" elementType = "ASPxClientWebDocumentViewerParameter">
    ///Provides access to report parameters whose values have been reset. Value: An ASPxClientWebDocumentViewerParameter array.
    ///</field>
};
ASPxClientWebDocumentViewerParameter = function() {
    ///<summary>
    ///Provides general information about a report parameter on the client-side of the Web Document Viewer.
    ///</summary>
    ///<field name = "value" type = "Object">
    ///Provides access to the current value of a report parameter. Value: An object that specifies the report parameter's current value.
    ///</field>
    ///<field name = "type" type = "Object">
    ///Provides access to a report parameter's value type. Value: An object that specifies the report parameter type.
    ///</field>
    ///<field name = "isMultiValue" type = "Boolean">
    ///Provides access to a value that specifies whether or not a parameter can have multiple values. Value: true, if a parameter can have multiple values; otherwise, false.
    ///</field>
};
ASPxClientPreviewClickEventArgs = function() {
    ///<summary>
    ///Provides data for the PreviewClick events.
    ///</summary>
    ///<field name = "PageIndex" type = "Int32">
    ///Gets a value specifying the zero-based index of the page that has been clicked. Value: An integer value that specifies a page index.
    ///</field>
    ///<field name = "Brick" type = "ASPxClientWebDocumentViewerBrick">
    ///Provides information on a visual brick representing content of a report control that has been clicked. Value: An object that provides information on a visual brick.
    ///</field>
    ///<field name = "Handled" type = "Boolean">
    ///Specifies whether or not the event was handled and no default processing is required. Value: true, if the event is completely handled by custom code and no default processing is required; otherwise, false.
    ///</field>
};
ASPxClientWebDocumentViewerBrick = function() {
    ///<summary>
    ///Provides information about a visual brick used to render a report control to construct a document in the Web Document Viewer.
    ///</summary>
    ///<field name = "content" type = "Dictionary">
    ///Provides access to a brick's content. Value: A dictionary that stores content keys along with the corresponding contents.
    ///</field>
    ///<field name = "navigation" type = "ASPxClientWebDocumentViewerBrickNavigation">
    ///Provides access to navigation settings of the current brick. Value: An object that provides a brick's navigation settings.
    ///</field>
    ///<field name = "top" type = "Int32">
    ///Provides access to a brick's top vertical coordinate. Value: An integer value that specifies the brick's top coordinate.
    ///</field>
    ///<field name = "left" type = "Int32">
    ///Provides access to a brick's left horizontal coordinate. Value: An integer value that specifies the brick's left coordinate.
    ///</field>
    ///<field name = "width" type = "Int32">
    ///Provides access to a brick's width. Value: An integer value that specifies the brick width.
    ///</field>
    ///<field name = "height" type = "Int32">
    ///Provides access to a brick's height. Value: An integer value that specifies the brick height.
    ///</field>
    ///<field name = "rtl" type = "Boolean">
    ///Provides access to a value that specifies whether or not the right-to-left feature is enabled for a brick. Value: true, if the right-to-left feature is enabled; otherwise, false.
    ///</field>
};
ASPxClientWebDocumentViewerBrickNavigation = function() {
    ///<summary>
    ///Provides navigation settings for a brick used to construct a document in the Web Document Viewer.
    ///</summary>
    ///<field name = "url" type = "String">
    ///Provides access to the URL to navigate to when a brick is a clicked. Value: A string that specifies the URL.
    ///</field>
    ///<field name = "target" type = "String">
    ///Provides access to a value that specifies the target window or frame in which to display the linked Web page's content when the brick is clicked. Value: A string that specifies the window or frame to which to target the URL's content.
    ///</field>
    ///<field name = "drillDownKey" type = "String">
    ///Provides access to a drill-down key. Value: A string that specifies a drill-down key.
    ///</field>
};
ASPxClientWebDocumentViewer = function() {
    ///<summary>
    ///A client-side equivalent of the ASPxWebDocumentViewer class.
    ///</summary>
    ///<field name = "name" type = "String">
    ///Gets the unique, hierarchically-qualified identifier for the control. Value: The fully-qualified identifier for the control.
    ///</field>
    ///<field name = "DocumentReady" type = "ASPxClientEvent">
    ///Occurs after a report document has been loaded to the Web Document Viewer.
    ///</field>
    ///<field name = "EditingFieldChanged" type = "ASPxClientEvent">
    ///Occurs each time a value of an editing field changes.
    ///</field>
    ///<field name = "CustomizeElements" type = "ASPxClientEvent">
    ///Enables you to customize UI elements of the Web Document Viewer.
    ///</field>
    ///<field name = "CustomizeMenuActions" type = "ASPxClientEvent">
    ///Enables you to customize the menu actions of a Web Document Viewer.
    ///</field>
    ///<field name = "CustomizeParameterEditors" type = "ASPxClientEvent">
    ///Occurs each time a standard editor is created for a report parameter based on a parameter type.
    ///</field>
    ///<field name = "CustomizeParameterLookUpSource" type = "ASPxClientEvent">
    ///Occurs each time a look-up editor is created for a report parameter.
    ///</field>
    ///<field name = "PreviewClick" type = "ASPxClientEvent">
    ///Occurs when the left mouse button has been clicked over a report document.
    ///</field>
    ///<field name = "ParametersReset" type = "ASPxClientEvent">
    ///Occurs after report parameter values have been reset to their default values.
    ///</field>
    ///<field name = "ParametersSubmitted" type = "ASPxClientEvent">
    ///Occurs after report parameter values have been submitted.
    ///</field>
    ///<field name = "Init" type = "ASPxClientEvent">
    ///Occurs on the client side after the control has been initialized.
    ///</field>
};
ASPxClientWebDocumentViewerEditingFieldChangedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the PreviewEditingFieldChanged event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientWebDocumentViewerEditingFieldChangedEventArgs">
    ///An ASPxClientWebDocumentViewerEditingFieldChangedEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewerDocumentReadyEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the PreviewDocumentReady event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientWebDocumentViewerDocumentReadyEventArgs">
    ///An ASPxClientWebDocumentViewerDocumentReadyEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewerCustomizeElementsEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the PreviewCustomizeElements event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientCustomizeElementsEventArgs">
    ///An ASPxClientCustomizeElementsEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewerCustomizeMenuActionsEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomizeMenuActions event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientCustomizeMenuActionsEventArgs">
    ///An ASPxClientCustomizeMenuActionsEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewerCustomizeParameterEditorsEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomizeParameterEditors event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientCustomizeParameterEditorsEventArgs">
    ///An ASPxClientCustomizeParameterEditorsEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewerCustomizeParameterLookUpSourceEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the CustomizeParameterLookUpSource event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientCustomizeParameterLookUpSourceEventArgs">
    ///An ASPxClientCustomizeParameterLookUpSourceEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewerPreviewClickEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the PreviewClick event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientPreviewClickEventArgs">
    ///An ASPxClientPreviewClickEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewerParametersResetEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the PreviewParametersReset event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientParametersResetEventArgs">
    ///An ASPxClientParametersResetEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewerParametersSubmittedEventHandler = function(source, e) {
    ///<summary>
    ///A method that will handle the PreviewParametersSubmitted event.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///The event sender.
    ///</param>
    ///<param name = "e" type = "ASPxClientParametersSubmittedEventArgs">
    ///An ASPxClientParametersSubmittedEventArgs object that contains data related to the event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};

MVCxClientDashboardViewer.prototype.ReloadData = function() {
    ///<signature>
    ///<summary>
    ///Reloads data in the data sources.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Reloads data in the data sources.
    ///</summary>
    ///<param name = "parameters" elementType = "ASPxClientDashboardParameter" type = "Array">
    ///An array of ASPxClientDashboardParameter objects that specify dashboard parameters on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDashboardViewer.prototype.GetParameters = function() {
    ///<summary>
    ///Returns dashboard parameter settings and metadata.
    ///</summary>
    ///<returns type = "ASPxClientDashboardParameters">
    ///A ASPxClientDashboardParameter objects.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.BeginUpdateParameters = function() {
    ///<summary>
    ///Locks the EndUpdateParameters method call.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.EndUpdateParameters = function() {
    ///<summary>
    ///Unlocks the BeginUpdateParameters method and applies changes made to the parameter settings.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetCurrentRange = function(itemName) {
    ///<summary>
    ///Returns the currently selected range in the specified Range Filter dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String value that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<returns type = "ASPxClientDashboardRangeFilterSelection">
    ///A ASPxClientDashboardRangeFilterSelection object that is the selected range.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetEntireRange = function(itemName) {
    ///<summary>
    ///Returns the visible range for the specified Range Filter dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String value that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<returns type = "ASPxClientDashboardRangeFilterSelection">
    ///A ASPxClientDashboardRangeFilterSelection object that is the visible range.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.SetRange = function(itemName, range) {
    ///<summary>
    ///Selects the required range in the specified Range Filter dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<param name = "range" type = "ASPxClientDashboardRangeFilterSelection">
    ///A ASPxClientDashboardRangeFilterSelection object that specifies a range to be selected.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.SetPredefinedRange = function(itemName, dateTimePeriodName) {
    ///<summary>
    ///Selects a predefined range in the Range Filter dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String value that specifies the component name of the Range Filter.
    ///</param>
    ///<param name = "dateTimePeriodName" type = "String">
    ///A String value that specifies the predefined range name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetAvailablePredefinedRanges = function(itemName) {
    ///<summary>
    ///Returns names of the predefined ranges available for the specified Range Filter.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string value that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<returns elementType = "String" type = "Array">
    ///An array of string values that are names of the available predefined ranges.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetCurrentPredefinedRange = function(itemName) {
    ///<summary>
    ///Returns the name of the currently selected predefined range.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string value that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<returns type = "String">
    ///A string value that is the name of the currently selected predefined range.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetAvailableDrillDownValues = function(itemName) {
    ///<summary>
    ///Returns axis point tuples identifying elements that can be used to perform drill-down in the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects identifying elements that can be used to perform drill-down in the specified dashboard item.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetCurrentDrillDownValues = function(itemName) {
    ///<summary>
    ///Returns the axis point tuple identifying the current drill-down state.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An ASPxClientDashboardItemDataAxisPointTuple object representing a set of axis points.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetAvailableFilterValues = function(itemName) {
    ///<summary>
    ///Returns axis point tuples identifying elements that can be selected in the current state of the master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the master filter item.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects identifying elements that can be selected in the current state of the master filter item.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetCurrentFilterValues = function(itemName) {
    ///<summary>
    ///Returns axis point tuples identifying currently selected elements in the master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the master filter item.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects identifying elements that can be selected in the current state of the master filter item.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetCurrentSelection = function(itemName) {
    ///<summary>
    ///Returns currently selected elements in the master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies a component name of the master filter item.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects that identify currently selected elements.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.RequestUnderlyingData = function(itemName, args, onCompleted) {
    ///<summary>
    ///Requests underlying data for the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<param name = "args" type = "ASPxClientDashboardItemRequestUnderlyingDataParameters">
    ///A ASPxClientDashboardItemRequestUnderlyingDataParameters object containing parameters used to obtain the underlying data.
    ///</param>
    ///<param name = "onCompleted" type = "ASPxClientDashboardItemRequestUnderlyingDataCompleted">
    ///A ASPxClientDashboardItemRequestUnderlyingDataCompleted object that references a method executed after the request is completed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.ShowParametersDialog = function() {
    ///<summary>
    ///Invokes the Dashboard Parameters dialog.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.HideParametersDialog = function() {
    ///<summary>
    ///Closes the Dashboard Parameters dialog.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetExportOptions = function() {
    ///<summary>
    ///Returns settings that specify parameters affecting how the dashboard is exported.
    ///</summary>
    ///<returns type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetPdfExportOptions = function() {
    ///<summary>
    ///Allows you to obtain options related to exporting a dashboard/dashboard item to the PDF format.
    ///</summary>
    ///<returns type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing options related to exporting a dashboard/dashboard item to the PDF format.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetImageExportOptions = function() {
    ///<summary>
    ///Allows you to obtain options related to exporting a dashboard/dashboard item to an image.
    ///</summary>
    ///<returns type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing options related to exporting a dashboard/dashboard item to an image.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetExcelExportOptions = function() {
    ///<summary>
    ///Allows you to obtain options related to exporting a dashboard/dashboard item to the Excel format.
    ///</summary>
    ///<returns type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing options related to exporting a dashboard item to the Excel format.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.SetExportOptions = function(options) {
    ///<summary>
    ///Specifies settings that specify parameters affecting how the dashboard is exported.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.SetPdfExportOptions = function(options) {
    ///<summary>
    ///Allows you to specify options related to exporting a dashboard/dashboard item to the PDF format.
    ///</summary>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing options related to exporting a dashboard/dashboard item to the PDF format.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.SetImageExportOptions = function(options) {
    ///<summary>
    ///Allows you to specify options related to exporting a dashboard/dashboard item to an image.
    ///</summary>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing options related to exporting a dashboard/dashboard item to an image.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.SetExcelExportOptions = function(options) {
    ///<summary>
    ///Allows you to specify options related to exporting a dashboard/dashboard item to the Excel format.
    ///</summary>
    ///<param name = "options" type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing options related to exporting a dashboard item to the Excel format.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.ExportToPdf = function() {
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file and writes it to the Response.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing PDF-specific export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing PDF-specific export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDashboardViewer.prototype.ExportToImage = function() {
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file and writes it to the Response.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing image-specific export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing image-specific export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDashboardViewer.prototype.ExportToExcel = function() {
    ///<signature>
    ///<summary>
    ///Exports dashboard data to the specified file in Excel format.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports dashboard data to the specified file in Excel format.
    ///</summary>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardExcelExportOptions object containing Excel-specific options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports dashboard data to the specified file in Excel format.
    ///</summary>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardExcelExportOptions object containing Excel-specific options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string value that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDashboardViewer.prototype.ExportDashboardItemToPdf = function(itemName) {
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item to be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing PDF-specific export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing PDF-specific export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDashboardViewer.prototype.ExportDashboardItemToImage = function(itemName) {
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item to be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing image-specific export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing image-specific export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string value that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string value that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDashboardViewer.prototype.ExportDashboardItemToExcel = function(itemName) {
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item to be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing Excel export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing Excel export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported Excel file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported Excel file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDashboardViewer.prototype.GetWidth = function() {
    ///<signature>
    ///<summary>
    ///Returns the dashboard width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the dashboard width.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
    ///</signature>
};
MVCxClientDashboardViewer.prototype.GetHeight = function() {
    ///<signature>
    ///<summary>
    ///Returns the dashboard height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the dashboard height.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
    ///</signature>
};
MVCxClientDashboardViewer.prototype.SetWidth = function(width) {
    ///<signature>
    ///<summary>
    ///Specifies the dashboard width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the dashboard width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDashboardViewer.prototype.SetHeight = function(height) {
    ///<signature>
    ///<summary>
    ///Specifies the dashboard height.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the dashboard height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDashboardViewer.prototype.SetSize = function(width, height) {
    ///<summary>
    ///Specifies the dashboard size.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the dashboard width.
    ///</param>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the dashboard height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.SetMasterFilter = function(itemName, values) {
    ///<signature>
    ///<summary>
    ///Selects required elements by their values in the specified master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that species the component name of the master filter item.
    ///</param>
    ///<param name = "values" elementType = "Object[]" type = "Array">
    ///Values that will be used to select elements in the master filter item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the required elements in the specified master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the master filter item.
    ///</param>
    ///<param name = "axisPointTuples" elementType = "ASPxClientDashboardItemDataAxisPointTuple" type = "Array">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects used to identify master filter elements.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDashboardViewer.prototype.PerformDrillDown = function(itemName, value) {
    ///<signature>
    ///<summary>
    ///Performs a drill-down for the required element by its value.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that species the component name of the dashboard item.
    ///</param>
    ///<param name = "value" type = "Object">
    ///A value that will be used to perform a drill-down for the required element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Performs a drill-down for the required element.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<param name = "axisPointTuple" type = "ASPxClientDashboardItemDataAxisPointTuple">
    ///A ASPxClientDashboardItemDataAxisPointTuple object representing a set of axis points.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDashboardViewer.prototype.ClearMasterFilter = function(itemName) {
    ///<summary>
    ///Clears the specified master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the master filter item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.PerformDrillUp = function(itemName) {
    ///<summary>
    ///Performs a drill-up for the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.CanSetMasterFilter = function(itemName) {
    ///<summary>
    ///Returns whether or not the specified master filter item allows selecting one or more elements.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the master filter item.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified master filter item allows selecting one or more elements; otherwise, false.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.CanClearMasterFilter = function(itemName) {
    ///<summary>
    ///Returns whether or not the specified master filter can be cleared in the current state.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the master filter item.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified master filter can be cleared in the current state; otherwise, false.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.CanPerformDrillDown = function(itemName) {
    ///<summary>
    ///Returns whether or not drill down is possible in the current state of the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if drill down is possible in the current state of the specified dashboard item; otherwise, false.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.CanPerformDrillUp = function(itemName) {
    ///<summary>
    ///Returns whether or not drill up is possible in the current state of the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if drill up is possible in the current state of the specified dashboard item; otherwise, false.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetItemData = function(itemName) {
    ///<summary>
    ///Returns the client data for the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemData">
    ///An ASPxClientDashboardItemData object that represents multidimensional data visualized in the dashboard item.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientDashboardViewer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientDashboardViewer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDashboardViewer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDashboardItemUnderlyingData.prototype.GetRowCount = function() {
    ///<summary>
    ///Gets the number of rows in the underlying data set.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of rows in the underlying data set.
    ///</returns>
};
ASPxClientDashboardItemUnderlyingData.prototype.GetRowValue = function(rowIndex, dataMember) {
    ///<summary>
    ///Returns the value of the specified cell within the underlying data set.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value that specifies the zero-based index of the required row.
    ///</param>
    ///<param name = "dataMember" type = "String">
    ///A String that specifies the required data member.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the value of the specified cell.
    ///</returns>
};
ASPxClientDashboardItemUnderlyingData.prototype.GetDataMembers = function() {
    ///<summary>
    ///Returns an array of data members available in a data source.
    ///</summary>
    ///<returns elementType = "String" type = "Array">
    ///An array of String values that represent data members available in a data source.
    ///</returns>
};
ASPxClientDashboardItemUnderlyingData.prototype.IsDataReceived = function() {
    ///<summary>
    ///Returns whether or not a request for underlying data was successful.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the request for underlying data was successful; otherwise, false.
    ///</returns>
};
ASPxClientDashboardItemUnderlyingData.prototype.GetRequestDataError = function() {
    ///<summary>
    ///Returns a callstack containing the error caused by an unsuccessful request for underlying data.
    ///</summary>
    ///<returns type = "String">
    ///A String representing a callstack containing the error caused by an unsuccessful request for underlying data.
    ///</returns>
};
ASPxClientDashboardItemClickEventArgs.prototype.GetData = function() {
    ///<summary>
    ///Gets the dashboard item's client data.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemData">
    ///A ASPxClientDashboardItemData object that represents the client data.
    ///</returns>
};
ASPxClientDashboardItemClickEventArgs.prototype.GetAxisPoint = function(axisName) {
    ///<summary>
    ///Returns the axis point corresponding to the clicked visual element.
    ///</summary>
    ///<param name = "axisName" type = "String">
    ///A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemDataAxisPoint">
    ///An ASPxClientDashboardItemDataAxisPoint object that is the axis point.
    ///</returns>
};
ASPxClientDashboardItemClickEventArgs.prototype.GetMeasures = function() {
    ///<summary>
    ///Gets measures corresponding to the clicked visual element.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataMeasure">
    ///An array of ASPxClientDashboardItemDataMeasure objects that contain the measure metadata.
    ///</returns>
};
ASPxClientDashboardItemClickEventArgs.prototype.GetDeltas = function() {
    ///<summary>
    ///Gets deltas corresponding to the clicked visual element.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataDelta">
    ///An array of ASPxClientDashboardItemDataDelta objects containing the delta metadata.
    ///</returns>
};
ASPxClientDashboardItemClickEventArgs.prototype.GetDimensions = function(axisName) {
    ///<summary>
    ///Gets the dimensions used to create a hierarchy of axis points for the specified axis.
    ///</summary>
    ///<param name = "axisName" type = "String">
    ///A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataDimension">
    ///An array of ASPxClientDashboardItemDataDimension objects that contain the dimension metadata.
    ///</returns>
};
ASPxClientDashboardItemClickEventArgs.prototype.RequestUnderlyingData = function(onCompleted, dataMembers) {
    ///<summary>
    ///Requests underlying data corresponding to the clicked visual element.
    ///</summary>
    ///<param name = "onCompleted" type = "ASPxClientDashboardItemRequestUnderlyingDataCompleted">
    ///A ASPxClientDashboardItemRequestUnderlyingDataCompleted object that references a method executed after the request is completed.
    ///</param>
    ///<param name = "dataMembers" elementType = "String" type = "Array">
    ///An array of String values that specify data members used to obtain underlying data.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.GetSelectionMode = function() {
    ///<summary>
    ///Gets the selection mode for dashboard item elements.
    ///</summary>
    ///<returns type = "String">
    ///A String that is the selection mode.
    ///</returns>
};
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.SetSelectionMode = function(selectionMode) {
    ///<summary>
    ///Sets the selection mode for dashboard item elements.
    ///</summary>
    ///<param name = "selectionMode" type = "String">
    ///A String that specifies the selection mode.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.IsHighlightingEnabled = function() {
    ///<summary>
    ///Returns whether or not highlighting is enabled for the current dashboard item.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if highlighting is enabled; otherwise, false.
    ///</returns>
};
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.EnableHighlighting = function(enableHighlighting) {
    ///<summary>
    ///Enables highlighting for the current dashboard item.
    ///</summary>
    ///<param name = "enableHighlighting" type = "Boolean">
    ///true, to enable highlighting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.GetTargetAxes = function() {
    ///<summary>
    ///Gets data axes used to perform custom interactivity actions.
    ///</summary>
    ///<returns elementType = "String" type = "Array">
    ///An array of String objects that are the names of data axes.
    ///</returns>
};
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.SetTargetAxes = function(targetAxes) {
    ///<summary>
    ///Sets data axes used to perform custom interactivity actions.
    ///</summary>
    ///<param name = "targetAxes" elementType = "String" type = "Array">
    ///An array of String objects that specify names of data axes.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.GetDefaultSelection = function() {
    ///<summary>
    ///Gets the default selection for the current dashboard item.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects that are the axis point tuples identifying the selected elements.
    ///</returns>
};
ASPxClientDashboardItemVisualInteractivityEventArgs.prototype.SetDefaultSelection = function(values) {
    ///<summary>
    ///Sets the default selection for the current dashboard item.
    ///</summary>
    ///<param name = "values" elementType = "ASPxClientDashboardItemDataAxisPointTuple" type = "Array">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects specifying axis point tuples used to select default elements.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemSelectionChangedEventArgs.prototype.GetCurrentSelection = function() {
    ///<summary>
    ///Gets currently selected elements.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects corresponding to the selected elements.
    ///</returns>
};
ASPxClientDashboardItemElementCustomColorEventArgs.prototype.GetTargetElement = function() {
    ///<summary>
    ///Gets the axis point tuple that corresponds to the current dashboard item element.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An ASPxClientDashboardItemDataAxisPointTuple object that is the axis point tuple.
    ///</returns>
};
ASPxClientDashboardItemElementCustomColorEventArgs.prototype.GetColor = function() {
    ///<summary>
    ///Gets the color of the current dashboard item element.
    ///</summary>
    ///<returns type = "String">
    ///A String that is the color of the current dashboard item element.
    ///</returns>
};
ASPxClientDashboardItemElementCustomColorEventArgs.prototype.SetColor = function(color) {
    ///<summary>
    ///Sets the color of the current dashboard item element.
    ///</summary>
    ///<param name = "color" type = "String">
    ///A String that specifies the color of the current dashboard item element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardItemElementCustomColorEventArgs.prototype.GetMeasures = function() {
    ///<summary>
    ///Gets measures corresponding to the current dashboard item element.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataMeasure">
    ///An array of ASPxClientDashboardItemDataMeasure objects that specify measures.
    ///</returns>
};
ASPxClientDashboardItemWidgetEventArgs.prototype.GetWidget = function() {
    ///<summary>
    ///Returns an underlying widget corresponding to the current dashboard item.
    ///</summary>
    ///<returns type = "Object">
    ///An underlying widget.
    ///</returns>
};
ASPxClientDashboardItemData.prototype.GetAxisNames = function() {
    ///<summary>
    ///Gets the names of the axes that constitute the current ASPxClientDashboardItemData.
    ///</summary>
    ///<returns elementType = "String" type = "Array">
    ///An array of String values that represent the names of the axes.
    ///</returns>
};
ASPxClientDashboardItemData.prototype.GetAxis = function(axisName) {
    ///<summary>
    ///Returns the specified data axis.
    ///</summary>
    ///<param name = "axisName" type = "String">
    ///A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemDataAxis">
    ///A ASPxClientDashboardItemDataAxis object that contains data points corresponding to the specified value hierarchy.
    ///</returns>
};
ASPxClientDashboardItemData.prototype.GetDimensions = function(axisName) {
    ///<summary>
    ///Gets the dimensions used to create a hierarchy of axis points for the specified axis.
    ///</summary>
    ///<param name = "axisName" type = "String">
    ///A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataDimension">
    ///An array of ASPxClientDashboardItemDataDimension objects containing the dimension metadata.
    ///</returns>
};
ASPxClientDashboardItemData.prototype.GetMeasures = function() {
    ///<summary>
    ///Gets the measures for the current ASPxClientDashboardItemData object.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataMeasure">
    ///An array of ASPxClientDashboardItemDataMeasure objects containing the measure metadata.
    ///</returns>
};
ASPxClientDashboardItemData.prototype.GetDeltas = function() {
    ///<summary>
    ///Gets the deltas for the current ASPxClientDashboardItemData object.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataDelta">
    ///An array of ASPxClientDashboardItemDataDelta objects containing the delta metadata.
    ///</returns>
};
ASPxClientDashboardItemData.prototype.GetSlice = function(tuple) {
    ///<signature>
    ///<summary>
    ///Gets the slice of the current ASPxClientDashboardItemData object by the specified axis point tuple.
    ///</summary>
    ///<param name = "tuple" type = "ASPxClientDashboardItemDataAxisPointTuple">
    ///A ASPxClientDashboardItemDataAxisPointTuple object that is a tuple of axis points.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemData">
    ///An ASPxClientDashboardItemData object that is the slice of the current client data object by the specified axis point tuple.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the slice of the current ASPxClientDashboardItemData object by the specified axis point.
    ///</summary>
    ///<param name = "axisPoint" type = "ASPxClientDashboardItemDataAxisPoint">
    ///An ASPxClientDashboardItemDataAxisPoint object that is the data point in a multidimensional space.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemData">
    ///A ASPxClientDashboardItemData object that is the slice of the current ASPxClientDashboardItemData object by the specified axis point.
    ///</returns>
    ///</signature>
};
ASPxClientDashboardItemData.prototype.GetMeasureValue = function(measureId) {
    ///<summary>
    ///Returns a total summary value for the specified measure.
    ///</summary>
    ///<param name = "measureId" type = "String">
    ///A String that is the measure identifier.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemDataMeasureValue">
    ///A ASPxClientDashboardItemDataMeasureValue object providing the measure value and display text.
    ///</returns>
};
ASPxClientDashboardItemData.prototype.GetDeltaValue = function(deltaId) {
    ///<summary>
    ///Gets the summary value for the specified delta.
    ///</summary>
    ///<param name = "deltaId" type = "String">
    ///A String that is the data item identifier.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemDataDeltaValue">
    ///A ASPxClientDashboardItemDataDeltaValue object providing delta element values.
    ///</returns>
};
ASPxClientDashboardItemData.prototype.GetDataMembers = function() {
    ///<summary>
    ///Returns an array of data members available in a data source.
    ///</summary>
    ///<returns elementType = "String" type = "Array">
    ///An array of String values that represent data members available in a data source.
    ///</returns>
};
ASPxClientDashboardItemData.prototype.CreateTuple = function(values) {
    ///<signature>
    ///<summary>
    ///Creates a tuple based on the specified axes names and corresponding values.
    ///</summary>
    ///<param name = "values" elementType = "Object" type = "Array">
    ///An array of name-value pairs containing the axis name and corresponding values.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An ASPxClientDashboardItemDataAxisPointTuple object representing an axis point tuple.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Creates a tuple based on the specified axis points.
    ///</summary>
    ///<param name = "axisPoints" elementType = "ASPxClientDashboardItemDataAxisPoint" type = "Array">
    ///An array of ASPxClientDashboardItemDataAxisPoint objects that specify axis points belonging to different data axes.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An ASPxClientDashboardItemDataAxisPointTuple object representing an axis point tuple.
    ///</returns>
    ///</signature>
};
ASPxClientDashboardItemDataAxis.prototype.GetDimensions = function() {
    ///<summary>
    ///Gets the dimensions used to create a hierarchy of axis points belonging to the current axis.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataDimension">
    ///An array of ASPxClientDashboardItemDataDimension objects that contain the dimension metadata.
    ///</returns>
};
ASPxClientDashboardItemDataAxis.prototype.GetRootPoint = function() {
    ///<summary>
    ///Gets the root axis point belonging to the current ASPxClientDashboardItemDataAxis.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataAxisPoint">
    ///An ASPxClientDashboardItemDataAxisPoint object that is the root axis point.
    ///</returns>
};
ASPxClientDashboardItemDataAxis.prototype.GetPoints = function() {
    ///<summary>
    ///Returns axis points corresponding to values of the last-level dimension.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPoint">
    ///An array of ASPxClientDashboardItemDataAxisPoint objects that are axis points corresponding to values of the last-level dimension.
    ///</returns>
};
ASPxClientDashboardItemDataAxis.prototype.GetPointsByDimension = function(dimensionId) {
    ///<summary>
    ///Returns axis points corresponding to the specified dimension.
    ///</summary>
    ///<param name = "dimensionId" type = "String">
    ///A String that is the dimension identifier.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPoint">
    ///An array of ASPxClientDashboardItemDataAxisPoint objects that represent data points in a multidimensional space.
    ///</returns>
};
ASPxClientDashboardItemDataAxis.prototype.GetPointByUniqueValues = function(uniqueValues) {
    ///<summary>
    ///Returns the data point for the specified axis by unique values.
    ///</summary>
    ///<param name = "uniqueValues" elementType = "Object" type = "Array">
    ///A hierarchy of unique values identifying the required data point.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemDataAxisPoint">
    ///An ASPxClientDashboardItemDataAxisPoint object representing the data point belonging to the specified axis.
    ///</returns>
};
ASPxClientDashboardItemDataDimension.prototype.Format = function(value) {
    ///<summary>
    ///Formats the specified value using format settings of the current dimension.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///A value to be formatted.
    ///</param>
    ///<returns type = "String">
    ///A String that represents the formatted value.
    ///</returns>
};
ASPxClientDashboardItemDataMeasure.prototype.Format = function(value) {
    ///<summary>
    ///Formats the specified value using format settings of the current measure.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///A value to be formatted.
    ///</param>
    ///<returns type = "String">
    ///A String that represents the formatted value.
    ///</returns>
};
ASPxClientDashboardItemDataDimensionValue.prototype.GetValue = function() {
    ///<summary>
    ///Gets the current dimension value.
    ///</summary>
    ///<returns type = "Object">
    ///A String value that is the current dimension value.
    ///</returns>
};
ASPxClientDashboardItemDataDimensionValue.prototype.GetUniqueValue = function() {
    ///<summary>
    ///Gets the unique value for the current dimension value.
    ///</summary>
    ///<returns type = "Object">
    ///A String value that is the unique value for the current dimension value.
    ///</returns>
};
ASPxClientDashboardItemDataDimensionValue.prototype.GetDisplayText = function() {
    ///<summary>
    ///Gets the display text for the current dimension value.
    ///</summary>
    ///<returns type = "String">
    ///A String value that is the display text for the current dimension value.
    ///</returns>
};
ASPxClientDashboardItemDataMeasureValue.prototype.GetValue = function() {
    ///<summary>
    ///Gets the measure value.
    ///</summary>
    ///<returns type = "Object">
    ///A measure value.
    ///</returns>
};
ASPxClientDashboardItemDataMeasureValue.prototype.GetDisplayText = function() {
    ///<summary>
    ///Gets the measure display text.
    ///</summary>
    ///<returns type = "String">
    ///A String value that is the measure display text.
    ///</returns>
};
ASPxClientDashboardItemDataDeltaValue.prototype.GetActualValue = function() {
    ///<summary>
    ///Provides access to the actual value displayed within the delta element.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataMeasureValue">
    ///A ASPxClientDashboardItemDataMeasureValue object that contains the measure value and display text.
    ///</returns>
};
ASPxClientDashboardItemDataDeltaValue.prototype.GetTargetValue = function() {
    ///<summary>
    ///Provides access to the target value.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataMeasureValue">
    ///A ASPxClientDashboardItemDataMeasureValue object that contains the measure value and display text.
    ///</returns>
};
ASPxClientDashboardItemDataDeltaValue.prototype.GetAbsoluteVariation = function() {
    ///<summary>
    ///Provides access to the absolute difference between the actual and target values.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataMeasureValue">
    ///A ASPxClientDashboardItemDataMeasureValue object that contains the measure value and display text.
    ///</returns>
};
ASPxClientDashboardItemDataDeltaValue.prototype.GetPercentVariation = function() {
    ///<summary>
    ///Provides access to the percent of variation between the actual and target values.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataMeasureValue">
    ///A ASPxClientDashboardItemDataMeasureValue  object that contains the measure value and display text.
    ///</returns>
};
ASPxClientDashboardItemDataDeltaValue.prototype.GetPercentOfTarget = function() {
    ///<summary>
    ///Provides access to the percentage of the actual value in the target value.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataMeasureValue">
    ///A ASPxClientDashboardItemDataMeasureValue object that contains the measure value and display text.
    ///</returns>
};
ASPxClientDashboardItemDataDeltaValue.prototype.GetDisplayValue = function() {
    ///<summary>
    ///Provides access to the main delta value.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataMeasureValue">
    ///A ASPxClientDashboardItemDataMeasureValue object that contains the measure value and display text.
    ///</returns>
};
ASPxClientDashboardItemDataDeltaValue.prototype.GetDisplaySubValue1 = function() {
    ///<summary>
    ///Provides access to the first additional delta value.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataMeasureValue">
    ///A ASPxClientDashboardItemDataMeasureValue object that contains the measure value and display text.
    ///</returns>
};
ASPxClientDashboardItemDataDeltaValue.prototype.GetDisplaySubValue2 = function() {
    ///<summary>
    ///Provides access to the second additional delta value.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataMeasureValue">
    ///A ASPxClientDashboardItemDataMeasureValue object that contains the measure value and display text.
    ///</returns>
};
ASPxClientDashboardItemDataDeltaValue.prototype.GetIsGood = function() {
    ///<summary>
    ///Gets the value specifying the condition for displaying the delta indication.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataMeasureValue">
    ///A ASPxClientDashboardItemDataMeasureValue object that is the value specifying the condition for displaying the delta indication.
    ///</returns>
};
ASPxClientDashboardItemDataDeltaValue.prototype.GetIndicatorType = function() {
    ///<summary>
    ///Gets the type of delta indicator.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataMeasureValue">
    ///A ASPxClientDashboardItemDataMeasureValue object that is the type of delta indicator.
    ///</returns>
};
ASPxClientDashboardItemDataAxisPoint.prototype.GetAxisName = function() {
    ///<summary>
    ///Gets the name of the axis to which the current axis point belongs.
    ///</summary>
    ///<returns type = "String">
    ///A String that in the name of the axis.
    ///</returns>
};
ASPxClientDashboardItemDataAxisPoint.prototype.GetDimension = function() {
    ///<summary>
    ///Gets the last level dimension corresponding to the current axis point.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataDimension">
    ///A ASPxClientDashboardItemDataDimension object that contains the dimension metadata.
    ///</returns>
};
ASPxClientDashboardItemDataAxisPoint.prototype.GetDimensions = function() {
    ///<summary>
    ///Gets the collection of dimensions used to create a hierarchy of axis points from the root point to the current axis point.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataDimension">
    ///An array of ASPxClientDashboardItemDataDimension objects that contain the dimension metadata.
    ///</returns>
};
ASPxClientDashboardItemDataAxisPoint.prototype.GetValue = function() {
    ///<summary>
    ///Gets the value corresponding to the current axis point.
    ///</summary>
    ///<returns type = "Object">
    ///The value corresponding to the current axis point.
    ///</returns>
};
ASPxClientDashboardItemDataAxisPoint.prototype.GetDisplayText = function() {
    ///<summary>
    ///Gets the display text corresponding to the current axis point.
    ///</summary>
    ///<returns type = "String">
    ///A String that is the display text corresponding to the current axis point.
    ///</returns>
};
ASPxClientDashboardItemDataAxisPoint.prototype.GetUniqueValue = function() {
    ///<summary>
    ///Gets the unique value corresponding to the current axis point.
    ///</summary>
    ///<returns type = "Object">
    ///The unique value corresponding to the current axis point.
    ///</returns>
};
ASPxClientDashboardItemDataAxisPoint.prototype.GetDimensionValue = function() {
    ///<signature>
    ///<summary>
    ///Gets the dimension values at the specified axis point.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataDimensionValue">
    ///A ASPxClientDashboardItemDataDimensionValue object that contains the dimension values at the specified axis point.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the dimension value at the current axis point.
    ///</summary>
    ///<param name = "dimensionId" type = "String">
    ///A String value that specifies the dimension identifier.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemDataDimensionValue">
    ///A ASPxClientDashboardItemDataDimensionValue object containing dimension values at the current axis point.
    ///</returns>
    ///</signature>
};
ASPxClientDashboardItemDataAxisPoint.prototype.GetChildren = function() {
    ///<summary>
    ///Gets the child axis points for the current axis point.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPoint">
    ///An array of ASPxClientDashboardItemDataAxisPoint objects representing child axis points.
    ///</returns>
};
ASPxClientDashboardItemDataAxisPoint.prototype.GetParent = function() {
    ///<summary>
    ///Gets the parent axis point for the current axis point.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataAxisPoint">
    ///An ASPxClientDashboardItemDataAxisPoint object representing the parent axis point.
    ///</returns>
};
ASPxClientDashboardItemDataAxisPointTuple.prototype.GetAxisPoint = function() {
    ///<signature>
    ///<summary>
    ///Returns the axis point belonging to the default data axis.
    ///</summary>
    ///<returns type = "ASPxClientDashboardItemDataAxisPoint">
    ///An ASPxClientDashboardItemDataAxisPoint object that is the axis point.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the axis point belonging to the specified data axis.
    ///</summary>
    ///<param name = "axisName" type = "String">
    ///A string value returned by the DashboardDataAxisNames class that specifies the name of the data axis.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemDataAxisPoint">
    ///An ASPxClientDashboardItemDataAxisPoint object that is the axis point.
    ///</returns>
    ///</signature>
};
ASPxClientDashboardParameters.prototype.GetParameterList = function() {
    ///<summary>
    ///Returns an array of dashboard parameters from the ASPxClientDashboardParameters collection.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDashboardParameter">
    ///An array of ASPxClientDashboardParameter objects representing client-side dashboard parameters.
    ///</returns>
};
ASPxClientDashboardParameters.prototype.GetParameterByName = function(name) {
    ///<summary>
    ///Returns a dashboard parameter by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A String object that specifies the parameter name.
    ///</param>
    ///<returns type = "ASPxClientDashboardParameter">
    ///A ASPxClientDashboardParameter object that is the client-side dashboard parameter.
    ///</returns>
};
ASPxClientDashboardParameters.prototype.GetParameterByIndex = function(index) {
    ///<summary>
    ///Returns a dashboard parameter by its index in the ASPxClientDashboardParameters collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the parameter index.
    ///</param>
    ///<returns type = "ASPxClientDashboardParameter">
    ///A ASPxClientDashboardParameter object that is the client-side dashboard parameter.
    ///</returns>
};
ASPxClientDashboardParameter.prototype.GetName = function() {
    ///<summary>
    ///Returns a parameter name.
    ///</summary>
    ///<returns type = "String">
    ///A String that is the parameter name.
    ///</returns>
};
ASPxClientDashboardParameter.prototype.GetValue = function() {
    ///<summary>
    ///Returns a current parameter value(s).
    ///</summary>
    ///<returns type = "Object">
    ///A current parameter value(s).
    ///</returns>
};
ASPxClientDashboardParameter.prototype.SetValue = function(value) {
    ///<summary>
    ///Specifies the current parameter value(s).
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The current parameter value(s).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardParameter.prototype.GetDefaultValue = function() {
    ///<summary>
    ///Returns a default parameter value.
    ///</summary>
    ///<returns type = "Object">
    ///A default parameter value.
    ///</returns>
};
ASPxClientDashboardParameter.prototype.GetDescription = function() {
    ///<summary>
    ///Returns the parameter's description displayed to an end-user.
    ///</summary>
    ///<returns type = "String">
    ///A String that is the parameter's description displayed to an end-user.
    ///</returns>
};
ASPxClientDashboardParameter.prototype.GetType = function() {
    ///<signature>
    ///<summary>
    ///Returns a parameter type.
    ///</summary>
    ///<returns type = "String">
    ///A String that identifies the type of dashboard parameter value.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<returns type = "Type">
    ///</returns>
    ///</signature>
};
ASPxClientDashboardParameter.prototype.GetValues = function() {
    ///<summary>
    ///Returns possible parameter values.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDashboardParameterValue">
    ///An array of ASPxClientDashboardParameterValue objects that provide access to parameter values and display texts.
    ///</returns>
};
ASPxClientDashboardParameterValue.prototype.GetDisplayText = function() {
    ///<summary>
    ///Returns the parameter display text.
    ///</summary>
    ///<returns type = "String">
    ///A String that is the parameter display text.
    ///</returns>
};
ASPxClientDashboardParameterValue.prototype.GetValue = function() {
    ///<summary>
    ///Returns a parameter value.
    ///</summary>
    ///<returns type = "Object">
    ///A parameter value.
    ///</returns>
};
ASPxClientDashboard.prototype.PerformDataCallback = function(parameter, onCallback) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientDataCallback">
    ///A ASPxClientDataCallback object that represents the JavaScript function which receives the callback data as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.GetDashboardControl = function() {
    ///<summary>
    ///Gets an inner part of the ASPxClientDashboard control.
    ///</summary>
    ///<returns type = "DashboardControl">
    ///A ASPxClientDashboard control.
    ///</returns>
};
ASPxClientDashboard.prototype.SwitchToViewer = function() {
    ///<summary>
    ///Switches the ASPxClientDashboard to the viewer mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.SwitchToDesigner = function() {
    ///<summary>
    ///Switches the ASPxClientDashboard to the designer mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.GetWorkingMode = function() {
    ///<summary>
    ///Gets the current working mode of the Web Dashboard.
    ///</summary>
    ///<returns type = "String">
    ///A String value that is the working mode of the Web Dashboard.
    ///</returns>
};
ASPxClientDashboard.prototype.GetDashboardId = function() {
    ///<summary>
    ///Gets the identifier of the dashboard that is displayed in the ASPxClientDashboard.
    ///</summary>
    ///<returns type = "String">
    ///A String value that is the identifier of the dashboard displayed in the ASPxClientDashboard.
    ///</returns>
};
ASPxClientDashboard.prototype.GetDashboardName = function() {
    ///<summary>
    ///Gets the name of the dashboard that is displayed in the ASPxClientDashboard.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the name of the dashboard displayed in the ASPxClientDashboard.
    ///</returns>
};
ASPxClientDashboard.prototype.GetDashboardState = function() {
    ///<summary>
    ///Gets the state of the dashboard displayed in the ASPxClientDashboard.
    ///</summary>
    ///<returns type = "String">
    ///A string value that identifies the state of the dashboard displayed in the ASPxClientDashboard.
    ///</returns>
};
ASPxClientDashboard.prototype.SetDashboardState = function(dashboardState) {
    ///<signature>
    ///<summary>
    ///Sets the state of the dashboard displayed in the ASPxClientDashboard.
    ///</summary>
    ///<param name = "dashboardState" type = "Object">
    ///A JSON object that specifies the dashboard state.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the state of the dashboard displayed in the ASPxClientDashboard.
    ///</summary>
    ///<param name = "dashboardStateString" type = "String">
    ///A string value that specifies the state of the dashboard displayed in the ASPxClientDashboard.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboard.prototype.LoadDashboard = function(dashboardId) {
    ///<summary>
    ///Loads a dashboard with the specified identifier from the dashboard storage.
    ///</summary>
    ///<param name = "dashboardId" type = "String">
    ///A String value that specifies the dashboard identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.SaveDashboard = function() {
    ///<summary>
    ///Saves a current dashboard to the dashboard storage.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.ShowParametersDialog = function() {
    ///<summary>
    ///Invokes the Dashboard Parameters dialog.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.HideParametersDialog = function() {
    ///<summary>
    ///Closes the Dashboard Parameters dialog.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.GetParameters = function() {
    ///<summary>
    ///Returns dashboard parameter settings and metadata.
    ///</summary>
    ///<returns type = "ASPxClientDashboardParameters">
    ///A ASPxClientDashboardParameter objects.
    ///</returns>
};
ASPxClientDashboard.prototype.ShowExportDashboardDialog = function(format) {
    ///<summary>
    ///Invokes the dialog that allows end-users to export the entire dashboard to the specified format.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string value that specifies the format. For instance, you can use 'PDF' or 'Image'.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.ShowExportDashboardItemDialog = function(itemComponentName, format) {
    ///<summary>
    ///Invokes the dialog that allows end-users to export the dashboard item to the specified format.
    ///</summary>
    ///<param name = "itemComponentName" type = "String">
    ///A string value that specifies the component name of the dashboard item to export.
    ///</param>
    ///<param name = "format" type = "String">
    ///A string value that specifies the format. For instance, you can use 'PDF, 'Image' or 'Excel'. Note that some items (i.e., ImageDashboardItem) do not support exporting to the 'Excel' format.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.HideExportDialog = function() {
    ///<summary>
    ///Hides the dialog that allows end-users to export the dashboard/dashboard item.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.GetExportOptions = function() {
    ///<summary>
    ///Returns settings that specify parameters affecting how the dashboard is exported.
    ///</summary>
    ///<returns type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</returns>
};
ASPxClientDashboard.prototype.GetPdfExportOptions = function() {
    ///<summary>
    ///Allows you to obtain options related to exporting a dashboard/dashboard item to the PDF format.
    ///</summary>
    ///<returns type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing options related to exporting a dashboard/dashboard item to the PDF format.
    ///</returns>
};
ASPxClientDashboard.prototype.GetImageExportOptions = function() {
    ///<summary>
    ///Allows you to obtain options related to exporting a dashboard/dashboard item to an image.
    ///</summary>
    ///<returns type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing options related to exporting a dashboard/dashboard item to an image.
    ///</returns>
};
ASPxClientDashboard.prototype.GetExcelExportOptions = function() {
    ///<summary>
    ///Allows you to obtain options related to exporting a dashboard/dashboard item to the Excel format.
    ///</summary>
    ///<returns type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing options related to exporting a dashboard item to the Excel format.
    ///</returns>
};
ASPxClientDashboard.prototype.SetExportOptions = function(options) {
    ///<summary>
    ///Specifies settings that specify parameters affecting how the dashboard is exported.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.SetPdfExportOptions = function(options) {
    ///<summary>
    ///Allows you to specify options related to exporting a dashboard/dashboard item to the PDF format.
    ///</summary>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing options related to exporting a dashboard/dashboard item to the PDF format.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.SetImageExportOptions = function(options) {
    ///<summary>
    ///Allows you to specify options related to exporting a dashboard/dashboard item to an image.
    ///</summary>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing options related to exporting a dashboard/dashboard item to an image.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.SetExcelExportOptions = function(options) {
    ///<summary>
    ///Allows you to specify options related to exporting a dashboard/dashboard item to the Excel format.
    ///</summary>
    ///<param name = "options" type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing options related to exporting a dashboard item to the Excel format.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.ExportToPdf = function() {
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file and writes it to the Response.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing PDF-specific export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing PDF-specific export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboard.prototype.ExportToImage = function() {
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file and writes it to the Response.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing image-specific export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing image-specific export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboard.prototype.ExportToExcel = function() {
    ///<signature>
    ///<summary>
    ///Exports dashboard data to the specified file in Excel format.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports dashboard data to the specified file in Excel format.
    ///</summary>
    ///<param name = "options" type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing Excel-specific options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports dashboard data to the specified file in Excel format.
    ///</summary>
    ///<param name = "options" type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing Excel-specific options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string value that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboard.prototype.ExportDashboardItemToPdf = function(itemName) {
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing PDF-specific export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing PDF-specific export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboard.prototype.ExportDashboardItemToImage = function(itemName) {
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing image-specific export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing image-specific export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string value that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string value that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboard.prototype.ExportDashboardItemToExcel = function(itemName) {
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing Excel export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing Excel export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported Excel file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported Excel file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboard.prototype.CanSetMasterFilter = function(itemName) {
    ///<summary>
    ///Returns whether or not master filtering  can be applied in the current state of the specified master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that specifies the component name of the master filter item.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if master filtering can be applied in the current state of the specified master filter item; otherwise, false.
    ///</returns>
};
ASPxClientDashboard.prototype.CanClearMasterFilter = function(itemName) {
    ///<summary>
    ///Returns whether or not the specified master filter can be cleared in the current state.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that specifies the component name of the master filter item.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified master filter can be cleared in the current state; otherwise, false.
    ///</returns>
};
ASPxClientDashboard.prototype.CanPerformDrillDown = function(itemName) {
    ///<summary>
    ///Returns whether or not drill down is possible in the current state of the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that specifies the component name of the dashboard item.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if drill down is possible in the current state of the specified dashboard item; otherwise, false.
    ///</returns>
};
ASPxClientDashboard.prototype.CanPerformDrillUp = function(itemName) {
    ///<summary>
    ///Returns whether or not drill up is possible in the current state of the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that specifies the component name of the dashboard item.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if drill up is possible in the current state of the specified dashboard item; otherwise, false.
    ///</returns>
};
ASPxClientDashboard.prototype.SetMasterFilter = function(itemName, values) {
    ///<signature>
    ///<summary>
    ///Selects required elements by their values in the specified master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the master filter item.
    ///</param>
    ///<param name = "values" elementType = "Object[]" type = "Array">
    ///Values that will be used to select elements in the master filter item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the required elements in the specified master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that species the component name of the master filter item.
    ///</param>
    ///<param name = "axisPointTuples" elementType = "ASPxClientDashboardItemDataAxisPointTuple" type = "Array">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects used to identify master filter elements.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboard.prototype.PerformDrillDown = function(itemName, value) {
    ///<signature>
    ///<summary>
    ///Performs a drill-down into the required element by its value.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that species the component name of the dashboard item.
    ///</param>
    ///<param name = "value" type = "Object">
    ///A value that will be used to perform a drill-down for the required element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Performs a drill-down into the required element.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<param name = "axisPointTuple" type = "ASPxClientDashboardItemDataAxisPointTuple">
    ///A ASPxClientDashboardItemDataAxisPointTuple object representing a set of axis points.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboard.prototype.ClearMasterFilter = function(itemName) {
    ///<summary>
    ///Clears the specified master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that specifies the component name of the master filter item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.PerformDrillUp = function(itemName) {
    ///<summary>
    ///Performs a drill-up for the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.GetAvailableDrillDownValues = function(itemName) {
    ///<summary>
    ///Returns axis point tuples identifying elements that can be used to perform drill-down in the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects identifying elements that can be used to perform drill-down in the specified dashboard item.
    ///</returns>
};
ASPxClientDashboard.prototype.GetCurrentDrillDownValues = function(itemName) {
    ///<summary>
    ///Returns the axis point tuple identifying the current drill-down state.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An ASPxClientDashboardItemDataAxisPointTuple object representing a set of axis points.
    ///</returns>
};
ASPxClientDashboard.prototype.GetAvailableFilterValues = function(itemName) {
    ///<summary>
    ///Returns axis point tuples identifying elements that can be selected in the current state of the master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the master filter item.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects identifying elements that can be selected in the current state of the master filter item.
    ///</returns>
};
ASPxClientDashboard.prototype.GetCurrentFilterValues = function(itemName) {
    ///<summary>
    ///Returns axis point tuples identifying currently selected elements in the master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the master filter item.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects identifying elements that can be selected in the current state of the master filter item.
    ///</returns>
};
ASPxClientDashboard.prototype.GetCurrentSelection = function(itemName) {
    ///<summary>
    ///Returns currently selected elements in the master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies a component name of the master filter item.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects that identify currently selected elements.
    ///</returns>
};
ASPxClientDashboard.prototype.GetItemData = function(itemName) {
    ///<summary>
    ///Returns the client data for the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemData">
    ///An ASPxClientDashboardItemData object that represents multidimensional data visualized in the dashboard item.
    ///</returns>
};
ASPxClientDashboard.prototype.Refresh = function() {
    ///<signature>
    ///<summary>
    ///Refreshes an entire dashboard displayed in the Web Dashboard control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Refreshes the specific item from the dashboard displayed in the Web Dashboard control.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string value that specifies the component name of the dashboard item to be refreshed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Refreshes specific items from the dashboard displayed in the Web Dashboard control.
    ///</summary>
    ///<param name = "itemName" elementType = "String" type = "Array">
    ///An array of string values that specify the component names of the dashboard items to be refreshed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboard.prototype.RequestUnderlyingData = function(itemName, args, onCompleted) {
    ///<summary>
    ///Requests underlying data for the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<param name = "args" type = "ASPxClientDashboardItemRequestUnderlyingDataParameters">
    ///A ASPxClientDashboardItemRequestUnderlyingDataParameters object containing parameters used to obtain the underlying data.
    ///</param>
    ///<param name = "onCompleted" type = "ASPxClientDashboardItemRequestUnderlyingDataCompleted">
    ///A ASPxClientDashboardItemRequestUnderlyingDataCompleted object that references a method executed after the request is completed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.GetCurrentRange = function(itemName) {
    ///<summary>
    ///Returns the currently selected range in the specified Range Filter dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String value that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<returns type = "ASPxClientDashboardRangeFilterSelection">
    ///A ASPxClientDashboardRangeFilterSelection object that is the selected range.
    ///</returns>
};
ASPxClientDashboard.prototype.GetEntireRange = function(itemName) {
    ///<summary>
    ///Returns the visible range for the specified Range Filter dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String value that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<returns type = "ASPxClientDashboardRangeFilterSelection">
    ///A ASPxClientDashboardRangeFilterSelection object that is the visible range.
    ///</returns>
};
ASPxClientDashboard.prototype.SetRange = function(itemName, range) {
    ///<summary>
    ///Selects the required range in the specified Range Filter dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<param name = "range" type = "ASPxClientDashboardRangeFilterSelection">
    ///A ASPxClientDashboardRangeFilterSelection object that specifies a range to be selected.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.SetPredefinedRange = function(itemName, dateTimePeriodName) {
    ///<summary>
    ///Selects a predefined range in the Range Filter dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String value that specifies the component name of the Range Filter.
    ///</param>
    ///<param name = "dateTimePeriodName" type = "String">
    ///A String value that specifies the predefined range name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.GetAvailablePredefinedRanges = function(itemName) {
    ///<summary>
    ///Returns names of the predefined ranges available for the specified Range Filter.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string value that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<returns elementType = "String" type = "Array">
    ///An array of string values that are names of the available predefined ranges.
    ///</returns>
};
ASPxClientDashboard.prototype.GetCurrentPredefinedRange = function(itemName) {
    ///<summary>
    ///Returns the name of the currently selected predefined range.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string value that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<returns type = "String">
    ///A string value that is the name of the currently selected predefined range.
    ///</returns>
};
ASPxClientDashboard.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDashboard.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDashboard.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDashboard.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientDashboard.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDashboard.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboard.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDashboardCustomizeMenuItemsEventArgs.prototype.FindById = function(itemId) {
    ///<returns type = "ASPxClientDashboardMenuItem">
    ///</returns>
};
ASPxClientDashboardItemEventArgs.prototype.IsNullValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is null.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is null; otherwise, false.
    ///</returns>
};
ASPxClientDashboardItemEventArgs.prototype.IsOthersValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is 'others'.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is 'others'; otherwise, false.
    ///</returns>
};
ASPxClientDashboardItemMasterFilterStateChangedEventArgs.prototype.Values = [[0]];
ASPxClientDashboardItemMasterFilterStateChangedEventArgs.prototype.IsNullValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is null.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is null; otherwise, false.
    ///</returns>
};
ASPxClientDashboardItemMasterFilterStateChangedEventArgs.prototype.IsOthersValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is 'others'.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is 'others'; otherwise, false.
    ///</returns>
};
ASPxClientDashboardItemDrillDownStateChangedEventArgs.prototype.IsNullValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is null.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is null; otherwise, false.
    ///</returns>
};
ASPxClientDashboardItemDrillDownStateChangedEventArgs.prototype.IsOthersValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is 'others'.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is 'others'; otherwise, false.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.ReloadData = function() {
    ///<signature>
    ///<summary>
    ///Reloads data in the data sources.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Reloads data in the data sources.
    ///</summary>
    ///<param name = "parameters" elementType = "ASPxClientDashboardParameter" type = "Array">
    ///An array of ASPxClientDashboardParameter objects that specify dashboard parameters on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboardViewer.prototype.GetParameters = function() {
    ///<summary>
    ///Returns dashboard parameter settings and metadata.
    ///</summary>
    ///<returns type = "ASPxClientDashboardParameters">
    ///A ASPxClientDashboardParameter objects.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.BeginUpdateParameters = function() {
    ///<summary>
    ///Locks the EndUpdateParameters method call.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.EndUpdateParameters = function() {
    ///<summary>
    ///Unlocks the BeginUpdateParameters method and applies changes made to the parameter settings.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetCurrentRange = function(itemName) {
    ///<summary>
    ///Returns the currently selected range in the specified Range Filter dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String value that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<returns type = "ASPxClientDashboardRangeFilterSelection">
    ///A ASPxClientDashboardRangeFilterSelection object that is the selected range.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetEntireRange = function(itemName) {
    ///<summary>
    ///Returns the visible range for the specified Range Filter dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String value that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<returns type = "ASPxClientDashboardRangeFilterSelection">
    ///A ASPxClientDashboardRangeFilterSelection object that is the visible range.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.SetRange = function(itemName, range) {
    ///<summary>
    ///Selects the required range in the specified Range Filter dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<param name = "range" type = "ASPxClientDashboardRangeFilterSelection">
    ///A ASPxClientDashboardRangeFilterSelection object that specifies a range to be selected.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.SetPredefinedRange = function(itemName, dateTimePeriodName) {
    ///<summary>
    ///Selects a predefined range in the Range Filter dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String value that specifies the component name of the Range Filter.
    ///</param>
    ///<param name = "dateTimePeriodName" type = "String">
    ///A String value that specifies the predefined range name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetAvailablePredefinedRanges = function(itemName) {
    ///<summary>
    ///Returns names of the predefined ranges available for the specified Range Filter.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string value that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<returns elementType = "String" type = "Array">
    ///An array of string values that are names of the available predefined ranges.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetCurrentPredefinedRange = function(itemName) {
    ///<summary>
    ///Returns the name of the currently selected predefined range.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string value that specifies the component name of the Range Filter dashboard item.
    ///</param>
    ///<returns type = "String">
    ///A string value that is the name of the currently selected predefined range.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetAvailableDrillDownValues = function(itemName) {
    ///<summary>
    ///Returns axis point tuples identifying elements that can be used to perform drill-down in the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects identifying elements that can be used to perform drill-down in the specified dashboard item.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetCurrentDrillDownValues = function(itemName) {
    ///<summary>
    ///Returns the axis point tuple identifying the current drill-down state.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An ASPxClientDashboardItemDataAxisPointTuple object representing a set of axis points.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetAvailableFilterValues = function(itemName) {
    ///<summary>
    ///Returns axis point tuples identifying elements that can be selected in the current state of the master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the master filter item.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects identifying elements that can be selected in the current state of the master filter item.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetCurrentFilterValues = function(itemName) {
    ///<summary>
    ///Returns axis point tuples identifying currently selected elements in the master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the master filter item.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects identifying elements that can be selected in the current state of the master filter item.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetCurrentSelection = function(itemName) {
    ///<summary>
    ///Returns currently selected elements in the master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies a component name of the master filter item.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDashboardItemDataAxisPointTuple">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects that identify currently selected elements.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.RequestUnderlyingData = function(itemName, args, onCompleted) {
    ///<summary>
    ///Requests underlying data for the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<param name = "args" type = "ASPxClientDashboardItemRequestUnderlyingDataParameters">
    ///A ASPxClientDashboardItemRequestUnderlyingDataParameters object containing parameters used to obtain the underlying data.
    ///</param>
    ///<param name = "onCompleted" type = "ASPxClientDashboardItemRequestUnderlyingDataCompleted">
    ///A ASPxClientDashboardItemRequestUnderlyingDataCompleted object that references a method executed after the request is completed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.ShowParametersDialog = function() {
    ///<summary>
    ///Invokes the Dashboard Parameters dialog.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.HideParametersDialog = function() {
    ///<summary>
    ///Closes the Dashboard Parameters dialog.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetExportOptions = function() {
    ///<summary>
    ///Returns settings that specify parameters affecting how the dashboard is exported.
    ///</summary>
    ///<returns type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetPdfExportOptions = function() {
    ///<summary>
    ///Allows you to obtain options related to exporting a dashboard/dashboard item to the PDF format.
    ///</summary>
    ///<returns type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing options related to exporting a dashboard/dashboard item to the PDF format.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetImageExportOptions = function() {
    ///<summary>
    ///Allows you to obtain options related to exporting a dashboard/dashboard item to an image.
    ///</summary>
    ///<returns type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing options related to exporting a dashboard/dashboard item to an image.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetExcelExportOptions = function() {
    ///<summary>
    ///Allows you to obtain options related to exporting a dashboard/dashboard item to the Excel format.
    ///</summary>
    ///<returns type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing options related to exporting a dashboard item to the Excel format.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.SetExportOptions = function(options) {
    ///<summary>
    ///Specifies settings that specify parameters affecting how the dashboard is exported.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.SetPdfExportOptions = function(options) {
    ///<summary>
    ///Allows you to specify options related to exporting a dashboard/dashboard item to the PDF format.
    ///</summary>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing options related to exporting a dashboard/dashboard item to the PDF format.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.SetImageExportOptions = function(options) {
    ///<summary>
    ///Allows you to specify options related to exporting a dashboard/dashboard item to an image.
    ///</summary>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing options related to exporting a dashboard/dashboard item to an image.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.SetExcelExportOptions = function(options) {
    ///<summary>
    ///Allows you to specify options related to exporting a dashboard/dashboard item to the Excel format.
    ///</summary>
    ///<param name = "options" type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing options related to exporting a dashboard item to the Excel format.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.ExportToPdf = function() {
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file and writes it to the Response.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing PDF-specific export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing PDF-specific export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboardViewer.prototype.ExportToImage = function() {
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file and writes it to the Response.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing image-specific export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing image-specific export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///A ASPxClientDashboardExportOptions object containing settings that specify parameters affecting how the dashboard is exported.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboardViewer.prototype.ExportToExcel = function() {
    ///<signature>
    ///<summary>
    ///Exports dashboard data to the specified file in Excel format.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports dashboard data to the specified file in Excel format.
    ///</summary>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardExcelExportOptions object containing Excel-specific options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports dashboard data to the specified file in Excel format.
    ///</summary>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardExcelExportOptions object containing Excel-specific options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string value that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboardViewer.prototype.ExportDashboardItemToPdf = function(itemName) {
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item to be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing PDF-specific export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardPdfExportOptions">
    ///A DashboardPdfExportOptions object containing PDF-specific export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to a PDF file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboardViewer.prototype.ExportDashboardItemToImage = function(itemName) {
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item to be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing image-specific export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardImageExportOptions">
    ///A DashboardImageExportOptions object containing image-specific export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string value that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Image file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string value that specifies the name of the exported file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboardViewer.prototype.ExportDashboardItemToExcel = function(itemName) {
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item to be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing Excel export options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "DashboardExcelExportOptions">
    ///A DashboardExcelExportOptions object containing Excel export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported Excel file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options to be applied to the exported dashboard item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a dashboard item to an Excel file with the specified export options and writes it to the Response.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A string that is the component name of the dashboard item to be exported.
    ///</param>
    ///<param name = "options" type = "ASPxClientDashboardExportOptions">
    ///An ASPxClientDashboardExportOptions object containing export options.
    ///</param>
    ///<param name = "fileName" type = "String">
    ///A string that specifies the name of the exported Excel file.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboardViewer.prototype.GetWidth = function() {
    ///<signature>
    ///<summary>
    ///Returns the dashboard width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the dashboard width.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
    ///</signature>
};
ASPxClientDashboardViewer.prototype.GetHeight = function() {
    ///<signature>
    ///<summary>
    ///Returns the dashboard height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the dashboard height.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
    ///</signature>
};
ASPxClientDashboardViewer.prototype.SetWidth = function(width) {
    ///<signature>
    ///<summary>
    ///Specifies the dashboard width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the dashboard width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboardViewer.prototype.SetHeight = function(height) {
    ///<signature>
    ///<summary>
    ///Specifies the dashboard height.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the dashboard height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboardViewer.prototype.SetSize = function(width, height) {
    ///<summary>
    ///Specifies the dashboard size.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the dashboard width.
    ///</param>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the dashboard height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.SetMasterFilter = function(itemName, values) {
    ///<signature>
    ///<summary>
    ///Selects required elements by their values in the specified master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that species the component name of the master filter item.
    ///</param>
    ///<param name = "values" elementType = "Object[]" type = "Array">
    ///Values that will be used to select elements in the master filter item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the required elements in the specified master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the master filter item.
    ///</param>
    ///<param name = "axisPointTuples" elementType = "ASPxClientDashboardItemDataAxisPointTuple" type = "Array">
    ///An array of ASPxClientDashboardItemDataAxisPointTuple objects used to identify master filter elements.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboardViewer.prototype.PerformDrillDown = function(itemName, value) {
    ///<signature>
    ///<summary>
    ///Performs a drill-down for the required element by its value.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that species the component name of the dashboard item.
    ///</param>
    ///<param name = "value" type = "Object">
    ///A value that will be used to perform a drill-down for the required element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Performs a drill-down for the required element.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<param name = "axisPointTuple" type = "ASPxClientDashboardItemDataAxisPointTuple">
    ///A ASPxClientDashboardItemDataAxisPointTuple object representing a set of axis points.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDashboardViewer.prototype.ClearMasterFilter = function(itemName) {
    ///<summary>
    ///Clears the specified master filter item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the master filter item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.PerformDrillUp = function(itemName) {
    ///<summary>
    ///Performs a drill-up for the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.CanSetMasterFilter = function(itemName) {
    ///<summary>
    ///Returns whether or not the specified master filter item allows selecting one or more elements.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the master filter item.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified master filter item allows selecting one or more elements; otherwise, false.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.CanClearMasterFilter = function(itemName) {
    ///<summary>
    ///Returns whether or not the specified master filter can be cleared in the current state.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the master filter item.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified master filter can be cleared in the current state; otherwise, false.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.CanPerformDrillDown = function(itemName) {
    ///<summary>
    ///Returns whether or not drill down is possible in the current state of the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if drill down is possible in the current state of the specified dashboard item; otherwise, false.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.CanPerformDrillUp = function(itemName) {
    ///<summary>
    ///Returns whether or not drill up is possible in the current state of the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if drill up is possible in the current state of the specified dashboard item; otherwise, false.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetItemData = function(itemName) {
    ///<summary>
    ///Returns the client data for the specified dashboard item.
    ///</summary>
    ///<param name = "itemName" type = "String">
    ///A String that specifies the component name of the dashboard item.
    ///</param>
    ///<returns type = "ASPxClientDashboardItemData">
    ///An ASPxClientDashboardItemData object that represents multidimensional data visualized in the dashboard item.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientDashboardViewer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDashboardViewer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardViewer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDashboardDataLoadingErrorEventArgs.prototype.IsErrorMessageShown = function() {
    ///<summary>
    ///Allows you to determine whether or not the error message will be shown.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the error message will be shown; otherwise, false.
    ///</returns>
};
ASPxClientDashboardDataLoadingErrorEventArgs.prototype.ShowErrorMessage = function(value) {
    ///<summary>
    ///Allows you to specify whether to show the error message.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, to show the error message; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardDataLoadingErrorEventArgs.prototype.GetError = function() {
    ///<summary>
    ///Allows you to obtain the displayed error message.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the displayed error message.
    ///</returns>
};
ASPxClientDashboardDataLoadingErrorEventArgs.prototype.SetError = function(value) {
    ///<summary>
    ///Allows you to specify the displayed error message.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies the displayed error message.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDashboardMasterFilterSetEventArgs.prototype.Values = [[0]];
ASPxClientDashboardMasterFilterSetEventArgs.prototype.IsNullValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is NullValue.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is NullValue; otherwise, false.
    ///</returns>
};
ASPxClientDashboardMasterFilterSetEventArgs.prototype.IsOthersValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is OthersValue.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is OthersValue; otherwise, false.
    ///</returns>
};
ASPxClientDashboardDrillDownPerformedEventArgs.prototype.IsNullValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is NullValue.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is NullValue; otherwise, false.
    ///</returns>
};
ASPxClientDashboardDrillDownPerformedEventArgs.prototype.IsOthersValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is OthersValue.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is OthersValue; otherwise, false.
    ///</returns>
};
IExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
IExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardControl.prototype.initializeDashboard = function(id, dashboardJson) {
    ///<signature>
    ///<summary>
    ///Initializes a new dashboard with the specified name and JSON model.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string value that is a unique name of the created dashboard.
    ///</param>
    ///<param name = "dashboardJson" type = "String">
    ///A dashboard model encoded in the specified JSON string.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Initializes a new dashboard with the specified name, JSON model and initial state.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string value that is a unique name of the created dashboard.
    ///</param>
    ///<param name = "dashboardJson" type = "String">
    ///A dashboard model encoded in the specified JSON string.
    ///</param>
    ///<param name = "initialState" type = "Object">
    ///A JSON object that specifies the dashboard state.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
DashboardControl.prototype.registerExtension = function(extension) {
    ///<summary>
    ///Allows you to register a dashboard extension to add its functionality to the Web Dashboard.
    ///</summary>
    ///<param name = "extension" type = "IExtension">
    ///An IExtension object that is a dashboard extension.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
DashboardControl.prototype.findExtension = function(extensionName) {
    ///<summary>
    ///Allows you to get access to the extension.
    ///</summary>
    ///<param name = "extensionName" type = "String">
    ///A string value that is the dashboard extension name.
    ///</param>
    ///<returns type = "IExtension">
    ///An <see cref="IExtension" /> object that is a dashboard extension.
    ///</returns>
};
DashboardControl.prototype.unregisterExtension = function(extensionName) {
    ///<summary>
    ///Allows you to unregister a dashboard extension to disable its functionality in the Web Dashboard.
    ///</summary>
    ///<param name = "extensionName" type = "String">
    ///A string value that is a dashboard extension name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
DashboardParameterDialogExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardParameterDialogExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardExportExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardExportExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardClientApiExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardClientApiExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardCurrencyEditorExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardCurrencyEditorExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DataSourceBrowserExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DataSourceBrowserExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DataSourceWizardExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DataSourceWizardExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboadItemMenuExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboadItemMenuExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
UndoRedoExtension.prototype.isChanged = function() {
    ///<summary>
    ///Allows you to track whether the Web Dashboard has unsaved changes.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the Web Dashboard has unsaved changes; otherwise, false.
    ///</returns>
};
UndoRedoExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
UndoRedoExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BindingPanelExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BindingPanelExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardColorSchemeEditorExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardColorSchemeEditorExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ConversionPanelExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ConversionPanelExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
SaveDashboardExtension.prototype.performSaveDashboard = function(dashboardId, dashboardJson) {
    ///<summary>
    ///Allows you to save the current dashboard with a specified unique name and JSON model.
    ///</summary>
    ///<param name = "dashboardId" type = "String">
    ///A string value that is a unique name of the created dashboard.
    ///</param>
    ///<param name = "dashboardJson" type = "String">
    ///A dashboard model encoded in the specified JSON string.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
SaveDashboardExtension.prototype.ensureDashboardSaved = function(action) {
    ///<summary>
    ///Allows you to invoke a custom function while you save a dashboard.
    ///</summary>
    ///<param name = "action" type = "Action">
    ///A custom function that is invoked when the dashboard is about to be saved.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
SaveDashboardExtension.prototype.saveDashboard = function() {
    ///<summary>
    ///Saves the opened dashboard.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
SaveDashboardExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
SaveDashboardExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
CreateDashboardExtension.prototype.performCreateDashboard = function(dashboardName, dashboardJson) {
    ///<summary>
    ///Creates a new dashboard with a specified name and JSON model.
    ///</summary>
    ///<param name = "dashboardName" type = "String">
    ///A string value that is the name of the created dashboard.
    ///</param>
    ///<param name = "dashboardJson" type = "String">
    ///A dashboard model encoded in the specified JSON string.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
CreateDashboardExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
CreateDashboardExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
OpenDashboardExtension.prototype.loadDashboard = function(id) {
    ///<summary>
    ///Loads a dashboard with the specified identifier from the dashboard storage.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A String value that specifies the unique dashboard name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
OpenDashboardExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
OpenDashboardExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
InteractivityPanelExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
InteractivityPanelExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
OptionsPanelExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
OptionsPanelExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardTitleEditorExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardTitleEditorExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardPanelExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardPanelExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
AvailableDataSourcesExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
AvailableDataSourcesExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ToolboxExtension.prototype.addMenuItem = function(menuItem) {
    ///<summary>
    ///Allows you to add a specified menu item to the dashboard menu.
    ///</summary>
    ///<param name = "menuItem" type = "DashboardMenuItem">
    ///A DashboardMenuItem object that is a dashboard menu item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ToolboxExtension.prototype.removeMenuItem = function(menuItemId) {
    ///<summary>
    ///Removes the specified dashboard item from the dashboard menu.
    ///</summary>
    ///<param name = "menuItemId" type = "String">
    ///A string value that is a unique dashboard item name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ToolboxExtension.prototype.selectMenuItem = function(menuItem) {
    ///<summary>
    ///Simulates a dashboard menu item selection.
    ///</summary>
    ///<param name = "menuItem" type = "DashboardMenuItem">
    ///A DashboardMenuItem object that is a dashboard menu item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ToolboxExtension.prototype.addToolboxItem = function(groupName, toolboxItem) {
    ///<summary>
    ///Allows you to add a specified toolbox item into a specified toolbox group.
    ///</summary>
    ///<param name = "groupName" type = "String">
    ///A string value that is a toolbox group name. To get a toolbox group name, use the name property.
    ///</param>
    ///<param name = "toolboxItem" type = "DashboardToolboxItem">
    ///A DashboardToolboxItem object that is a dashboard toolbox item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ToolboxExtension.prototype.removeToolboxItem = function(groupName, toolboxItemName) {
    ///<summary>
    ///Removes the specified toolbox item from the specified toolbox group.
    ///</summary>
    ///<param name = "groupName" type = "String">
    ///A string value that is a unique toolbox group name.
    ///</param>
    ///<param name = "toolboxItemName" type = "String">
    ///A string value that is a unique toolbox item name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ToolboxExtension.prototype.addToolbarItem = function(groupName, toolbarItem) {
    ///<summary>
    ///Allows you to add a specified toolbar item into a specified toolbar group.
    ///</summary>
    ///<param name = "groupName" type = "String">
    ///A string value that is a toolbar group name. To get a toolbar group name, use the name property.
    ///</param>
    ///<param name = "toolbarItem" type = "DashboardToolbarItem">
    ///A DashboardToolbarItem object that is a dashboard toolbar item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ToolboxExtension.prototype.removeToolbarItem = function(groupName, toolbarItemName) {
    ///<summary>
    ///Removes the specified toolbar item from the specified toolbar group.
    ///</summary>
    ///<param name = "groupName" type = "String">
    ///A string value that is a unique toolbar group name.
    ///</param>
    ///<param name = "toolbarItemName" type = "String">
    ///A string value that is a unique toolbar item name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ToolboxExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ToolboxExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardParameterEditorExtension.prototype.start = function() {
    ///<summary>
    ///Contains code that will be invoked when you register the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
DashboardParameterEditorExtension.prototype.stop = function() {
    ///<summary>
    ///Contains code that will be invoked when you unregister the dashboard extension.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientEditBase.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientEditBase.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientEditBase.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientEditBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientEditBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientEditBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientEditBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientEditBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEditBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetSize = function(width, height) {
    ///<summary>
    ///Sets the size of the image editor.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetValue = function() {
    ///<signature>
    ///<summary>
    ///For internal use only.
    ///</summary>
    ///<returns type = "Object">
    ///
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
    ///</signature>
};
ASPxClientBinaryImage.prototype.SetValue = function(value) {
    ///<signature>
    ///<summary>
    ///For internal use only.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientBinaryImage.prototype.Clear = function() {
    ///<summary>
    ///Removes an image from the editor content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetUploadedFileName = function() {
    ///<summary>
    ///Returns a name of the last uploaded file.
    ///</summary>
    ///<returns type = "String">
    ///A string that is the file name.
    ///</returns>
};
ASPxClientBinaryImage.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that contains any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that contains any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientBinaryImage.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientBinaryImage.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientBinaryImage.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientBinaryImage.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientBinaryImage.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientButton.prototype.DoClick = function() {
    ///<summary>
    ///Simulates a mouse click action on the button control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetChecked = function() {
    ///<summary>
    ///Returns a value indicating whether the button is checked.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the button is checked; otherwise, false.
    ///</returns>
};
ASPxClientButton.prototype.SetChecked = function(value) {
    ///<summary>
    ///Sets a value that specifies the button's checked status.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true if the button is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the button.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the button.
    ///</returns>
};
ASPxClientButton.prototype.SetText = function(value) {
    ///<summary>
    ///Sets the text to be displayed within the button.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the button.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the button.
    ///</returns>
};
ASPxClientButton.prototype.SetImageUrl = function(value) {
    ///<summary>
    ///Sets the URL pointing to the image displayed within the button.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL to the image displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Sets a value specifying whether the button is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the button; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether the button is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the button is enabled; false if the button is disabled.
    ///</returns>
};
ASPxClientButton.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the button.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientButton.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientButton.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientButton.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientButton.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientButton.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButton.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCalendar.prototype.IsDateSelected = function(date) {
    ///<summary>
    ///Tests whether the specified date is selected.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A date-time value that specifies the date to test.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified date is selected; otherwise, false.
    ///</returns>
};
ASPxClientCalendar.prototype.SetVisibleDate = function(date) {
    ///<summary>
    ///Sets the date that specifies the month and year to be displayed in the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///The date that specifies calendar's visible month and year.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.SetSelectedDate = function(date) {
    ///<summary>
    ///Sets the calendar's selected date.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A date object that specifies the calendar's selected date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetSelectedDate = function() {
    ///<summary>
    ///Returns the calendar's selected date.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date object that represents the calendar's selected date.
    ///</returns>
};
ASPxClientCalendar.prototype.GetVisibleDate = function() {
    ///<summary>
    ///Gets the date that determines the month and year that are currently displayed in the calendar.
    ///</summary>
    ///<returns type = "DateTime">
    ///The date that represents the calendar's visible month and year.
    ///</returns>
};
ASPxClientCalendar.prototype.SelectDate = function(date) {
    ///<summary>
    ///Selects the specified date within the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A date-time value that specifies the selected date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.SelectRange = function(start, end) {
    ///<summary>
    ///Selects the specified range of dates within the calendar.
    ///</summary>
    ///<param name = "start" type = "DateTime">
    ///A date-time value that specifies the range's first date.
    ///</param>
    ///<param name = "end" type = "DateTime">
    ///A date-time value that specifies the range's last date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.DeselectDate = function(date) {
    ///<summary>
    ///Deselects the specified date within the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A date-time value that specifies the date to deselect.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.DeselectRange = function(start, end) {
    ///<summary>
    ///Deselects the specified range of dates within the calendar.
    ///</summary>
    ///<param name = "start" type = "DateTime">
    ///A date-time value that specifies the range's first date.
    ///</param>
    ///<param name = "end" type = "DateTime">
    ///A date-time value that specifies the range's last date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.ClearSelection = function() {
    ///<summary>
    ///Deselects all the selected dates within the calendar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetSelectedDates = function() {
    ///<summary>
    ///Returns a list of dates which are selected within the calendar.
    ///</summary>
    ///<returns elementType = "DateTime" type = "Array">
    ///An array of date objects that represents the list of the calendar's selected dates.
    ///</returns>
};
ASPxClientCalendar.prototype.GetMinDate = function() {
    ///<summary>
    ///Gets the minimum date on the calendar.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date-time object representing the minimum date.
    ///</returns>
};
ASPxClientCalendar.prototype.SetMinDate = function(date) {
    ///<summary>
    ///Sets the minimum date of the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object representing the minimum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetMaxDate = function() {
    ///<summary>
    ///Gets the maximum date on the calendar.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date-time object representing the maximum date.
    ///</returns>
};
ASPxClientCalendar.prototype.SetMaxDate = function(date) {
    ///<summary>
    ///Sets the maximum date of the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object representing the maximum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientCalendar.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientCalendar.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientCalendar.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientCalendar.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientCalendar.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientCalendar.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCalendar.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCalendar.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCalendar.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientCalendar.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCalendar.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCalendar.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCaptcha.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the control's text box.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.Refresh = function() {
    ///<summary>
    ///Refreshes the code displayed within the editor's challenge image.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCaptcha.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCaptcha.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCaptcha.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientCaptcha.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCaptcha.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCaptcha.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCheckBox.prototype.GetChecked = function() {
    ///<summary>
    ///Returns a value indicating whether the check box editor is checked.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the check box is checked; otherwise, false.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetChecked = function(isChecked) {
    ///<summary>
    ///Sets a value which specifies the checked status of the check box editor.
    ///</summary>
    ///<param name = "isChecked" type = "Boolean">
    ///true if the check box editor is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text within the editor.
    ///</returns>
};
ASPxClientCheckBox.prototype.GetCheckState = function() {
    ///<summary>
    ///Returns a value which specifies a check box checked state.
    ///</summary>
    ///<returns type = "String">
    ///A string value matches one of the CheckState enumeration values.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetCheckState = function(checkState) {
    ///<summary>
    ///Sets a value specifying the state of a check box.
    ///</summary>
    ///<param name = "checkState" type = "String">
    ///A string value matches one of the CheckState enumeration values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientCheckBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientCheckBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCheckBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCheckBox.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientCheckBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCheckBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRadioButton.prototype.GetChecked = function() {
    ///<signature>
    ///<summary>
    ///Returns a value indicating whether the radio button is checked.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the radio button is checked; otherwise, false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns a value indicating whether the check box editor is checked.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the check box is checked; otherwise, false.
    ///</returns>
    ///</signature>
};
ASPxClientRadioButton.prototype.SetChecked = function(isChecked) {
    ///<signature>
    ///<summary>
    ///Sets a value which specifies the radio button's checked status.
    ///</summary>
    ///<param name = "isChecked" type = "Boolean">
    ///true if the radio button is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets a value which specifies the checked status of the check box editor.
    ///</summary>
    ///<param name = "isChecked" type = "Boolean">
    ///true if the check box editor is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientRadioButton.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text within the editor.
    ///</returns>
};
ASPxClientRadioButton.prototype.GetCheckState = function() {
    ///<summary>
    ///Returns a value which specifies a check box checked state.
    ///</summary>
    ///<returns type = "String">
    ///A string value matches one of the CheckState enumeration values.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetCheckState = function(checkState) {
    ///<summary>
    ///Sets a value specifying the state of a check box.
    ///</summary>
    ///<param name = "checkState" type = "String">
    ///A string value matches one of the CheckState enumeration values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientRadioButton.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientRadioButton.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRadioButton.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRadioButton.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientRadioButton.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRadioButton.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButton.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTextEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientTextEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientTextEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTextEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTextEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientTextEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTextEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTextBoxBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBoxBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientButtonEditBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEditBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEditBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientColorEdit.prototype.GetColor = function() {
    ///<summary>
    ///Returns the color editor's value.
    ///</summary>
    ///<returns type = "String">
    ///A string that specifies the color editor value.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetColor = function(value) {
    ///<summary>
    ///Specifies the color value for the color editor.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value specifying the editor color.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.IsAutomaticColorSelected = function() {
    ///<summary>
    ///Indicates whether the automatic color item is selected.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the automatic color item is selected; otherwise, false.
    ///</returns>
};
ASPxClientColorEdit.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
ASPxClientColorEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientColorEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientColorEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientColorEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientColorEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientColorEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientColorEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientColorEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientComboBox.prototype.SetText = function(text) {
    ///<signature>
    ///<summary>
    ///Specifies the text displayed within the editor's edit box.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the editor's text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientComboBox.prototype.AddItem = function(text) {
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and associated value, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
};
ASPxClientComboBox.prototype.InsertItem = function(index, text, value, imageUrl) {
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientComboBox.prototype.RemoveItem = function(index) {
    ///<summary>
    ///Removes an item specified by its index from the client list editor.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the index of the list item to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.ClearItems = function() {
    ///<summary>
    ///Removes all items from the client combo box editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.BeginUpdate = function() {
    ///<summary>
    ///Prevents the client combobox editor from being rendered until the EndUpdate method is called.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.EndUpdate = function() {
    ///<summary>
    ///Re-enables editor render operations after a call to the BeginUpdate method and forces an immediate re-rendering.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.MakeItemVisible = function(index) {
    ///<summary>
    ///Scrolls the editor's item list, so that the specified item becomes visible.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the item's index within the editor's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the combo box editor's item collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
ASPxClientComboBox.prototype.FindItemByText = function(text) {
    ///<summary>
    ///Returns a combo box item by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string that specifies the item's text.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
ASPxClientComboBox.prototype.FindItemByValue = function(value) {
    ///<summary>
    ///Returns a combo box item by its value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object that specifies the item's value.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
ASPxClientComboBox.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
ASPxClientComboBox.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the combo box editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
ASPxClientComboBox.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the combobox editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the combo box editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
ASPxClientComboBox.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetText = function() {
    ///<signature>
    ///<summary>
    ///Gets the text displayed in the editor's edit box.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text within the editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
    ///</signature>
};
ASPxClientComboBox.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.EnsureDropDownLoaded = function(callbackFunction) {
    ///<summary>
    ///Determines whether the drop-down content is loaded; if not - loads the content.
    ///</summary>
    ///<param name = "callbackFunction" type = "Object">
    ///An object that is the JavaScript function that receives the callback data as a parameter. The function is performed after the combo box content is loaded.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SetItemHtml = function(index, html) {
    ///<summary>
    ///Defines the HTML content for the specified combo box item.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the combo box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SetItemTooltip = function(index, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the combo box editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.AddItemCssClass = function(index, className) {
    ///<summary>
    ///Sets the CSS class for a combo box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.RemoveItemCssClass = function(index, className) {
    ///<summary>
    ///Removes the CSS class from a combo box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SetItemTextCellHtml = function(itemIndex, textCellIndex, html) {
    ///<summary>
    ///Defines the HTML content for the specified combo box item's text cell.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the combo box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SetItemTextCellTooltip = function(itemIndex, textCellIndex, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the text cell of the editor's item specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.AddItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Sets the CSS class for a combo box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.RemoveItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Removes the CSS class from a combo box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
ASPxClientComboBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientComboBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientComboBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientComboBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientComboBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientComboBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientComboBox.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientComboBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientComboBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientComboBox.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientComboBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientComboBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientComboBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDateEdit.prototype.GetCalendar = function() {
    ///<summary>
    ///Returns the calendar of the date editor.
    ///</summary>
    ///<returns type = "ASPxClientCalendar">
    ///A ASPxClientCalendar object representing the editor's calendar.
    ///</returns>
};
ASPxClientDateEdit.prototype.GetTimeEdit = function() {
    ///<summary>
    ///Returns the built-in time edit control.
    ///</summary>
    ///<returns type = "ASPxClientTimeEdit">
    ///An <see cref="ASPxClientTimeEdit" /> object that is the built-in time editor.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetDate = function(date) {
    ///<summary>
    ///Specifies the date for the editor.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object that is the date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetDate = function() {
    ///<summary>
    ///Gets the date that is the editor's value.
    ///</summary>
    ///<returns type = "DateTime">
    ///A DateTime object that is the date.
    ///</returns>
};
ASPxClientDateEdit.prototype.GetRangeDayCount = function() {
    ///<summary>
    ///Returns the number of days in a range selected within a date edit.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value specifying the number of days.
    ///</returns>
};
ASPxClientDateEdit.prototype.GetMinDate = function() {
    ///<summary>
    ///Gets the minimum date of the editor.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date-time object representing the minimum date.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetMinDate = function(date) {
    ///<summary>
    ///Sets the minimum date of the editor.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object representing the minimum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetMaxDate = function() {
    ///<summary>
    ///Gets the maximum date of the editor.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date-time object representing the maximum date.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetMaxDate = function(date) {
    ///<summary>
    ///Sets the maximum date of the editor.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object representing the maximum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
ASPxClientDateEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientDateEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientDateEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDateEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDateEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientDateEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDateEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDateEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetKeyValue = function() {
    ///<summary>
    ///Obtains the key value associated with the text displayed within the editor's edit box.
    ///</summary>
    ///<returns type = "String">
    ///A string representing the key value associated with the editor's value (displayed text).
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetKeyValue = function(keyValue) {
    ///<summary>
    ///Specifies the key value associated with the text displayed within the editor's edit box.
    ///</summary>
    ///<param name = "keyValue" type = "String">
    ///A string specifying the key value associated with the editor's value (displayed text).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDropDownEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDropDownEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientFilterControl.prototype.GetFilterExpression = function() {
    ///<summary>
    ///Returns the filter expression.
    ///</summary>
    ///<returns type = "String">
    ///A string value that represents the filter expression.
    ///</returns>
};
ASPxClientFilterControl.prototype.GetAppliedFilterExpression = function() {
    ///<summary>
    ///Returns the applied filter expression.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies the applied filter expression.
    ///</returns>
};
ASPxClientFilterControl.prototype.GetEditor = function(editorIndex) {
    ///<summary>
    ///Returns the editor used to edit operand values for the specified filter column.
    ///</summary>
    ///<param name = "editorIndex" type = "Int32">
    ///An integer value that identifies the filter column by its index within the collection.
    ///</param>
    ///<returns type = "ASPxClientEditBase">
    ///An ASPxClientEditBase descendant that represents the editor used to edit operand values for the specified filter column.
    ///</returns>
};
ASPxClientFilterControl.prototype.IsFilterExpressionValid = function() {
    ///<summary>
    ///Returns a value indicating whether the filter expression being currently composed on the client side is valid - all expression conditions are filled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the filter expression is valid; otherwise, false.
    ///</returns>
};
ASPxClientFilterControl.prototype.Apply = function() {
    ///<summary>
    ///Applies a filter constructed by an end-user.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.Reset = function() {
    ///<summary>
    ///Resets the current filter expression to a previously applied filter expression.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientFilterControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientFilterControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientFilterControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientFilterControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientFilterControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFilterControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientListEdit.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
ASPxClientListEdit.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
ASPxClientListEdit.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientListEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientListEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientListEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientListEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientListEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientListEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientListEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientListEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientListEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientListEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientListEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientListEditItem.prototype.GetColumnText = function(columnIndex) {
    ///<signature>
    ///<summary>
    ///Returns the list item's value that corresponds to a column specified by its index.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's index within the editor's Columns collection.
    ///</param>
    ///<returns type = "String">
    ///A string value representing the list item's value that corresponds to the specified column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the list item's value that corresponds to a column specified by its field name.
    ///</summary>
    ///<param name = "columnName" type = "String">
    ///A string value that specifies the column's field name defined via the FieldName property.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the list item's value that corresponds to the specified column.
    ///</returns>
    ///</signature>
};
ASPxClientListBox.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
ASPxClientListBox.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the list box editor's item collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
ASPxClientListBox.prototype.GetSelectedIndices = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items indices.
    ///</summary>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that represent the indices of the selected items.
    ///</returns>
};
ASPxClientListBox.prototype.GetSelectedValues = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items values.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array of Object[] objects that represent the values of the selected items.
    ///</returns>
};
ASPxClientListBox.prototype.GetSelectedItems = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientListEditItem">
    ///An array of ASPxClientListEditItem objects that represent the selected items.
    ///</returns>
};
ASPxClientListBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all list box items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.UnselectAll = function() {
    ///<summary>
    ///Unselects all list box items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SelectIndices = function(indices) {
    ///<summary>
    ///Selects the items with the specified indices within a list box.
    ///</summary>
    ///<param name = "indices" elementType = "Int32" type = "Array">
    ///An array of integer values that represent the items indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.UnselectIndices = function(indices) {
    ///<summary>
    ///Unselects an array of the list box items with the specified indices.
    ///</summary>
    ///<param name = "indices" elementType = "Int32" type = "Array">
    ///An array of integer values that represent the indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SelectItems = function(items) {
    ///<summary>
    ///Selects the specified items within a list box.
    ///</summary>
    ///<param name = "items" elementType = "ASPxClientListEditItem" type = "Array">
    ///An array of ASPxClientListEditItem objects that represent the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.UnselectItems = function(items) {
    ///<summary>
    ///Unselects an array of the specified list box items.
    ///</summary>
    ///<param name = "items" elementType = "ASPxClientListEditItem" type = "Array">
    ///An array of ASPxClientListEditItem objects that represent the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SelectValues = function(values) {
    ///<summary>
    ///Select the items with the specified values within a list box.
    ///</summary>
    ///<param name = "values" elementType = "Object" type = "Array">
    ///An array of Object[] objects that represent the item's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.UnselectValues = function(values) {
    ///<summary>
    ///Unselects an array of the list box items with the specified values.
    ///</summary>
    ///<param name = "values" elementType = "Object" type = "Array">
    ///An array of Object[] objects that represent the values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.MakeItemVisible = function(index) {
    ///<summary>
    ///Scrolls the editor's item list, so that the specified item becomes visible.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the item's index within the editor's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.InitOnContainerMadeVisible = function() {
    ///<summary>
    ///Initializes the ASPxClientListBox client object when its parent container becomes visible dynamically, on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.AddItem = function(text) {
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text and associated value, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the editor's items collection, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position to which the new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the editor's items collection, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
};
ASPxClientListBox.prototype.InsertItem = function(index, text, value, imageUrl) {
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientListBox.prototype.BeginUpdate = function() {
    ///<summary>
    ///Prevents the client list box editor from being rendered until the EndUpdate method is called.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.EndUpdate = function() {
    ///<summary>
    ///Re-enables editor render operations after a call to the BeginUpdate method, and forces an immediate re-rendering.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.ClearItems = function() {
    ///<summary>
    ///Removes all items from the client list box editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.RemoveItem = function(index) {
    ///<summary>
    ///Removes an item specified by its index from the client list editor.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the index of the list item to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.FindItemByText = function(text) {
    ///<summary>
    ///Returns a list box item by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string that specifies the item's text.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the list box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
ASPxClientListBox.prototype.FindItemByValue = function(value) {
    ///<summary>
    ///Returns a list box item by its value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object that specifies the item's value.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the list box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
ASPxClientListBox.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server, and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SetItemHtml = function(index, html) {
    ///<summary>
    ///Defines the HTML content for the specified list box item.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the list box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SetItemTooltip = function(index, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the list box editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.AddItemCssClass = function(index, className) {
    ///<summary>
    ///Sets the CSS class for a list box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.RemoveItemCssClass = function(index, className) {
    ///<summary>
    ///Removes the CSS class from a list box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SetItemTextCellHtml = function(itemIndex, textCellIndex, html) {
    ///<summary>
    ///Defines the HTML content for the specified list box item's text cell.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the list box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SetItemTextCellTooltip = function(itemIndex, textCellIndex, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the text cell of the editor's item specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.AddItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Sets the CSS class for a list box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.RemoveItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Removes the CSS class from a list box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
ASPxClientListBox.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
ASPxClientListBox.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientListBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientListBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientListBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientListBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientListBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientListBox.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientListBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientListBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientListBox.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientListBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientListBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientListBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value specifying the total number of items in the editor's item collection.
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An <see cref="ASPxClientListEditItem" /> object that is the item located at the specified index.
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
ASPxClientCheckListBase.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientCheckListBase.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientCheckListBase.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientCheckListBase.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientCheckListBase.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientCheckListBase.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCheckListBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCheckListBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientCheckListBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCheckListBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckListBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value specifying the total number of items in the editor's item collection.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An <see cref="ASPxClientListEditItem" /> object that is the item located at the specified index.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRadioButtonList.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadioButtonList.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetSelectedIndices = function() {
    ///<summary>
    ///Returns an array of the check box list editor's selected items indices.
    ///</summary>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that are the indices of the selected items.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetSelectedValues = function() {
    ///<summary>
    ///Returns an array of the check box list editor's selected items values.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array of <see cref="Object[]" /> objects that are the values of the selected items.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetSelectedItems = function() {
    ///<summary>
    ///Returns an array of the check box list editor's selected items.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientListEditItem">
    ///An array of ASPxClientListEditItem objects that are the selected items.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all check box list items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.UnselectAll = function() {
    ///<summary>
    ///Unselects all check box list items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SelectIndices = function(indices) {
    ///<summary>
    ///Selects items with the specified indices within a check box list.
    ///</summary>
    ///<param name = "indices" elementType = "Int32" type = "Array">
    ///An array of integer values that are the item indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SelectItems = function(items) {
    ///<summary>
    ///Selects the specified items within a check box list.
    ///</summary>
    ///<param name = "items" elementType = "ASPxClientListEditItem" type = "Array">
    ///An array of ASPxClientListEditItem objects that are the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SelectValues = function(values) {
    ///<summary>
    ///Selects items with the specified values within a check box list.
    ///</summary>
    ///<param name = "values" elementType = "Object" type = "Array">
    ///An array of Object[] objects that are the item values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.UnselectIndices = function(indices) {
    ///<summary>
    ///Unselects items with the specified indices within a check box list.
    ///</summary>
    ///<param name = "indices" elementType = "Int32" type = "Array">
    ///An array of integer values that are the item indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.UnselectItems = function(items) {
    ///<summary>
    ///Unselects the specified items within a check box list.
    ///</summary>
    ///<param name = "items" elementType = "ASPxClientListEditItem" type = "Array">
    ///An array of ASPxClientListEditItem objects that are the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.UnselectValues = function(values) {
    ///<summary>
    ///Unselects items with the specified values within a check box list.
    ///</summary>
    ///<param name = "values" elementType = "Object" type = "Array">
    ///An array of Object[] objects that are the item values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value specifying the total number of items in the editor's item collection.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An <see cref="ASPxClientListEditItem" /> object that is the item located at the specified index.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCheckBoxList.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCheckBoxList.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetPosition = function(position) {
    ///<summary>
    ///Sets the position of the operation's progress.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the progress position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetPosition = function() {
    ///<summary>
    ///Gets the position of the operation's progress.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the progress position.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetCustomDisplayFormat = function(text) {
    ///<summary>
    ///Sets the pattern used to format the displayed text for the progress bar.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A  value that is the format pattern.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetDisplayText = function() {
    ///<summary>
    ///Returns the text displayed within the progress bar.
    ///</summary>
    ///<returns type = "String">
    ///A <see cref="String" /> value that is the text displayed within the editor.
    ///</returns>
};
ASPxClientProgressBar.prototype.GetPercent = function() {
    ///<summary>
    ///Sets the percentage representation of the progress position.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the progress position as a percentage.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetMinimum = function(min) {
    ///<summary>
    ///Sets the minimum range value of the progress bar.
    ///</summary>
    ///<param name = "min" type = "Int32">
    ///An integer value specifying the minimum value of the progress bar range.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.SetMaximum = function(max) {
    ///<summary>
    ///Sets the maximum range value of the progress bar.
    ///</summary>
    ///<param name = "max" type = "Int32">
    ///An integer value specifying the maximum value of the progress bar range.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetMinimum = function() {
    ///<summary>
    ///Gets the minimum range value of the progress bar.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the minimum value of the progress bar range.
    ///</returns>
};
ASPxClientProgressBar.prototype.GetMaximum = function() {
    ///<summary>
    ///Gets the maximum range value of the progress bar.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the maximum value of the progress bar range.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetMinMaxValues = function(minValue, maxValue) {
    ///<summary>
    ///Sets the minimum and maximum range values of the progress bar.
    ///</summary>
    ///<param name = "minValue" type = "Int32">
    ///An integer value specifying the minimum value of the progress bar range.
    ///</param>
    ///<param name = "maxValue" type = "Int32">
    ///An integer value specifying the maximum value of the progress bar range.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientProgressBar.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientProgressBar.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientProgressBar.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientProgressBar.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientProgressBar.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientSpinEditBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEditBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetValue = function(number) {
    ///<signature>
    ///<summary>
    ///Specifies the value of the spin edit control on the client side.
    ///</summary>
    ///<param name = "number" type = "Decimal">
    ///A Decimal value specifying the control value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientSpinEdit.prototype.SetNumber = function(number) {
    ///<summary>
    ///Sets the spin editor's value.
    ///</summary>
    ///<param name = "number" type = "Decimal">
    ///A decimal number specifying the value to assign to the spin editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetNumber = function() {
    ///<summary>
    ///Gets a number which represents the spin editor's value.
    ///</summary>
    ///<returns type = "Decimal">
    ///A decimal number representing the value of the spin editor.
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetText = function() {
    ///<signature>
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text within the editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
    ///</signature>
};
ASPxClientSpinEdit.prototype.SetMinValue = function(value) {
    ///<summary>
    ///Sets the minimum value of the editor.
    ///</summary>
    ///<param name = "value" type = "Decimal">
    ///A decimal value specifying the minimum value of the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetMinValue = function() {
    ///<summary>
    ///Gets the minimum value of the editor.
    ///</summary>
    ///<returns type = "Decimal">
    ///A Decimal value representing the minimum value of the editor.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetMaxValue = function(value) {
    ///<summary>
    ///Sets the maximum value of the editor.
    ///</summary>
    ///<param name = "value" type = "Decimal">
    ///A decimal value specifying the maximum value of the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetMaxValue = function() {
    ///<summary>
    ///Gets the maximum value of the editor.
    ///</summary>
    ///<returns type = "Decimal">
    ///A Decimal value representing the maximum value of the editor.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientSpinEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientSpinEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpinEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetDate = function(date) {
    ///<summary>
    ///Specifies the date for the editor.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object that is the date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetDate = function() {
    ///<summary>
    ///Gets the date that is the editor's value.
    ///</summary>
    ///<returns type = "DateTime">
    ///A DateTime object that is the current date.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientTimeEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTimeEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientStaticEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientStaticEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientStaticEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientStaticEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientStaticEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientStaticEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientStaticEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientStaticEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientHyperLink.prototype.GetNavigateUrl = function() {
    ///<summary>
    ///Gets an URL which defines the navigation location for the editor's hyperlink.
    ///</summary>
    ///<returns type = "String">
    ///A string value which represents an URL to where the client web browser will navigate when a hyperlink in the editor is clicked.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetNavigateUrl = function(url) {
    ///<summary>
    ///Specifies an URL which defines the navigation location for the editor's hyperlink.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value which specifies an URL to where the client web browser will navigate when a hyperlink in the editor is clicked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetText = function() {
    ///<summary>
    ///Gets the text caption displayed for the hyperlink in the hyperlink editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text caption for the hyperlink in the editor.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetText = function(text) {
    ///<summary>
    ///Specifies the text caption displayed for the hyperlink in the hyperlink editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text caption for the hyperlink in the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientHyperLink.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientHyperLink.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientHyperLink.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientHyperLink.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHyperLink.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientImageBase.prototype.SetSize = function(width, height) {
    ///<summary>
    ///Sets the size of the image displayed within the image editor.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the image's width.
    ///</param>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the image's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientImageBase.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientImageBase.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientImageBase.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientImageBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientImageBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientImageBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientImageBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientImageBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientImage.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the image editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the editor.
    ///</returns>
};
ASPxClientImage.prototype.SetImageUrl = function(url) {
    ///<summary>
    ///Sets the URL which points to the image displayed within the image editor.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value specifying the URL to the image displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.SetSize = function(width, height) {
    ///<summary>
    ///Sets the size of the image displayed within the image editor.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the image's width.
    ///</param>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the image's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientImage.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientImage.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientImage.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientImage.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientImage.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientImage.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientImage.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientImage.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImage.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientLabel.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the editor.
    ///</returns>
};
ASPxClientLabel.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientLabel.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientLabel.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientLabel.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientLabel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientLabel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientLabel.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientLabel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientLabel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLabel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTextBox.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientTextBox.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientTextBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientTextBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientTextBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientTextBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientTextBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientTextBox.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTextBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTextBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTextBox.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientTextBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTextBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTextBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientMemo.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientMemo.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientMemo.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientMemo.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientMemo.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientMemo.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientMemo.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientMemo.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientMemo.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientMemo.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientMemo.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientMemo.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientMemo.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMemo.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientButtonEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientButtonEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientButtonEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTokenBox.prototype.AddToken = function(text) {
    ///<summary>
    ///Adds a new token with the specified text to the end of the control's token collection.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the token's text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.RemoveTokenByText = function(text) {
    ///<summary>
    ///Removes a token specified by its text from the client token box.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value that is the text of the token to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.RemoveToken = function(index) {
    ///<summary>
    ///Removes a token specified by its index from the client token box.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that is the index of the token to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.GetTokenHtmlElement = function(index) {
    ///<summary>
    ///Returns an HTML span element that corresponds to the specified token.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that is the token index.
    ///</param>
    ///<returns type = "Object">
    ///An object that is the HTML span element that corresponds to the specified token.
    ///</returns>
};
ASPxClientTokenBox.prototype.GetTokenTextHtmlElement = function(index) {
    ///<summary>
    ///Returns an HTML span element that corresponds to the specified token's text.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that is the token index.
    ///</param>
    ///<returns type = "Object">
    ///An object that is the HTML span element that corresponds to the specified token's text.
    ///</returns>
};
ASPxClientTokenBox.prototype.GetTokenRemoveButtonHtmlElement = function(index) {
    ///<summary>
    ///Returns an HTML span element that corresponds to the specified token's remove button.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that is the token index.
    ///</param>
    ///<returns type = "Object">
    ///An object that is the HTML span element that corresponds to the specified token's remove button.
    ///</returns>
};
ASPxClientTokenBox.prototype.GetTokenCollection = function() {
    ///<summary>
    ///Returns a collection of tokens.
    ///</summary>
    ///<returns elementType = "String" type = "Array">
    ///A <see cref="String[]" /> object that is the collection of tokens.
    ///</returns>
};
ASPxClientTokenBox.prototype.SetTokenCollection = function(collection) {
    ///<summary>
    ///Sets a collection of tokens.
    ///</summary>
    ///<param name = "collection" elementType = "String" type = "Array">
    ///A  object that is the collection of tokens.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.ClearTokenCollection = function() {
    ///<summary>
    ///Removes all tokens contained in the token box.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.GetTokenIndexByText = function(text) {
    ///<summary>
    ///Returns the index of a token specified by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value that specifies the text of the token.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that is the token index
    ///</returns>
};
ASPxClientTokenBox.prototype.GetText = function() {
    ///<signature>
    ///<summary>
    ///Gets the token texts, separated with a sign, specified by the TextSeparator property.
    ///</summary>
    ///<returns type = "String">
    ///A string value consisting of token texts separated by a text separator.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the text displayed in the editor's edit box.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text within the editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
    ///</signature>
};
ASPxClientTokenBox.prototype.SetText = function(text) {
    ///<signature>
    ///<summary>
    ///Sets the token texts, separated with a sign, specified by the TextSeparator property.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value that is the token texts separated with a text separator.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Specifies the text displayed within the editor's edit box.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the editor's text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientTokenBox.prototype.GetValue = function() {
    ///<signature>
    ///<summary>
    ///Gets the editor value.
    ///</summary>
    ///<returns type = "String">
    ///A string that is the editor value.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
    ///</signature>
};
ASPxClientTokenBox.prototype.SetValue = function(value) {
    ///<signature>
    ///<summary>
    ///Sets the editor value.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string that is the editor value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientTokenBox.prototype.IsCustomToken = function(text, caseSensitive) {
    ///<summary>
    ///Returns a value that indicates if the specified token (string) is a custom token.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value that is a token.
    ///</param>
    ///<param name = "caseSensitive" type = "Boolean">
    ///true, if tokens are case sensitive; otherwise, false.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the token is not contained in the predefined Items collection; otherwise, false.
    ///</returns>
};
ASPxClientTokenBox.prototype.AddItem = function(text) {
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and associated value, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
};
ASPxClientTokenBox.prototype.InsertItem = function(index, text, value, imageUrl) {
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientTokenBox.prototype.RemoveItem = function(index) {
    ///<summary>
    ///Removes an item specified by its index from the client list editor.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the index of the list item to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.ClearItems = function() {
    ///<summary>
    ///Removes all items from the client combo box editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.BeginUpdate = function() {
    ///<summary>
    ///Prevents the client combobox editor from being rendered until the EndUpdate method is called.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.EndUpdate = function() {
    ///<summary>
    ///Re-enables editor render operations after a call to the BeginUpdate method and forces an immediate re-rendering.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.MakeItemVisible = function(index) {
    ///<summary>
    ///Scrolls the editor's item list, so that the specified item becomes visible.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the item's index within the editor's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the combo box editor's item collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
ASPxClientTokenBox.prototype.FindItemByText = function(text) {
    ///<summary>
    ///Returns a combo box item by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string that specifies the item's text.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
ASPxClientTokenBox.prototype.FindItemByValue = function(value) {
    ///<summary>
    ///Returns a combo box item by its value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object that specifies the item's value.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
ASPxClientTokenBox.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
ASPxClientTokenBox.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the combo box editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
ASPxClientTokenBox.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the combobox editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the combo box editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
ASPxClientTokenBox.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.EnsureDropDownLoaded = function(callbackFunction) {
    ///<summary>
    ///Determines whether the drop-down content is loaded; if not - loads the content.
    ///</summary>
    ///<param name = "callbackFunction" type = "Object">
    ///An object that is the JavaScript function that receives the callback data as a parameter. The function is performed after the combo box content is loaded.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.SetItemHtml = function(index, html) {
    ///<summary>
    ///Defines the HTML content for the specified combo box item.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the combo box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.SetItemTooltip = function(index, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the combo box editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.AddItemCssClass = function(index, className) {
    ///<summary>
    ///Sets the CSS class for a combo box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.RemoveItemCssClass = function(index, className) {
    ///<summary>
    ///Removes the CSS class from a combo box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.SetItemTextCellHtml = function(itemIndex, textCellIndex, html) {
    ///<summary>
    ///Defines the HTML content for the specified combo box item's text cell.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the combo box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.SetItemTextCellTooltip = function(itemIndex, textCellIndex, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the text cell of the editor's item specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.AddItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Sets the CSS class for a combo box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.RemoveItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Removes the CSS class from a combo box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
ASPxClientTokenBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientTokenBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientTokenBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientTokenBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientTokenBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientTokenBox.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTokenBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTokenBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTokenBox.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientTokenBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTokenBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTokenBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTrackBar.prototype.GetItemIndexByValue = function(value) {
    ///<summary>
    ///Returns a track bar item index by the item's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object that specifies the item's value.
    ///</param>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that is an index of the item with the specified value. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
ASPxClientTrackBar.prototype.GetItemValue = function(index) {
    ///<summary>
    ///Returns a track bar item's associated value.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the required item's index.
    ///</param>
    ///<returns type = "Object">
    ///An <see cref="Object" /> that specifies the item's value.
    ///</returns>
};
ASPxClientTrackBar.prototype.GetItemText = function(index) {
    ///<summary>
    ///Returns a track bar item text.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the required item's index.
    ///</param>
    ///<returns type = "String">
    ///A <see cref="String" /> value specifying the track bar item text.
    ///</returns>
};
ASPxClientTrackBar.prototype.GetItemToolTip = function(index) {
    ///<summary>
    ///Returns a track bar item's tooltip text.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the required item's index.
    ///</param>
    ///<returns type = "String">
    ///A <see cref="String" /> value that specifies the text content of the current item's tooltip.
    ///</returns>
};
ASPxClientTrackBar.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of the track bar items that are maintained by the item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value specifying the number of items.
    ///</returns>
};
ASPxClientTrackBar.prototype.SetPositionEnd = function(position) {
    ///<summary>
    ///Specifies the secondary drag handle position.
    ///</summary>
    ///<param name = "position" type = "Decimal">
    ///A  value that specifies the position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.SetPositionStart = function(position) {
    ///<summary>
    ///Specifies the main drag handle position.
    ///</summary>
    ///<param name = "position" type = "Decimal">
    ///A  value that specifies the position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.GetPositionEnd = function() {
    ///<summary>
    ///Returns the secondary drag handle position.
    ///</summary>
    ///<returns type = "Decimal">
    ///A <see cref="Decimal" /> value that specifies the position.
    ///</returns>
};
ASPxClientTrackBar.prototype.GetPositionStart = function() {
    ///<summary>
    ///Returns the main drag handle position.
    ///</summary>
    ///<returns type = "Decimal">
    ///A <see cref="Decimal" /> value that specifies the position.
    ///</returns>
};
ASPxClientTrackBar.prototype.GetPosition = function() {
    ///<summary>
    ///Gets a drag handle position.
    ///</summary>
    ///<returns type = "Decimal">
    ///A <see cref="Decimal" /> value that specifies the position.
    ///</returns>
};
ASPxClientTrackBar.prototype.SetPosition = function(position) {
    ///<summary>
    ///Specifies a drag handle position.
    ///</summary>
    ///<param name = "position" type = "Decimal">
    ///A  value that specifies the position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientTrackBar.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientTrackBar.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientTrackBar.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientTrackBar.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientTrackBar.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientTrackBar.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTrackBar.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTrackBar.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTrackBar.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientTrackBar.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTrackBar.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTrackBar.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientValidationSummary.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientValidationSummary.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientValidationSummary.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummary.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummary.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummary.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientValidationSummary.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummary.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientValidationSummary.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummary.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientValidationSummary.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientValidationSummary.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientGaugeControl.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGaugeControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientGaugeControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientGaugeControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGaugeControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGaugeControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGaugeControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientGaugeControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGaugeControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientGaugeControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGaugeControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientGaugeControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGaugeControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientGridBase.prototype.GetToolbarByName = function(name) {
    ///<summary>
    ///Returns a toolbar specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the toolbar name.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar with the specified name.
    ///</returns>
};
ASPxClientGridBase.prototype.GetToolbar = function(index) {
    ///<summary>
    ///Returns a grid's toolbar specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the toolbar object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar located at the specified index within the control's Toolbars collection.
    ///</returns>
};
ASPxClientGridBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientGridBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientGridBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientGridBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientGridBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientGridBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientGridLookup.prototype.GetGridView = function() {
    ///<summary>
    ///Returns a client object representing the built-in dropdown grid.
    ///</summary>
    ///<returns type = "ASPxClientGridView">
    ///An ASPxClientGridView object representing the embedded grid.
    ///</returns>
};
ASPxClientGridLookup.prototype.ConfirmCurrentSelection = function() {
    ///<summary>
    ///Confirms the current selection made by an end-user within the editor's dropdown grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.RollbackToLastConfirmedSelection = function() {
    ///<summary>
    ///Cancels the current selection made by an end-user within the editor's dropdown grid and rolls back to the last confirmed selection. The selection can be confirmed by either pressing the Enter key or calling the ConfirmCurrentSelection method.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
ASPxClientGridLookup.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientGridLookup.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientGridLookup.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientGridLookup.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientGridLookup.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientGridLookup.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientGridLookup.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridLookup.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCardView.prototype.GetEditValue = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column within the grid's column collection.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.FocusEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited card.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited card.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited card.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.SetEditValue = function(column, value) {
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column within the grid's column collection.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.ShowFilterControl = function() {
    ///<summary>
    ///Displays the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.CloseFilterControl = function() {
    ///<summary>
    ///Hides the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.SetFilterEnabled = function(isFilterEnabled) {
    ///<summary>
    ///Enables or disables the current filter.
    ///</summary>
    ///<param name = "isFilterEnabled" type = "Boolean">
    ///true to enable the current filter; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetVerticalScrollPosition = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</returns>
};
ASPxClientCardView.prototype.SetVerticalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetFocusedCell = function() {
    ///<summary>
    ///Gets information about a focused cell.
    ///</summary>
    ///<returns type = "ASPxClientCardViewCellInfo">
    ///An <see cref="ASPxClientCardViewCellInfo" /> object containing information about a focused cell.
    ///</returns>
};
ASPxClientCardView.prototype.SetFocusedCell = function(cardVisibleIndex, columnIndex) {
    ///<summary>
    ///Focuses the specified cell.
    ///</summary>
    ///<param name = "cardVisibleIndex" type = "Int32">
    ///An  value that specifies the visible index of the card.
    ///</param>
    ///<param name = "columnIndex" type = "Int32">
    ///A zero-based index that identifies the column in the column collection (the column's Index property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.SortBy = function(column) {
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.MoveColumn = function(column) {
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be hidden by the name of the data source field to which the column is bound, or by the column's name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxCardView.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the ASPxCardView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxCardView.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxCardView.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the ASPxCardView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxCardView.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the CardView.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true, to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxCardView.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxCardView.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.GetCardKey = function(visibleIndex) {
    ///<summary>
    ///Returns the key value of the specified card.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the card's visible index.
    ///</param>
    ///<returns type = "String">
    ///A string representing the specified card's key value. If the index passed via the visibleIndex parameter is wrong, or the KeyFieldName property is not set, null is returned.
    ///</returns>
};
ASPxClientCardView.prototype.StartEditCard = function(visibleIndex) {
    ///<summary>
    ///Switches the CardView to edit mode.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer that identifies a card to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.StartEditCardByKey = function(key) {
    ///<summary>
    ///Switches the ASPxCardView to edit mode.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies a card to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.IsNewCardEditing = function() {
    ///<summary>
    ///Indicates whether or not a new card is being edited.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the GridView is in edit mode for a new card; otherwise, false.
    ///</returns>
};
ASPxClientCardView.prototype.AddNewCard = function() {
    ///<summary>
    ///Adds a new record.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.DeleteCard = function(visibleIndex) {
    ///<summary>
    ///Deletes the specified card.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.DeleteCardByKey = function(key) {
    ///<summary>
    ///Deletes a card with the specified key value.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetFocusedCardIndex = function() {
    ///<summary>
    ///Returns the focused card's index.
    ///</summary>
    ///<returns type = "Int32">
    ///A zero-based integer that specifies the focused card's index.
    ///</returns>
};
ASPxClientCardView.prototype.SetFocusedCardIndex = function(visibleIndex) {
    ///<summary>
    ///Moves focus to the specified card.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the focused card's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.SelectCards = function() {
    ///<signature>
    ///<summary>
    ///Selects all the unselected cards within the CardView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified card displayed within the CardView.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the card's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified cards within the CardView.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data cards within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified cards within the CardView.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data cards within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean">
    ///true to select the specified cards; false to deselect the cards.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified card within the GridView.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer zero-based index that identifies the data card within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified card; false to deselect the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.SelectCardsByKey = function(keys, selected) {
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified cards displayed within the CardView.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the cards.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified cards; false to deselect the cards.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified card displayed within the CardView.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the card.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified card; false to deselect the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified cards displayed within the CardView.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the cards.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects a card displayed within the CardView by its key.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.UnselectCardsByKey = function(keys) {
    ///<signature>
    ///<summary>
    ///Deselects the specified cards displayed within the ASPxCardView.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the cards.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified card displayed within the ASPxCardView.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.UnselectCards = function() {
    ///<signature>
    ///<summary>
    ///Deselects all the selected cards within the ASPxCardView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified cards (if selected) within the ASPxCardView.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data cards within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified cards (if selected) within the ASPxCardView.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the card's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.UnselectFilteredCards = function() {
    ///<summary>
    ///Deselects all grid cards that match the filter criteria currently applied to the CardView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.SelectCardOnPage = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Selects the specified card displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the card's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified card displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the card's visible index.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified card; false to deselect the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.UnselectCardOnPage = function(visibleIndex) {
    ///<summary>
    ///Deselects the specified cards (if selected) displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the card's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.SelectAllCardsOnPage = function() {
    ///<signature>
    ///<summary>
    ///Selects all unselected cards displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Allows you to select or deselect all cards displayed on the current page based on the parameter passed.
    ///</summary>
    ///<param name = "selected" type = "Boolean">
    ///true to select all unselected cards displayed on the current page; false to deselect all selected cards on the page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.UnselectAllCardsOnPage = function() {
    ///<summary>
    ///Deselects all selected cards displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetSelectedCardCount = function() {
    ///<summary>
    ///Returns the number of selected cards.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of selected cards.
    ///</returns>
};
ASPxClientCardView.prototype.IsCardSelectedOnPage = function(visibleIndex) {
    ///<summary>
    ///Indicates whether or not the specified card is selected within the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the card by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified card is selected within the current page; otherwise, false.
    ///</returns>
};
ASPxClientCardView.prototype.ApplySearchPanelFilter = function(value) {
    ///<summary>
    ///Applies the specified search panel filter criterion to grid data.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies the filter criterion.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.ApplyFilter = function(filterExpression) {
    ///<summary>
    ///Applies the specified filter expression to the grid.
    ///</summary>
    ///<param name = "filterExpression" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.ClearFilter = function() {
    ///<summary>
    ///Clears the filter expression applied to a client CardView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetPopupEditForm = function() {
    ///<summary>
    ///Gets the Popup Edit Form.
    ///</summary>
    ///<returns type = "ASPxClientPopupControl">
    ///An ASPxClientPopupControl object that represents the Popup Edit Form.
    ///</returns>
};
ASPxClientCardView.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.PerformCallback = function(args) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing the specified argument to it.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Selects the specified page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page currently being selected.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
ASPxClientCardView.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages to which the grid's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the number of grid pages.
    ///</returns>
};
ASPxClientCardView.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetTopVisibleIndex = function() {
    ///<summary>
    ///Returns the index of the first card displayed within the grid's active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the index of the topmost row.
    ///</returns>
};
ASPxClientCardView.prototype.IsEditing = function() {
    ///<summary>
    ///Indicates whether the grid is in edit mode.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the grid is in edit mode; otherwise, false.
    ///</returns>
};
ASPxClientCardView.prototype.UpdateEdit = function() {
    ///<summary>
    ///Saves all the changes made and switches the grid to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.CancelEdit = function() {
    ///<summary>
    ///Cancels all the changes made and switches the CardView to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.Refresh = function() {
    ///<summary>
    ///Updates data displayed within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.IsCustomizationWindowVisible = function() {
    ///<summary>
    ///Indicates whether the customization window is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the customization window is displayed; otherwise, false.
    ///</returns>
};
ASPxClientCardView.prototype.ShowCustomizationWindow = function() {
    ///<signature>
    ///<summary>
    ///Invokes the customization window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the customization window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "showAtElement" type = "Object" optional = "true">
    ///An object that specifies the HTML element relative to whose position the customization window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.HideCustomizationWindow = function() {
    ///<summary>
    ///Closes the customization window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetColumnCount = function() {
    ///<summary>
    ///Returns the number of columns within the client grid.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of columns within the client grid.
    ///</returns>
};
ASPxClientCardView.prototype.GetSelectedFieldValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the card values displayed within all selected cards.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated via a semicolon, whose values within the selected cards are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientCardViewValuesCallback">
    ///An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetSelectedKeysOnPage = function() {
    ///<summary>
    ///Returns key values of selected cards displayed within the current page.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array that contains key values of selected cards displayed within the current page.
    ///</returns>
};
ASPxClientCardView.prototype.GetValuesOnCustomCallback = function(args, onCallback) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientCardViewValuesCallback">
    ///An ASPxClientCardViewValuesCallback object that is the JavaScript function which receives the information on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetCardValues = function(visibleIndex, fieldNames, onCallback) {
    ///<summary>
    ///Returns the values of the specified data source fields within the specified card.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the data card.
    ///</param>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated via a semicolon, whose values within the specified card are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientCardViewValuesCallback">
    ///An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetPageCardValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the card values displayed within the current page.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields whose values are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientCardViewValuesCallback">
    ///An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetVisibleCardsOnPage = function() {
    ///<summary>
    ///Returns the number of cards actually displayed within the active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of cards displayed within the active page.
    ///</returns>
};
ASPxClientCardView.prototype.GetColumn = function(columnIndex) {
    ///<summary>
    ///Returns the client column that resides at the specified position within the column collection.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///A zero-based index that identifies the column within the column collection (the column's Index property value).
    ///</param>
    ///<returns type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the client column.
    ///</returns>
};
ASPxClientCardView.prototype.GetColumnById = function(columnId) {
    ///<summary>
    ///Returns the column with the specified unique identifier.
    ///</summary>
    ///<param name = "columnId" type = "String">
    ///A string value that specifies the column's unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the client column.
    ///</returns>
};
ASPxClientCardView.prototype.GetColumnByField = function(columnFieldName) {
    ///<summary>
    ///Returns the client column which is bound to the specified data source field.
    ///</summary>
    ///<param name = "columnFieldName" type = "String">
    ///A string value that specifies the name of the data source field to which the column is bound (the column's FieldName property value).
    ///</param>
    ///<returns type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the client column bound to the specified data source field.
    ///</returns>
};
ASPxClientCardView.prototype.GetEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that specifies the required column within the client grid.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///Returns the editor used to edit the specified column's values.
    ///</returns>
    ///</signature>
};
ASPxClientCardView.prototype.GetToolbarByName = function(name) {
    ///<summary>
    ///Returns a toolbar specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the toolbar name.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar with the specified name.
    ///</returns>
};
ASPxClientCardView.prototype.GetToolbar = function(index) {
    ///<summary>
    ///Returns a grid's toolbar specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the toolbar object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar located at the specified index within the control's Toolbars collection.
    ///</returns>
};
ASPxClientCardView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCardView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCardView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCardView.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientCardView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCardView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.ValidateCards = function(validateOnlyModified) {
    ///<summary>
    ///Performs validation of CardView data contained in the cards when the CardView operates in Batch Edit mode.
    ///</summary>
    ///<param name = "validateOnlyModified" type = "Boolean" optional = "true">
    ///true, if only modified cards should be validated; otherwise, false.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if data in the cards data passes validation; otherwise, false.
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.ValidateCard = function(visibleIndex) {
    ///<summary>
    ///Performs validation of CardView data contained in the specified card when the CardView operates in Batch Edit mode.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value specifying the visible index of the validated card.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if data in the specified card data passes validation; otherwise, false.
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.GetCardVisibleIndices = function(includeDeleted) {
    ///<summary>
    ///Returns an array of card visible indices.
    ///</summary>
    ///<param name = "includeDeleted" type = "Boolean">
    ///true, to include visible indices of deleted cards to the returned array; otherwise, false.
    ///</param>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that are the visible indices of cards.
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.GetDeletedCardIndices = function() {
    ///<summary>
    ///Returns an array of the deleted card visible indices.
    ///</summary>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that are the visible indices of the deleted card.
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.GetInsertedCardIndices = function() {
    ///<summary>
    ///Returns an array of the inserted card visible indices.
    ///</summary>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that are the visible indices of the inserted cards.
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.IsDeletedCard = function(visibleIndex) {
    ///<summary>
    ///Indicates if the card with the specified visible index is deleted.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the card by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the card is deleted; otherwise, false.
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.IsNewCard = function(visibleIndex) {
    ///<summary>
    ///Indicates if the card with the specified visible index is newly created.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the card by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the row is new; otherwise, false.
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.MoveFocusBackward = function() {
    ///<summary>
    ///Programmatically moves the focus to the previous cell in the card
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if it is possible to move focus to the previous cell; otherwise, false.
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.MoveFocusForward = function() {
    ///<summary>
    ///Programmatically moves the focus to the next cell in the card.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if it is possible to move focus to the next cell; otherwise, false.
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.SetCellValue = function(visibleIndex, columnFieldNameOrId, value) {
    ///<signature>
    ///<summary>
    ///Sets the value of the specified cell.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer zero-based index that identifies the card containing the processed cell.
    ///</param>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that contains the new cell value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified cell.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer zero-based index that identifies the card containing the processed cell.
    ///</param>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that contains the new cell value.
    ///</param>
    ///<param name = "displayText" type = "String">
    ///A string value that specifies the cell display text.
    ///</param>
    ///<param name = "cancelCellHighlighting" type = "Boolean" optional = "true">
    ///true to cancel highlighting of the modified cell, false to highlight the modified cell.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardViewBatchEditApi.prototype.GetCellValue = function(visibleIndex, columnFieldNameOrId, initial) {
    ///<summary>
    ///Gets the value of the specified cell.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the visible index of a card containing the processed cell.
    ///</param>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
    ///</param>
    ///<param name = "initial" type = "Boolean" optional = "true">
    ///true, to return the initial (server) value; false, to return a value currently contained on the client side (modified value).
    ///</param>
    ///<returns type = "Object">
    ///An object containing the specified cell's value.
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.GetCellTextContainer = function(visibleIndex, columnFieldNameOrId) {
    ///<summary>
    ///Gets a container holding a data cell content.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that is the visible index.
    ///</param>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that is the column's Field Name or ID.
    ///</param>
    ///<returns type = "Object">
    ///An object that is the HTML container element that contains the data cell's content.
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.GetEditCellInfo = function() {
    ///<summary>
    ///Gets information about the cell currently being edited.
    ///</summary>
    ///<returns type = "ASPxClientCardViewCellInfo">
    ///An <see cref="ASPxClientCardViewCellInfo" /> object containing information about a cell.
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.HasChanges = function() {
    ///<signature>
    ///<summary>
    ///Returns a value that indicates whether the card view has changed data.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the card view has changed data; otherwise, false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns a value that indicates whether the specified card has changed data.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of a card.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the card has changed data; otherwise, false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns a value that indicates whether the specified cell's data has been changed.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of a card.
    ///</param>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the cell has changed data; otherwise, false.
    ///</returns>
    ///</signature>
};
ASPxClientCardViewBatchEditApi.prototype.ResetChanges = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Resets changes in the specified card.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of a card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Resets changes in the specified cell.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of a card containing the processed cell.
    ///</param>
    ///<param name = "columnIndex" type = "Int32">
    ///A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCardViewBatchEditApi.prototype.StartEdit = function(visibleIndex, columnIndex) {
    ///<summary>
    ///Switches the specified cell to edit mode.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the visible index of a card containing the processed cell.
    ///</param>
    ///<param name = "columnIndex" type = "Int32">
    ///A zero-based integer value that identifies the column which contains the processed cell in the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCardViewBatchEditApi.prototype.EndEdit = function() {
    ///<summary>
    ///Ends cell or card editing.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRowsByKey = function(key, selected) {
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified row displayed within the grid.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified rows displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects a grid row by its key.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified rows displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified rows; false to deselect the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.UnselectRowsByKey = function(keys) {
    ///<signature>
    ///<summary>
    ///Deselects the specified rows displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified row displayed within the grid.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.UnselectRows = function() {
    ///<signature>
    ///<summary>
    ///Deselects all the selected rows within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified rows (if selected) within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data rows within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified row (if selected) within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.UnselectFilteredRows = function() {
    ///<summary>
    ///Deselects all grid rows that match the filter criteria currently applied to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRowOnPage = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Selects the specified row displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified row displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.UnselectRowOnPage = function(visibleIndex) {
    ///<summary>
    ///Deselects the specified row (if selected) displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectAllRowsOnPage = function() {
    ///<signature>
    ///<summary>
    ///Selects all unselected rows displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Allows you to select or deselect all rows displayed on the current page based on the parameter passed.
    ///</summary>
    ///<param name = "selected" type = "Boolean">
    ///true to select all unselected rows displayed on the current page; false to deselect all selected rows on the page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.UnselectAllRowsOnPage = function() {
    ///<summary>
    ///Deselects all selected rows displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetSelectedRowCount = function() {
    ///<summary>
    ///Returns the number of selected rows.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of selected rows.
    ///</returns>
};
ASPxClientGridView.prototype.IsRowSelectedOnPage = function(visibleIndex) {
    ///<summary>
    ///Indicates whether or not the specified row is selected within the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified row is selected within the current page; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.IsGroupRow = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified row is a group row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified row is a group row; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.IsDataRow = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified row is a data row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified row is a data row; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.IsGroupRowExpanded = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified group row is expanded.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified group row is expanded; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.GetVertScrollPos = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the vertical scroll position.
    ///</returns>
};
ASPxClientGridView.prototype.GetHorzScrollPos = function() {
    ///<summary>
    ///Returns the current horizontal scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the horizontal scroll position.
    ///</returns>
};
ASPxClientGridView.prototype.GetHorizontalScrollPosition = function() {
    ///<summary>
    ///Returns the current horizontal scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</returns>
};
ASPxClientGridView.prototype.SetVertScrollPos = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SetHorzScrollPos = function(position) {
    ///<summary>
    ///Specifies the horizontal scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SetHorizontalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the horizontal scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SetFixedColumnScrollableRows = function(scrollableRowSettings) {
    ///<summary>
    ///Sets the scrollability of various types of grid rows when the grid displays fixed columns.
    ///</summary>
    ///<param name = "scrollableRowSettings" type = "Object">
    ///An object specifying which types of grid rows should or should not be scrollable.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ApplyOnClickRowFilter = function() {
    ///<summary>
    ///Applies a filter specified in the filter row to the GridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetAutoFilterEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data colum within the ASPxGridView.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column by its index.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's name or its data base field name.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.AutoFilterByColumn = function(column, val) {
    ///<signature>
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the client GridView.
    ///</param>
    ///<param name = "val" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "val" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "val" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.ApplySearchPanelFilter = function(value) {
    ///<summary>
    ///Applies the specified search panel filter criterion to grid data.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies the filter criterion.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ApplyFilter = function(filterExpression) {
    ///<summary>
    ///Applies the specified filter expression to the GridView.
    ///</summary>
    ///<param name = "filterExpression" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ClearFilter = function() {
    ///<summary>
    ///Clears the filter expression applied to a client GridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetPopupEditForm = function() {
    ///<summary>
    ///Gets the Popup Edit Form.
    ///</summary>
    ///<returns type = "ASPxClientPopupControl">
    ///An ASPxClientPopupControl object that represents the Popup Edit Form.
    ///</returns>
};
ASPxClientGridView.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.PerformCallback = function(args) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing the specified argument to it.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Selects the specified page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page currently being selected.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
ASPxClientGridView.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages to which the grid's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the number of grid pages.
    ///</returns>
};
ASPxClientGridView.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetTopVisibleIndex = function() {
    ///<summary>
    ///Returns the index of the first data row displayed within the GridView's active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the index of the topmost row.
    ///</returns>
};
ASPxClientGridView.prototype.IsEditing = function() {
    ///<summary>
    ///Indicates whether the grid is in edit mode.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the grid is in edit mode; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.UpdateEdit = function() {
    ///<summary>
    ///Saves all the changes made and switches the grid to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.CancelEdit = function() {
    ///<summary>
    ///Cancels all the changes made and switches the GridView to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.Refresh = function() {
    ///<summary>
    ///Updates data displayed within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.IsCustomizationWindowVisible = function() {
    ///<summary>
    ///Indicates whether the Customization Window is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the customization window is displayed; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.ShowCustomizationWindow = function() {
    ///<signature>
    ///<summary>
    ///Invokes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the Customization Window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "showAtElement" type = "Object" optional = "true">
    ///An object that specifies the HTML element relative to whose position the customization window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.HideCustomizationWindow = function() {
    ///<summary>
    ///Closes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetColumnsCount = function() {
    ///<summary>
    ///Returns the number of columns within the client GridView.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of columns within the client ASPxGridView.
    ///</returns>
};
ASPxClientGridView.prototype.GetColumnCount = function() {
    ///<summary>
    ///Returns the number of columns within the client GridView.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of columns within the client GridView.
    ///</returns>
};
ASPxClientGridView.prototype.GetSelectedFieldValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the row values displayed within all selected rows.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated via a semicolon, whose values within the selected rows are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetSelectedKeysOnPage = function() {
    ///<summary>
    ///Returns key values of selected rows displayed within the current page.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array that contains key values of selected rows displayed within the current page.
    ///</returns>
};
ASPxClientGridView.prototype.GetValuesOnCustomCallback = function(args, onCallback) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///A ASPxClientGridViewValuesCallback object that is the JavaScript function which receives the information on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetRowValues = function(visibleIndex, fieldNames, onCallback) {
    ///<summary>
    ///Returns the values of the specified data source fields within the specified row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the data row.
    ///</param>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated via a semicolon, whose values within the specified row are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///An ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetPageRowValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the row values displayed within the current page.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields whose values are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetVisibleRowsOnPage = function() {
    ///<summary>
    ///Returns the number of rows actually displayed within the active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of rows displayed within the active page.
    ///</returns>
};
ASPxClientGridView.prototype.GetColumn = function(columnIndex) {
    ///<summary>
    ///Returns the client column that resides at the specified position within the column collection.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///A zero-based index that identifies the column within the column collection (the column's Index property value).
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column.
    ///</returns>
};
ASPxClientGridView.prototype.GetColumnById = function(columnId) {
    ///<summary>
    ///Returns the column with the specified unique identifier.
    ///</summary>
    ///<param name = "columnId" type = "String">
    ///A string value that specifies the column's unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column.
    ///</returns>
};
ASPxClientGridView.prototype.GetColumnByField = function(columnFieldName) {
    ///<summary>
    ///Returns the client column which is bound to the specified data source field.
    ///</summary>
    ///<param name = "columnFieldName" type = "String">
    ///A string value that specifies the name of the data source field to which the column is bound (the column's FieldName property value).
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column bound to the specified data source field.
    ///</returns>
};
ASPxClientGridView.prototype.GetEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that specifies the required column within the client grid.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified column's editor.
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.GetEditValue = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column within the grid's column collection.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.FocusEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.SetEditValue = function(column, value) {
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column within the grid's column collection.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.ShowFilterControl = function() {
    ///<summary>
    ///Displays the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.CloseFilterControl = function() {
    ///<summary>
    ///Hides the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SetFilterEnabled = function(isFilterEnabled) {
    ///<summary>
    ///Enables or disables the current filter.
    ///</summary>
    ///<param name = "isFilterEnabled" type = "Boolean">
    ///true to enable the current filter; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetVerticalScrollPosition = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</returns>
};
ASPxClientGridView.prototype.SetVerticalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetFocusedCell = function() {
    ///<summary>
    ///Gets information about a focused cell.
    ///</summary>
    ///<returns type = "ASPxClientGridViewCellInfo">
    ///An <see cref="ASPxClientGridViewCellInfo" /> object containing information about a focused cell.
    ///</returns>
};
ASPxClientGridView.prototype.SetFocusedCell = function(rowVisibleIndex, columnIndex) {
    ///<summary>
    ///Focuses the specified cell.
    ///</summary>
    ///<param name = "rowVisibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of the row.
    ///</param>
    ///<param name = "columnIndex" type = "Int32">
    ///A zero-based index that identifies the column in the column collection (the column's Index property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ShowCustomizationDialog = function() {
    ///<summary>
    ///Invokes the Customization Dialog and displays it over the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SortBy = function(column) {
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.MoveColumn = function(column) {
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A String value that identifies the column to be hidden by the name of the data source field to which the column is bound, or by the column's name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<param name = "targetPosition" type = "ASPxClientGridColumnMovingTargetPosition">
    ///An ASPxClientGridColumnMovingTargetPosition enumeration value specifying the position relative to the target column in which to place the moved column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<param name = "targetPosition" type = "ASPxClientGridColumnMovingTargetPosition">
    ///An ASPxClientGridColumnMovingTargetPosition enumeration value specifying the position relative to the target column in which to place the moved column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "targetPosition" type = "ASPxClientGridColumnMovingTargetPosition">
    ///An ASPxClientGridColumnMovingTargetPosition enumeration value specifying the position relative to the target column in which to place the moved column.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true, to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true, to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "targetPosition" type = "ASPxClientGridColumnMovingTargetPosition">
    ///An ASPxClientGridColumnMovingTargetPosition enumeration value specifying the position relative to the target column in which to place the moved column.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true, to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true, to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.GroupBy = function(column) {
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.UnGroup = function(column) {
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.Ungroup = function(column) {
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of a specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///A ASPxClientGridViewColumn object that is the grid column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of a specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that is the column index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of a specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that is the column's FieldName or ID.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all group rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all group rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ExpandAllDetailRows = function() {
    ///<summary>
    ///Expands all detail rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.CollapseAllDetailRows = function() {
    ///<summary>
    ///Collapses all detail rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ExpandRow = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Expands the specified group row preserving the collapsed state of any child group row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Expands the specified group row and optionally child group rows at all nesting levels.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row.
    ///</param>
    ///<param name = "recursive" type = "Boolean" optional = "true">
    ///true to expand any child group rows at all nesting levels; false to preserve the collapsed state of any child group rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.CollapseRow = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Collapses the specified group row preserving the expanded state of child group rows.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Collapses the specified group row and optionally child group rows at all nesting levels.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<param name = "recursive" type = "Boolean" optional = "true">
    ///true to collapse child group rows at all nesting levels; false to preserve the expanded state of any child group row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.MakeRowVisible = function(visibleIndex) {
    ///<summary>
    ///Scrolls the view to the specified row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies a row by its visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.ExpandDetailRow = function(visibleIndex) {
    ///<summary>
    ///Expands the specified detail row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer index that identifies the detail row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.CollapseDetailRow = function(visibleIndex) {
    ///<summary>
    ///Collapses the specified detail row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer index that identifies the detail row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetRowKey = function(visibleIndex) {
    ///<summary>
    ///Returns the key value of the specified data row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "String">
    ///A string representing the specified data row's key value. If the index passed via the visibleIndex parameter is wrong, or the KeyFieldName property is not set, null is returned.
    ///</returns>
};
ASPxClientGridView.prototype.StartEditRow = function(visibleIndex) {
    ///<summary>
    ///Switches the grid to edit mode.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer that identifies a data row to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.StartEditRowByKey = function(key) {
    ///<summary>
    ///Switches the grid to edit mode.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies a data row to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.IsNewRowEditing = function() {
    ///<summary>
    ///Indicates whether or not a new row is being edited.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the GridView is in edit mode for a new row; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.AddNewRow = function() {
    ///<summary>
    ///Adds a new record.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.DeleteRow = function(visibleIndex) {
    ///<summary>
    ///Deletes the specified row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.DeleteRowByKey = function(key) {
    ///<summary>
    ///Deletes a row with the specified key value.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetFocusedRowIndex = function() {
    ///<summary>
    ///Returns the focused row's index.
    ///</summary>
    ///<returns type = "Int32">
    ///A zero-based integer that specifies the focused row's index.
    ///</returns>
};
ASPxClientGridView.prototype.SetFocusedRowIndex = function(visibleIndex) {
    ///<summary>
    ///Moves focus to the specified row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the focused row's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SelectRows = function() {
    ///<signature>
    ///<summary>
    ///Selects all the unselected rows within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified row displayed within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified rows within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data rows within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified rows within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data rows within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean">
    ///true to select the specified rows; false to deselect the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified row within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer zero-based index that identifies the data row within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridView.prototype.GetToolbarByName = function(name) {
    ///<summary>
    ///Returns a toolbar specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the toolbar name.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar with the specified name.
    ///</returns>
};
ASPxClientGridView.prototype.GetToolbar = function(index) {
    ///<summary>
    ///Returns a grid's toolbar specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the toolbar object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar located at the specified index within the control's Toolbars collection.
    ///</returns>
};
ASPxClientGridView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientGridView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientGridView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientGridView.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientGridView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientGridView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.ValidateRows = function(validateOnlyModified) {
    ///<summary>
    ///Performs validation of grid data contained in all rows when the grid operates in Batch Edit mode.
    ///</summary>
    ///<param name = "validateOnlyModified" type = "Boolean" optional = "true">
    ///true, if only modified rows should be validated; otherwise, false.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if data in all rows data passes validation; otherwise, false.
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.ValidateRow = function(visibleIndex) {
    ///<summary>
    ///Performs validation of grid data contained in the specified row when the grid operates in Batch Edit mode.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value specifying the visible index of the validated row.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if data in the specified row data passes validation; otherwise, false.
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.GetRowVisibleIndices = function(includeDeleted) {
    ///<summary>
    ///Returns an array of row visible indices.
    ///</summary>
    ///<param name = "includeDeleted" type = "Boolean">
    ///true, to include visible indices of deleted rows to the returned array; otherwise, false.
    ///</param>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that are the visible indices of grid rows.
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.GetDeletedRowIndices = function() {
    ///<summary>
    ///Returns an array of the deleted row visible indices.
    ///</summary>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that are the visible indices of the deleted rows.
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.GetInsertedRowIndices = function() {
    ///<summary>
    ///Returns an array of the inserted row visible indices.
    ///</summary>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that are the visible indices of the inserted rows.
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.IsDeletedRow = function(visibleIndex) {
    ///<summary>
    ///Indicates if the row with specified visible index is deleted.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the row is deleted; otherwise, false.
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.IsNewRow = function(visibleIndex) {
    ///<summary>
    ///Indicates if the row with specified visible index is newly created.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the row is new; otherwise, false.
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.MoveFocusBackward = function() {
    ///<summary>
    ///Programmatically moves the focus to the previous cell in the row.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if it is possible to move focus to the previous cell; otherwise, false.
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.MoveFocusForward = function() {
    ///<summary>
    ///Programmatically moves the focus to the next cell in the row.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if it is possible to move focus to the next cell; otherwise, false.
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.SetCellValue = function(visibleIndex, columnFieldNameOrId, value) {
    ///<signature>
    ///<summary>
    ///Sets a value of the specified cell.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer zero-based index that identifies the row containing the processed cell.
    ///</param>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that contains the new cell value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified cell.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer zero-based index that identifies the row containing the processed cell.
    ///</param>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that contains the new cell value.
    ///</param>
    ///<param name = "displayText" type = "String">
    ///A string value that specifies the cell display text.
    ///</param>
    ///<param name = "cancelCellHighlighting" type = "Boolean" optional = "true">
    ///true to cancel highlighting of the modified cell, false to highlight the modified cell.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridViewBatchEditApi.prototype.GetCellValue = function(visibleIndex, columnFieldNameOrId, initial) {
    ///<summary>
    ///Gets the value of the specified cell.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies a visible index of a row containing the processed cell.
    ///</param>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
    ///</param>
    ///<param name = "initial" type = "Boolean" optional = "true">
    ///true, to return the initial (server) value; false, to return a value currently contained on the client side (modified value).
    ///</param>
    ///<returns type = "Object">
    ///An object containing the specified cell's value.
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.GetCellTextContainer = function(visibleIndex, columnFieldNameOrId) {
    ///<summary>
    ///Gets a container holding a data cell content.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that is the visible index.
    ///</param>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that is the column's Field Name or ID.
    ///</param>
    ///<returns type = "Object">
    ///An object that is the HTML container element that contains the data cell's content.
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.GetEditCellInfo = function() {
    ///<summary>
    ///Gets information about the cell currently being edited.
    ///</summary>
    ///<returns type = "ASPxClientGridViewCellInfo">
    ///An <see cref="ASPxClientGridViewCellInfo" /> object containing information about a cell.
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.HasChanges = function() {
    ///<signature>
    ///<summary>
    ///Returns a value that indicates whether the grid has changed data.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the grid has changed data; otherwise, false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns a value that indicates whether the specified row has changed data.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of a row.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the row has changed data; otherwise, false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns a value that indicates whether the specified data cell's data has been changed.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of a row.
    ///</param>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column by the name of the data source field to which the column is bound, or by the column's name.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the cell has changed data; otherwise, false.
    ///</returns>
    ///</signature>
};
ASPxClientGridViewBatchEditApi.prototype.ResetChanges = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Resets changes in the specified row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of a row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Resets changes in the specified cell.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of a row containing the processed cell.
    ///</param>
    ///<param name = "columnIndex" type = "Int32">
    ///A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientGridViewBatchEditApi.prototype.StartEdit = function(visibleIndex, columnIndex) {
    ///<summary>
    ///Switches the specified cell to edit mode.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the visible index of a row containing the processed cell.
    ///</param>
    ///<param name = "columnIndex" type = "Int32">
    ///A zero-based integer value that identifies the column which contains the processed cell in the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientGridViewBatchEditApi.prototype.EndEdit = function() {
    ///<summary>
    ///Ends cell or row editing.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.SortBy = function(row) {
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRow object that represents the data row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value that specifies the row's position within the row collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the row's field name or unique identifier (the row's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRow object that represents the data row.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value that specifies the row's position within the row collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the row's field name or unique identifier (the row's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRow object that represents the data row.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value that specifies the row's position within the row collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true, to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the row's field name or unique identifier (the row's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values, and places the row to the specified position among the sorted rows.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based row's index among the sorted rows. -1 if data is not sorted by this row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values, and places the row to the specified position among the sorted rows.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value that specifies the row's position within the row collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values, and places the row to the specified position among the sorted rows.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based row's index among the sorted rows. -1 if data is not sorted by this row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGrid.prototype.GetRecordKey = function(visibleIndex) {
    ///<summary>
    ///Returns the key value of the specified data row (record in the vertical grid).
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the record's visible index.
    ///</param>
    ///<returns type = "String">
    ///A string representing the specified data row's key value. If the index passed using the visibleIndex parameter is wrong or the KeyFieldName property is not set, null is returned.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.AddNewRecord = function() {
    ///<summary>
    ///Adds a new record.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.DeleteRecord = function(visibleIndex) {
    ///<summary>
    ///Deletes the specified record.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.DeleteRecordByKey = function(key) {
    ///<summary>
    ///Deletes a record with the specified key value.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.SelectRecords = function() {
    ///<signature>
    ///<summary>
    ///Selects all the unselected records within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified record displayed within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the record's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified rercords within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify records within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified records within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify records within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean">
    ///true to select the specified records; false to deselect the records.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified record within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer zero-based index that identifies the record within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified record; false to deselect the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGrid.prototype.SelectRecordsByKey = function(keys, selected) {
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified records displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the records.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified records; false to deselect the records.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified record displayed within the grid.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the record.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified record; false to deselect the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified records displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the records.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects a grid record by its key.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGrid.prototype.UnselectRecords = function() {
    ///<signature>
    ///<summary>
    ///Deselects all the selected records within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified records (if selected) within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify records within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified record (if selected) within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the record's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGrid.prototype.UnselectRecordsByKey = function(keys) {
    ///<signature>
    ///<summary>
    ///Deselects the specified records displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the records.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified record displayed within the grid.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGrid.prototype.UnselectFilteredRecords = function() {
    ///<summary>
    ///Deselects all grid records that match the filter criteria currently applied to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.SelectRecordOnPage = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Selects the specified record displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the record's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified record displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the record's visible index.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified record; false to deselect the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGrid.prototype.UnselectRecordOnPage = function(visibleIndex) {
    ///<summary>
    ///Deselects the specified record (if selected) displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the record's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.SelectAllRecordsOnPage = function() {
    ///<signature>
    ///<summary>
    ///Selects all unselected records displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Allows you to select or deselect all records displayed on the current page based on the parameter passed.
    ///</summary>
    ///<param name = "selected" type = "Boolean">
    ///true to select all unselected records displayed on the current page; false to deselect all selected records on the page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGrid.prototype.UnselectAllRecordsOnPage = function() {
    ///<summary>
    ///Deselects all selected records displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetSelectedRecordCount = function() {
    ///<summary>
    ///Returns the number of selected records.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of selected records.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.IsRecordSelectedOnPage = function(visibleIndex) {
    ///<summary>
    ///Indicates whether or not the specified record is selected within the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the record by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified record is selected within the current page; otherwise, false.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetRecordValues = function(visibleIndex, fieldNames, onCallback) {
    ///<summary>
    ///Returns the values of the specified data source fields within the specified record.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the record.
    ///</param>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated using a semicolon, whose values within the specified record are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientVerticalGridValuesCallback">
    ///An ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetPageRecordValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the record values displayed within the current page.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields whose values are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientVerticalGridValuesCallback">
    ///A ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetVisibleRecordsOnPage = function() {
    ///<summary>
    ///Returns the number of records actually displayed within the active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of records displayed within the active page.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetRowCount = function() {
    ///<summary>
    ///Returns the number of rows within the client vertical grid.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of rows within the client vertical grid.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.ApplySearchPanelFilter = function(value) {
    ///<summary>
    ///Applies the specified search panel filter criterion to grid data.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies the filter criterion.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.ApplyFilter = function(filterExpression) {
    ///<summary>
    ///Applies the specified filter expression to the ASPxVerticalGrid.
    ///</summary>
    ///<param name = "filterExpression" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.ClearFilter = function() {
    ///<summary>
    ///Clears the filter expression applied to a client vertical grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.PerformCallback = function(args) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing the specified argument to it.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGrid.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Selects the specified page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page currently being selected.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages to which the grid's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the number of grid pages.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetTopVisibleIndex = function() {
    ///<summary>
    ///Returns the index of the first record displayed within the vertical grid's active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the index of the topmost record.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.UpdateEdit = function() {
    ///<summary>
    ///Saves all the changes made and switches the grid to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.CancelEdit = function() {
    ///<summary>
    ///Cancels all the changes made and switches the ASPxVerticalGrid to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.Refresh = function() {
    ///<summary>
    ///Updates data displayed within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetSelectedFieldValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the record values displayed within all selected records.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated by a semicolon, whose values within the selected records are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientVerticalGridValuesCallback">
    ///A ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetSelectedKeysOnPage = function() {
    ///<summary>
    ///Returns key values of selected records displayed within the current page.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array that contains key values of selected records displayed within the current page.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetValuesOnCustomCallback = function(args, onCallback) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientVerticalGridValuesCallback">
    ///A ASPxClientVerticalGridValuesCallback object that is the JavaScript function which receives the information on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetEditor = function(row) {
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified row's values.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRowobject that specifies the required row within the client grid.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified row's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified row's values.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value that specifies the row's position within the rows collection.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified row's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified row's values.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the row's field name or unique identifier (the row's Name property value).
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified row's editor.
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGrid.prototype.ShowFilterControl = function() {
    ///<summary>
    ///Displays the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.CloseFilterControl = function() {
    ///<summary>
    ///Hides the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.SetFilterEnabled = function(isFilterEnabled) {
    ///<summary>
    ///Enables or disables the current filter.
    ///</summary>
    ///<param name = "isFilterEnabled" type = "Boolean">
    ///true to enable the current filter; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetRow = function(rowIndex) {
    ///<summary>
    ///Returns the client row that resides at the specified position within the row collection.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///A zero-based index that identifies the row within the row collection (the row's Index property value).
    ///</param>
    ///<returns type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRow object that represents the client row.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetRowById = function(rowId) {
    ///<summary>
    ///Returns the row with the specified unique identifier.
    ///</summary>
    ///<param name = "rowId" type = "String">
    ///A string value that specifies the row's unique identifier (the row's Name property value).
    ///</param>
    ///<returns type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRow object that represents the client row.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetRowByField = function(rowFieldName) {
    ///<summary>
    ///Returns the client row which is bound to the specified data source field.
    ///</summary>
    ///<param name = "rowFieldName" type = "String">
    ///A string value that specifies the name of the data source field to which the row is bound (the row's fieldName property value).
    ///</param>
    ///<returns type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRow object that represents the client row bound to the specified data source field.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetVerticalScrollPosition = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetHorizontalScrollPosition = function() {
    ///<summary>
    ///Returns the current horizontal scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.SetVerticalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.SetHorizontalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the horizontal scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetRowExpanded = function(row) {
    ///<signature>
    ///<summary>
    ///Gets the value that specifies whether the required row is expanded.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRowobject that specifies the row.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the row is expanded; otherwise, false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the value that specifies whether the row with the specified index is expanded.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value specifying the row's index.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the row is expanded; otherwise, false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the value that specifies whether the row with the specified field name or ID is expanded.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value specifying the row's field name or ID.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the row is expanded; otherwise, false.
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGrid.prototype.SetRowExpanded = function(row, value) {
    ///<signature>
    ///<summary>
    ///Sets a value indicating whether the row is expanded.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRowobject that specifies the required row within the client grid.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to expand the row; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets a value indicating whether the row is expanded.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value specifying the index of the row.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to expand the row; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets a value indicating whether the row is expanded.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the row's field name or unique identifier (the row's Name property value).
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to expand the row; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGrid.prototype.GetToolbarByName = function(name) {
    ///<summary>
    ///Returns a toolbar specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the toolbar name.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar with the specified name.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetToolbar = function(index) {
    ///<summary>
    ///Returns a grid's toolbar specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the toolbar object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar located at the specified index within the control's Toolbars collection.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientVerticalGrid.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientVerticalGrid.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGrid.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.ValidateRecords = function(validateOnlyModified) {
    ///<summary>
    ///Performs validation of grid data contained in all records when the grid operates in batch edit mode.
    ///</summary>
    ///<param name = "validateOnlyModified" type = "Boolean" optional = "true">
    ///true, if only modified records should be validated; otherwise, false.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if data in all records passes validation; otherwise, false.
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.ValidateRecord = function(visibleIndex) {
    ///<summary>
    ///Performs validation of grid data contained in the specified record when the grid operates in batch edit mode.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value specifying the visible index of the validated record.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if data in the specified record passes validation; otherwise, false.
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.GetRecordVisibleIndices = function(includeDeleted) {
    ///<summary>
    ///Returns an array of record visible indices.
    ///</summary>
    ///<param name = "includeDeleted" type = "Boolean">
    ///true, to include visible indices of deleted records to the returned array; otherwise, false.
    ///</param>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that are the visible indices of grid records.
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.GetDeletedRecordIndices = function() {
    ///<summary>
    ///Returns an array of the deleted record visible indices.
    ///</summary>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that are the visible indices of the deleted records.
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.GetInsertedRecordIndices = function() {
    ///<summary>
    ///Returns an array of the inserted record visible indices.
    ///</summary>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that are the visible indices of the inserted records.
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.IsDeletedRecord = function(visibleIndex) {
    ///<summary>
    ///Indicates if the record with the specified visible index is deleted.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the record by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the record is deleted; otherwise, false.
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.IsNewRecord = function(visibleIndex) {
    ///<summary>
    ///Indicates if the record with specified visible index is newly created.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the record by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the record is new; otherwise, false.
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.MoveFocusBackward = function() {
    ///<summary>
    ///Programmatically moves the focus to the previous cell in the record.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if it is possible to move focus to the previous cell; otherwise, false.
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.MoveFocusForward = function() {
    ///<summary>
    ///Programmatically moves the focus to the next cell in the record.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if it is possible to move focus to the next cell; otherwise, false.
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.SetCellValue = function(visibleIndex, rowFieldNameOrId, value) {
    ///<signature>
    ///<summary>
    ///Sets a value of the specified cell.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer zero-based index that identifies the record containing the processed cell.
    ///</param>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the field name or unique identifier (the row's Name property value) of a row containing the processed cell.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that contains the new cell value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified cell.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer zero-based index that identifies the row containing the processed cell.
    ///</param>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the field name or unique identifier (the column's Name property value) of a column containing the processed cell.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that contains the new cell value.
    ///</param>
    ///<param name = "displayText" type = "String">
    ///A string value that specifies the cell display text.
    ///</param>
    ///<param name = "cancelCellHighlighting" type = "Boolean" optional = "true">
    ///true to cancel highlighting of the modified cell, false to highlight the modified cell.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGridBatchEditApi.prototype.GetCellValue = function(visibleIndex, rowFieldNameOrId, initial) {
    ///<summary>
    ///Gets the value of the specified cell.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies a visible index of a record containing the processed cell.
    ///</param>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the field name or unique identifier (the row's Name property value) of a row containing the processed cell.
    ///</param>
    ///<param name = "initial" type = "Boolean" optional = "true">
    ///true, to return the initial (server) value; false, to return a value currently contained on the client side (modified value).
    ///</param>
    ///<returns type = "Object">
    ///An object containing the specified cell's value.
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.GetCellTextContainer = function(visibleIndex, columnFieldNameOrId) {
    ///<summary>
    ///Gets a container holding the data cell content.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that is the visible index.
    ///</param>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that is the column's Field Name or ID.
    ///</param>
    ///<returns type = "Object">
    ///An object that is the HTML container element that contains the data cell's content.
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.GetEditCellInfo = function() {
    ///<summary>
    ///Gets information about the cell currently being edited.
    ///</summary>
    ///<returns type = "ASPxClientVerticalGridCellInfo">
    ///An <see cref="ASPxClientVerticalGridCellInfo" /> object containing information about a cell.
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.HasChanges = function() {
    ///<signature>
    ///<summary>
    ///Returns a value that indicates whether the vertical grid has changed data.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the vertical grid has changed data; otherwise, false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns a value that indicates whether the specified record has changed data.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of a record.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the record has changed data; otherwise, false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns a value that indicates whether the specified data cell's data has been changed.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of a record.
    ///</param>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that identifies the row by the name of the data source field to which the row is bound, or by the row's name.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the cell has changed data; otherwise, false.
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGridBatchEditApi.prototype.ResetChanges = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Resets changes in the specified record.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of a record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Resets changes in the specified cell.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of a record containing the processed cell.
    ///</param>
    ///<param name = "rowIndex" type = "Int32">
    ///A string value that specifies the field name or unique identifier (the row's Name property value) of a row containing the processed cell.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientVerticalGridBatchEditApi.prototype.StartEdit = function(visibleIndex, rowIndex) {
    ///<summary>
    ///Switches the specified cell to batch edit mode.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the visible index of a record containing the processed cell.
    ///</param>
    ///<param name = "rowIndex" type = "Int32">
    ///A zero-based integer value that identifies the row which contains the processed cell in the rows collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientVerticalGridBatchEditApi.prototype.EndEdit = function() {
    ///<summary>
    ///Ends the cell(s) editing.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditorChangeMediaElementCommandArguments.prototype.GetCommandName = function() {
    ///<summary>
    ///Returns the name of the client-side command corresponding to the parameter.
    ///</summary>
    ///<returns type = "String">
    ///One of the ASPxClientCommandConsts values corresponds to the type of the parameter.
    ///</returns>
};
ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments.prototype.GetCommandName = function() {
    ///<summary>
    ///Returns the name of the client-side command corresponding to the parameter.
    ///</summary>
    ///<returns type = "String">
    ///One of the ASPxClientCommandConsts values corresponds to the type of the parameter.
    ///</returns>
};
ASPxClientHtmlEditorInsertAudioCommandArguments.prototype.GetCommandName = function() {
    ///<summary>
    ///Returns the name of the client-side command corresponding to the parameter.
    ///</summary>
    ///<returns type = "String">
    ///One of the ASPxClientCommandConsts values corresponds to the type of the parameter.
    ///</returns>
};
ASPxClientHtmlEditorChangeAudioCommandArguments.prototype.GetCommandName = function() {
    ///<summary>
    ///Returns the name of the client-side command corresponding to the parameter.
    ///</summary>
    ///<returns type = "String">
    ///One of the ASPxClientCommandConsts values corresponds to the type of the parameter.
    ///</returns>
};
ASPxClientHtmlEditorInsertVideoCommandArguments.prototype.GetCommandName = function() {
    ///<summary>
    ///Returns the name of the client-side command corresponding to the parameter.
    ///</summary>
    ///<returns type = "String">
    ///One of the ASPxClientCommandConsts values corresponds to the type of the parameter.
    ///</returns>
};
ASPxClientHtmlEditorChangeVideoCommandArguments.prototype.GetCommandName = function() {
    ///<summary>
    ///Returns the name of the client-side command corresponding to the parameter.
    ///</summary>
    ///<returns type = "String">
    ///One of the ASPxClientCommandConsts values corresponds to the type of the parameter.
    ///</returns>
};
ASPxClientHtmlEditorInsertFlashCommandArguments.prototype.GetCommandName = function() {
    ///<summary>
    ///Returns the name of the client-side command corresponding to the parameter.
    ///</summary>
    ///<returns type = "String">
    ///One of the ASPxClientCommandConsts values corresponds to the type of the parameter.
    ///</returns>
};
ASPxClientHtmlEditorChangeFlashCommandArguments.prototype.GetCommandName = function() {
    ///<summary>
    ///Returns the name of the client-side command corresponding to the parameter.
    ///</summary>
    ///<returns type = "String">
    ///One of the ASPxClientCommandConsts values corresponds to the type of the parameter.
    ///</returns>
};
ASPxClientHtmlEditorInsertYouTubeVideoCommandArguments.prototype.GetCommandName = function() {
    ///<summary>
    ///Returns the name of the client-side command corresponding to the parameter.
    ///</summary>
    ///<returns type = "String">
    ///One of the ASPxClientCommandConsts values corresponds to the type of the parameter.
    ///</returns>
};
ASPxClientHtmlEditorChangeYouTubeVideoCommandArguments.prototype.GetCommandName = function() {
    ///<summary>
    ///Returns the name of the client-side command corresponding to the parameter.
    ///</summary>
    ///<returns type = "String">
    ///One of the ASPxClientCommandConsts values corresponds to the type of the parameter.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetDesignViewDocument = function() {
    ///<summary>
    ///Returns the document object generated by an iframe element within a design view area.
    ///</summary>
    ///<returns type = "Object">
    ///A document object specifying the design view area content.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetDialogPopupControl = function() {
    ///<summary>
    ///Provides access to the client ASPxPopupControl object that is a Html Editor's dialog.
    ///</summary>
    ///<returns type = "ASPxClientPopupControl">
    ///A ASPxClientPopupControl object.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetPreviewDocument = function() {
    ///<summary>
    ///Returns the document object generated by an iframe element within a preview area.
    ///</summary>
    ///<returns type = "Object">
    ///A document object specifying the preview area content.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetContextMenu = function() {
    ///<summary>
    ///Returns a collection of client context menu objects.
    ///</summary>
    ///<returns type = "ASPxClientPopupMenu">
    ///An <see cref="ASPxClientPopupMenu" /> object that is the client-side collection of context menu objects.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the ASPxHtmlEditor's edit region.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetHtml = function() {
    ///<summary>
    ///Gets the HTML markup that represents the editor's content.
    ///</summary>
    ///<returns type = "String">
    ///A string value that represents the HTML markup.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetHtml = function(html) {
    ///<signature>
    ///<summary>
    ///Specifies the HTML markup that represents the editor's content.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the HTML markup that represents the editor's content.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<param name = "clearUndoHistory" type = "Boolean">
    ///true to clear the undo stack; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientHtmlEditor.prototype.ReplacePlaceholders = function(html, placeholders) {
    ///<summary>
    ///Replaces placeholders with the specified values.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that specifies the HTML code to process.
    ///</param>
    ///<param name = "placeholders" elementType = "Object" type = "Array">
    ///An array of objects that specify the placeholders and values to replace them.
    ///</param>
    ///<returns type = "String">
    ///A string value that is the resulting HTML code with the placeholders replaced.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.CreateChangeMediaElementCommandArguments = function(element) {
    ///<summary>
    ///Creates a parameter for ASPxHtmlEditor's client-side commands related to changing media elements.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An element that is being changed.
    ///</param>
    ///<returns type = "ASPxClientHtmlEditorChangeMediaElementCommandArguments">
    ///An <see cref="ASPxClientHtmlEditorChangeMediaElementCommandArguments" /> object which contains the current settings of the changed element.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.ExecuteCommand = function(commandName, parameter, addToUndoHistory) {
    ///<summary>
    ///Executes the specified command.
    ///</summary>
    ///<param name = "commandName" type = "String">
    ///A string value that specifies the command to perform.
    ///</param>
    ///<param name = "parameter" type = "Object">
    ///A string value specifying additional information about the command to perform.
    ///</param>
    ///<param name = "addToUndoHistory" type = "Boolean">
    ///true, to add the specified command to the undo stack; otherwise, false.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified command has been completed successfully; otherwise, false.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SaveToUndoHistory = function() {
    ///<summary>
    ///Adds the current editor state to the undo/redo history.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetSelection = function() {
    ///<summary>
    ///Returns the selection in the ASPxHtmlEditor.
    ///</summary>
    ///<returns type = "ASPxClientHtmlEditorSelection">
    ///The ASPxClientHtmlEditorSelection object specifying the selection within the ASPxHtmlEditor.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.RestoreSelection = function() {
    ///<summary>
    ///Restores the selection within the ASPxHtmlEditor.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if selection has been restored successfully; otherwise, false.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetToolbarComboBoxValue = function(commandName, value) {
    ///<summary>
    ///Sets the value of the combo box within the HtmlEditor on the client side.
    ///</summary>
    ///<param name = "commandName" type = "String">
    ///A string value that identifies the combo box's command name within the HtmlEditor's control collection.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the combo box's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetToolbarDropDownItemPickerValue = function(commandName, value) {
    ///<summary>
    ///Sets the value of the dropdown item picker in the HtmlEditor on the client side.
    ///</summary>
    ///<param name = "commandName" type = "String">
    ///A string value that identifies the dropdown item picker by its command name. This value is contained in the CommandName property.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the dropdown item picker's new value, i.e., the ToolbarItemPickerItem object.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetRibbonContextTabCategoryVisible = function(categoryName, active) {
    ///<summary>
    ///Specifies the visibility of a ribbon context tab category specified by its name.
    ///</summary>
    ///<param name = "categoryName" type = "String">
    ///A Name property value of the required category.
    ///</param>
    ///<param name = "active" type = "String">
    ///true to make a category visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetRibbon = function() {
    ///<summary>
    ///Provides access to an object implementing the HtmlEditor's ribbon UI.
    ///</summary>
    ///<returns type = "ASPxClientRibbon">
    ///An <see cref="ASPxClientRibbon" /> object that implements the HtmlEditor's ribbon UI.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value passes validation.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.Validate = function() {
    ///<summary>
    ///Performs validation of the editor's content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetActiveTabByName = function(name) {
    ///<summary>
    ///Set an active tab specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value that is the name of the tab.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetActiveTabName = function() {
    ///<summary>
    ///Returns the name of the active HTML editor tab.
    ///</summary>
    ///<returns type = "String">
    ///A String value that is the active tab's name.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.ReconnectToExternalRibbon = function() {
    ///<summary>
    ///Reconnect the control to an external ribbon.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.PerformDataCallback = function(parameter, onCallback) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientDataCallback">
    ///A ASPxClientDataCallback object that represents the JavaScript function which receives the callback data as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientHtmlEditor.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHtmlEditor.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientHtmlEditorDialogBase.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorDialogBase.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorDialogBase.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorEditElementDialog.prototype.GetBorderStyleComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Border style" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorEditElementDialog.prototype.GetBorderWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border width" spin editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorEditElementDialog.prototype.GetBorderColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border color" color editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorEditElementDialog.prototype.GetTopMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Top margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorEditElementDialog.prototype.GetBottomMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Bottom margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorEditElementDialog.prototype.GetLeftMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Left margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorEditElementDialog.prototype.GetRightMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Right margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorEditElementDialog.prototype.GetCssClassNameComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "CSS class" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorEditElementDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorEditElementDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorEditElementDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetIdTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "ID" text box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetTitleTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Title" text box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetDirectionComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Direction" combo box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetValueTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Value" text box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetTabIndexTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Tab index" text box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetDisabledCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Disabled" check box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetInputTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Input type" combo box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetForTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "For" text box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetNameTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Name" text box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetMethodTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Method" text box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetActionTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Action" text box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetCheckedCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Checked" check box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetMaxLengthTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Max length" text box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetSizeTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Size" text box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetReadonlyCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Readonly" check box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetSrcTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Src" text box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetAcceptTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Accept" text box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetAltTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Alt" text box in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetStartSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Start" spin editor in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetWidthValueSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Width" spin editor in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetWidthValueTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client ASPxComboBox object that allows you to specify the element width measurement unit in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetHeightValueSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Height" spin editor in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetHeightValueTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client ASPxComboBox object that allows to specify the element height measurement unit in the Html Editor's "Change Element Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetBorderStyleComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Border style" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetBorderWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border width" spin editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetBorderColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border color" color editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetTopMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Top margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetBottomMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Bottom margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetLeftMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Left margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetRightMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Right margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetCssClassNameComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "CSS class" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorChangeElementPropertiesDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetEmailTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "E-mail to" text box in the Html Editor's Link dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetTextTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Text" text box in the Html Editor's Link dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetTooltipTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "ToolTip" text box in the Html Editor's Link dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetSubjectTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Subject" text box in the Html Editor's Link dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetUrlTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "URL" text box in the Html Editor's Link dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetFileManager = function() {
    ///<summary>
    ///Provides access to the client object of the file manager used in the Link dialog's "Select Document" popup window.
    ///</summary>
    ///<returns type = "ASPxClientFileManager">
    ///A ASPxClientFileManager object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetSelectDocumentPopupCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Link dialog's "Select Document" popup window.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetSelectDocumentPopupSelectButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Select" button in the Link dialog's "Select Document" popup window.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetSelectDocumentPopupControl = function() {
    ///<summary>
    ///Provides access to the client popup control object that is the "Select Document" popup window in the Html Editor's Link dialog.
    ///</summary>
    ///<returns type = "ASPxClientPopupControl">
    ///A ASPxClientPopupControl object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetOpenInNewWindowCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Open in new window" check box in the Html Editor's Link dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetLinkTypeRadioButtonList = function() {
    ///<summary>
    ///Provides access to the client radio button list object used to specify the link type in the Html Editor's Link dialog.
    ///</summary>
    ///<returns type = "ASPxClientRadioButtonList">
    ///A ASPxClientRadioButtonList object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorLinkDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorPlaceholderDialog.prototype.GetPlaceholderNameListBox = function() {
    ///<summary>
    ///Provides access to the ASPxListBox client object that lists placeholder names in the Html Editor's Placeholder dialog.
    ///</summary>
    ///<returns type = "ASPxClientListBox">
    ///A ASPxClientListBox object.
    ///</returns>
};
ASPxClientHtmlEditorPlaceholderDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorPlaceholderDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorPlaceholderDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorPasteFromWordDialog.prototype.GetRemoveFontFamilyCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Remove font family" check box in the Html Editor's Flash dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorPasteFromWordDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorPasteFromWordDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorPasteFromWordDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetMediaFileSelector = function() {
    ///<summary>
    ///Provides access to the client object of the media file selector that allows you to insert/change media files in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientMediaFileSelector">
    ///A ASPxClientMediaFileSelector object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetMoreOptionsCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "More options" check box in the Html Editor's Audio/Video/Flash/Image dialogs.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Width" spin editor in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetHeightSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Height" spin editor in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetPositionComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Position" combo box in the Html Editor's Audio/Video/Flash/Image dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetBorderStyleComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Border style" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetBorderWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border width" spin editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetBorderColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border color" color editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetTopMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Top margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetBottomMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Bottom margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetLeftMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Left margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetRightMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Right margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetCssClassNameComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "CSS class" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorMediaDialogBase.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetSizeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Size" combo box in the Html Editor's Image dialog.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetCreateThumbnailCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Create thumbnail" check box in the Html Editor's Image dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetThumbnailNameTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "New image name" text box in the Html Editor's Image dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetWrapTextCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Wrap text around image" check box in the Html Editor's Image dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetDescriptionTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Description" text box in the Html Editor's Image dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetMediaFileSelector = function() {
    ///<summary>
    ///Provides access to the client object of the media file selector that allows you to insert/change media files in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientMediaFileSelector">
    ///A ASPxClientMediaFileSelector object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetMoreOptionsCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "More options" check box in the Html Editor's Audio/Video/Flash/Image dialogs.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Width" spin editor in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetHeightSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Height" spin editor in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetPositionComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Position" combo box in the Html Editor's Audio/Video/Flash/Image dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetBorderStyleComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Border style" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetBorderWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border width" spin editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetBorderColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border color" color editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetTopMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Top margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetBottomMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Bottom margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetLeftMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Left margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetRightMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Right margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetCssClassNameComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "CSS class" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorImageDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetQualityComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Quality" combo box in the Html Editor's Flash dialog.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetAutoPlayCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Auto play" check box in the Html Editor's Flash dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetEnableFlashMenuCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Enable flash menu" check box in the Html Editor's Flash dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetLoopCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Loop" check box in the Html Editor's Flash dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetAllowFullscreenCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Allow fullscreen" check box in the Html Editor's Flash dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetMediaFileSelector = function() {
    ///<summary>
    ///Provides access to the client object of the media file selector that allows you to insert/change media files in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientMediaFileSelector">
    ///A ASPxClientMediaFileSelector object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetMoreOptionsCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "More options" check box in the Html Editor's Audio/Video/Flash/Image dialogs.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Width" spin editor in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetHeightSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Height" spin editor in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetPositionComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Position" combo box in the Html Editor's Audio/Video/Flash/Image dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetBorderStyleComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Border style" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetBorderWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border width" spin editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetBorderColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border color" color editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetTopMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Top margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetBottomMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Bottom margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetLeftMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Left margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetRightMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Right margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetCssClassNameComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "CSS class" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorFlashDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetAutoPlayCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Auto play" check box in the Html Editor's Audio dialogs.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetPreloadModeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Preload mode" combo box in the Html Editor's Audio dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetLoopCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Loop" check box in the Html Editor's Audio dialogs.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetShowPlayerControlsCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Show player controls" check box in the Html Editor's Audio dialogs.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetMediaFileSelector = function() {
    ///<summary>
    ///Provides access to the client object of the media file selector that allows you to insert/change media files in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientMediaFileSelector">
    ///A ASPxClientMediaFileSelector object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetMoreOptionsCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "More options" check box in the Html Editor's Audio/Video/Flash/Image dialogs.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Width" spin editor in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetHeightSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Height" spin editor in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetPositionComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Position" combo box in the Html Editor's Audio/Video/Flash/Image dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetBorderStyleComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Border style" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetBorderWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border width" spin editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetBorderColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border color" color editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetTopMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Top margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetBottomMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Bottom margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetLeftMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Left margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetRightMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Right margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetCssClassNameComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "CSS class" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorAudioDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetAutoPlayCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Auto play" check box in the Html Editor's Video dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetPreloadModeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Preload mode" combo box in the Html Editor's Video dialog.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetLoopCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Loop" check box in the Html Editor's Video dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetShowPlayerControlsCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Show player controls" check box in the Html Editor's Video dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetPosterTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Poster URL" text box in the Html Editor's Video dialog.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetMediaFileSelector = function() {
    ///<summary>
    ///Provides access to the client object of the media file selector that allows you to insert/change media files in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientMediaFileSelector">
    ///A ASPxClientMediaFileSelector object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetMoreOptionsCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "More options" check box in the Html Editor's Audio/Video/Flash/Image dialogs.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Width" spin editor in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetHeightSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Height" spin editor in the Html Editor's Audio/Video/Flash dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetPositionComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Position" combo box in the Html Editor's Audio/Video/Flash/Image dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetBorderStyleComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Border style" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetBorderWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border width" spin editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetBorderColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border color" color editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetTopMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Top margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetBottomMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Bottom margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetLeftMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Left margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetRightMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Right margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetCssClassNameComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "CSS class" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorVideoDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetConfidentModeCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Enable privacy-enhanced mode" check box in the Html Editor's YouTube Video dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetShowSameVideosCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Show suggested videos when the video finishes" check box in the Html Editor's YouTube Video dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetShowVideoNameCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Show video title and player actions" check box in the Html Editor's YouTube Video dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetShowPlayerControlsCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Show player controls" check box in the Html Editor's YouTube Video dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetBorderStyleComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Border style" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetBorderWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border width" spin editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetBorderColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border color" color editor in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetTopMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Top margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetBottomMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Bottom margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetLeftMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Left margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetRightMarginTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Right margin" text box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetCssClassNameComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "CSS class" combo box in the Html Editor's dialogs (Style Settings).
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorYouTubeDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialogBase.prototype.GetBackgroundColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Background color" color editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialogBase.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialogBase.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialogBase.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetWidthTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Width" combo box in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetWidthValueSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the spin editor in the Html Editor's Table dialogs that allows you to specify the table width value.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetWidthValueTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the combo box in the Html Editor's Table dialogs that allows you to specify the table width measurement unit.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetHeightTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Height" combo box in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetHeightValueSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the spin editor in the Html Editor's Table dialogs that allows you specify the table height value.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetHeightValueTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the combo box in the Html Editor's Table dialogs that allows you to specify the table height measurement unit.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetCellPaddingSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Cell padding" spin editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetCellSpacingSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Cell spacing" spin editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetAlignmentComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Alignment" combo box in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetBorderColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border Color" color editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetBorderWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border size" spin editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetHeadersComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Headers" combo box in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetCaptionTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Caption" text box in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetSummaryTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Summary" text box in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetAccessibilityCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Accessibility" check box related to the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetBackgroundColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Background color" color editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorTableDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetColumnCountSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Columns" spin editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetRowCountSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Rows" spin editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetEqualWidthCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Equal column widths" check box in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetWidthTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Width" combo box in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetWidthValueSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the spin editor in the Html Editor's Table dialogs that allows you to specify the table width value.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetWidthValueTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the combo box in the Html Editor's Table dialogs that allows you to specify the table width measurement unit.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetHeightTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Height" combo box in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetHeightValueSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the spin editor in the Html Editor's Table dialogs that allows you specify the table height value.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetHeightValueTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the combo box in the Html Editor's Table dialogs that allows you to specify the table height measurement unit.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetCellPaddingSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Cell padding" spin editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetCellSpacingSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Cell spacing" spin editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetAlignmentComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Alignment" combo box in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetBorderColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border Color" color editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetBorderWidthSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Border size" spin editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetHeadersComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Headers" combo box in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetCaptionTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Caption" text box in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetSummaryTextBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Summary" text box in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientTextBox">
    ///A ASPxClientTextBox object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetAccessibilityCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Accessibility" check box related to the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetBackgroundColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Background color" color editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorInsertTableDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorTableElementPropertiesDialog.prototype.GetHorizontalAlignmentComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Horizontal" combo box in the Html Editor's Row/Column/Cell Properties dialog's Alignment group.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableElementPropertiesDialog.prototype.GetVerticalAlignmentComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Vertical" combo box in the Html Editor's Row/Column/Cell Properties dialog's Alignment group.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableElementPropertiesDialog.prototype.GetBackgroundColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Background color" color editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableElementPropertiesDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorTableElementPropertiesDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorTableElementPropertiesDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorTableCellPropertiesDialog.prototype.GetApplyToAllCellsCheckBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Apply to all cells in the table" check box in the Html Editor's Cell Properties dialog.
    ///</summary>
    ///<returns type = "ASPxClientCheckBox">
    ///A ASPxClientCheckBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableCellPropertiesDialog.prototype.GetHorizontalAlignmentComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Horizontal" combo box in the Html Editor's Row/Column/Cell Properties dialog's Alignment group.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableCellPropertiesDialog.prototype.GetVerticalAlignmentComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Vertical" combo box in the Html Editor's Row/Column/Cell Properties dialog's Alignment group.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableCellPropertiesDialog.prototype.GetBackgroundColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Background color" color editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableCellPropertiesDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorTableCellPropertiesDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorTableCellPropertiesDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorTableRowPropertiesDialog.prototype.GetHeightTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Height" combo box in the Html Editor's "Row Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableRowPropertiesDialog.prototype.GetHeightValueSpinEdit = function() {
    ///<summary>
    ///Provides access to the client ASPxSpinEdit object that allows you to specify the row height in the Html Editor's "Row Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableRowPropertiesDialog.prototype.GetHeightValueTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client ASPxComboBox object that allows you to specify the row height measurement unit in the Html Editor's "Row Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableRowPropertiesDialog.prototype.GetHorizontalAlignmentComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Horizontal" combo box in the Html Editor's Row/Column/Cell Properties dialog's Alignment group.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableRowPropertiesDialog.prototype.GetVerticalAlignmentComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Vertical" combo box in the Html Editor's Row/Column/Cell Properties dialog's Alignment group.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableRowPropertiesDialog.prototype.GetBackgroundColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Background color" color editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableRowPropertiesDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorTableRowPropertiesDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorTableRowPropertiesDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorTableColumnPropertiesDialog.prototype.GetWidthTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Width" combo box in the Html Editor's "Column Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableColumnPropertiesDialog.prototype.GetWidthValueSpinEdit = function() {
    ///<summary>
    ///Provides access to the client object of the spin editor that allows you to set the column width value in the Html Editor's "Column Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientSpinEdit">
    ///A ASPxClientSpinEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableColumnPropertiesDialog.prototype.GetWidthValueTypeComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the combo box that allows you to specify the column width measurement unit in the Html Editor's "Column Properties" dialog.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableColumnPropertiesDialog.prototype.GetHorizontalAlignmentComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Horizontal" combo box in the Html Editor's Row/Column/Cell Properties dialog's Alignment group.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableColumnPropertiesDialog.prototype.GetVerticalAlignmentComboBox = function() {
    ///<summary>
    ///Provides access to the client object of the "Vertical" combo box in the Html Editor's Row/Column/Cell Properties dialog's Alignment group.
    ///</summary>
    ///<returns type = "ASPxClientComboBox">
    ///A ASPxClientComboBox object.
    ///</returns>
};
ASPxClientHtmlEditorTableColumnPropertiesDialog.prototype.GetBackgroundColorColorEdit = function() {
    ///<summary>
    ///Provides access to the client object of the "Background color" color editor in the Html Editor's Table dialogs.
    ///</summary>
    ///<returns type = "ASPxClientColorEdit">
    ///A ASPxClientColorEdit object.
    ///</returns>
};
ASPxClientHtmlEditorTableColumnPropertiesDialog.prototype.GetFormLayout = function() {
    ///<summary>
    ///Provides access to the client ASPxFormLayout object that arranges all editors in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientFormLayout">
    ///A ASPxClientFormLayout object.
    ///</returns>
};
ASPxClientHtmlEditorTableColumnPropertiesDialog.prototype.GetOkButton = function() {
    ///<summary>
    ///Provides access to the client object of the "OK" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorTableColumnPropertiesDialog.prototype.GetCancelButton = function() {
    ///<summary>
    ///Provides access to the client object of the "Cancel" button in the Html Editor's dialogs.
    ///</summary>
    ///<returns type = "ASPxClientButton">
    ///A ASPxClientButton object.
    ///</returns>
};
ASPxClientHtmlEditorSelection.prototype.GetSelectedElement = function() {
    ///<summary>
    ///Returns a DOM element that relates to the current selection.
    ///</summary>
    ///<returns type = "Object">
    ///A DOM element representing the current selection.
    ///</returns>
};
ASPxClientHtmlEditorSelection.prototype.GetHtml = function() {
    ///<summary>
    ///Returns the HTML markup specifying the currently selected ASPxHtmlEditor content.
    ///</summary>
    ///<returns type = "String">
    ///A string value specifying the HTML markup.
    ///</returns>
};
ASPxClientHtmlEditorSelection.prototype.GetText = function() {
    ///<summary>
    ///Returns the text within the currently selected ASPxHtmlEditor content.
    ///</summary>
    ///<returns type = "String">
    ///A string value, that specifies the currently selected text.
    ///</returns>
};
ASPxClientHtmlEditorSelection.prototype.GetElements = function() {
    ///<summary>
    ///Returns an array of the currently selected elements.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array of objects that are currently selected.
    ///</returns>
};
ASPxClientHtmlEditorSelection.prototype.SetHtml = function(html, addToHistory) {
    ///<summary>
    ///Sets the new HTML markup in place of the currently selected within ASPxHtmlEditor content.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value specifying the new HTML markup.
    ///</param>
    ///<param name = "addToHistory" type = "Boolean">
    ///true to add this operation to the history; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.IsDeferUpdatesChecked = function() {
    ///<summary>
    ///Indicates whether the Defer Layout Update check box is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the check box is enabled; otherwise, false.
    ///</returns>
};
ASPxClientPivotGrid.prototype.IsPrefilterVisible = function() {
    ///<summary>
    ///Indicates whether the Filter Editor (Prefilter) is visible.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the Filter Editor (Prefilter) is visible; otherwise, false.
    ///</returns>
};
ASPxClientPivotGrid.prototype.ShowPrefilter = function() {
    ///<summary>
    ///Shows the Filter Editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.HidePrefilter = function() {
    ///<summary>
    ///Hides the Filter Editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.ClearPrefilter = function() {
    ///<summary>
    ///Clears the filter expression applied using the Prefilter (Filter Editor).
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.ChangePrefilterEnabled = function() {
    ///<summary>
    ///Enables or disables the current filter applied by the Filter Editor (Prefilter).
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.GetCustomizationFieldsVisibility = function() {
    ///<summary>
    ///Returns a value that specifies whether the customization form is visible.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the customization form is visible; otherwise, false.
    ///</returns>
};
ASPxClientPivotGrid.prototype.SetCustomizationFieldsVisibility = function(value) {
    ///<summary>
    ///Specifies the visibility of the customization form.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to display the customization form; false to hide the customization form.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.ChangeCustomizationFieldsVisibility = function() {
    ///<summary>
    ///Switches the customization form's visible state.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.PerformCallback = function(args) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientPivotGrid.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPivotGrid.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPivotGrid.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPivotGrid.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientPivotGrid.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPivotGrid.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.GetMainContainer = function() {
    ///<summary>
    ///Returns an HTML element that represents the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.GetPivotGrid = function() {
    ///<summary>
    ///Returns a client-side equivalent of the owner Pivot Grid Control.
    ///</summary>
    ///<returns type = "ASPxClientPivotGrid">
    ///An ASPxClientPivotGrid object that represents the client-side equivalent of the owner Pivot Grid Control.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.SetHeight = function(value) {
    ///<signature>
    ///<summary>
    ///Specifies the Customization Control's height.
    ///</summary>
    ///<param name = "value" type = "Int32">
    ///An integer value that specifies the Customization Control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientPivotCustomization.prototype.SetWidth = function(value) {
    ///<signature>
    ///<summary>
    ///Specifies the Customization Control's width.
    ///</summary>
    ///<param name = "value" type = "Int32">
    ///An integer value that specifies the Customization Control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientPivotCustomization.prototype.UpdateHeight = function() {
    ///<summary>
    ///Recalculates the Customization Control height.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.SetLayout = function(layout) {
    ///<summary>
    ///Specifies the Customization Control's layout.
    ///</summary>
    ///<param name = "layout" type = "String">
    ///A string that specifies the Customization Control's layout.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientPivotCustomization.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPivotCustomization.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotCustomization.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRichEdit.prototype.SetFullscreenMode = function(fullscreen) {
    ///<summary>
    ///Enables you to switch the full-screen mode of the Rich Text Editor.
    ///</summary>
    ///<param name = "fullscreen" type = "Boolean">
    ///true to activate full-screen mode; false to deactivate full-screen mode.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRichEdit.prototype.GetRibbon = function() {
    ///<summary>
    ///Provides access to an object implementing the RichEdit's ribbon UI.
    ///</summary>
    ///<returns type = "ASPxClientRibbon">
    ///An <see cref="ASPxClientRibbon" /> object that implements the RIchEdit's ribbon UI.
    ///</returns>
};
ASPxClientRichEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the RichEdit.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRichEdit.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientRichEdit.prototype.HasUnsavedChanges = function() {
    ///<summary>
    ///Indicates whether any unsaved changes are contained in the current document.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the document contains unsaved changes; otherwise, false.
    ///</returns>
};
ASPxClientRichEdit.prototype.ReconnectToExternalRibbon = function() {
    ///<summary>
    ///Reconnects the RichEdit to an external ribbon.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRichEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRichEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRichEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRichEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRichEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRichEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRichEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRichEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientRichEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRichEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRichEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRichEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
CommandWithSimpleStateBase.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
CommandWithBooleanStateBase.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
RichEditSelection.prototype.getIntervalMaxPosition = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "Int32">
    ///
    ///</returns>
};
RichEditSelection.prototype.goToNextLine = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the next line.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the next line and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToLineEnd = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the end of the line in which the cursor is located.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the end of the line in which the cursor is located and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToLineStart = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the start of the line in which the cursor is located.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the start of the line in which the cursor is located and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToPreviousLine = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the previous line.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the previous line and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToNextCharacter = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the next character.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the next character and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToPreviousCharacter = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the previous character.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the previous character and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.selectLine = function() {
    ///<signature>
    ///<summary>
    ///Selects the line in which the cursor is located.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the line in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToNextPage = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the beginning of the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the beginning of the next page and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToPreviousPage = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the beginning of the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the beginning of the previous page and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToDocumentStart = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the start of the document.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the start of the document and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToDocumentEnd = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the end of the document.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the end of the document and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToNextWord = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the next word.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the next word and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToPrevWord = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the previous word.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the previous word and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToParagraphStart = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the start of the paragraph in which the cursor is located.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the start of the paragraph in which the cursor is located and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToParagraphEnd = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the end of the paragraph in which the cursor is located.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the end of the paragraph in which the cursor is located and allows you to extend the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.selectParagraph = function() {
    ///<summary>
    ///Selects the paragraph in which the cursor is located.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
RichEditSelection.prototype.goToStartNextPageCommand = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the next page break mark.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the next page break mark and extends the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.goToStartPrevPageCommand = function() {
    ///<signature>
    ///<summary>
    ///Moves the cursor to the previous page break mark.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the cursor to the previous page break mark and extends the selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.selectTableCell = function() {
    ///<signature>
    ///<summary>
    ///Selects the table cell in which the cursor is located.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the table cell in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.selectTableRow = function() {
    ///<signature>
    ///<summary>
    ///Selects the table row in which the cursor is located.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the table row in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.selectTable = function() {
    ///<signature>
    ///<summary>
    ///Selects the entire table in which the cursor is located.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the entire table in which the cursor is located and allows you to extend the entire selection with the currently existing selection.
    ///</summary>
    ///<param name = "extendSelection" type = "Boolean">
    ///true to extend the selection; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
RichEditSelection.prototype.selectAll = function() {
    ///<summary>
    ///Selects the editor's entire content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
RichEditSelection.prototype.setMainSubDocumentAsActive = function() {
    ///<summary>
    ///Makes the main sub-document active and moves the cursor to its beginning.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
RichEditSelection.prototype.setFooterSubDocumentAsActiveByPageIndex = function(pageIndex) {
    ///<summary>
    ///Creates a footer sub-document (if it was not created before) and sets the footer as the active sub-document. Moves the cursor to the footer's start position.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value specifying the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
RichEditSelection.prototype.setHeaderSubDocumentAsActiveByPageIndex = function(pageIndex) {
    ///<summary>
    ///Creates a header sub-document (if it was not created before) and sets the header as the active sub-document. Moves the cursor to the header's start position.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value specifying the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
RichEditUnitConverter.prototype.pixelsToTwips = function(value) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "value" type = "Single">
    ///
    ///</param>
    ///<returns type = "Int32">
    ///
    ///</returns>
};
RichEditUnitConverter.prototype.inchesToTwips = function(value) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "value" type = "Single">
    ///
    ///</param>
    ///<returns type = "Int32">
    ///
    ///</returns>
};
RichEditUnitConverter.prototype.pointsToTwips = function(value) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "value" type = "Single">
    ///
    ///</param>
    ///<returns type = "Int32">
    ///
    ///</returns>
};
RichEditUnitConverter.prototype.centimetersToTwips = function(value) {
    ///<summary>
    ///Converts a value on centimeters to twips.
    ///</summary>
    ///<param name = "value" type = "Single">
    ///
    ///</param>
    ///<returns type = "Int32">
    ///
    ///</returns>
};
RichEditUnitConverter.prototype.twipsToCentimeters = function(value) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "value" type = "Single">
    ///
    ///</param>
    ///<returns type = "Single">
    ///
    ///</returns>
};
RichEditUnitConverter.prototype.pixelsToCentimeters = function(value) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "value" type = "Single">
    ///
    ///</param>
    ///<returns type = "Single">
    ///
    ///</returns>
};
RichEditUnitConverter.prototype.twipsToInches = function(value) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "value" type = "Single">
    ///
    ///</param>
    ///<returns type = "Single">
    ///
    ///</returns>
};
RichEditUnitConverter.prototype.pixelsToInches = function(value) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "value" type = "Single">
    ///
    ///</param>
    ///<returns type = "Single">
    ///
    ///</returns>
};
RichEditUnitConverter.prototype.pixelsToPoints = function(value) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "value" type = "Single">
    ///
    ///</param>
    ///<returns type = "Single">
    ///
    ///</returns>
};
RichEditUnitConverter.prototype.twipsToPoints = function(value) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "value" type = "Int32">
    ///
    ///</param>
    ///<returns type = "Single">
    ///
    ///</returns>
};
OpenInsertBookmarkDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenInsertBookmarkDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenInsertBookmarkDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertBookmarkCommand.prototype.execute = function(name, start, length) {
    ///<summary>
    ///Executes the InsertBookmarkCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying name of creating bookmark.
    ///</param>
    ///<param name = "start" type = "Int32">
    ///An integer value specifying the start position of bookmark's range.
    ///</param>
    ///<param name = "length" type = "Int32">
    ///An integer value specifying the length of bookmark's range.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertBookmarkCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
DeleteBookmarkCommand.prototype.execute = function(name) {
    ///<summary>
    ///Executes the DeleteBookmarkCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying name of the deleted bookmark.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DeleteBookmarkCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
GoToBookmarkCommand.prototype.execute = function(name) {
    ///<summary>
    ///Executes the GoToBookmarkCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "name" type = "String">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
GoToBookmarkCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
PasteCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the PasteCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
PasteCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
CopyCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the CopyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
CopyCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
CutCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the CutCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
CutCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
CreateFieldCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the CreateFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
CreateFieldCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
UpdateFieldCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the UpdateFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
UpdateFieldCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ShowFieldCodesCommand.prototype.execute = function(showFieldCodes) {
    ///<signature>
    ///<summary>
    ///Executes the ShowFieldCodesCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "showFieldCodes" type = "Boolean">
    ///true to display field codes, false to hide field codes.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ShowFieldCodesCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ShowFieldCodesCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ShowAllFieldCodesCommand.prototype.execute = function(showFieldCodes) {
    ///<signature>
    ///<summary>
    ///Executes the ShowAllFieldCodesCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "showFieldCodes" type = "Boolean">
    ///true to display field codes, false to hide field codes.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ShowAllFieldCodesCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ShowAllFieldCodesCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
UpdateAllFieldsCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the UpdateAllFieldsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
UpdateAllFieldsCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
CreateDateFieldCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the CreateDateFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
CreateDateFieldCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
CreateTimeFieldCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the CreateTimeFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
CreateTimeFieldCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
CreatePageFieldCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the CreatePageFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
CreatePageFieldCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
GoToDataRecordCommand.prototype.execute = function(activeRecordIndex) {
    ///<summary>
    ///Executes the GoToDataRecordCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "activeRecordIndex" type = "Int32">
    ///An integer value specifying index of the next data record.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
GoToDataRecordCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
GoToFirstDataRecordCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the GoToFirstDataRecordCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
GoToFirstDataRecordCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
GoToPreviousDataRecordCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the GoToPreviousDataRecordCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
GoToPreviousDataRecordCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
GoToNextDataRecordCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the GoToNextDataRecordCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
GoToNextDataRecordCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
GoToLastDataRecordCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the GoToLastDataRecordCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
GoToLastDataRecordCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ShowMergedDataCommand.prototype.execute = function() {
    ///<signature>
    ///<summary>
    ///Executes the ShowMergedDataCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ShowMergedDataCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "showMergedData" type = "Boolean">
    ///true to display merged data, false to hide merged data.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ShowMergedDataCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
MergeFieldDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the MergeFieldDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
MergeFieldDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
CreateMergeFieldCommand.prototype.execute = function(fieldName) {
    ///<summary>
    ///Executes the CreateMergeFieldCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "fieldName" type = "String">
    ///A string value specifying the name of the merge field.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
CreateMergeFieldCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
MailMergeDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the MailMergeDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
MailMergeDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
MailMergeAndDownloadCommand.prototype.execute = function(fileExtension) {
    ///<signature>
    ///<summary>
    ///Executes the MailMergeAndDownloadCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "fileExtension" type = "String">
    ///A string value specifying the file extension of the resulting document.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///
    ///</summary>
    ///<param name = "documentFormat" type = "DocumentFormat">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the MailMergeAndDownloadCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "fileExtension" type = "String">
    ///A string value specifying the file extension of the resulting document.
    ///</param>
    ///<param name = "settings" type = "MailMergeSettings">
    ///A MailMergeSettings object containing settings to set up mail merge operations.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///
    ///</summary>
    ///<param name = "documentFormat" type = "DocumentFormat">
    ///
    ///</param>
    ///<param name = "settings" type = "MailMergeSettings">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
    ///</signature>
};
MailMergeAndDownloadCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;MailMergeSettings&gt;" /> object representing the command state.
    ///</returns>
};
MailMergeAndSaveAsCommand.prototype.execute = function(filePath) {
    ///<signature>
    ///<summary>
    ///Executes the MailMergeAndSaveAsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "filePath" type = "String">
    ///A string value specifying path to the saving file on the server.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///
    ///</summary>
    ///<param name = "fileInfo" type = "RichEditFileInfo">
    ///
    ///</param>
    ///<param name = "settings" type = "MailMergeSettings">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
    ///</signature>
};
MailMergeAndSaveAsCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;MailMergeSettings&gt;" /> object representing the command state.
    ///</returns>
};
CreatePageCountFieldCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the CreatePageCountFieldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
CreatePageCountFieldCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
FileNewCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the FileNewCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
FileNewCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
FileOpenCommand.prototype.execute = function(path) {
    ///<summary>
    ///Executes the FileOpenCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "path" type = "String">
    ///A string value specifying path to the opening file.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
FileOpenCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
FileOpenDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the FileOpenDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
FileOpenDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
FileSaveCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the FileSaveCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
FileSaveCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
FileSaveAsCommand.prototype.execute = function(path) {
    ///<signature>
    ///<summary>
    ///Executes the FileSaveAsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "path" type = "String">
    ///A string value specifying path to the saving file.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///
    ///</summary>
    ///<param name = "fileInfo" type = "RichEditFileInfo">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
    ///</signature>
};
FileSaveAsCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
FileDownloadCommand.prototype.execute = function(fileExtension) {
    ///<signature>
    ///<summary>
    ///Executes the FileDownloadCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "fileExtension" type = "String">
    ///A string value specifying the extension of the downloading file.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///
    ///</summary>
    ///<param name = "documentFormat" type = "DocumentFormat">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
    ///</signature>
};
FileDownloadCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
FileSaveAsDialogCommand.prototype.execute = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
FileSaveAsDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
FilePrintCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the FilePrintCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
FilePrintCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
OpenFindPanelCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenFindPanelCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenFindPanelCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
OpenFindAndReplaceDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenFindAndReplaceDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenFindAndReplaceDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
FindAllCommand.prototype.execute = function(text, matchCase, highlightResults) {
    ///<signature>
    ///<summary>
    ///Executes the FindAllCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying finding text.
    ///</param>
    ///<param name = "matchCase" type = "Boolean">
    ///true, to perform a case-sensitive search; otherwise, false.
    ///</param>
    ///<param name = "highlightResults" type = "Boolean">
    ///true, to highlight result of search; otherwise, false.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the FindAllCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying text to find.
    ///</param>
    ///<param name = "matchCase" type = "Boolean">
    ///true, to perform a case-sensitive search; otherwise, false.
    ///</param>
    ///<param name = "highlightResults" type = "Boolean">
    ///true, to highlight result of search; otherwise, false.
    ///</param>
    ///<param name = "results" elementType = "Interval" type = "Array">
    ///An array of Interval objects containing the results of search.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
FindAllCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
HideFindResultsCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the HideFindResultsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
HideFindResultsCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ReplaceAllCommand.prototype.execute = function(text, replaceText, matchCase) {
    ///<summary>
    ///Executes the ReplaceAllCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying text to replace.
    ///</param>
    ///<param name = "replaceText" type = "String">
    ///A string value specifying replacing text.
    ///</param>
    ///<param name = "matchCase" type = "Boolean">
    ///true, to perform a case-sensitive search; otherwise, false.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ReplaceAllCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ReplaceNextCommand.prototype.execute = function(text, replaceText, matchCase) {
    ///<summary>
    ///Executes the ReplaceNextCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying text to replace.
    ///</param>
    ///<param name = "replaceText" type = "String">
    ///A string value specifying replacing text.
    ///</param>
    ///<param name = "matchCase" type = "Boolean">
    ///true, to perform a case-sensitive search; otherwise, false.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ReplaceNextCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
OpenLayoutOptionsDialogCommand.prototype.execute = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
OpenLayoutOptionsDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertFloatingTextBoxCommand.prototype.execute = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
InsertFloatingTextBoxCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangeFloatingObjectLockAnchorCommand.prototype.execute = function(lockAnchor) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "lockAnchor" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeFloatingObjectLockAnchorCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
ChangeFloatingObjectAlignmentPositionCommand.prototype.execute = function(settings) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "settings" type = "FloatingObjectAlignmentPositionSettings">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeFloatingObjectAlignmentPositionCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
ChangeFloatingObjectAbsolutePositionCommand.prototype.execute = function(settings) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "settings" type = "FloatingObjectAbsolutePositionSettings">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeFloatingObjectAbsolutePositionCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
ChangeFloatingObjectRelativePositionCommand.prototype.execute = function(settings) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "settings" type = "FloatingObjectRelativePositionSettings">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeFloatingObjectRelativePositionCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
ChangeFloatingObjectTextWrappingCommand.prototype.execute = function(settings) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "settings" type = "FloatingObjectTextWrappingSettings">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeFloatingObjectTextWrappingCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
ChangeFloatingObjectAbsoluteSizeCommand.prototype.execute = function(settings) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "settings" type = "FloatingObjectAbsoluteSizeSettings">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeFloatingObjectAbsoluteSizeCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
ChangeTextBoxRelativeSizeCommand.prototype.execute = function(settings) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "settings" type = "TextBoxRelativeSizeSettings">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeTextBoxRelativeSizeCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
ChangeFloatingObjectRotationCommand.prototype.execute = function(rotation) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "rotation" type = "Int32">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeFloatingObjectRotationCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
ChangeFloatingObjectLockAspectRatioCommand.prototype.execute = function(rotation) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "rotation" type = "Int32">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeFloatingObjectLockAspectRatioCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
ChangeFloatingObjectFillColorCommand.prototype.execute = function(color) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "color" type = "String">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeFloatingObjectFillColorCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
ChangeFloatingObjectOutlineColorCommand.prototype.execute = function(color) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "color" type = "String">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeFloatingObjectOutlineColorCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
ChangeFloatingObjectOutlineWidthCommand.prototype.execute = function(width) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeFloatingObjectOutlineWidthCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
ChangeTextBoxContentMarginsCommand.prototype.execute = function(settings) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "settings" type = "Margins">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeTextBoxContentMarginsCommand.prototype.getState = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "CommandState">
    ///
    ///</returns>
};
UndoCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the UndoCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
UndoCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
RedoCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the RedoCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
RedoCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
OpenInsertHyperlinkDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenInsertHyperlinkDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenInsertHyperlinkDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertHyperlinkCommand.prototype.execute = function(settings) {
    ///<summary>
    ///Executes the InsertHyperlinkCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "settings" type = "HyperlinkSettings">
    ///A HyperLinkSettings object specifying hyperlink settings.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertHyperlinkCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;HyperlinkSettings&gt;" /> object representing the command state.
    ///</returns>
};
DeleteHyperlinkCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the DeleteHyperlinkCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DeleteHyperlinkCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
DeleteHyperlinksCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the DeleteHyperlinksCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DeleteHyperlinksCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
OpenHyperlinkCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenHyperlinkCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenHyperlinkCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertPageBreakCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertPageBreakCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertPageBreakCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertColumnBreakCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertColumnBreakCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertColumnBreakCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertSectionBreakNextPageCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertSectionBreakNextPageCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertSectionBreakNextPageCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertSectionBreakEvenPageCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertSectionBreakEvenPageCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertSectionBreakEvenPageCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertSectionBreakOddPageCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertSectionBreakOddPageCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertSectionBreakOddPageCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertLineBreakCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertLineBreakCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertLineBreakCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ToggleBulletedListCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleBulletedListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleBulletedListCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleNumberingListCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleNumberingListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleNumberingListCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleMultilevelListCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleMultilevelListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleMultilevelListCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
OpenNumberingListDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenNumberingListDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenNumberingListDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
OpenCustomNumberingListDialogCommand.prototype.execute = function(abstractNumberingListIndex) {
    ///<summary>
    ///Executes the OpenCustomNumberingListDialogCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "abstractNumberingListIndex" type = "Int32">
    ///An integer value specifying index of abstract numbering list.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenCustomNumberingListDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangeCustomNumberingListCommand.prototype.execute = function(abstractNumberingListIndex, listLevelSettings) {
    ///<summary>
    ///Executes the ChangeCustomNumberingListCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "abstractNumberingListIndex" type = "Int32">
    ///An integer value specifying the numbering list index.
    ///</param>
    ///<param name = "listLevelSettings" elementType = "ListLevelSettings" type = "Array">
    ///An array of ListLevelSettings objects defining settings for list levels.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeCustomNumberingListCommand.prototype.getState = function(abstractNumberingListIndex) {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<param name = "abstractNumberingListIndex" type = "Int32">
    ///An integer value specifying the index of the abstract numbering list item whose state to return.
    ///</param>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;ListLevelSettings[]&gt;" /> object representing the command state.
    ///</returns>
};
RestartNumberingListCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the RestartNumberingListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
RestartNumberingListCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
IncrementNumberingIndentCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the IncrementNumberingIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
IncrementNumberingIndentCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
DecrementNumberingIndentCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the DecrementNumberingIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DecrementNumberingIndentCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ContinueNumberingListCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ContinueNumberingListCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ContinueNumberingListCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertNumerationCommand.prototype.execute = function(abstractNumberingListIndex) {
    ///<signature>
    ///<summary>
    ///Executes the InsertNumerationCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "abstractNumberingListIndex" type = "Int32">
    ///An integer value specifying index of abstract numbering list.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the InsertNumerationCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "numberingListIndex" type = "Int32">
    ///An integer value specifying index of numbering list.
    ///</param>
    ///<param name = "isAbstractNumberingList" type = "Boolean">
    ///true, to insert an abstract numbering list; otherwise, false.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
InsertNumerationCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
RemoveNumerationCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the RemoveNumerationCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
RemoveNumerationCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
OpenInsertPictureDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenInsertPictureDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenInsertPictureDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertPictureCommand.prototype.execute = function(imageUrl) {
    ///<summary>
    ///Executes the InsertPictureCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying picture's Url.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertPictureCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
OpenInsertSymbolDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenInsertSymbolDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenInsertSymbolDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertSymbolCommand.prototype.execute = function(symbol, fontName) {
    ///<summary>
    ///Executes the InsertSymbolCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "symbol" type = "String">
    ///A string value specifying symbols to insert.
    ///</param>
    ///<param name = "fontName" type = "String">
    ///A string value specifying font of symbols to insert.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertSymbolCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertParagraphCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertParagraphCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertTextCommand.prototype.execute = function(text) {
    ///<summary>
    ///Executes the InsertTextCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying text to insert.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertTextCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
DeleteCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the DeleteCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DeleteCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
RemovePrevWordCommand.prototype.execute = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
RemovePrevWordCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
RemoveNextWordCommand.prototype.execute = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
RemoveNextWordCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
BackspaceCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the BackspaceCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
BackspaceCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangePictureScaleCommand.prototype.execute = function(scale) {
    ///<signature>
    ///<summary>
    ///Executes the ChangePictureScaleCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "scale" type = "Scale">
    ///A Scale object specifying scaling of the picture.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ChangePictureScaleCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An interger number specifying width of the picture
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An interger number specifying height of the picture
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ChangePictureScaleCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Scale&gt;" /> object representing the command state.
    ///</returns>
};
MoveContentCommand.prototype.execute = function(position) {
    ///<summary>
    ///Executes the MoveContentCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying position to insert selected text.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
MoveContentCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
CopyContentCommand.prototype.execute = function(position) {
    ///<summary>
    ///Executes the CopyContentCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer number value specifying position for pasting selected text.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
CopyContentCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertTabCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertTabCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertTabCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangePageMarginsCommand.prototype.execute = function(left, top, right, bottom) {
    ///<signature>
    ///<summary>
    ///Executes the ChangePageMarginsCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "left" type = "Int32">
    ///An integer number specifying left margin of the page.
    ///</param>
    ///<param name = "top" type = "Int32">
    ///An integer number specifying top margin of the page.
    ///</param>
    ///<param name = "right" type = "Int32">
    ///An integer number specifying right margin of the page.
    ///</param>
    ///<param name = "bottom" type = "Int32">
    ///An integer number specifying bottom margin of the page.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ChangePageMarginsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "margins" type = "Margins">
    ///A Margins object specifying page margin settings.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ChangePageMarginsCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Margins&gt;" /> object representing the command state.
    ///</returns>
};
OpenPageMarginsDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenPageMarginsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenPageMarginsDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangePageOrientationCommand.prototype.execute = function(isPortrait) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "isPortrait" type = "Orientation">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangePageOrientationCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Orientation&gt;" /> object representing the command state.
    ///</returns>
};
OpenPagePaperSizeDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenPagePaperSizeDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenPagePaperSizeDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
SetPageSizeDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the SetPageSizeDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
SetPageSizeDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangePageSizeCommand.prototype.execute = function(width, height) {
    ///<signature>
    ///<summary>
    ///Executes the ChangePageSizeCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer number specifying width of the page.
    ///</param>
    ///<param name = "height" type = "Int32">
    ///An integer number specifying height of the page.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ChangePageSizeCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "size" type = "Size">
    ///A Size object specifying the page size settings.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ChangePageSizeCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Size&gt;" /> object representing the command state.
    ///</returns>
};
ChangeSectionEqualColumnCountCommand.prototype.execute = function(columnCount) {
    ///<summary>
    ///Executes the ChangeSectionEqualColumnCountCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "columnCount" type = "Int32">
    ///An interger number specifying the number of section columns having the same width.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeSectionEqualColumnCountCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Int32&gt;" /> object representing the command state.
    ///</returns>
};
OpenSectionColumnsDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenSectionColumnsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenSectionColumnsDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangeSectionColumnsCommand.prototype.execute = function(columns) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "columns" elementType = "SectionColumn" type = "Array">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ChangeSectionColumnsCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;SectionColumn[]&gt;" /> object representing the command state.
    ///</returns>
};
ChangePageColorCommand.prototype.execute = function(color) {
    ///<summary>
    ///Executes the ChangePageColorCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "color" type = "String">
    ///A string specifying background color of the page. May be specified as color name or hex color value.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangePageColorCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;String&gt;" /> object representing the command state.
    ///</returns>
};
InsertHeaderCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertHeaderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertHeaderCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertFooterCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertFooterCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
LinkHeaderFooterToPreviousCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the LinkHeaderFooterToPreviousCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
LinkHeaderFooterToPreviousCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
GoToFooterCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the GoToFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
GoToFooterCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
GoToHeaderCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the GoToHeaderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
GoToHeaderCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
GoToNextHeaderFooterCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the GoToNextHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
GoToNextHeaderFooterCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
GoToPreviousHeaderFooterCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the GoToPreviousHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
GoToPreviousHeaderFooterCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
SetDifferentFirstPageHeaderFooterCommand.prototype.execute = function() {
    ///<signature>
    ///<summary>
    ///Executes the SetDifferentFirstPageHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the SetDifferentFirstPageHeaderFooterCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "differentFirstPage" type = "Boolean">
    ///true to apply different text for first page's header and footer, false to remove difference.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
SetDifferentFirstPageHeaderFooterCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
SetDifferentOddAndEvenPagesHeaderFooterCommand.prototype.execute = function() {
    ///<signature>
    ///<summary>
    ///Executes the SetDifferentOddAndEvenPagesHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the SetDifferentOddAndEvenPagesHeaderFooterCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "differentOddAndEvenPages" type = "Boolean">
    ///true to apply different text for odd and even pages' header and footer, false to remove difference.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
SetDifferentOddAndEvenPagesHeaderFooterCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
CloseHeaderFooterCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the CloseHeaderFooterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
CloseHeaderFooterCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
IncreaseIndentCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the IncreaseIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
IncreaseIndentCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
DecreaseIndentCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the DecreaseIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DecreaseIndentCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ShowHiddenSymbolsCommand.prototype.execute = function() {
    ///<signature>
    ///<summary>
    ///Executes the ShowHiddenSymbolsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ShowHiddenSymbolsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "show" type = "Boolean">
    ///true to display hidden symbols; otherwise, false.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ShowHiddenSymbolsCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleParagraphAlignmentLeftCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleParagraphAlignmentLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleParagraphAlignmentLeftCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleParagraphAlignmentCenterCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleParagraphAlignmentCenterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleParagraphAlignmentCenterCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleParagraphAlignmentRightCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleParagraphAlignmentRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleParagraphAlignmentRightCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleParagraphAlignmentJustifyCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleParagraphAlignmentJustifyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleParagraphAlignmentJustifyCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
SetSingleParagraphSpacingCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the SetSingleParagraphSpacingCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
SetSingleParagraphSpacingCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
SetSesquialteralParagraphSpacingCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the SetSesquialteralParagraphSpacingCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
SetSesquialteralParagraphSpacingCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
SetDoubleParagraphSpacingCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the SetDoubleParagraphSpacingCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
SetDoubleParagraphSpacingCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
AddSpacingBeforeParagraphCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the AddSpacingBeforeParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
AddSpacingBeforeParagraphCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
AddSpacingAfterParagraphCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the AddSpacingAfterParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
AddSpacingAfterParagraphCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
RemoveSpacingBeforeParagraphCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the RemoveSpacingBeforeParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
RemoveSpacingBeforeParagraphCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
RemoveSpacingAfterParagraphCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the RemoveSpacingAfterParagraphCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
RemoveSpacingAfterParagraphCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangeParagraphBackColorCommand.prototype.execute = function(color) {
    ///<summary>
    ///Executes the ChangeParagraphBackColorCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "color" type = "String">
    ///A string specifying highlighting color of the paragraphs in a selected range. May be specified as color name or hex color value.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeParagraphBackColorCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;String&gt;" /> object representing the command state.
    ///</returns>
};
OpenParagraphFormattingDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenParagraphFormattingDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenParagraphFormattingDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangeParagraphFormattingCommand.prototype.execute = function(settings) {
    ///<summary>
    ///Executes the ChangeParagraphFormattingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "settings" type = "ParagraphFormattingSettings">
    ///A ParagraphFormattingSettings object specifying paragraph formatting settings.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeParagraphFormattingCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;ParagraphFormattingSettings&gt;" /> object representing the command state.
    ///</returns>
};
IncrementParagraphLeftIndentCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the IncrementParagraphLeftIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
IncrementParagraphLeftIndentCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
DecrementParagraphLeftIndentCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the DecrementParagraphLeftIndentCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DecrementParagraphLeftIndentCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
OpenTabsDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenTabsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenTabsDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangeTabsCommand.prototype.execute = function(settings) {
    ///<summary>
    ///Executes the ChangeTabsCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "settings" type = "TabsSettings">
    ///A TabsSettings object maintaining the information about tab stops.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeTabsCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;TabsSettings&gt;" /> object representing the command state.
    ///</returns>
};
AssignShortcutCommand.prototype.execute = function(keyCode, callback) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "keyCode" type = "Int32">
    ///
    ///</param>
    ///<param name = "callback" type = "Action">
    ///
    ///</param>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
AssignShortcutCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
OpenSpellingDialogCommand.prototype.execute = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
OpenSpellingDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
OpenInsertTableDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenInsertTableDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenInsertTableDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertTableCommand.prototype.execute = function(columnCount, rowCount) {
    ///<summary>
    ///Executes the InsertTableCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "columnCount" type = "Int32">
    ///An integer value specifying number of columns in a generated table.
    ///</param>
    ///<param name = "rowCount" type = "Int32">
    ///An integer value specifying number of rows in a generated table.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertTableCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
OpenTableFormattingDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenTableFormattingDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenTableFormattingDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangeTableFormattingCommand.prototype.execute = function(settings) {
    ///<summary>
    ///Executes the ChangeTableFormattingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "settings" type = "TableFormattingSettings">
    ///A TableFormattingSettings object containing the settings to format a table.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeTableFormattingCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;TableFormattingSettings&gt;" /> object representing the command state.
    ///</returns>
};
ChangeTableRowPreferredHeightCommand.prototype.execute = function(preferredHeight) {
    ///<summary>
    ///Executes the ChangeTableRowPreferredHeightCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "preferredHeight" type = "TableHeightUnit">
    ///A TableHeightUnit object specifying preferred height of the selected table rows.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeTableRowPreferredHeightCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;TableHeightUnit&gt;" /> object representing the command state.
    ///</returns>
};
ChangeTableCellPreferredWidthCommand.prototype.execute = function(preferredWidth) {
    ///<summary>
    ///Executes the ChangeTableCellPreferredWidthCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "preferredWidth" type = "TableWidthUnit">
    ///A TableWidthUnit object specifying preferred width of the selected table rows.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeTableCellPreferredWidthCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;TableWidthUnit&gt;" /> object representing the command state.
    ///</returns>
};
ChangeTableColumnPreferredWidthCommand.prototype.execute = function(preferredWidth) {
    ///<summary>
    ///Executes the ChangeTableColumnPreferredWidthCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "preferredWidth" type = "TableWidthUnit">
    ///A TableWidthUnit object specifying preferred width of the selected table columns.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeTableColumnPreferredWidthCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;TableWidthUnit&gt;" /> object representing the command state.
    ///</returns>
};
ChangeTableCellFormattingCommand.prototype.execute = function(settings) {
    ///<summary>
    ///Executes the ChangeTableCellFormattingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "settings" type = "TableCellFormattingSettings">
    ///A TableFormattingSettings object specifying cell formatting of the selected table elements.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeTableCellFormattingCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;TableCellFormattingSettings&gt;" /> object representing the command state.
    ///</returns>
};
InsertTableColumnToTheLeftCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertTableColumnToTheLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertTableColumnToTheLeftCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertTableColumnToTheRightCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertTableColumnToTheRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertTableColumnToTheRightCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertTableRowBelowCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertTableRowBelowCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertTableRowBelowCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertTableRowAboveCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertTableRowAboveCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertTableRowAboveCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
DeleteTableRowsCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the DeleteTableRowsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DeleteTableRowsCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
DeleteTableColumnsCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the DeleteTableColumnsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DeleteTableColumnsCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertTableCellWithShiftToTheLeftCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertTableCellWithShiftToTheLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertTableCellWithShiftToTheLeftCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
DeleteTableCellsWithShiftHorizontallyCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the DeleteTableCellsWithShiftHorizontallyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DeleteTableCellsWithShiftHorizontallyCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
DeleteTableCellsWithShiftVerticallyCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the DeleteTableCellsWithShiftVerticallyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DeleteTableCellsWithShiftVerticallyCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
DeleteTableCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the DeleteTableCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DeleteTableCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertTableCellsDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertTableCellsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertTableCellsDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
DeleteTableCellsDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the DeleteTableCellsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DeleteTableCellsDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
MergeTableCellsCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the MergeTableCellsCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
MergeTableCellsCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
SplitTableCellsDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the SplitTableCellsDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
SplitTableCellsDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
SplitTableCellsCommand.prototype.execute = function(rowCount, columnCount, mergeBeforeSplit) {
    ///<summary>
    ///Executes the SplitTableCellsCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "rowCount" type = "Int32">
    ///An integer value specifying number of rows in the splitted table cells.
    ///</param>
    ///<param name = "columnCount" type = "Int32">
    ///An integer value specifying number of columns in the splitted table cells.
    ///</param>
    ///<param name = "mergeBeforeSplit" type = "Boolean">
    ///true to merge the selected cells before splitting; otherwise, false.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
SplitTableCellsCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
InsertTableCellsWithShiftToTheVerticallyCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the InsertTableCellsWithShiftToTheVerticallyCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
InsertTableCellsWithShiftToTheVerticallyCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
OpenTableBordersAndShadingDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenTableBordersAndShadingDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenTableBordersAndShadingDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangeTableBordersAndShadingCommand.prototype.execute = function(settings, applyToWholeTable) {
    ///<summary>
    ///Executes the ChangeTableBordersAndShadingCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "settings" type = "TableBordersSettings">
    ///A TableBorderSettings object with settings specifying table borders.
    ///</param>
    ///<param name = "applyToWholeTable" type = "Boolean">
    ///true to apply the border settings to the whole table, false to apply the border settings to the selected cells.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeTableBordersAndShadingCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;TableBordersSettings&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellAlignTopLeftCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellAlignTopLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellAlignTopLeftCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellAlignTopCenterCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellAlignTopCenterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellAlignTopCenterCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellAlignTopRightCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellAlignTopRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellAlignTopRightCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellAlignMiddleLeftCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellAlignMiddleLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellAlignMiddleLeftCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellAlignMiddleCenterCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellAlignMiddleCenterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellAlignMiddleCenterCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellAlignMiddleRightCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellAlignMiddleRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellAlignMiddleRightCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellAlignBottomLeftCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellAlignBottomLeftCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellAlignBottomLeftCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellAlignBottomCenterCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellAlignBottomCenterCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellAlignBottomCenterCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellAlignBottomRightCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellAlignBottomRightCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellAlignBottomRightCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ChangeTableStyleCommand.prototype.execute = function(style) {
    ///<signature>
    ///<summary>
    ///Executes the ChangeTableStyleCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "style" type = "TableStyle">
    ///A TableStyle object specifying the style applying to the table.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ChangeTableStyleCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "styleName" type = "String">
    ///A string specifying the name of style applying to the table.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ChangeTableStyleCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;TableStyle&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellTopBorderCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellTopBorderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellTopBorderCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellRightBorderCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellRightBorderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellRightBorderCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellBottomBorderCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellBottomBorderCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellBottomBorderCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellLeftBorderCommand.prototype.execute = function() {
    ///<summary>
    ///
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ToggleTableCellLeftBorderCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
RemoveTableCellBordersCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the RemoveTableCellBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
RemoveTableCellBordersCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ToggleTableCellAllBordersCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellAllBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellAllBordersCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellInsideBordersCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellInsideBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellInsideBordersCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellInsideHorizontalBordersCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellInsideHorizontalBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellInsideHorizontalBordersCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellInsideVerticalBordersCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellInsideVerticalBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellInsideVerticalBordersCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ToggleTableCellOutsideBordersCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTableCellOutsideBordersCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTableCellOutsideBordersCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ChangeTableLookCommand.prototype.execute = function(settings) {
    ///<summary>
    ///Executes the ChangeTableLookCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "settings" type = "TableLookSettings">
    ///A TableLookSettings object containing the settings that modify the table appearance.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeTableLookCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;TableLookSettings&gt;" /> object representing the command state.
    ///</returns>
};
ChangeTableBorderRepositoryItemCommand.prototype.execute = function(settings) {
    ///<summary>
    ///Executes the ChangeTableBorderRepositoryItemCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "settings" type = "TableBorderSettings">
    ///A TableBorderSettings object specifying the repository item's table border style.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeTableBorderRepositoryItemCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;TableBorderSettings&gt;" /> object representing the command state.
    ///</returns>
};
ChangeTableCellShadingCommand.prototype.execute = function(color) {
    ///<summary>
    ///Executes the ChangeTableCellShadingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "color" type = "String">
    ///A string specifying color of the selected cells' shading. May be specified as color name or hex color value.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeTableCellShadingCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;String&gt;" /> object representing the command state.
    ///</returns>
};
ShowTableGridLinesCommand.prototype.execute = function() {
    ///<signature>
    ///<summary>
    ///Executes the ShowTableGridLinesCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ShowTableGridLinesCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "showTableGridLines" type = "Boolean">
    ///true to display grid lines of the table, false to hide grid lines of the table.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ShowTableGridLinesCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ChangeFontNameCommand.prototype.execute = function(fontName) {
    ///<summary>
    ///Executes the ChangeFontNameCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "fontName" type = "String">
    ///A string specifying font name.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeFontNameCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;String&gt;" /> object representing the command state.
    ///</returns>
};
ChangeFontSizeCommand.prototype.execute = function(fontSize) {
    ///<summary>
    ///Executes the ChangeFontSizeCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "fontSize" type = "Int32">
    ///An integer number specifying font size.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeFontSizeCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Int32&gt;" /> object representing the command state.
    ///</returns>
};
IncreaseFontSizeCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the IncreaseFontSizeCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
IncreaseFontSizeCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
DecreaseFontSizeCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the DecreaseFontSizeCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
DecreaseFontSizeCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
MakeTextUpperCaseCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the MakeTextUpperCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
MakeTextUpperCaseCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
MakeTextLowerCaseCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the MakeTextLowerCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
MakeTextLowerCaseCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
CapitalizeEachWordTextCaseCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the CapitalizeEachWordTextCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
CapitalizeEachWordTextCaseCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ToggleTextCaseCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ToggleTextCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ToggleTextCaseCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangeFontBoldCommand.prototype.execute = function() {
    ///<signature>
    ///<summary>
    ///Executes the ChangeFontBoldCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ChangeFontBoldCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "fontBold" type = "Boolean">
    ///true to apply bold formatting to the text, false to remove bold formatting.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ChangeFontBoldCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ChangeFontItalicCommand.prototype.execute = function() {
    ///<signature>
    ///<summary>
    ///Executes the ChangeFontItalicCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ChangeFontItalicCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "fontItalic" type = "Boolean">
    ///true to apply italic formatting to the text, false to remove italic formatting.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ChangeFontItalicCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ChangeFontUnderlineCommand.prototype.execute = function() {
    ///<signature>
    ///<summary>
    ///Executes the ChangeFontUnderlineCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ChangeFontUnderlineCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "fontUnderline" type = "Boolean">
    ///true to apply underline formatting to the text, false to remove underline formatting.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ChangeFontUnderlineCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ChangeFontStrikeoutCommand.prototype.execute = function() {
    ///<signature>
    ///<summary>
    ///Executes the ChangeFontStrikeoutCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ChangeFontStrikeoutCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "fontStrikeout" type = "Boolean">
    ///true to apply strikeout formatting to the text, false to remove strikeout formatting.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ChangeFontStrikeoutCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ChangeFontSuperscriptCommand.prototype.execute = function() {
    ///<signature>
    ///<summary>
    ///Executes the ChangeFontSuperscriptCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ChangeFontSuperscriptCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "fontSuperscript" type = "Boolean">
    ///true to apply superscript formatting to the text, false to remove superscript formatting.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ChangeFontSuperscriptCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ChangeFontSubscriptCommand.prototype.execute = function() {
    ///<signature>
    ///<summary>
    ///Executes the ChangeFontSubscriptCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ChangeFontSubscriptCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "fontSubscript" type = "Boolean">
    ///true to apply subscript formatting to the text, false to remove subscript formatting.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ChangeFontSubscriptCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ChangeFontForeColorCommand.prototype.execute = function(color) {
    ///<summary>
    ///Executes the ChangeFontForeColorCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "color" type = "String">
    ///A string specifying font color. May be specified as color name or hex color value.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeFontForeColorCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;String&gt;" /> object representing the command state.
    ///</returns>
};
ChangeFontBackColorCommand.prototype.execute = function(color) {
    ///<summary>
    ///Executes the ChangeFontBackColorCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "color" type = "String">
    ///A string specifying highlighting color. May be specified as color name or hex color value.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeFontBackColorCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;String&gt;" /> object representing the command state.
    ///</returns>
};
ClearFormattingCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the ClearFormattingCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ClearFormattingCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangeStyleCommand.prototype.execute = function(style) {
    ///<signature>
    ///<summary>
    ///Executes the ChangeStyleCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "style" type = "StyleBase">
    ///A StyleBase object specifying the selected range's style.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ChangeStyleCommand command by applying the specified settings.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "styleName" type = "String">
    ///A string specifying the name of applying style.
    ///</param>
    ///<param name = "isParagraphStyle" type = "Boolean">
    ///true to apply style to paragraph, false to apply style to character.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ChangeStyleCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;StyleBase&gt;" /> object representing the command state.
    ///</returns>
};
OpenFontFormattingDialogCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the OpenFontFormattingDialogCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
OpenFontFormattingDialogCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
MakeTextSentenceCaseCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the MakeTextSentenceCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
MakeTextSentenceCaseCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
SwitchTextCaseCommand.prototype.execute = function() {
    ///<summary>
    ///Executes the SwitchTextCaseCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
SwitchTextCaseCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "SimpleCommandState">
    ///A <see cref="SimpleCommandState" /> object representing the command state.
    ///</returns>
};
ChangeFontFormattingCommand.prototype.execute = function(settings) {
    ///<summary>
    ///Executes the ChangeFontFormattingCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "settings" type = "FontFormattingSettings">
    ///A  FontFormattingSettings object specifying font formatting settings.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
};
ChangeFontFormattingCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;FontFormattingSettings&gt;" /> object representing the command state.
    ///</returns>
};
ShowHorizontalRulerCommand.prototype.execute = function() {
    ///<signature>
    ///<summary>
    ///Executes the ShowHorizontalRulerCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the ShowHorizontalRulerCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "show" type = "Boolean">
    ///true to display the horizontal ruler, false to hide the horizontal ruler.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
ShowHorizontalRulerCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
SetFullscreenCommand.prototype.execute = function() {
    ///<signature>
    ///<summary>
    ///Executes the SetFullscreenCommand command by imitating the corresponding end-user action made in the RichEdit's UI.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Executes the SetFullscreenCommand command by applying the specified setting.  May result in taking no action if the command's state does not allow command execution. Use the object's getState method to check the command state.
    ///</summary>
    ///<param name = "fullscreen" type = "Boolean">
    ///true to apply fullscreen mode, false to remove fullscreen mode.
    ///</param>
    ///<returns type = "Boolean">
    ///A <see cref="Boolean" /> value identifying whether method execution was successful or failed.
    ///</returns>
    ///</signature>
};
SetFullscreenCommand.prototype.getState = function() {
    ///<summary>
    ///Gets information about the command state.
    ///</summary>
    ///<returns type = "CommandState">
    ///A <see cref="CommandState&lt;Boolean&gt;" /> object representing the command state.
    ///</returns>
};
ASPxClientAppointment.prototype.AddResource = function(resourceId) {
    ///<summary>
    ///Adds a resource to the collection of resources associated with the client appointment.
    ///</summary>
    ///<param name = "resourceId" type = "Object">
    ///An object, representing the resource id.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetResource = function(index) {
    ///<summary>
    ///Gets the resource associated with the client-side appointment by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer, representing an index of a resource in a resource collection associated with the current appointment.
    ///</param>
    ///<returns type = "Object">
    ///An identifier of the specified resource (Id)
    ///</returns>
};
ASPxClientAppointment.prototype.SetStart = function(start) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the Start appointment property.
    ///</summary>
    ///<param name = "start" type = "DateTime">
    ///A JavaScript Date object representing the appointment start.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetStart = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the Start appointment property.
    ///</summary>
    ///<returns type = "DateTime">
    ///A JavaScript Date object representing the appointment start.
    ///</returns>
};
ASPxClientAppointment.prototype.SetEnd = function(end) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the End appointment property.
    ///</summary>
    ///<param name = "end" type = "DateTime">
    ///A JavaScript Date object representing the end of the appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetEnd = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the End appointment property.
    ///</summary>
    ///<returns type = "DateTime">
    ///A JavaScript Date object representing the end of the appointment.
    ///</returns>
};
ASPxClientAppointment.prototype.SetDuration = function(duration) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the Duration appointment property.
    ///</summary>
    ///<param name = "duration" type = "TimeSpan">
    ///A TimeSpan object representing the appointment duration.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetDuration = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the Duration appointment property.
    ///</summary>
    ///<returns type = "Int32">
    ///The number of ticks in a time interval that is the appointment duration.
    ///</returns>
};
ASPxClientAppointment.prototype.SetId = function(id) {
    ///<summary>
    ///Sets the ID of the client appointment.
    ///</summary>
    ///<param name = "id" type = "Object">
    ///An object representing the appointment identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetId = function() {
    ///<summary>
    ///Gets the ID of the client appointment.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the appointment identifier.
    ///</returns>
};
ASPxClientAppointment.prototype.SetAppointmentType = function(type) {
    ///<summary>
    ///Specifies the type of the current client appointment.
    ///</summary>
    ///<param name = "type" type = "ASPxAppointmentType">
    ///An ASPxAppointmentType enumeration value indicating the appointment type.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetAppointmentType = function() {
    ///<summary>
    ///Gets the type of the client appointment.
    ///</summary>
    ///<returns type = "ASPxAppointmentType">
    ///An ASPxAppointmentType enumeration value indicating the appointment type.
    ///</returns>
};
ASPxClientAppointment.prototype.SetStatusId = function(statusId) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the StatusId appointment property.
    ///</summary>
    ///<param name = "statusId" type = "Int32">
    ///An integer representing the index in the AppointmentStatusCollection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetStatusId = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the StatusId appointment property.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer representing the index in the AppointmentStatusCollection.
    ///</returns>
};
ASPxClientAppointment.prototype.SetLabelId = function(statusId) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the LabelId appointment property.
    ///</summary>
    ///<param name = "statusId" type = "Int32">
    ///An integer representing the index of the label in the Labels label collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetLabelId = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the LabelId appointment property.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer representing the index of label in the Labels label collection.
    ///</returns>
};
ASPxClientAppointment.prototype.SetSubject = function(subject) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the Subject appointment property.
    ///</summary>
    ///<param name = "subject" type = "String">
    ///A string containing the appointment subject.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetSubject = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the Subject appointment property.
    ///</summary>
    ///<returns type = "String">
    ///A string containing the appointment subject.
    ///</returns>
};
ASPxClientAppointment.prototype.SetDescription = function(description) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the Description appointment property.
    ///</summary>
    ///<param name = "description" type = "String">
    ///A string representing the appointment description.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetDescription = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the Description appointment property.
    ///</summary>
    ///<returns type = "String">
    ///A string representing the appointment description.
    ///</returns>
};
ASPxClientAppointment.prototype.SetLocation = function(location) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the Location appointment property.
    ///</summary>
    ///<param name = "location" type = "String">
    ///A string representing the appointment location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetLocation = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the Location appointment property.
    ///</summary>
    ///<returns type = "String">
    ///A string representing the appointment location.
    ///</returns>
};
ASPxClientAppointment.prototype.SetAllDay = function(allDay) {
    ///<summary>
    ///Specifies the property value of the client appointment corresponding to the AllDay appointment property.
    ///</summary>
    ///<param name = "allDay" type = "Boolean">
    ///true to indicate the all-day appointment; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetAllDay = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the AllDay appointment property.
    ///</summary>
    ///<returns type = "Boolean">
    ///true to indicate the all-day appointment; otherwise, false.
    ///</returns>
};
ASPxClientAppointment.prototype.GetRecurrencePattern = function() {
    ///<summary>
    ///Gets the appointment that is the RecurrencePattern for the current appointment.
    ///</summary>
    ///<returns type = "ASPxClientAppointment">
    ///An ASPxClientAppointment instance representing the pattern for the chain of occurrences, to which the current client appointment belongs.
    ///</returns>
};
ASPxClientAppointment.prototype.SetRecurrenceInfo = function(recurrenceInfo) {
    ///<summary>
    ///Sets the property value of the client appointment, corresponding to the RecurrenceInfo appointment property.
    ///</summary>
    ///<param name = "recurrenceInfo" type = "ASPxClientRecurrenceInfo">
    ///An ASPxClientRecurrenceInfo object representing the recurrence information.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointment.prototype.GetRecurrenceInfo = function() {
    ///<summary>
    ///Gets the property value of the client appointment corresponding to the RecurrenceInfo appointment property.
    ///</summary>
    ///<returns type = "ASPxClientRecurrenceInfo">
    ///An ASPxClientRecurrenceInfo object representing the recurrence information.
    ///</returns>
};
ASPxClientPoint.prototype.GetX = function() {
    ///<summary>
    ///Gets the point's X-coordinate.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the point's X coordinate.
    ///</returns>
};
ASPxClientPoint.prototype.GetY = function() {
    ///<summary>
    ///Gets the point's Y-coordinate.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the point's Y coordinate.
    ///</returns>
};
ASPxClientRect.prototype.GetLeft = function() {
    ///<summary>
    ///Gets the X-coordinate of the rectangle's left edge.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer specifying the X-coordinate of the rectangle's left edge.
    ///</returns>
};
ASPxClientRect.prototype.GetRight = function() {
    ///<summary>
    ///Gets the X-coordinate of the rectangle's right edge.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer specifying the X-coordinate of the rectangle's right edge.
    ///</returns>
};
ASPxClientRect.prototype.GetTop = function() {
    ///<summary>
    ///Gets the Y-coordinate of the rectangle's top edge.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer specifying the Y-coordinate of the rectangle's top edge.
    ///</returns>
};
ASPxClientRect.prototype.GetBottom = function() {
    ///<summary>
    ///Gets the Y-coordinate of the rectangle's bottom edge.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer specifying the Y-coordinate of the rectangle's bottom edge.
    ///</returns>
};
ASPxClientRect.prototype.GetWidth = function() {
    ///<summary>
    ///Gets the rectangle's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer specifying the rectangle's width.
    ///</returns>
};
ASPxClientRect.prototype.GetHeight = function() {
    ///<summary>
    ///Gets the rectangle's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer specifying the rectangle's height.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetStart = function(start) {
    ///<summary>
    ///Sets the recurrence start date.
    ///</summary>
    ///<param name = "start" type = "DateTime">
    ///A JavaScript date object value that specifies the start date for the recurrence.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetStart = function() {
    ///<summary>
    ///Gets the recurrence start date.
    ///</summary>
    ///<returns type = "DateTime">
    ///A JavaScript Date object that specifies the start date for the recurrence.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetEnd = function(end) {
    ///<summary>
    ///Sets the recurrence end date.
    ///</summary>
    ///<param name = "end" type = "DateTime">
    ///A JavaScript Date object that specifies the end date for the recurrence.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetEnd = function() {
    ///<summary>
    ///Gets the recurrence end date.
    ///</summary>
    ///<returns type = "DateTime">
    ///A DateTime value that specifies the end date for the recurrence.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetDuration = function(duration) {
    ///<summary>
    ///Sets the duration of the recurrence.
    ///</summary>
    ///<param name = "duration" type = "TimeSpan">
    ///A TimeSpan object representing the duration.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetDuration = function() {
    ///<summary>
    ///Gets the duration of the recurrence.
    ///</summary>
    ///<returns type = "Int32">
    ///The number of ticks in a time interval that is the appointment duration.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetRecurrenceType = function(type) {
    ///<summary>
    ///Sets the time base for the frequency of the corresponding appointment occurrences.
    ///</summary>
    ///<param name = "type" type = "ASPxClientRecurrenceType">
    ///An ASPxClientRecurrenceType enumeration value that specifies the recurrence's frequency type.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetRecurrenceType = function() {
    ///<summary>
    ///Gets the time base for the frequency of the corresponding appointment reoccurrence.
    ///</summary>
    ///<returns type = "ASPxClientRecurrenceType">
    ///An ASPxClientRecurrenceType enumeration value that specifies the recurrence frequency type.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetWeekDays = function(weekDays) {
    ///<summary>
    ///Sets the day/days in a week that the corresponding appointment recurs on.
    ///</summary>
    ///<param name = "weekDays" type = "ASPxClientWeekDays">
    ///The ASPxClientWeekDays enumeration value specifying the day/days in a week.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetWeekDays = function() {
    ///<summary>
    ///Gets the day/days in a week on which the corresponding appointment occurs.
    ///</summary>
    ///<returns type = "ASPxClientWeekDays">
    ///The ASPxClientWeekDays enumeration value specifying the day/days in a week.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetOccurrenceCount = function(occurrenceCount) {
    ///<summary>
    ///Sets how many times the appointment occurs.
    ///</summary>
    ///<param name = "occurrenceCount" type = "Int32">
    ///An integer value that specifies how many times the appointment occurs.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetOccurrenceCount = function() {
    ///<summary>
    ///Gets how many times the appointment occurs.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies how many times the appointment occurs.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetPeriodicity = function(periodicity) {
    ///<summary>
    ///Sets the frequency with which the corresponding appointment occurs (dependent on the recurrence Type).
    ///</summary>
    ///<param name = "periodicity" type = "Int32">
    ///An integer value that specifies the frequency with which the corresponding appointment occurs.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetPeriodicity = function() {
    ///<summary>
    ///Gets the frequency with which the corresponding appointment reoccurs (dependent on the recurrence Type).
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the frequency with which the corresponding appointment reoccurs.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetDayNumber = function(dayNumber) {
    ///<summary>
    ///Sets the ordinal number of a day within a defined month.
    ///</summary>
    ///<param name = "dayNumber" type = "Int32">
    ///A positive integer value that specifies the day number within a month.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetDayNumber = function() {
    ///<summary>
    ///Gets the ordinal number of a day within a defined month.
    ///</summary>
    ///<returns type = "Int32">
    ///A positive integer value that specifies the day number within a month.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetWeekOfMonth = function(weekOfMonth) {
    ///<summary>
    ///Sets the occurrence number of the week in a month for the recurrence pattern.
    ///</summary>
    ///<param name = "weekOfMonth" type = "ASPxClientWeekOfMonth">
    ///A ASPxClientWeekOfMonth enumeration value that specifies a particular week in every month.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetWeekOfMonth = function() {
    ///<summary>
    ///Gets the occurrence number of the week in a month for the recurrence pattern.
    ///</summary>
    ///<returns type = "ASPxClientWeekOfMonth">
    ///A ASPxClientWeekOfMonth enumeration value that specifies a particular week in every month.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetMonth = function(month) {
    ///<summary>
    ///Sets the month (as a number) on which the corresponding appointment occurs.
    ///</summary>
    ///<param name = "month" type = "Int32">
    ///A positive integer value that specifies the month's number.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetMonth = function() {
    ///<summary>
    ///Gets the month (as a number) on which the corresponding appointment recurs.
    ///</summary>
    ///<returns type = "Int32">
    ///A positive integer value that specifies the month's number.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.GetRange = function() {
    ///<summary>
    ///Gets the type of the recurrence range.
    ///</summary>
    ///<returns type = "ASPxClientRecurrenceRange">
    ///An ASPxClientRecurrenceRange enumeration value that specifies the recurrence range type.
    ///</returns>
};
ASPxClientRecurrenceInfo.prototype.SetRange = function(range) {
    ///<summary>
    ///Sets the type of the recurrence range.
    ///</summary>
    ///<param name = "range" type = "ASPxClientRecurrenceRange">
    ///An ASPxClientRecurrenceRangeenumeration value that specifies the recurrence range type.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.GetValue = function() {
    ///<summary>
    ///Gets the selection state of the week day check boxes.
    ///</summary>
    ///<returns type = "ASPxClientWeekDays">
    ///An <see cref="ASPxClientWeekDays" /> object containing the selection state of the week day check boxes.
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Gets the selection state of the week day check boxes.
    ///</summary>
    ///<param name = "value" type = "ASPxClientWeekDays">
    ///An ASPxClientWeekDays object specifying the selection state of the week day check boxes.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeekDaysCheckEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetRange = function() {
    ///<summary>
    ///Gets the type of the recurrence range.
    ///</summary>
    ///<returns type = "ASPxClientRecurrenceRange">
    ///An ASPxClientRecurrenceRange enumeration value that specifies the recurrence range type.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetOccurrenceCount = function() {
    ///<summary>
    ///Gets how many times the appointment occurs.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies how many times the appointment occurs.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetEndDate = function() {
    ///<summary>
    ///Gets the recurrence end date.
    ///</summary>
    ///<returns type = "DateTime">
    ///A JavaScript Date object that specifies the end date for the recurrence.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetRange = function(range) {
    ///<summary>
    ///Sets the type of the recurrence range.
    ///</summary>
    ///<param name = "range" type = "ASPxClientRecurrenceRange">
    ///An ASPxClientRecurrenceRangeenumeration value that specifies the recurrence range type.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetOccurrenceCount = function(occurrenceCount) {
    ///<summary>
    ///Sets how many times the appointment occurs.
    ///</summary>
    ///<param name = "occurrenceCount" type = "Int32">
    ///An integer value that specifies how many times the appointment occurs.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetEndDate = function(date) {
    ///<summary>
    ///Sets the recurrence end date.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A JavaScript Date object that specifies the end date for the recurrence.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceRangeControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.CreateValueAccessor = function() {
    ///<summary>
    ///Returns an object providing access to the ASPxClientRecurrenceControlBase control's editor values.
    ///</summary>
    ///<returns type = "DefaultRecurrenceRuleValuesAccessor">
    ///A <see cref="DefaultRecurrenceRuleValuesAccessor" /> object providing access to editor values.
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.Update = function(recurrenceInfo) {
    ///<summary>
    ///Updates values of editors displayed by the ASPxClientRecurrenceControlBase control.
    ///</summary>
    ///<param name = "recurrenceInfo" type = "ASPxClientRecurrenceInfo">
    ///An ASPxClientRecurrenceInfo object containing new editor values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceControlBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.CreateValueAccessor = function() {
    ///<summary>
    ///Returns an object providing access to the ASPxClientDailyRecurrenceControl's editor values.
    ///</summary>
    ///<returns type = "DefaultRecurrenceRuleValuesAccessor">
    ///A <see cref="DefaultRecurrenceRuleValuesAccessor" /> object providing access to editor values.
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.Update = function(recurrenceInfo) {
    ///<summary>
    ///Updates values of editors displayed by the ASPxClientDailyRecurrenceControl.
    ///</summary>
    ///<param name = "recurrenceInfo" type = "ASPxClientRecurrenceInfo">
    ///An ASPxClientRecurrenceInfo object containing new editor values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDailyRecurrenceControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.CreateValueAccessor = function() {
    ///<summary>
    ///Returns an object providing access to the ASPxClientWeeklyRecurrenceControl's editor values.
    ///</summary>
    ///<returns type = "DefaultRecurrenceRuleValuesAccessor">
    ///A <see cref="DefaultRecurrenceRuleValuesAccessor" /> object providing access to editor values.
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.Update = function(recurrenceInfo) {
    ///<summary>
    ///Updates values of editors displayed by the ASPxClientWeeklyRecurrenceControl.
    ///</summary>
    ///<param name = "recurrenceInfo" type = "ASPxClientRecurrenceInfo">
    ///An ASPxClientRecurrenceInfo object containing new editor values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWeeklyRecurrenceControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.CreateValueAccessor = function() {
    ///<summary>
    ///Returns an object providing access to the ASPxClientMonthlyRecurrenceControl's editor values.
    ///</summary>
    ///<returns type = "DefaultRecurrenceRuleValuesAccessor">
    ///A <see cref="DefaultRecurrenceRuleValuesAccessor" /> object providing access to editor values.
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.Update = function(recurrenceInfo) {
    ///<summary>
    ///Updates values of editors displayed by the ASPxClientMonthlyRecurrenceControll.
    ///</summary>
    ///<param name = "recurrenceInfo" type = "ASPxClientRecurrenceInfo">
    ///An ASPxClientRecurrenceInfo object containing new editor values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMonthlyRecurrenceControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.CreateValueAccessor = function() {
    ///<summary>
    ///Returns an object providing access to the ASPxClientYearlyRecurrenceControl's editor values.
    ///</summary>
    ///<returns type = "DefaultRecurrenceRuleValuesAccessor">
    ///A <see cref="DefaultRecurrenceRuleValuesAccessor" /> object providing access to editor values.
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.Update = function(recurrenceInfo) {
    ///<summary>
    ///Updates values of editors displayed by the ASPxClientYearlyRecurrenceControl.
    ///</summary>
    ///<param name = "recurrenceInfo" type = "ASPxClientRecurrenceInfo">
    ///An ASPxClientRecurrenceInfo object containing new editor values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientYearlyRecurrenceControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
DefaultRecurrenceRuleValuesAccessor.prototype.GetPeriodicity = function() {
    ///<summary>
    ///Get the frequency with which the appointment occurs with respect to the appointment's recurrence type.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the frequency with which the appointment occurs.
    ///</returns>
};
DefaultRecurrenceRuleValuesAccessor.prototype.GetDayNumber = function() {
    ///<summary>
    ///Gets the number of the month's day in which the appointment is scheduled.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer, specifying the day of the month.
    ///</returns>
};
DefaultRecurrenceRuleValuesAccessor.prototype.GetMonth = function() {
    ///<summary>
    ///Gets or sets the month's number.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer, representing a month's number.
    ///</returns>
};
DefaultRecurrenceRuleValuesAccessor.prototype.GetWeekDays = function() {
    ///<summary>
    ///Gets the days of the week on which a weekly recurrent appointment is scheduled.
    ///</summary>
    ///<returns type = "ASPxClientWeekDays">
    ///An ASPxClientWeekDays enumeration value specifying days of the week.
    ///</returns>
};
DefaultRecurrenceRuleValuesAccessor.prototype.GetWeekOfMonth = function() {
    ///<summary>
    ///Gets the number of the week in a month when an appointment is scheduled.
    ///</summary>
    ///<returns type = "ASPxClientWeekOfMonth">
    ///A ASPxClientWeekOfMonth enumeration value, specifying the week in a month.
    ///</returns>
};
DailyRecurrenceValuesAccessor.prototype.GetPeriodicity = function() {
    ///<summary>
    ///Gets the number of days between appointment occurrences.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer specifying the number of days.
    ///</returns>
};
DailyRecurrenceValuesAccessor.prototype.GetWeekDays = function() {
    ///<summary>
    ///Gets the days of the week to which a daily recurrent appointment is scheduled.
    ///</summary>
    ///<returns type = "ASPxClientWeekDays">
    ///An ASPxClientWeekDays enumeration value specifying days of the week.
    ///</returns>
};
DailyRecurrenceValuesAccessor.prototype.GetDayNumber = function() {
    ///<summary>
    ///Gets the number of the month's day in which the appointment is scheduled.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer, specifying the day of the month.
    ///</returns>
};
DailyRecurrenceValuesAccessor.prototype.GetMonth = function() {
    ///<summary>
    ///Gets or sets the month's number.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer, representing a month's number.
    ///</returns>
};
DailyRecurrenceValuesAccessor.prototype.GetWeekOfMonth = function() {
    ///<summary>
    ///Gets the number of the week in a month when an appointment is scheduled.
    ///</summary>
    ///<returns type = "ASPxClientWeekOfMonth">
    ///A ASPxClientWeekOfMonth enumeration value, specifying the week in a month.
    ///</returns>
};
WeeklyRecurrenceValuesAccessor.prototype.GetPeriodicity = function() {
    ///<summary>
    ///Gets the number of weeks between appointment occurrences.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer specifying the number of weeks.
    ///</returns>
};
WeeklyRecurrenceValuesAccessor.prototype.GetWeekDays = function() {
    ///<summary>
    ///Gets the days of the week on which a weekly recurrent appointment is scheduled.
    ///</summary>
    ///<returns type = "ASPxClientWeekDays">
    ///An ASPxClientWeekDays enumeration value specifying days of the week.
    ///</returns>
};
WeeklyRecurrenceValuesAccessor.prototype.GetDayNumber = function() {
    ///<summary>
    ///Gets the number of the month's day in which the appointment is scheduled.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer, specifying the day of the month.
    ///</returns>
};
WeeklyRecurrenceValuesAccessor.prototype.GetMonth = function() {
    ///<summary>
    ///Gets or sets the month's number.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer, representing a month's number.
    ///</returns>
};
WeeklyRecurrenceValuesAccessor.prototype.GetWeekOfMonth = function() {
    ///<summary>
    ///Gets the number of the week in a month when an appointment is scheduled.
    ///</summary>
    ///<returns type = "ASPxClientWeekOfMonth">
    ///A ASPxClientWeekOfMonth enumeration value, specifying the week in a month.
    ///</returns>
};
MonthlyRecurrenceValuesAccessor.prototype.GetDayNumber = function() {
    ///<summary>
    ///Gets the day of the month on which the appointment is scheduled.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer, specifying the day of the month.
    ///</returns>
};
MonthlyRecurrenceValuesAccessor.prototype.GetPeriodicity = function() {
    ///<summary>
    ///Gets the number of months between appointment occurrences.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer specifying the number of months.
    ///</returns>
};
MonthlyRecurrenceValuesAccessor.prototype.GetWeekDays = function() {
    ///<summary>
    ///Gets the days of the week on which a monthly recurrent appointment is scheduled.
    ///</summary>
    ///<returns type = "ASPxClientWeekDays">
    ///An ASPxClientWeekDays enumeration value specifying days of the week.
    ///</returns>
};
MonthlyRecurrenceValuesAccessor.prototype.GetWeekOfMonth = function() {
    ///<summary>
    ///Gets the number of the week in a month when an appointment is scheduled.
    ///</summary>
    ///<returns type = "ASPxClientWeekOfMonth">
    ///A ASPxClientWeekOfMonth enumeration value, specifying the week in a month.
    ///</returns>
};
MonthlyRecurrenceValuesAccessor.prototype.GetMonth = function() {
    ///<summary>
    ///Gets or sets the month's number.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer, representing a month's number.
    ///</returns>
};
YearlyRecurrenceValuesAccessor.prototype.GetDayNumber = function() {
    ///<summary>
    ///Gets the day of the month on which the appointment is scheduled.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer, specifying the day of the month.
    ///</returns>
};
YearlyRecurrenceValuesAccessor.prototype.GetMonth = function() {
    ///<summary>
    ///Gets or sets the month's number.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer, representing a month's number.
    ///</returns>
};
YearlyRecurrenceValuesAccessor.prototype.GetWeekDays = function() {
    ///<summary>
    ///Gets the days of the week on which a yearly recurrent appointment is scheduled.
    ///</summary>
    ///<returns type = "ASPxClientWeekDays">
    ///An ASPxClientWeekDays enumeration value specifying days of the week.
    ///</returns>
};
YearlyRecurrenceValuesAccessor.prototype.GetWeekOfMonth = function() {
    ///<summary>
    ///Gets or sets the number of a week in a month when an appointment is scheduled.
    ///</summary>
    ///<returns type = "ASPxClientWeekOfMonth">
    ///An ASPxClientWeekOfMonth object containing the number of a week in a month.
    ///</returns>
};
YearlyRecurrenceValuesAccessor.prototype.GetPeriodicity = function() {
    ///<summary>
    ///Get the frequency with which the appointment occurs with respect to the appointment's recurrence type.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the frequency with which the appointment occurs.
    ///</returns>
};
ASPxClientFormBase.prototype.Close = function() {
    ///<summary>
    ///Closes the form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFormBase.prototype.SetVisibleCore = function(element, isVisible) {
    ///<summary>
    ///Sets the visibility state of the specified form element.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object specifying the element whose visibility state should be changed.
    ///</param>
    ///<param name = "isVisible" type = "Boolean">
    ///true to display the element; false to hide the element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetRecurrenceType = function() {
    ///<summary>
    ///Gets the selected recurrence type.
    ///</summary>
    ///<returns type = "ASPxClientRecurrenceType">
    ///An <see cref="ASPxClientRecurrenceType" /> enumeration value.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetRecurrenceType = function(recurrenceType) {
    ///<summary>
    ///Sets the selected recurrence type.
    ///</summary>
    ///<param name = "recurrenceType" type = "ASPxClientRecurrenceType">
    ///An ASPxClientRecurrenceType enumeration value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value specifying the total number of items in the editor's item collection.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An <see cref="ASPxClientListEditItem" /> object that is the item located at the specified index.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRecurrenceTypeEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTimeInterval.prototype.GetAllDay = function() {
    ///<summary>
    ///Gets a value indicating if the time interval is All-Day.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if this is an all-day time interval; otherwise, false.
    ///</returns>
};
ASPxClientTimeInterval.prototype.SetAllDay = function(allDayValue) {
    ///<summary>
    ///Sets a value specifying if the time interval is All-Day.
    ///</summary>
    ///<param name = "allDayValue" type = "Boolean">
    ///true, if this is an all-day time interval; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeInterval.prototype.GetStart = function() {
    ///<summary>
    ///Client-side function that returns the start time of the interval.
    ///</summary>
    ///<returns type = "DateTime">
    ///A JavaScript Date object, representing the beginning of the interval.
    ///</returns>
};
ASPxClientTimeInterval.prototype.GetDuration = function() {
    ///<summary>
    ///Client-side function that returns the duration of the specified time interval.
    ///</summary>
    ///<returns type = "Int32">
    ///The number of ticks in a time interval that is the appointment duration.
    ///</returns>
};
ASPxClientTimeInterval.prototype.GetEnd = function() {
    ///<summary>
    ///Client-side function that returns the end time of the interval.
    ///</summary>
    ///<returns type = "DateTime">
    ///A JavaScript Date object representing the end of the interval.
    ///</returns>
};
ASPxClientTimeInterval.prototype.SetStart = function(value) {
    ///<summary>
    ///Client-side function that sets the start time of the interval.
    ///</summary>
    ///<param name = "value" type = "DateTime">
    ///A DateTime value, representing the beginning of the interval.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeInterval.prototype.SetDuration = function(value) {
    ///<summary>
    ///Client-side function that returns the duration of the specified time interval.
    ///</summary>
    ///<param name = "value" type = "TimeSpan">
    ///A TimeSpan  object, representing the duration of the time period.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeInterval.prototype.SetEnd = function(value) {
    ///<summary>
    ///Client-side function that sets the end time of the interval.
    ///</summary>
    ///<param name = "value" type = "DateTime">
    ///A DateTime value, representing the end of the interval.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimeInterval.prototype.Equals = function(interval) {
    ///<signature>
    ///<summary>
    ///Determines whether the specified object is equal to the current ASPxClientTimeInterval instance.
    ///</summary>
    ///<param name = "interval" type = "ASPxClientTimeInterval">
    ///The object to compare with the current object.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified object is equal to the current ASPxClientTimeInterval instance; otherwise false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<returns type = "Boolean">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<returns type = "Boolean">
    ///</returns>
    ///</signature>
};
ASPxClientTimeInterval.prototype.IntersectsWith = function(interval) {
    ///<summary>
    ///Checks if the current time interval intersects with the specified time interval.
    ///</summary>
    ///<param name = "interval" type = "ASPxClientTimeInterval">
    ///A ASPxClientTimeInterval object which represents the time interval to be checked.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the two time intervals intersect; otherwise, false.
    ///</returns>
};
ASPxClientTimeInterval.prototype.IntersectsWithExcludingBounds = function(interval) {
    ///<summary>
    ///Checks if the current time interval intersects with the specified time interval. The boundaries of the time intervals are excluded from the check.
    ///</summary>
    ///<param name = "interval" type = "ASPxClientTimeInterval">
    ///A ASPxClientTimeInterval object which represents the time interval to be checked.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the two time intervals intersect; otherwise, false.
    ///</returns>
};
ASPxClientTimeInterval.prototype.Contains = function(interval) {
    ///<summary>
    ///Client-side function that determines whether the specified interval is contained within the current one.
    ///</summary>
    ///<param name = "interval" type = "ASPxClientTimeInterval">
    ///An ASPxClientTimeInterval object, representing the time interval to check.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified interval is located within the current one; otherwise, false.
    ///</returns>
};
ASPxClientAppointmentOperation.prototype.Apply = function() {
    ///<summary>
    ///Passes parameters to the corresponding callback function to accomplish the operation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientAppointmentOperation.prototype.Cancel = function() {
    ///<summary>
    ///Cancels the operation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetActiveViewType = function() {
    ///<summary>
    ///Client-side scripting  method that gets the active View.
    ///</summary>
    ///<returns type = "ASPxSchedulerViewType">
    ///A SchedulerViewType enumeration value, representing  ASPxScheduler's view.
    ///</returns>
};
ASPxClientScheduler.prototype.SetActiveViewType = function(value) {
    ///<summary>
    ///Client-side scripting  method to change the ASPxScheduler's active View.
    ///</summary>
    ///<param name = "value" type = "ASPxSchedulerViewType">
    ///A ASPxSchedulerViewType enumeration value, representing a view type to set.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.Refresh = function() {
    ///<signature>
    ///<summary>
    ///Client-side scripting method which initiates a round trip to the server so that the current page will be reloaded.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Client-side scripting method which initiates a round trip to the server, so that the control will be reloaded using the specified refresh action.
    ///</summary>
    ///<param name = "refreshAction" type = "ASPxClientSchedulerRefreshAction">
    ///An ASPxClientSchedulerRefreshAction enumeration value, specifying the refresh action.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientScheduler.prototype.GetGroupType = function() {
    ///<summary>
    ///Client-side function that returns the type of grouping applied to the appointments displayed in the scheduler.
    ///</summary>
    ///<returns type = "ASPxSchedulerGroupType">
    ///A ASPxSchedulerGroupType enumeration value, specifying the grouping type.
    ///</returns>
};
ASPxClientScheduler.prototype.SetGroupType = function(value) {
    ///<summary>
    ///Client-side scripting method which raises the callback command to set the GroupType.
    ///</summary>
    ///<param name = "value" type = "ASPxSchedulerGroupType">
    ///An ASPxSchedulerGroupType enumeration value, which specifies how appointments are grouped.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GotoToday = function() {
    ///<summary>
    ///Client-side method that navigates the scheduler to the current system date.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GotoDate = function(date) {
    ///<summary>
    ///Client-side scripting method which raises the GotoDate callback command.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime value specifying the destination time.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.NavigateBackward = function() {
    ///<summary>
    ///Client-side function which slides the visible interval one time span back.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.NavigateForward = function() {
    ///<summary>
    ///Client-side function which slides the visible interval one time span forward.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ChangeTimeZoneId = function(timeZoneId) {
    ///<summary>
    ///Client-side method which raises the callback command to change the ClientTimeZoneId of the scheduler.
    ///</summary>
    ///<param name = "timeZoneId" type = "String">
    ///A string, a time zone identifier which is valid for the System.TimeZoneInfo.Id property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ShowSelectionToolTip = function(x, y) {
    ///<summary>
    ///Displays a Selection ToolTip on a position given by the specified coordinates.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer representing the X-coordinate.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer representing the Y-coordinate.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetSelectedInterval = function() {
    ///<summary>
    ///Client-side function that returns the time interval, selected in the scheduler.
    ///</summary>
    ///<returns type = "ASPxClientTimeInterval">
    ///An ASPxClientTimeInterval object, representing the time interval.
    ///</returns>
};
ASPxClientScheduler.prototype.GetSelectedResource = function() {
    ///<summary>
    ///Client-side function that returns the ResourceId of selected time cell's resource.
    ///</summary>
    ///<returns type = "String">
    ///A string, representing the ID of the resource.
    ///</returns>
};
ASPxClientScheduler.prototype.GetVisibleAppointments = function() {
    ///<summary>
    ///Gets a collection of visible appointments.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientAppointment">
    ///A collection of ASPxClientAppointment objects.
    ///</returns>
};
ASPxClientScheduler.prototype.GetAppointmentById = function(id) {
    ///<summary>
    ///Client-side function that returns an appointment with the specified ID.
    ///</summary>
    ///<param name = "id" type = "Object">
    ///An appointment's identifier.
    ///</param>
    ///<returns type = "ASPxClientAppointment">
    ///An ASPxClientAppointment object, representing an appointment on the client.
    ///</returns>
};
ASPxClientScheduler.prototype.GetSelectedAppointmentIds = function() {
    ///<summary>
    ///Client-side function that returns the id's of selected appointments.
    ///</summary>
    ///<returns elementType = "String" type = "Array">
    ///A string array which holds the appointment identifiers.
    ///</returns>
};
ASPxClientScheduler.prototype.DeselectAppointmentById = function(aptId) {
    ///<summary>
    ///Client-side function that removes the appointment specified by its client ID from a collection of selected appointments.
    ///</summary>
    ///<param name = "aptId" type = "Object">
    ///An appointment's identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.SelectAppointmentById = function(aptId) {
    ///<summary>
    ///Client-side function that selects an appointment with the specified ID.
    ///</summary>
    ///<param name = "aptId" type = "Object">
    ///An appointment's identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetAppointmentProperties = function(aptId, propertyNames, onCallBack) {
    ///<summary>
    ///Enables obtaining appointment property values in a client-side script. Executes the callback command with the AppointmentData identifier.
    ///</summary>
    ///<param name = "aptId" type = "Int32">
    ///An integer, representing the appointment ID.
    ///</param>
    ///<param name = "propertyNames" elementType = "String" type = "Array">
    ///An array of strings, representing the appointment properties to query.
    ///</param>
    ///<param name = "onCallBack" type = "Object">
    ///A handler of a function which will receive and process the properties' values.
    ///</param>
    ///<returns elementType = "String" type = "Array">
    ///An array of strings containing string representations of appointment properties.
    ///</returns>
};
ASPxClientScheduler.prototype.RefreshClientAppointmentProperties = function(clientAppointment, propertyNames, onCallBack) {
    ///<summary>
    ///Initiates a callback to retrieve and apply the values for the specified list of properties to the specified appointment, and transfer control to the specified function.
    ///</summary>
    ///<param name = "clientAppointment" type = "ASPxClientAppointment">
    ///An ASPxClientAppointment object that is the client appointment for which the data is retrieved.
    ///</param>
    ///<param name = "propertyNames" elementType = "String" type = "Array">
    ///An array of strings, that are the names of appointment properties to query.
    ///</param>
    ///<param name = "onCallBack" type = "Object">
    ///A handler of a function executed after a callback.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ShowAppointmentFormByClientId = function(aptClientId) {
    ///<summary>
    ///Client-side function that invokes the editing form for the appointment specified by its client ID.
    ///</summary>
    ///<param name = "aptClientId" type = "String">
    ///A string, representing the appointment client identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ShowAppointmentFormByServerId = function(aptServerId) {
    ///<summary>
    ///Client-side function that invokes the editing form for the appointment specified by its storage identifier.
    ///</summary>
    ///<param name = "aptServerId" type = "String">
    ///A string, representing the appointment identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.SetTopRowTime = function(duration, viewType) {
    ///<signature>
    ///<summary>
    ///Sets the time of the day corresponding to the start of the topmost displayed time cell row.
    ///</summary>
    ///<param name = "duration" type = "Int32">
    ///An integer, representing the number of milliseconds passed since the start of the day.
    ///</param>
    ///<param name = "viewType" type = "ASPxSchedulerViewType">
    ///An ASPxSchedulerViewType enumeration member, representing the scheduler's View. It can be either 'Day' or 'WorkWeek'.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the time of the day corresponding to the start of the topmost displayed time cell row.
    ///</summary>
    ///<param name = "duration" type = "Int32">
    ///An integer, representing the number of milliseconds passed since the start of the day.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientScheduler.prototype.GetTopRowTime = function(viewType) {
    ///<signature>
    ///<summary>
    ///Gets the time of the day corresponding to the start of the topmost displayed time cell row.
    ///</summary>
    ///<param name = "viewType" type = "ASPxSchedulerViewType">
    ///An ASPxSchedulerViewType enumeration member, representing the scheduler's View. It can be either "Day" or  "WorkWeek", otherwise the result is undefined.
    ///</param>
    ///<returns type = "Int32">
    ///An integer, representing the number of milliseconds passed since the start of the day.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the time of day corresponding to the start of the topmost displayed time cell row.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer, representing the number of milliseconds passed since the start of the day.
    ///</returns>
    ///</signature>
};
ASPxClientScheduler.prototype.ShowLoadingPanel = function() {
    ///<summary>
    ///Client-side scripting method which displays the Loading Panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.HideLoadingPanel = function() {
    ///<summary>
    ///Client-side scripting method which hides the Loading Panel from view.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ShowInplaceEditor = function(start, end) {
    ///<signature>
    ///<summary>
    ///Client-side method that invokes the inplace editor form to create a new appointment.
    ///</summary>
    ///<param name = "start" type = "DateTime">
    ///A date object, representing the start of the new appointment.
    ///</param>
    ///<param name = "end" type = "DateTime">
    ///A date object, representing the end of the new appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Client-side method that invokes the inplace editor form to create a new appointment.
    ///</summary>
    ///<param name = "start" type = "DateTime">
    ///A date object, representing the start of the new appointment.
    ///</param>
    ///<param name = "end" type = "DateTime">
    ///A date object, representing the end of the new appointment.
    ///</param>
    ///<param name = "resourceId" type = "String">
    ///An object representing the identifier of a resource associated with the new appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientScheduler.prototype.InsertAppointment = function(apt) {
    ///<summary>
    ///Client-side scripting  method to insert the specified appointment.
    ///</summary>
    ///<param name = "apt" type = "ASPxClientAppointment">
    ///An ASPxClientAppointment object representing the client-side appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.UpdateAppointment = function(apt) {
    ///<summary>
    ///Client-side scripting  method to update the specified appointment.
    ///</summary>
    ///<param name = "apt" type = "ASPxClientAppointment">
    ///An ASPxClientAppointment object representing the client-side appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.DeleteAppointment = function(apt) {
    ///<summary>
    ///Client-side scripting  method to delete the specified appointment.
    ///</summary>
    ///<param name = "apt" type = "ASPxClientAppointment">
    ///An ASPxClientAppointment object representing the client-side appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetVisibleIntervals = function() {
    ///<summary>
    ///Client-side method that allows retrieving a collection of time intervals displayed by the ASPxScheduler.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientTimeInterval">
    ///An array of ASPxClientTimeInterval objects, representing visible intervals.
    ///</returns>
};
ASPxClientScheduler.prototype.ChangeToolTipContainer = function(container) {
    ///<summary>
    ///Changes the container that the ASPxScheduler tooltip belongs to.
    ///</summary>
    ///<param name = "container" type = "Object">
    ///An object that serves as the new container for the pop-up menu.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ChangePopupMenuContainer = function(container) {
    ///<summary>
    ///Changes the container that the ASPxScheduler pop-up menu belongs to.
    ///</summary>
    ///<param name = "container" type = "Object">
    ///An object that serves as the new container for the pop-up menu.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ChangeFormContainer = function(container) {
    ///<summary>
    ///Returns focus to the form if the ASPxScheduler control is not visible when the reminder fires.
    ///</summary>
    ///<param name = "container" type = "Object">
    ///A DIV object that is located in such a way that it is visible on the page in situations when the ASPxScheduler control is hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.AppointmentFormSave = function() {
    ///<summary>
    ///Client-side scripting method that saves appointment modifications and closes the form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.AppointmentFormDelete = function() {
    ///<summary>
    ///Client-side scripting method that deletes the appointment being edited.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.AppointmentFormCancel = function() {
    ///<summary>
    ///Client-side scripting method that cancels changes and closes the appointment editing form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GoToDateFormApply = function() {
    ///<summary>
    ///Client-side scripting method that navigates the scheduler to the date selected in the GotoDate form and closes the form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GoToDateFormCancel = function() {
    ///<summary>
    ///Client-side scripting method that cancels changes and closes the GotoDate form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.InplaceEditFormSave = function() {
    ///<summary>
    ///Client-side scripting method that cancels changes and closes the form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.InplaceEditFormCancel = function() {
    ///<summary>
    ///Client-side scripting method that cancels changes and closes the form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.InplaceEditFormShowMore = function() {
    ///<summary>
    ///Client-side scripting method that invokes the appointment editing form for the appointment being edited in the inplace editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ReminderFormCancel = function() {
    ///<summary>
    ///Client-side scripting method that closes the Reminder form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ReminderFormDismiss = function() {
    ///<summary>
    ///Client-side scripting method that calls the Dismiss method for the selected reminder.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ReminderFormDismissAll = function() {
    ///<summary>
    ///Client-side scripting method that dismisses all reminders shown in the Reminder form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.ReminderFormSnooze = function() {
    ///<summary>
    ///Client-side scripting method that changes the alert time for the selected reminder to the specified interval.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientScheduler.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientScheduler.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientScheduler.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientScheduler.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientScheduler.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientScheduler.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientSchedulerToolTipData.prototype.GetAppointment = function() {
    ///<summary>
    ///Returns the client appointment for which the tooltip is displayed.
    ///</summary>
    ///<returns type = "ASPxClientAppointment">
    ///An <see cref="ASPxClientAppointment" /> object that is the client appointment for which the tooltip is displayed.
    ///</returns>
};
ASPxClientSchedulerToolTipData.prototype.GetInterval = function() {
    ///<summary>
    ///Returns the client time interval for which the tooltip is displayed.
    ///</summary>
    ///<returns type = "ASPxClientTimeInterval">
    ///An <see cref="ASPxClientTimeInterval" /> object that is an client-side representation of the time interval for which the tooltip is displayed.
    ///</returns>
};
ASPxClientSchedulerToolTipData.prototype.GetResources = function() {
    ///<summary>
    ///Returns the resources associated with the appointment for which the tooltip is displayed.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array of objects representing resource identifiers.
    ///</returns>
};
ASPxClientToolTipBase.prototype.CanShowToolTip = function() {
    ///<summary>
    ///Returns the value that indicates whether or not the tooltip can be displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the tooltip can be displayed; otherwise, false.
    ///</returns>
};
ASPxClientToolTipBase.prototype.FinalizeUpdate = function(toolTipData) {
    ///<summary>
    ///Ends updating the tooltip content.
    ///</summary>
    ///<param name = "toolTipData" type = "ASPxClientSchedulerToolTipData">
    ///An ASPxClientSchedulerToolTipData object providing data required to update the tooltip content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientToolTipBase.prototype.Update = function(toolTipData) {
    ///<summary>
    ///Updates the tooltip content.
    ///</summary>
    ///<param name = "toolTipData" type = "ASPxClientSchedulerToolTipData">
    ///An ASPxClientSchedulerToolTipData object providing data required to update the tooltip content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientToolTipBase.prototype.Close = function() {
    ///<summary>
    ///Closes the tooltip.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientToolTipBase.prototype.CalculatePosition = function(bounds) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "bounds" type = "Object">
    ///
    ///</param>
    ///<returns type = "ASPxClientPoint">
    ///
    ///</returns>
};
ASPxClientToolTipBase.prototype.ShowAppointmentMenu = function(eventObject) {
    ///<summary>
    ///Displays the Appointment Menu in the position of the tooltip.
    ///</summary>
    ///<param name = "eventObject" type = "Object">
    ///An object containing information about the event on which the menu is displayed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientToolTipBase.prototype.ShowViewMenu = function(eventObject) {
    ///<summary>
    ///Displays the View Menu in the position of the tooltip.
    ///</summary>
    ///<param name = "eventObject" type = "Object">
    ///An object containing information about the event on which the menu is displayed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientToolTipBase.prototype.ConvertIntervalToString = function(interval) {
    ///<summary>
    ///Returns the string representation of the specified interval.
    ///</summary>
    ///<param name = "interval" type = "ASPxClientTimeInterval">
    ///An ASPxClientTimeInterval object to convert.
    ///</param>
    ///<returns type = "String">
    ///A string containing a textual representation of the interval.
    ///</returns>
};
ASPxClientSpellChecker.prototype.Check = function() {
    ///<summary>
    ///Starts the spelling check of the text contained within the element specified by the CheckedElementID value.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.CheckElement = function(element) {
    ///<summary>
    ///Starts checking contents of the specified element.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object representing the element being checked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.CheckElementById = function(id) {
    ///<summary>
    ///Starts checking contents of the specified element.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string representing the identifier of the element being checked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.CheckElementsInContainer = function(containerElement) {
    ///<summary>
    ///Starts checking the contents of controls in the specified container.
    ///</summary>
    ///<param name = "containerElement" type = "Object">
    ///An object representing a control which contains elements being checked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.CheckElementsInContainerById = function(containerId) {
    ///<summary>
    ///Starts checking the contents of controls in the specified container.
    ///</summary>
    ///<param name = "containerId" type = "String">
    ///A string, specifying the control's identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientSpellChecker.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientSpellChecker.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientSpellChecker.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientSpellChecker.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientSpellChecker.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpellChecker.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientSpreadsheet.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the Spreadsheet.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheet.prototype.GetRibbon = function() {
    ///<summary>
    ///Gets access to the client ribbon object.
    ///</summary>
    ///<returns type = "ASPxClientRibbon">
    ///An <see cref="ASPxClientRibbon" /> object specifying the RichEdit's ribbon.
    ///</returns>
};
ASPxClientSpreadsheet.prototype.SetFullscreenMode = function(fullscreen) {
    ///<summary>
    ///Enables you to switch the full-screen mode of the Spreadsheet.
    ///</summary>
    ///<param name = "fullscreen" type = "Boolean">
    ///true to activate full-screen mode; false to deactivate full-screen mode.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheet.prototype.GetSelection = function() {
    ///<summary>
    ///Returns the current selection made in a Spreadsheet.
    ///</summary>
    ///<returns type = "ASPxClientSpreadsheetSelection">
    ///An <see cref="ASPxClientSpreadsheetSelection" /> object defining the current selection.
    ///</returns>
};
ASPxClientSpreadsheet.prototype.HasUnsavedChanges = function() {
    ///<summary>
    ///Indicates whether any unsaved changes are contained in the current document.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the document contains unsaved changes; otherwise, false.
    ///</returns>
};
ASPxClientSpreadsheet.prototype.GetCellValue = function(colModelIndex, rowModelIndex) {
    ///<summary>
    ///Gets the value of the specified cell.
    ///</summary>
    ///<param name = "colModelIndex" type = "Int32">
    ///An integer value specifying the cell's column index.
    ///</param>
    ///<param name = "rowModelIndex" type = "Int32">
    ///An integer value specifying the cell's row index.
    ///</param>
    ///<returns type = "Object">
    ///An object representing the specified cell's value.
    ///</returns>
};
ASPxClientSpreadsheet.prototype.GetCellComment = function(colModelIndex, rowModelIndex) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "colModelIndex" type = "Int32">
    ///
    ///</param>
    ///<param name = "rowModelIndex" type = "Int32">
    ///
    ///</param>
    ///<returns type = "Object">
    ///
    ///</returns>
};
ASPxClientSpreadsheet.prototype.GetActiveCellValue = function() {
    ///<summary>
    ///Gets the value of the currently active cell.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the currently active cell's value.
    ///</returns>
};
ASPxClientSpreadsheet.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientSpreadsheet.prototype.PerformDocumentCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side DocumentCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side DocumentCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheet.prototype.ReconnectToExternalRibbon = function() {
    ///<summary>
    ///Reconnects the Spreadsheet to an external ribbon.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheet.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientSpreadsheet.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientSpreadsheet.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheet.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheet.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheet.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientSpreadsheet.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheet.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientSpreadsheet.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheet.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientSpreadsheet.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheet.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientSpreadsheetPopupMenuItem.prototype.GetSubItems = function() {
    ///<summary>
    ///Gets a collection that contains the submenu items of the current menu item.
    ///</summary>
    ///<returns type = "ASPxClientSpreadsheetPopupMenuItemCollection">
    ///A <see cref="ASPxClientSpreadsheetPopupMenuItemCollection" /> that contains the submenu items of the current menu item.
    ///</returns>
};
ASPxClientSpreadsheetPopupMenuItem.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the menu item's sub-item with the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the index of the sub-item within a collection of the current menu item's submenu items.
    ///</param>
    ///<returns type = "ASPxClientSpreadsheetPopupMenuItem">
    ///An <see cref="ASPxClientSpreadsheetPopupMenuItem" /> object representing the found sub-item.
    ///</returns>
};
ASPxClientSpreadsheetPopupMenuItem.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns the menu item's sub-item with the specified name property value.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name property value of the sub-item to find.
    ///</param>
    ///<returns type = "ASPxClientSpreadsheetPopupMenuItem">
    ///An <see cref="ASPxClientSpreadsheetPopupMenuItem" /> object representing the found sub-item.
    ///</returns>
};
ASPxClientSpreadsheetPopupMenuItem.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the total number of the menu item's child items (submenu items).
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value determining the total number of the current menu item's immediate sub-items.
    ///</returns>
};
ASPxClientSpreadsheetPopupMenuItemCollection.prototype.Add = function(item) {
    ///<summary>
    ///Adds the specified menu item to the end of the collection.
    ///</summary>
    ///<param name = "item" type = "ASPxClientSpreadsheetPopupMenuItem">
    ///An ASPxClientSpreadsheetPopupMenuItem object specifying the item to be added to the collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheetPopupMenuItemCollection.prototype.Remove = function(index) {
    ///<summary>
    ///Removes a menu item specified by its index within the collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the index of the menu item to remove.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheetPopupMenuItemCollection.prototype.RemoveByName = function(name) {
    ///<summary>
    ///Removes a menu item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name property value of a menu item to remove from the collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheetPopupMenuItemCollection.prototype.Insert = function(index, item) {
    ///<summary>
    ///Adds the specified item to the specified position within the collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the zero-based index at which the specified item should be inserted.
    ///</param>
    ///<param name = "item" type = "ASPxClientSpreadsheetPopupMenuItem">
    ///An ASPxClientSpreadsheetPopupMenuItem object to insert.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSpreadsheetPopupMenuItemCollection.prototype.GetCount = function() {
    ///<summary>
    ///Returns the total number of menu items in the collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value determining the total number of menu items.
    ///</returns>
};
ASPxClientSpreadsheetPopupMenuItemCollection.prototype.GetByName = function(name) {
    ///<summary>
    ///Returns an item object with the specified name property value.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value representing the name property value of the required item.
    ///</param>
    ///<returns type = "ASPxClientSpreadsheetPopupMenuItem">
    ///An name property.
    ///</returns>
};
ASPxClientSpreadsheetPopupMenuItemCollection.prototype.Get = function(index) {
    ///<summary>
    ///Returns a menu item specified by its index in the collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that is the zero-based index of the <see cref="ASPxClientSpreadsheetPopupMenuItem" /> to retrieve from the ASPxClientSpreadsheetPopupMenuItemCollection.
    ///</param>
    ///<returns type = "ASPxClientSpreadsheetPopupMenuItem">
    ///A <see cref="ASPxClientSpreadsheetPopupMenuItem" /> object that is a menu item with the specified index.
    ///</returns>
};
ASPxClientSpreadsheetPopupMenuItemCollection.prototype.Clear = function() {
    ///<summary>
    ///Removes all menu items from the collection.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the ASPxTreeList.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetPopupEditForm = function() {
    ///<summary>
    ///Gets the Popup Edit Form.
    ///</summary>
    ///<returns type = "ASPxClientPopupControl">
    ///An ASPxClientPopupControl object that represents the Popup Edit Form.
    ///</returns>
};
ASPxClientTreeList.prototype.GetToolbarByName = function(name) {
    ///<summary>
    ///Returns a toolbar specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the toolbar name.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar with the specified name.
    ///</returns>
};
ASPxClientTreeList.prototype.GetToolbar = function(index) {
    ///<summary>
    ///Returns a toolbar specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the toolbar object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An Toolbars collection.
    ///</returns>
};
ASPxClientTreeList.prototype.GetFocusedNodeKey = function() {
    ///<summary>
    ///Returns the focused node's key value.
    ///</summary>
    ///<returns type = "String">
    ///A String value that uniquely identifies the node.
    ///</returns>
};
ASPxClientTreeList.prototype.SetFocusedNodeKey = function(key) {
    ///<summary>
    ///Moves focus to the specified node.
    ///</summary>
    ///<param name = "key" type = "String">
    ///A String value that uniquely identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.IsNodeSelected = function(nodeKey) {
    ///<summary>
    ///Indicates whether the specified node is selected.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A String value that identifies the node by its key value.
    ///</param>
    ///<returns type = "Nullable">
    ///true if the specified node is selected; false if the specified node isn't selected; null if the specified node was not found on the client.
    ///</returns>
};
ASPxClientTreeList.prototype.SelectNode = function(nodeKey) {
    ///<signature>
    ///<summary>
    ///Selects the specified node.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified node.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node.
    ///</param>
    ///<param name = "state" type = "Boolean">
    ///true to select the node; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientTreeList.prototype.GetVisibleSelectedNodeKeys = function() {
    ///<summary>
    ///Obtains key values of selected nodes that are displayed within the current page.
    ///</summary>
    ///<returns elementType = "String" type = "Array">
    ///The list of key values of selected nodes that are displayed within the current page.
    ///</returns>
};
ASPxClientTreeList.prototype.IsCustomizationWindowVisible = function() {
    ///<summary>
    ///Indicates whether the Customization Window is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the customization window is displayed; otherwise, false.
    ///</returns>
};
ASPxClientTreeList.prototype.ShowCustomizationWindow = function() {
    ///<signature>
    ///<summary>
    ///Invokes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the Customization Window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object that specifies the HTML element relative to whose position the customization window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientTreeList.prototype.HideCustomizationWindow = function() {
    ///<summary>
    ///Closes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.PerformCustomCallback = function(arg) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "arg" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.PerformCallback = function(args) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientTreeList.prototype.PerformCustomDataCallback = function(arg) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
    ///</summary>
    ///<param name = "arg" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetNodeValues = function(nodeKey, fieldNames, onCallback) {
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within a specified node, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node.
    ///</param>
    ///<param name = "fieldNames" type = "String">
    ///A string value that contains the names of data source fields whose values within the specified node are returned. The field names should be separated by ';'.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within a specified node, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node.
    ///</param>
    ///<param name = "fieldNames" elementType = "String" type = "Array">
    ///The names of data source fields whose values within the specified node are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientTreeList.prototype.GetVisibleNodeValues = function(fieldNames, onCallback) {
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within nodes that are displayed within the current page, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///A string value that contains the names of data source fields whose values within visible nodes are returned. The field names should be separated by ';'.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within nodes that are displayed within the current page, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames" elementType = "String" type = "Array">
    ///The names of data source fields whose values within visible nodes are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientTreeList.prototype.GetSelectedNodeValues = function(fieldNames, onCallback) {
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///A string value that contains the names of data source fields whose values within selected nodes are returned. The field names should be separated by ';'.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames" elementType = "String" type = "Array">
    ///The names of data source fields whose values within selected nodes are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///A string value that contains the names of data source fields whose values within selected nodes are returned. The field names should be separated by ';'.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<param name = "visibleOnly" type = "Boolean">
    ///true to return values within selected nodes that are displayed within the current page; false to return values within all selected nodes.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames" elementType = "String" type = "Array">
    ///The names of data source fields whose values within selected nodes are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<param name = "visibleOnly" type = "Boolean">
    ///true to return values within selected nodes that are displayed within the current page; false to return values within all selected nodes.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientTreeList.prototype.GoToPage = function(index) {
    ///<summary>
    ///Selects the specified page.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page currently being selected.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
ASPxClientTreeList.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages to which the ASPxTreeList's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the number of grid pages.
    ///</returns>
};
ASPxClientTreeList.prototype.GetNodeState = function(nodeKey) {
    ///<summary>
    ///Returns the specified node's state.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A String value that identifies the node.
    ///</param>
    ///<returns type = "String">
    ///A String value that represents the specified node's state.
    ///</returns>
};
ASPxClientTreeList.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all nodes.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all Node.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.ExpandNode = function(key) {
    ///<summary>
    ///Expands the specified node preserving the collapsed state of child nodes.
    ///</summary>
    ///<param name = "key" type = "String">
    ///A String value that uniquely identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.CollapseNode = function(key) {
    ///<summary>
    ///Collapses the specified node preserving the expanded state of child nodes.
    ///</summary>
    ///<param name = "key" type = "String">
    ///A String value that uniquely identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetVisibleNodeKeys = function() {
    ///<summary>
    ///Obtains key values of nodes that are displayed within the current page.
    ///</summary>
    ///<returns elementType = "String" type = "Array">
    ///The list of key values of nodes that are displayed within the current page.
    ///</returns>
};
ASPxClientTreeList.prototype.GetNodeHtmlElement = function(nodeKey) {
    ///<summary>
    ///Returns an HTML table row that represents the specified node.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the HTML table row, which corresponds to the specified node.
    ///</returns>
};
ASPxClientTreeList.prototype.GetVisibleColumnCount = function() {
    ///<summary>
    ///Returns the number of visible columns within the client ASPxTreeList.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of visible columns within the client ASPxTreeList.
    ///</returns>
};
ASPxClientTreeList.prototype.GetColumnCount = function() {
    ///<summary>
    ///Returns the number of columns within the client ASPxTreeList.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of columns within the client ASPxTreeList.
    ///</returns>
};
ASPxClientTreeList.prototype.GetColumnByIndex = function(index) {
    ///<summary>
    ///Returns the column located at the specified position within the Columns collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that identifies the column within the collection (the column's Index property value).
    ///</param>
    ///<returns type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the client column located at the specified position within the collection.
    ///</returns>
};
ASPxClientTreeList.prototype.GetColumnByName = function(name) {
    ///<summary>
    ///Returns the column with the specified name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value that specifies the column's name (the column's Name property value).
    ///</param>
    ///<returns type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the column with the specified name.
    ///</returns>
};
ASPxClientTreeList.prototype.GetColumnByFieldName = function(fieldName) {
    ///<summary>
    ///Returns the client column which is bound to the specified data source field.
    ///</summary>
    ///<param name = "fieldName" type = "String">
    ///A string value that specifies the name of the data source field to which the column is bound (the column's FieldName property value).
    ///</param>
    ///<returns type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the client column bound to the specified data source field.
    ///</returns>
};
ASPxClientTreeList.prototype.SortBy = function(columnIndex) {
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "nameOrFieldName" type = "String">
    ///A String value that specifies the column's name or field name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "nameOrFieldName" type = "String">
    ///A String value that specifies the column's name or field name.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "nameOrFieldName" type = "String">
    ///A String value that specifies the column's name or field name.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the data column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientTreeList.prototype.StartEdit = function(nodeKey) {
    ///<summary>
    ///Switches the ASPxTreeList to edit mode.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node by its key value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.UpdateEdit = function() {
    ///<summary>
    ///Saves all the changes made and switches the ASPxTreeList to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.CancelEdit = function() {
    ///<summary>
    ///Cancels all the changes made and switches the ASPxTreeList to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.IsEditing = function() {
    ///<summary>
    ///Indicates whether the ASPxTreeList is in edit mode.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the ASPxTreeList is in edit mode; otherwise, false.
    ///</returns>
};
ASPxClientTreeList.prototype.GetEditingNodeKey = function() {
    ///<summary>
    ///Gets the key value of the node currently being edited.
    ///</summary>
    ///<returns type = "String">
    ///A string value that identifies the node currently being edited.
    ///</returns>
};
ASPxClientTreeList.prototype.MoveNode = function(nodeKey, parentNodeKey) {
    ///<summary>
    ///Moves the specified node to a new position.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the target node by its key value.
    ///</param>
    ///<param name = "parentNodeKey" type = "String">
    ///A string value that identifies the node to whose child collection the target node is moved. An empty string to display the target node within the root.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.DeleteNode = function(nodeKey) {
    ///<summary>
    ///Deletes the specified node.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.StartEditNewNode = function() {
    ///<signature>
    ///<summary>
    ///Switches the ASPxTreeList to edit mode and allows new root node values to be edited.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Switches the ASPxTreeList to edit mode and allows new node values to be edited.
    ///</summary>
    ///<param name = "parentNodeKey" type = "String">
    ///A String value that identifies the parent node, which owns a new node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientTreeList.prototype.GetEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the column by its position within the column collection.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnNameOrFieldName" type = "String">
    ///A String value that identifies the column by its name or field name.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the specified column's editor.
    ///</returns>
    ///</signature>
};
ASPxClientTreeList.prototype.GetEditValue = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
    ///</param>
    ///<returns type = "Object">
    ///A String value that represents the value of the edit cell, which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column by its index within the ASPxTreeList's column collection.
    ///</param>
    ///<returns type = "Object">
    ///A String value that represents the value of the edit cell, which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnNameOrFieldName" type = "String">
    ///A String value that identifies the column by its name or field name.
    ///</param>
    ///<returns type = "Object">
    ///A String value that represents the value of the edit cell, which corresponds to the specified data column.
    ///</returns>
    ///</signature>
};
ASPxClientTreeList.prototype.SetEditValue = function(column, value) {
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column by its index within the ASPxTreeList's column collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnNameOrFieldName" type = "String">
    ///A String value that identifies the column by its name or field name.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientTreeList.prototype.FocusEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Moves focus to the specified editor within the edited node.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///A ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified editor within the edited node.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified editor within the edited node.
    ///</summary>
    ///<param name = "columnNameOrFieldName" type = "String">
    ///A String value that specifies the column's name or field name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientTreeList.prototype.MakeNodeVisible = function(nodeKey) {
    ///<summary>
    ///Scrolls the tree list so that the specified node becomes visible.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///An integer value that specifies the node index within the tree list's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetVerticalScrollPosition = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the tree list's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</returns>
};
ASPxClientTreeList.prototype.GetHorizontalScrollPosition = function() {
    ///<summary>
    ///Returns the current horizontal scroll position of the tree list's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</returns>
};
ASPxClientTreeList.prototype.SetVerticalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the tree list's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SetHorizontalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the horizontal scroll position for the tree list's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTreeList.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTreeList.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTreeList.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientTreeList.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTreeList.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeList.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientAccordion.prototype.GetGroupCount = function() {
    ///<summary>
    ///Returns the number of groups in the navbar.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of groups in the navbar.
    ///</returns>
};
BootstrapClientAccordion.prototype.GetGroup = function(index) {
    ///<summary>
    ///Returns a group specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the group object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientNavBarGroup">
    ///An Groups collection.
    ///</returns>
};
BootstrapClientAccordion.prototype.GetGroupByName = function(name) {
    ///<summary>
    ///Returns a group specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the group.
    ///</param>
    ///<returns type = "ASPxClientNavBarGroup">
    ///An ASPxClientNavBarGroup object that represents the group with the specified name.
    ///</returns>
};
BootstrapClientAccordion.prototype.GetActiveGroup = function() {
    ///<summary>
    ///Returns the navbar's active group.
    ///</summary>
    ///<returns type = "ASPxClientNavBarGroup">
    ///A ASPxClientNavBarGroup object that represents the active group.
    ///</returns>
};
BootstrapClientAccordion.prototype.SetActiveGroup = function(group) {
    ///<summary>
    ///Makes the specified group active.
    ///</summary>
    ///<param name = "group" type = "ASPxClientNavBarGroup">
    ///A ASPxClientNavBarGroup object that specifies the active group.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientAccordion.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns an item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the item.
    ///</param>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object that represents the item with the specified name.
    ///</returns>
};
BootstrapClientAccordion.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the selected item within the navbar control.
    ///</summary>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object that represents the selected item.
    ///</returns>
};
BootstrapClientAccordion.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Selects the specified item within the navbar control on the client side.
    ///</summary>
    ///<param name = "item" type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object specifying the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientAccordion.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all groups of the navbar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientAccordion.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all groups of the navbar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientAccordion.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientAccordion.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientAccordion.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientAccordion.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientAccordion.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientAccordion.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientAccordion.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientAccordion.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientAccordion.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientAccordion.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientAccordion.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientAccordion.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientBinaryImage.prototype.GetNavigateUrl = function() {
    ///<summary>
    ///Gets an URL which defines the navigation location for the editor's hyperlink.
    ///</summary>
    ///<returns type = "String">
    ///A string value which represents an URL to where the client web browser will navigate when a hyperlink in the editor is clicked.
    ///</returns>
};
BootstrapClientBinaryImage.prototype.SetNavigateUrl = function(url) {
    ///<summary>
    ///Specifies an URL which defines the navigation location for the editor's hyperlink.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value which specifies an URL to where the client web browser will navigate when a hyperlink in the editor is clicked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientBinaryImage.prototype.GetText = function() {
    ///<summary>
    ///Gets the text caption displayed for the hyperlink in the hyperlink editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text caption for the hyperlink in the editor.
    ///</returns>
};
BootstrapClientBinaryImage.prototype.SetText = function(text) {
    ///<summary>
    ///Specifies the text caption displayed for the hyperlink in the hyperlink editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text caption for the hyperlink in the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientBinaryImage.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientBinaryImage.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientBinaryImage.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientBinaryImage.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientBinaryImage.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientBinaryImage.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientBinaryImage.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientBinaryImage.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientBinaryImage.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientBinaryImage.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientBinaryImage.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientBinaryImage.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientBinaryImage.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientBinaryImage.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientBinaryImage.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientBinaryImage.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientBinaryImage.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientBinaryImage.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientButton.prototype.GetText = function() {
    ///<signature>
    ///<summary>
    ///Returns the text displayed within the button.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the button.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the text displayed within the button.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the button.
    ///</returns>
    ///</signature>
};
BootstrapClientButton.prototype.SetText = function(value) {
    ///<signature>
    ///<summary>
    ///Sets the text to be displayed within the button.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the text to be displayed within the button.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientButton.prototype.DoClick = function() {
    ///<summary>
    ///Simulates a mouse click action on the button control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButton.prototype.GetChecked = function() {
    ///<summary>
    ///Returns a value indicating whether the button is checked.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the button is checked; otherwise, false.
    ///</returns>
};
BootstrapClientButton.prototype.SetChecked = function(value) {
    ///<summary>
    ///Sets a value that specifies the button's checked status.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true if the button is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButton.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the button.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the button.
    ///</returns>
};
BootstrapClientButton.prototype.SetImageUrl = function(value) {
    ///<summary>
    ///Sets the URL pointing to the image displayed within the button.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL to the image displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButton.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Sets a value specifying whether the button is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the button; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButton.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether the button is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the button is enabled; false if the button is disabled.
    ///</returns>
};
BootstrapClientButton.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the button.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButton.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientButton.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientButton.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButton.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButton.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButton.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientButton.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButton.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientButton.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButton.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientButton.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButton.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientCalendar.prototype.IsDateSelected = function(date) {
    ///<summary>
    ///Tests whether the specified date is selected.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A date-time value that specifies the date to test.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified date is selected; otherwise, false.
    ///</returns>
};
BootstrapClientCalendar.prototype.SetVisibleDate = function(date) {
    ///<summary>
    ///Sets the date that specifies the month and year to be displayed in the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///The date that specifies calendar's visible month and year.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.SetSelectedDate = function(date) {
    ///<summary>
    ///Sets the calendar's selected date.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A date object that specifies the calendar's selected date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.GetSelectedDate = function() {
    ///<summary>
    ///Returns the calendar's selected date.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date object that represents the calendar's selected date.
    ///</returns>
};
BootstrapClientCalendar.prototype.GetVisibleDate = function() {
    ///<summary>
    ///Gets the date that determines the month and year that are currently displayed in the calendar.
    ///</summary>
    ///<returns type = "DateTime">
    ///The date that represents the calendar's visible month and year.
    ///</returns>
};
BootstrapClientCalendar.prototype.SelectDate = function(date) {
    ///<summary>
    ///Selects the specified date within the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A date-time value that specifies the selected date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.SelectRange = function(start, end) {
    ///<summary>
    ///Selects the specified range of dates within the calendar.
    ///</summary>
    ///<param name = "start" type = "DateTime">
    ///A date-time value that specifies the range's first date.
    ///</param>
    ///<param name = "end" type = "DateTime">
    ///A date-time value that specifies the range's last date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.DeselectDate = function(date) {
    ///<summary>
    ///Deselects the specified date within the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A date-time value that specifies the date to deselect.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.DeselectRange = function(start, end) {
    ///<summary>
    ///Deselects the specified range of dates within the calendar.
    ///</summary>
    ///<param name = "start" type = "DateTime">
    ///A date-time value that specifies the range's first date.
    ///</param>
    ///<param name = "end" type = "DateTime">
    ///A date-time value that specifies the range's last date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.ClearSelection = function() {
    ///<summary>
    ///Deselects all the selected dates within the calendar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.GetSelectedDates = function() {
    ///<summary>
    ///Returns a list of dates which are selected within the calendar.
    ///</summary>
    ///<returns elementType = "DateTime" type = "Array">
    ///An array of date objects that represents the list of the calendar's selected dates.
    ///</returns>
};
BootstrapClientCalendar.prototype.GetMinDate = function() {
    ///<summary>
    ///Gets the minimum date on the calendar.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date-time object representing the minimum date.
    ///</returns>
};
BootstrapClientCalendar.prototype.SetMinDate = function(date) {
    ///<summary>
    ///Sets the minimum date of the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object representing the minimum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.GetMaxDate = function() {
    ///<summary>
    ///Gets the maximum date on the calendar.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date-time object representing the maximum date.
    ///</returns>
};
BootstrapClientCalendar.prototype.SetMaxDate = function(date) {
    ///<summary>
    ///Sets the maximum date of the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object representing the maximum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
BootstrapClientCalendar.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
BootstrapClientCalendar.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
BootstrapClientCalendar.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientCalendar.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientCalendar.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientCalendar.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientCalendar.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientCalendar.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientCalendar.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientCalendar.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientCalendar.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCalendar.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientCallbackPanel.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that specifies the contents of the control's window.
    ///</summary>
    ///<returns type = "String">
    ///A string that specifies the window's HTML content.
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML markup specifying the contents of the control's window.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Sets a value specifying whether the callback panel is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true, to enable the callback panel; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a callback panel is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the callback panel is enabled; otherwise, false.
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCallbackPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientChartBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientChartBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientChartBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientChartBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientChartBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientChartBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChartBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientChart.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientChart.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientChart.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChart.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChart.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChart.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientChart.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChart.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientChart.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChart.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientChart.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientChart.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientPolarChart.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientPolarChart.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientPolarChart.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPolarChart.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPolarChart.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPolarChart.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientPolarChart.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPolarChart.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientPolarChart.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPolarChart.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientPolarChart.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPolarChart.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientPieChart.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientPieChart.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientPieChart.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPieChart.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPieChart.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPieChart.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientPieChart.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPieChart.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientPieChart.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPieChart.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientPieChart.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPieChart.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetChecked = function() {
    ///<summary>
    ///Returns a value indicating whether the check box editor is checked.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientCheckBox.prototype.SetChecked = function(isChecked) {
    ///<summary>
    ///Sets a value which specifies the checked status of the check box editor.
    ///</summary>
    ///<param name = "isChecked" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetCheckState = function() {
    ///<summary>
    ///Returns a value which specifies a check box checked state.
    ///</summary>
    ///<returns type = "String">
    ///
    ///</returns>
};
BootstrapClientCheckBox.prototype.SetCheckState = function(checkState) {
    ///<summary>
    ///Sets a value specifying the state of a check box.
    ///</summary>
    ///<param name = "checkState" type = "String">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
BootstrapClientCheckBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
BootstrapClientCheckBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientCheckBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientCheckBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientCheckBox.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientCheckBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientCheckBox.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientCheckBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientCheckBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetChecked = function() {
    ///<summary>
    ///Returns a value indicating whether the check box editor is checked.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientRadioButton.prototype.SetChecked = function(isChecked) {
    ///<summary>
    ///Sets a value which specifies the checked status of the check box editor.
    ///</summary>
    ///<param name = "isChecked" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetCheckState = function() {
    ///<summary>
    ///Returns a value which specifies a check box checked state.
    ///</summary>
    ///<returns type = "String">
    ///
    ///</returns>
};
BootstrapClientRadioButton.prototype.SetCheckState = function(checkState) {
    ///<summary>
    ///Sets a value specifying the state of a check box.
    ///</summary>
    ///<param name = "checkState" type = "String">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
BootstrapClientRadioButton.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
BootstrapClientRadioButton.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientRadioButton.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientRadioButton.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientRadioButton.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientRadioButton.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientRadioButton.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientRadioButton.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientRadioButton.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButton.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientComboBox.prototype.SetText = function(text) {
    ///<signature>
    ///<summary>
    ///Specifies the text displayed within the editor's edit box.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the editor's text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientComboBox.prototype.AddItem = function(text) {
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and associated value, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
};
BootstrapClientComboBox.prototype.InsertItem = function(index, text, value, imageUrl) {
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientComboBox.prototype.RemoveItem = function(index) {
    ///<summary>
    ///Removes an item specified by its index from the client list editor.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the index of the list item to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.ClearItems = function() {
    ///<summary>
    ///Removes all items from the client combo box editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.BeginUpdate = function() {
    ///<summary>
    ///Prevents the client combobox editor from being rendered until the EndUpdate method is called.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.EndUpdate = function() {
    ///<summary>
    ///Re-enables editor render operations after a call to the BeginUpdate method and forces an immediate re-rendering.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.MakeItemVisible = function(index) {
    ///<summary>
    ///Scrolls the editor's item list, so that the specified item becomes visible.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the item's index within the editor's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the combo box editor's item collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
BootstrapClientComboBox.prototype.FindItemByText = function(text) {
    ///<summary>
    ///Returns a combo box item by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string that specifies the item's text.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
BootstrapClientComboBox.prototype.FindItemByValue = function(value) {
    ///<summary>
    ///Returns a combo box item by its value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object that specifies the item's value.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
BootstrapClientComboBox.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
BootstrapClientComboBox.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the combo box editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
BootstrapClientComboBox.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the combobox editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the combo box editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
BootstrapClientComboBox.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.GetText = function() {
    ///<signature>
    ///<summary>
    ///Gets the text displayed in the editor's edit box.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text within the editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
    ///</signature>
};
BootstrapClientComboBox.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.EnsureDropDownLoaded = function(callbackFunction) {
    ///<summary>
    ///Determines whether the drop-down content is loaded; if not - loads the content.
    ///</summary>
    ///<param name = "callbackFunction" type = "Object">
    ///An object that is the JavaScript function that receives the callback data as a parameter. The function is performed after the combo box content is loaded.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.SetItemHtml = function(index, html) {
    ///<summary>
    ///Defines the HTML content for the specified combo box item.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the combo box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.SetItemTooltip = function(index, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the combo box editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.AddItemCssClass = function(index, className) {
    ///<summary>
    ///Sets the CSS class for a combo box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.RemoveItemCssClass = function(index, className) {
    ///<summary>
    ///Removes the CSS class from a combo box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.SetItemTextCellHtml = function(itemIndex, textCellIndex, html) {
    ///<summary>
    ///Defines the HTML content for the specified combo box item's text cell.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the combo box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.SetItemTextCellTooltip = function(itemIndex, textCellIndex, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the text cell of the editor's item specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.AddItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Sets the CSS class for a combo box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.RemoveItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Removes the CSS class from a combo box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
BootstrapClientComboBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
BootstrapClientComboBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
BootstrapClientComboBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
BootstrapClientComboBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientComboBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientComboBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientComboBox.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientComboBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientComboBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientComboBox.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientComboBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientComboBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientComboBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetCalendar = function() {
    ///<summary>
    ///Returns the calendar of the date editor.
    ///</summary>
    ///<returns type = "ASPxClientCalendar">
    ///A ASPxClientCalendar object representing the editor's calendar.
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetTimeEdit = function() {
    ///<summary>
    ///Returns the built-in time edit control.
    ///</summary>
    ///<returns type = "ASPxClientTimeEdit">
    ///An <see cref="ASPxClientTimeEdit" /> object that is the built-in time editor.
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetDate = function(date) {
    ///<summary>
    ///Specifies the date for the editor.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object that is the date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetDate = function() {
    ///<summary>
    ///Gets the date that is the editor's value.
    ///</summary>
    ///<returns type = "DateTime">
    ///A DateTime object that is the date.
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetRangeDayCount = function() {
    ///<summary>
    ///Returns the number of days in a range selected within a date edit.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value specifying the number of days.
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetMinDate = function() {
    ///<summary>
    ///Gets the minimum date of the editor.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date-time object representing the minimum date.
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetMinDate = function(date) {
    ///<summary>
    ///Sets the minimum date of the editor.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object representing the minimum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetMaxDate = function() {
    ///<summary>
    ///Gets the maximum date of the editor.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date-time object representing the maximum date.
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetMaxDate = function(date) {
    ///<summary>
    ///Sets the maximum date of the editor.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object representing the maximum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
BootstrapClientDateEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientDateEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientDateEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDateEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetKeyValue = function() {
    ///<summary>
    ///Obtains the key value associated with the text displayed within the editor's edit box.
    ///</summary>
    ///<returns type = "String">
    ///A string representing the key value associated with the editor's value (displayed text).
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetKeyValue = function(keyValue) {
    ///<summary>
    ///Specifies the key value associated with the text displayed within the editor's edit box.
    ///</summary>
    ///<param name = "keyValue" type = "String">
    ///A string specifying the key value associated with the editor's value (displayed text).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientDropDownEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientFormLayout.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns an item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the item.
    ///</param>
    ///<returns type = "ASPxClientLayoutItem">
    ///An <see cref="ASPxClientLayoutItem" /> object that represents the item with the specified name.
    ///</returns>
};
BootstrapClientFormLayout.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientFormLayout.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientFormLayout.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientFormLayout.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientFormLayout.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientFormLayout.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientFormLayout.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientFormLayout.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientFormLayout.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientFormLayout.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientFormLayout.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientFormLayout.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientGridView.prototype.SelectRowsByKey = function(key, selected) {
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified row displayed within the grid.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified rows displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects a grid row by its key.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified rows displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified rows; false to deselect the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.UnselectRowsByKey = function(keys) {
    ///<signature>
    ///<summary>
    ///Deselects the specified rows displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified row displayed within the grid.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.UnselectRows = function() {
    ///<signature>
    ///<summary>
    ///Deselects all the selected rows within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified rows (if selected) within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data rows within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified row (if selected) within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.UnselectFilteredRows = function() {
    ///<summary>
    ///Deselects all grid rows that match the filter criteria currently applied to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.SelectRowOnPage = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Selects the specified row displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified row displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.UnselectRowOnPage = function(visibleIndex) {
    ///<summary>
    ///Deselects the specified row (if selected) displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.SelectAllRowsOnPage = function() {
    ///<signature>
    ///<summary>
    ///Selects all unselected rows displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Allows you to select or deselect all rows displayed on the current page based on the parameter passed.
    ///</summary>
    ///<param name = "selected" type = "Boolean">
    ///true to select all unselected rows displayed on the current page; false to deselect all selected rows on the page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.UnselectAllRowsOnPage = function() {
    ///<summary>
    ///Deselects all selected rows displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetSelectedRowCount = function() {
    ///<summary>
    ///Returns the number of selected rows.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of selected rows.
    ///</returns>
};
BootstrapClientGridView.prototype.IsRowSelectedOnPage = function(visibleIndex) {
    ///<summary>
    ///Indicates whether or not the specified row is selected within the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified row is selected within the current page; otherwise, false.
    ///</returns>
};
BootstrapClientGridView.prototype.IsGroupRow = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified row is a group row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified row is a group row; otherwise, false.
    ///</returns>
};
BootstrapClientGridView.prototype.IsDataRow = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified row is a data row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified row is a data row; otherwise, false.
    ///</returns>
};
BootstrapClientGridView.prototype.IsGroupRowExpanded = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified group row is expanded.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified group row is expanded; otherwise, false.
    ///</returns>
};
BootstrapClientGridView.prototype.GetVertScrollPos = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the vertical scroll position.
    ///</returns>
};
BootstrapClientGridView.prototype.GetHorzScrollPos = function() {
    ///<summary>
    ///Returns the current horizontal scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the horizontal scroll position.
    ///</returns>
};
BootstrapClientGridView.prototype.GetHorizontalScrollPosition = function() {
    ///<summary>
    ///Returns the current horizontal scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</returns>
};
BootstrapClientGridView.prototype.SetVertScrollPos = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.SetHorzScrollPos = function(position) {
    ///<summary>
    ///Specifies the horizontal scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.SetHorizontalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the horizontal scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.SetFixedColumnScrollableRows = function(scrollableRowSettings) {
    ///<summary>
    ///Sets the scrollability of various types of grid rows when the grid displays fixed columns.
    ///</summary>
    ///<param name = "scrollableRowSettings" type = "Object">
    ///An object specifying which types of grid rows should or should not be scrollable.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.ApplyOnClickRowFilter = function() {
    ///<summary>
    ///Applies a filter specified in the filter row to the GridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetAutoFilterEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data colum within the ASPxGridView.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column by its index.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's name or its data base field name.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.AutoFilterByColumn = function(column, val) {
    ///<signature>
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the client GridView.
    ///</param>
    ///<param name = "val" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "val" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "val" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.ApplySearchPanelFilter = function(value) {
    ///<summary>
    ///Applies the specified search panel filter criterion to grid data.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies the filter criterion.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.ApplyFilter = function(filterExpression) {
    ///<summary>
    ///Applies the specified filter expression to the GridView.
    ///</summary>
    ///<param name = "filterExpression" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.ClearFilter = function() {
    ///<summary>
    ///Clears the filter expression applied to a client GridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetPopupEditForm = function() {
    ///<summary>
    ///Gets the Popup Edit Form.
    ///</summary>
    ///<returns type = "ASPxClientPopupControl">
    ///An ASPxClientPopupControl object that represents the Popup Edit Form.
    ///</returns>
};
BootstrapClientGridView.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.PerformCallback = function(args) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing the specified argument to it.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Selects the specified page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page currently being selected.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
BootstrapClientGridView.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages to which the grid's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the number of grid pages.
    ///</returns>
};
BootstrapClientGridView.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetTopVisibleIndex = function() {
    ///<summary>
    ///Returns the index of the first data row displayed within the GridView's active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the index of the topmost row.
    ///</returns>
};
BootstrapClientGridView.prototype.IsEditing = function() {
    ///<summary>
    ///Indicates whether the grid is in edit mode.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the grid is in edit mode; otherwise, false.
    ///</returns>
};
BootstrapClientGridView.prototype.UpdateEdit = function() {
    ///<summary>
    ///Saves all the changes made and switches the grid to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.CancelEdit = function() {
    ///<summary>
    ///Cancels all the changes made and switches the GridView to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.Refresh = function() {
    ///<summary>
    ///Updates data displayed within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.IsCustomizationWindowVisible = function() {
    ///<summary>
    ///Indicates whether the Customization Window is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the customization window is displayed; otherwise, false.
    ///</returns>
};
BootstrapClientGridView.prototype.ShowCustomizationWindow = function() {
    ///<signature>
    ///<summary>
    ///Invokes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the Customization Window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "showAtElement" type = "Object" optional = "true">
    ///An object that specifies the HTML element relative to whose position the customization window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.HideCustomizationWindow = function() {
    ///<summary>
    ///Closes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetColumnsCount = function() {
    ///<summary>
    ///Returns the number of columns within the client GridView.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of columns within the client ASPxGridView.
    ///</returns>
};
BootstrapClientGridView.prototype.GetColumnCount = function() {
    ///<summary>
    ///Returns the number of columns within the client GridView.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of columns within the client GridView.
    ///</returns>
};
BootstrapClientGridView.prototype.GetSelectedFieldValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the row values displayed within all selected rows.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated via a semicolon, whose values within the selected rows are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetSelectedKeysOnPage = function() {
    ///<summary>
    ///Returns key values of selected rows displayed within the current page.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array that contains key values of selected rows displayed within the current page.
    ///</returns>
};
BootstrapClientGridView.prototype.GetValuesOnCustomCallback = function(args, onCallback) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///A ASPxClientGridViewValuesCallback object that is the JavaScript function which receives the information on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetRowValues = function(visibleIndex, fieldNames, onCallback) {
    ///<summary>
    ///Returns the values of the specified data source fields within the specified row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the data row.
    ///</param>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated via a semicolon, whose values within the specified row are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///An ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetPageRowValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the row values displayed within the current page.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields whose values are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetVisibleRowsOnPage = function() {
    ///<summary>
    ///Returns the number of rows actually displayed within the active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of rows displayed within the active page.
    ///</returns>
};
BootstrapClientGridView.prototype.GetColumn = function(columnIndex) {
    ///<summary>
    ///Returns the client column that resides at the specified position within the column collection.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///A zero-based index that identifies the column within the column collection (the column's Index property value).
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column.
    ///</returns>
};
BootstrapClientGridView.prototype.GetColumnById = function(columnId) {
    ///<summary>
    ///Returns the column with the specified unique identifier.
    ///</summary>
    ///<param name = "columnId" type = "String">
    ///A string value that specifies the column's unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column.
    ///</returns>
};
BootstrapClientGridView.prototype.GetColumnByField = function(columnFieldName) {
    ///<summary>
    ///Returns the client column which is bound to the specified data source field.
    ///</summary>
    ///<param name = "columnFieldName" type = "String">
    ///A string value that specifies the name of the data source field to which the column is bound (the column's FieldName property value).
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column bound to the specified data source field.
    ///</returns>
};
BootstrapClientGridView.prototype.GetEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that specifies the required column within the client grid.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified column's editor.
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.GetEditValue = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column within the grid's column collection.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.FocusEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.SetEditValue = function(column, value) {
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column within the grid's column collection.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.ShowFilterControl = function() {
    ///<summary>
    ///Displays the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.CloseFilterControl = function() {
    ///<summary>
    ///Hides the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.SetFilterEnabled = function(isFilterEnabled) {
    ///<summary>
    ///Enables or disables the current filter.
    ///</summary>
    ///<param name = "isFilterEnabled" type = "Boolean">
    ///true to enable the current filter; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetVerticalScrollPosition = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</returns>
};
BootstrapClientGridView.prototype.SetVerticalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetFocusedCell = function() {
    ///<summary>
    ///Gets information about a focused cell.
    ///</summary>
    ///<returns type = "ASPxClientGridViewCellInfo">
    ///An <see cref="ASPxClientGridViewCellInfo" /> object containing information about a focused cell.
    ///</returns>
};
BootstrapClientGridView.prototype.SetFocusedCell = function(rowVisibleIndex, columnIndex) {
    ///<summary>
    ///Focuses the specified cell.
    ///</summary>
    ///<param name = "rowVisibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of the row.
    ///</param>
    ///<param name = "columnIndex" type = "Int32">
    ///A zero-based index that identifies the column in the column collection (the column's Index property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.ShowCustomizationDialog = function() {
    ///<summary>
    ///Invokes the Customization Dialog and displays it over the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.SortBy = function(column) {
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.MoveColumn = function(column) {
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A String value that identifies the column to be hidden by the name of the data source field to which the column is bound, or by the column's name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<param name = "targetPosition" type = "ASPxClientGridColumnMovingTargetPosition">
    ///An ASPxClientGridColumnMovingTargetPosition enumeration value specifying the position relative to the target column in which to place the moved column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<param name = "targetPosition" type = "ASPxClientGridColumnMovingTargetPosition">
    ///An ASPxClientGridColumnMovingTargetPosition enumeration value specifying the position relative to the target column in which to place the moved column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "targetPosition" type = "ASPxClientGridColumnMovingTargetPosition">
    ///An ASPxClientGridColumnMovingTargetPosition enumeration value specifying the position relative to the target column in which to place the moved column.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true, to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true, to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "targetPosition" type = "ASPxClientGridColumnMovingTargetPosition">
    ///An ASPxClientGridColumnMovingTargetPosition enumeration value specifying the position relative to the target column in which to place the moved column.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true, to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true, to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.GroupBy = function(column) {
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.UnGroup = function(column) {
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.Ungroup = function(column) {
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of a specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///A ASPxClientGridViewColumn object that is the grid column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of a specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that is the column index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of a specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that is the column's FieldName or ID.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all group rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all group rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.ExpandAllDetailRows = function() {
    ///<summary>
    ///Expands all detail rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.CollapseAllDetailRows = function() {
    ///<summary>
    ///Collapses all detail rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.ExpandRow = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Expands the specified group row preserving the collapsed state of any child group row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Expands the specified group row and optionally child group rows at all nesting levels.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row.
    ///</param>
    ///<param name = "recursive" type = "Boolean" optional = "true">
    ///true to expand any child group rows at all nesting levels; false to preserve the collapsed state of any child group rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.CollapseRow = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Collapses the specified group row preserving the expanded state of child group rows.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Collapses the specified group row and optionally child group rows at all nesting levels.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<param name = "recursive" type = "Boolean" optional = "true">
    ///true to collapse child group rows at all nesting levels; false to preserve the expanded state of any child group row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.MakeRowVisible = function(visibleIndex) {
    ///<summary>
    ///Scrolls the view to the specified row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies a row by its visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.ExpandDetailRow = function(visibleIndex) {
    ///<summary>
    ///Expands the specified detail row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer index that identifies the detail row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.CollapseDetailRow = function(visibleIndex) {
    ///<summary>
    ///Collapses the specified detail row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer index that identifies the detail row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetRowKey = function(visibleIndex) {
    ///<summary>
    ///Returns the key value of the specified data row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "String">
    ///A string representing the specified data row's key value. If the index passed via the visibleIndex parameter is wrong, or the KeyFieldName property is not set, null is returned.
    ///</returns>
};
BootstrapClientGridView.prototype.StartEditRow = function(visibleIndex) {
    ///<summary>
    ///Switches the grid to edit mode.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer that identifies a data row to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.StartEditRowByKey = function(key) {
    ///<summary>
    ///Switches the grid to edit mode.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies a data row to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.IsNewRowEditing = function() {
    ///<summary>
    ///Indicates whether or not a new row is being edited.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the GridView is in edit mode for a new row; otherwise, false.
    ///</returns>
};
BootstrapClientGridView.prototype.AddNewRow = function() {
    ///<summary>
    ///Adds a new record.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.DeleteRow = function(visibleIndex) {
    ///<summary>
    ///Deletes the specified row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.DeleteRowByKey = function(key) {
    ///<summary>
    ///Deletes a row with the specified key value.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetFocusedRowIndex = function() {
    ///<summary>
    ///Returns the focused row's index.
    ///</summary>
    ///<returns type = "Int32">
    ///A zero-based integer that specifies the focused row's index.
    ///</returns>
};
BootstrapClientGridView.prototype.SetFocusedRowIndex = function(visibleIndex) {
    ///<summary>
    ///Moves focus to the specified row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the focused row's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.SelectRows = function() {
    ///<signature>
    ///<summary>
    ///Selects all the unselected rows within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified row displayed within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified rows within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data rows within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified rows within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data rows within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean">
    ///true to select the specified rows; false to deselect the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified row within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer zero-based index that identifies the data row within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientGridView.prototype.GetToolbarByName = function(name) {
    ///<summary>
    ///Returns a toolbar specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the toolbar name.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar with the specified name.
    ///</returns>
};
BootstrapClientGridView.prototype.GetToolbar = function(index) {
    ///<summary>
    ///Returns a grid's toolbar specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the toolbar object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar located at the specified index within the control's Toolbars collection.
    ///</returns>
};
BootstrapClientGridView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientGridView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientGridView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientGridView.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientGridView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientGridView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientGridView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientHyperLink.prototype.GetNavigateUrl = function() {
    ///<summary>
    ///Gets an URL which defines the navigation location for the editor's hyperlink.
    ///</summary>
    ///<returns type = "String">
    ///A string value which represents an URL to where the client web browser will navigate when a hyperlink in the editor is clicked.
    ///</returns>
};
BootstrapClientHyperLink.prototype.SetNavigateUrl = function(url) {
    ///<summary>
    ///Specifies an URL which defines the navigation location for the editor's hyperlink.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value which specifies an URL to where the client web browser will navigate when a hyperlink in the editor is clicked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientHyperLink.prototype.GetText = function() {
    ///<summary>
    ///Gets the text caption displayed for the hyperlink in the hyperlink editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text caption for the hyperlink in the editor.
    ///</returns>
};
BootstrapClientHyperLink.prototype.SetText = function(text) {
    ///<summary>
    ///Specifies the text caption displayed for the hyperlink in the hyperlink editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text caption for the hyperlink in the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientHyperLink.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientHyperLink.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientHyperLink.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientHyperLink.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientHyperLink.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientHyperLink.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientHyperLink.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientHyperLink.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientHyperLink.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientHyperLink.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientHyperLink.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientHyperLink.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientHyperLink.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientHyperLink.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientHyperLink.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientHyperLink.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientHyperLink.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientHyperLink.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientImage.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the image editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the editor.
    ///</returns>
};
BootstrapClientImage.prototype.SetImageUrl = function(url) {
    ///<summary>
    ///Sets the URL which points to the image displayed within the image editor.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value specifying the URL to the image displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientImage.prototype.SetSize = function(width, height) {
    ///<summary>
    ///Sets the size of the image displayed within the image editor.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the image's width.
    ///</param>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the image's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientImage.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientImage.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientImage.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientImage.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientImage.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientImage.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientImage.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientImage.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientImage.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientImage.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientImage.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientImage.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientImage.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientImage.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientImage.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientImage.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientImage.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientImage.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientListBox.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
BootstrapClientListBox.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the list box editor's item collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
BootstrapClientListBox.prototype.GetSelectedIndices = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items indices.
    ///</summary>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that represent the indices of the selected items.
    ///</returns>
};
BootstrapClientListBox.prototype.GetSelectedValues = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items values.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array of Object[] objects that represent the values of the selected items.
    ///</returns>
};
BootstrapClientListBox.prototype.GetSelectedItems = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientListEditItem">
    ///An array of ASPxClientListEditItem objects that represent the selected items.
    ///</returns>
};
BootstrapClientListBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all list box items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.UnselectAll = function() {
    ///<summary>
    ///Unselects all list box items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.SelectIndices = function(indices) {
    ///<summary>
    ///Selects the items with the specified indices within a list box.
    ///</summary>
    ///<param name = "indices" elementType = "Int32" type = "Array">
    ///An array of integer values that represent the items indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.UnselectIndices = function(indices) {
    ///<summary>
    ///Unselects an array of the list box items with the specified indices.
    ///</summary>
    ///<param name = "indices" elementType = "Int32" type = "Array">
    ///An array of integer values that represent the indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.SelectItems = function(items) {
    ///<summary>
    ///Selects the specified items within a list box.
    ///</summary>
    ///<param name = "items" elementType = "ASPxClientListEditItem" type = "Array">
    ///An array of ASPxClientListEditItem objects that represent the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.UnselectItems = function(items) {
    ///<summary>
    ///Unselects an array of the specified list box items.
    ///</summary>
    ///<param name = "items" elementType = "ASPxClientListEditItem" type = "Array">
    ///An array of ASPxClientListEditItem objects that represent the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.SelectValues = function(values) {
    ///<summary>
    ///Select the items with the specified values within a list box.
    ///</summary>
    ///<param name = "values" elementType = "Object" type = "Array">
    ///An array of Object[] objects that represent the item's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.UnselectValues = function(values) {
    ///<summary>
    ///Unselects an array of the list box items with the specified values.
    ///</summary>
    ///<param name = "values" elementType = "Object" type = "Array">
    ///An array of Object[] objects that represent the values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.MakeItemVisible = function(index) {
    ///<summary>
    ///Scrolls the editor's item list, so that the specified item becomes visible.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the item's index within the editor's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.InitOnContainerMadeVisible = function() {
    ///<summary>
    ///Initializes the ASPxClientListBox client object when its parent container becomes visible dynamically, on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.AddItem = function(text) {
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text and associated value, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the editor's items collection, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position to which the new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the editor's items collection, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
};
BootstrapClientListBox.prototype.InsertItem = function(index, text, value, imageUrl) {
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientListBox.prototype.BeginUpdate = function() {
    ///<summary>
    ///Prevents the client list box editor from being rendered until the EndUpdate method is called.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.EndUpdate = function() {
    ///<summary>
    ///Re-enables editor render operations after a call to the BeginUpdate method, and forces an immediate re-rendering.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.ClearItems = function() {
    ///<summary>
    ///Removes all items from the client list box editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.RemoveItem = function(index) {
    ///<summary>
    ///Removes an item specified by its index from the client list editor.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the index of the list item to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.FindItemByText = function(text) {
    ///<summary>
    ///Returns a list box item by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string that specifies the item's text.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the list box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
BootstrapClientListBox.prototype.FindItemByValue = function(value) {
    ///<summary>
    ///Returns a list box item by its value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object that specifies the item's value.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the list box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
BootstrapClientListBox.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server, and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.SetItemHtml = function(index, html) {
    ///<summary>
    ///Defines the HTML content for the specified list box item.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the list box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.SetItemTooltip = function(index, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the list box editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.AddItemCssClass = function(index, className) {
    ///<summary>
    ///Sets the CSS class for a list box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.RemoveItemCssClass = function(index, className) {
    ///<summary>
    ///Removes the CSS class from a list box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.SetItemTextCellHtml = function(itemIndex, textCellIndex, html) {
    ///<summary>
    ///Defines the HTML content for the specified list box item's text cell.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the list box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.SetItemTextCellTooltip = function(itemIndex, textCellIndex, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the text cell of the editor's item specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.AddItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Sets the CSS class for a list box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.RemoveItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Removes the CSS class from a list box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
BootstrapClientListBox.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
BootstrapClientListBox.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
BootstrapClientListBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
BootstrapClientListBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
BootstrapClientListBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientListBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientListBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientListBox.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientListBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientListBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientListBox.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientListBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientListBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientListBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetSelectedIndices = function() {
    ///<summary>
    ///Returns an array of the check box list editor's selected items indices.
    ///</summary>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that are the indices of the selected items.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetSelectedValues = function() {
    ///<summary>
    ///Returns an array of the check box list editor's selected items values.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array of <see cref="Object[]" /> objects that are the values of the selected items.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetSelectedItems = function() {
    ///<summary>
    ///Returns an array of the check box list editor's selected items.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientListEditItem">
    ///An array of ASPxClientListEditItem objects that are the selected items.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all check box list items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.UnselectAll = function() {
    ///<summary>
    ///Unselects all check box list items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SelectIndices = function(indices) {
    ///<summary>
    ///Selects items with the specified indices within a check box list.
    ///</summary>
    ///<param name = "indices" elementType = "Int32" type = "Array">
    ///An array of integer values that are the item indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SelectItems = function(items) {
    ///<summary>
    ///Selects the specified items within a check box list.
    ///</summary>
    ///<param name = "items" elementType = "ASPxClientListEditItem" type = "Array">
    ///An array of ASPxClientListEditItem objects that are the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SelectValues = function(values) {
    ///<summary>
    ///Selects items with the specified values within a check box list.
    ///</summary>
    ///<param name = "values" elementType = "Object" type = "Array">
    ///An array of Object[] objects that are the item values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.UnselectIndices = function(indices) {
    ///<summary>
    ///Unselects items with the specified indices within a check box list.
    ///</summary>
    ///<param name = "indices" elementType = "Int32" type = "Array">
    ///An array of integer values that are the item indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.UnselectItems = function(items) {
    ///<summary>
    ///Unselects the specified items within a check box list.
    ///</summary>
    ///<param name = "items" elementType = "ASPxClientListEditItem" type = "Array">
    ///An array of ASPxClientListEditItem objects that are the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.UnselectValues = function(values) {
    ///<summary>
    ///Unselects items with the specified values within a check box list.
    ///</summary>
    ///<param name = "values" elementType = "Object" type = "Array">
    ///An array of Object[] objects that are the item values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value specifying the total number of items in the editor's item collection.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An <see cref="ASPxClientListEditItem" /> object that is the item located at the specified index.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientCheckBoxList.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value specifying the total number of items in the editor's item collection.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An <see cref="ASPxClientListEditItem" /> object that is the item located at the specified index.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientRadioButtonList.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientMenu.prototype.GetOrientation = function() {
    ///<summary>
    ///Gets a value specifying the menu orientation.
    ///</summary>
    ///<returns type = "String">
    ///'Vertical' if the menu is oriented vertically; 'Horizontal'  if the menu is oriented horizontally.
    ///</returns>
};
BootstrapClientMenu.prototype.SetOrientation = function(orientation) {
    ///<summary>
    ///Sets the menu orientation.
    ///</summary>
    ///<param name = "orientation" type = "String">
    ///'Vertical' to orient the menu vertically; 'Horizontal' to orient the menu horizontally.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMenu.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of menu items at the root menu level.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of the root menu items.
    ///</returns>
};
BootstrapClientMenu.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the menu's root menu item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the root menu item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An Items collection.
    ///</returns>
};
BootstrapClientMenu.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns a menu item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the menu item.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the menu item with the specified name.
    ///</returns>
};
BootstrapClientMenu.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the selected item within the menu control.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the selected menu item.
    ///</returns>
};
BootstrapClientMenu.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Selects the specified menu item within a menu control on the client side.
    ///</summary>
    ///<param name = "item" type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object specifying the menu item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMenu.prototype.GetRootItem = function() {
    ///<summary>
    ///Returns a root menu item.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object representing a root menu item.
    ///</returns>
};
BootstrapClientMenu.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientMenu.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientMenu.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMenu.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMenu.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMenu.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientMenu.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMenu.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientMenu.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMenu.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientMenu.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMenu.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientPager.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientPager.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientPager.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPager.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPager.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPager.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientPager.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPager.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientPager.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPager.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientPager.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPager.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetPopupElementCssSelector = function(selector) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "selector" type = "String">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetMainElement = function() {
    ///<signature>
    ///<summary>
    ///This method is not in effect for a ASPxClientPopupControl object.
    ///</summary>
    ///<returns type = "Object">
    ///Always null.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
    ///</signature>
};
BootstrapClientPopupControl.prototype.GetPopUpReasonMouseEvent = function() {
    ///<summary>
    ///Returns an object containing the information about a mouse event that invoked a default popup window.
    ///</summary>
    ///<returns type = "Object">
    ///An object containing the information about the mouse event.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowPopUpReasonMouseEvent = function(window) {
    ///<summary>
    ///Returns an object containing the information about a mouse event that invoked the specified popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Object">
    ///An object containing the information about the mouse event.
    ///</returns>
};
BootstrapClientPopupControl.prototype.PerformWindowCallback = function(window, parameter) {
    ///<signature>
    ///<summary>
    ///
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///
    ///</param>
    ///<param name = "parameter" type = "String">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with parameters to update the popup window by processing the related popup window and the passed information on the server.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object identifying the processed popup window.
    ///</param>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientPopupControl.prototype.SetSize = function(width, height) {
    ///<summary>
    ///Specifies the default popup window's size.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the default popup window's width.
    ///</param>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the default popup window's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowContentWidth = function(window) {
    ///<summary>
    ///Gets the width of the specified popup window's content region.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the width of the content region.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowContentHeight = function(window) {
    ///<summary>
    ///Gets the height of the specified popup window's content region.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the height of the content region.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowHeight = function(window) {
    ///<summary>
    ///Returns the height of a specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the specified popup window's height.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowWidth = function(window) {
    ///<summary>
    ///Returns the width of a specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the specified popup window's width.
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetWindowSize = function(window, width, height) {
    ///<summary>
    ///Specifies the size of a specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the required popup window's width.
    ///</param>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the required popup window's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetContentHTML = function() {
    ///<summary>
    ///Returns the HTML code that is the content of the popup control's default popup window.
    ///</summary>
    ///<returns type = "String">
    ///A string that is the default popup window's HTML content.
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetContentHTML = function(html) {
    ///<summary>
    ///Defines the HTML content for the popup control's default popup window.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetWindowPopupElementID = function(window, popupElementId) {
    ///<summary>
    ///Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup control's window is associated.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object representing a popup control's window.
    ///</param>
    ///<param name = "popupElementId" type = "String">
    ///A string value specifying the ID (or a list of IDs) of the web control or HTML element with which the popup control's window is associated.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetPopupElementID = function(popupElementId) {
    ///<summary>
    ///Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup control is associated.
    ///</summary>
    ///<param name = "popupElementId" type = "String">
    ///A string value specifying the ID (or a list of IDs) of the web control or HTML element to which the popup control is associated.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetCurrentPopupElementIndex = function() {
    ///<summary>
    ///Returns an index of the object that invoked the default window within the PopupElementID list.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that is the zero-based position of the object's ID within the PopupElementID list.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowCurrentPopupElementIndex = function(window) {
    ///<summary>
    ///Returns an index of the object that invoked the specified popup window, within the window's PopupElementID list.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that is the zero-based position of object's ID within the PopupElementID list.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetCurrentPopupElement = function() {
    ///<summary>
    ///Returns an object that invoked the default window.
    ///</summary>
    ///<returns type = "Object">
    ///An object that invoked the default window.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowCurrentPopupElement = function(window) {
    ///<summary>
    ///Returns an object that invoked the specified popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Object">
    ///An object that invoked the specified window.
    ///</returns>
};
BootstrapClientPopupControl.prototype.IsWindowVisible = function(window) {
    ///<summary>
    ///Returns a value that specifies whether the popup control's specific window is displayed.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window whose visibility is checked.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified popup window is displayed; otherwise, false.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindow = function(index) {
    ///<summary>
    ///Returns a popup window specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the popup window object to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientPopupWindow">
    ///An Windows collection.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowByName = function(name) {
    ///<summary>
    ///Returns a popup window specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the popup window.
    ///</param>
    ///<returns type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that represents the popup window with the specified name.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowCount = function() {
    ///<summary>
    ///Returns the number of popup windows in the popup control.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of popup windows in the popup control.
    ///</returns>
};
BootstrapClientPopupControl.prototype.ShowWindow = function(window) {
    ///<signature>
    ///<summary>
    ///Invokes the popup control's specific window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the specified popup window at the popup element with the specified index.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "popupElementIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the popup element within the window's PopupElementID list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientPopupControl.prototype.ShowWindowAtElement = function(window, htmlElement) {
    ///<summary>
    ///Invokes the popup control's specific window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element relative to whose position the default popup window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.ShowWindowAtElementByID = function(window, id) {
    ///<summary>
    ///Invokes the popup control's specific window and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<param name = "id" type = "String">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the default popup window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.ShowWindowAtPos = function(window, x, y) {
    ///<summary>
    ///Invokes the popup control's specific popup window at the specified position.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<param name = "x" type = "Int32">
    ///A integer value specifying the x-coordinate of the popup window's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///A integer value specifying the y-coordinate of the popup window's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.BringWindowToFront = function(window) {
    ///<summary>
    ///Brings the specified popup window to the front of the z-order.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.HideWindow = function(window) {
    ///<summary>
    ///Closes the popup control's specified window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to close.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowContentHtml = function(window) {
    ///<summary>
    ///Returns the HTML code that represents the contents of the specified popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "String">
    ///A string that represents the specified popup window's HTML content.
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetWindowContentHtml = function(window, html) {
    ///<summary>
    ///Defines the HTML content for a specific popup window within the popup control.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that represents the HTML code defining the content of the specified popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowContentIFrame = function(window) {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the specified popup window's SetWindowContentUrl client method).
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the specified popup window.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowContentUrl = function(window) {
    ///<summary>
    ///Returns the URL pointing to the web page displayed within the control's specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<returns type = "String">
    ///A string value representing the URL to the web page displayed within the specified popup window.
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetWindowContentUrl = function(window, url) {
    ///<summary>
    ///Sets the URL pointing to the web page that should be loaded into and displayed within the control's specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<param name = "url" type = "String">
    ///A string value specifying the URL to the web page to be displayed within the specified popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowPinned = function(window) {
    ///<summary>
    ///Returns a value indicating whether the specified window is pinned.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the window is pinned; otherwise, false.
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetWindowPinned = function(window, value) {
    ///<summary>
    ///Sets a value indicating whether the specified window is pinned.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true to pin the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowMaximized = function(window) {
    ///<summary>
    ///Returns a value indicating whether the specified window is maximized.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the window is maximized; otherwise, false.
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetWindowMaximized = function(window, value) {
    ///<summary>
    ///Sets a value indicating whether the specified window is maximized.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true to maximize the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWindowCollapsed = function(window) {
    ///<summary>
    ///Returns a value indicating whether the specified window is collapsed.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the window is collapsed; otherwise, false.
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetWindowCollapsed = function(window, value) {
    ///<summary>
    ///Sets a value indicating whether the specified window is collapsed.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true to collapse the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.RefreshWindowContentUrl = function(window) {
    ///<summary>
    ///Refreshes the content of the web page displayed within the control's specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.UpdatePosition = function() {
    ///<summary>
    ///Updates the default popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.UpdatePositionAtElement = function(htmlElement) {
    ///<summary>
    ///Updates the default popup window's position, to correctly align it at the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element to which the default popup window is aligned using the PopupVerticalAlign properties.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.UpdateWindowPosition = function(window) {
    ///<summary>
    ///Updates the specified popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.UpdateWindowPositionAtElement = function(window, htmlElement) {
    ///<summary>
    ///Updates the specified popup window's position, to correctly align it at the specified HTML element.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element to which the specified popup window is aligned using the PopupVerticalAlign properties.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.RefreshPopupElementConnection = function() {
    ///<summary>
    ///Refreshes the connection between the ASPxPopupControl and the popup element.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a control's window size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.BringToFront = function() {
    ///<summary>
    ///Brings the window to the front of the z-order.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetCollapsed = function() {
    ///<summary>
    ///Returns a value indicating whether the window is collapsed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is collapsed; otherwise, false.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that specifies the contents of the control's window.
    ///</summary>
    ///<returns type = "String">
    ///A string that specifies the window's HTML content.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetContentIFrame = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the control.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetContentIFrameWindow = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the control's window.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetContentUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the web page displayed within the control's window.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetFooterImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window footer by default.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetFooterNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetFooterText = function() {
    ///<summary>
    ///Returns the text displayed within a window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies a window's footer text.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetHeaderImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetHeaderNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within a window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies a window's header text.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetContentWidth = function() {
    ///<summary>
    ///Gets the width of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the width of the content region.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetContentHeight = function() {
    ///<summary>
    ///Gets the height of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the height of the content region.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetMaximized = function() {
    ///<summary>
    ///Returns a value indicating whether the window is maximized.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is maximized; otherwise, false.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetPinned = function() {
    ///<summary>
    ///Returns a value indicating whether the window is pinned.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is pinned; otherwise, false.
    ///</returns>
};
BootstrapClientPopupControl.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side WindowCallback event, passing the specified argument to it.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that is any information that needs to be sent to the server-side WindowCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.RefreshContentUrl = function() {
    ///<summary>
    ///Refreshes the content of the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetCollapsed = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is collapsed.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, to collapse the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML markup specifying the contents of the control's window.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetContentUrl = function(url) {
    ///<summary>
    ///Sets the URL to point to the web page that should be loaded into, and displayed within the control's window.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value specifying the URL to the web page displayed within the control's window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetFooterImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window footer by default.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetFooterNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetFooterText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies a window's footer text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetHeaderImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetHeaderNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetHeaderText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies a window's header text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetMaximized = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is maximized.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true. to maximize the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetPinned = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is pinned.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, to pin the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.Show = function() {
    ///<signature>
    ///<summary>
    ///Invokes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the control's window at the popup element with the specified index.
    ///</summary>
    ///<param name = "popupElementIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the popup element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientPopupControl.prototype.ShowAtElement = function(htmlElement) {
    ///<summary>
    ///Invokes the control's window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.ShowAtElementByID = function(id) {
    ///<summary>
    ///Invokes the control's window and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the control's window at the specified position.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///A integer value specifying the x-coordinate of the window's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///A integer value specifying the y-coordinate of the window's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.Hide = function() {
    ///<summary>
    ///Closes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.IsVisible = function() {
    ///<summary>
    ///Returns a value that specifies whether the control's window is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the window is displayed; otherwise, false.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientPopupControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientPopupMenu.prototype.SetPopupElementCssSelector = function(selector) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "selector" type = "String">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.SetPopupElementID = function(popupElementId) {
    ///<summary>
    ///Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup menu is associated.
    ///</summary>
    ///<param name = "popupElementId" type = "String">
    ///A string value specifying the ID (or a list of IDs) of the web control or HTML element with which the popup menu is associated.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.GetCurrentPopupElementIndex = function() {
    ///<summary>
    ///Returns an index of the object that invoked the popup menu within the PopupElementID list.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that is the zero-based position of the object's ID within the PopupElementID list.
    ///</returns>
};
BootstrapClientPopupMenu.prototype.GetCurrentPopupElement = function() {
    ///<summary>
    ///Returns an object that invoked the popup menu.
    ///</summary>
    ///<returns type = "Object">
    ///An object that invoked the popup menu.
    ///</returns>
};
BootstrapClientPopupMenu.prototype.RefreshPopupElementConnection = function() {
    ///<summary>
    ///Refreshes the connection between the ASPxPopupMenu and the popup element.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.Hide = function() {
    ///<summary>
    ///Hides the popup menu.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.Show = function() {
    ///<signature>
    ///<summary>
    ///Invokes the popup menu.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the popup menu at the popup element with the specified index.
    ///</summary>
    ///<param name = "popupElementIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the popup element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientPopupMenu.prototype.ShowAtElement = function(htmlElement) {
    ///<summary>
    ///Invokes the popup menu and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element relative to which position the popup menu is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.ShowAtElementByID = function(id) {
    ///<summary>
    ///Invokes the popup menu and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to which position the popup menu is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the popup menu at the specified position.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer value specifying the x-coordinate of the popup menu's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer value specifying the y-coordinate of the popup menu's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of menu items at the root menu level.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of the root menu items.
    ///</returns>
};
BootstrapClientPopupMenu.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the menu's root menu item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the root menu item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An Items collection.
    ///</returns>
};
BootstrapClientPopupMenu.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns a menu item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the menu item.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the menu item with the specified name.
    ///</returns>
};
BootstrapClientPopupMenu.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the selected item within the menu control.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the selected menu item.
    ///</returns>
};
BootstrapClientPopupMenu.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Selects the specified menu item within a menu control on the client side.
    ///</summary>
    ///<param name = "item" type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object specifying the menu item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.GetRootItem = function() {
    ///<summary>
    ///Returns a root menu item.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object representing a root menu item.
    ///</returns>
};
BootstrapClientPopupMenu.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientPopupMenu.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientPopupMenu.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientPopupMenu.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientPopupMenu.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientPopupMenu.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPopupMenu.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientProgressBar.prototype.SetPosition = function(position) {
    ///<summary>
    ///Sets the position of the operation's progress.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the progress position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.GetPosition = function() {
    ///<summary>
    ///Gets the position of the operation's progress.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the progress position.
    ///</returns>
};
BootstrapClientProgressBar.prototype.SetCustomDisplayFormat = function(text) {
    ///<summary>
    ///Sets the pattern used to format the displayed text for the progress bar.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A  value that is the format pattern.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.GetDisplayText = function() {
    ///<summary>
    ///Returns the text displayed within the progress bar.
    ///</summary>
    ///<returns type = "String">
    ///A <see cref="String" /> value that is the text displayed within the editor.
    ///</returns>
};
BootstrapClientProgressBar.prototype.GetPercent = function() {
    ///<summary>
    ///Sets the percentage representation of the progress position.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the progress position as a percentage.
    ///</returns>
};
BootstrapClientProgressBar.prototype.SetMinimum = function(min) {
    ///<summary>
    ///Sets the minimum range value of the progress bar.
    ///</summary>
    ///<param name = "min" type = "Int32">
    ///An integer value specifying the minimum value of the progress bar range.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.SetMaximum = function(max) {
    ///<summary>
    ///Sets the maximum range value of the progress bar.
    ///</summary>
    ///<param name = "max" type = "Int32">
    ///An integer value specifying the maximum value of the progress bar range.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.GetMinimum = function() {
    ///<summary>
    ///Gets the minimum range value of the progress bar.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the minimum value of the progress bar range.
    ///</returns>
};
BootstrapClientProgressBar.prototype.GetMaximum = function() {
    ///<summary>
    ///Gets the maximum range value of the progress bar.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the maximum value of the progress bar range.
    ///</returns>
};
BootstrapClientProgressBar.prototype.SetMinMaxValues = function(minValue, maxValue) {
    ///<summary>
    ///Sets the minimum and maximum range values of the progress bar.
    ///</summary>
    ///<param name = "minValue" type = "Int32">
    ///An integer value specifying the minimum value of the progress bar range.
    ///</param>
    ///<param name = "maxValue" type = "Int32">
    ///An integer value specifying the maximum value of the progress bar range.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientProgressBar.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientProgressBar.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientProgressBar.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientProgressBar.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientProgressBar.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientProgressBar.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientProgressBar.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientProgressBar.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientProgressBar.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetValue = function(number) {
    ///<signature>
    ///<summary>
    ///Specifies the value of the spin edit control on the client side.
    ///</summary>
    ///<param name = "number" type = "Decimal">
    ///A Decimal value specifying the control value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientSpinEdit.prototype.SetNumber = function(number) {
    ///<summary>
    ///Sets the spin editor's value.
    ///</summary>
    ///<param name = "number" type = "Decimal">
    ///A decimal number specifying the value to assign to the spin editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetNumber = function() {
    ///<summary>
    ///Gets a number which represents the spin editor's value.
    ///</summary>
    ///<returns type = "Decimal">
    ///A decimal number representing the value of the spin editor.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetText = function() {
    ///<signature>
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text within the editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
    ///</signature>
};
BootstrapClientSpinEdit.prototype.SetMinValue = function(value) {
    ///<summary>
    ///Sets the minimum value of the editor.
    ///</summary>
    ///<param name = "value" type = "Decimal">
    ///A decimal value specifying the minimum value of the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetMinValue = function() {
    ///<summary>
    ///Gets the minimum value of the editor.
    ///</summary>
    ///<returns type = "Decimal">
    ///A Decimal value representing the minimum value of the editor.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetMaxValue = function(value) {
    ///<summary>
    ///Sets the maximum value of the editor.
    ///</summary>
    ///<param name = "value" type = "Decimal">
    ///A decimal value specifying the maximum value of the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetMaxValue = function() {
    ///<summary>
    ///Gets the maximum value of the editor.
    ///</summary>
    ///<returns type = "Decimal">
    ///A Decimal value representing the maximum value of the editor.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientSpinEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientSpinEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientTabControl.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a tab page's size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTabControl.prototype.GetActiveTab = function() {
    ///<summary>
    ///Returns the active tab within the tab control.
    ///</summary>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the active tab.
    ///</returns>
};
BootstrapClientTabControl.prototype.SetActiveTab = function(tab) {
    ///<summary>
    ///Makes the specified tab active within the tab control on the client side.
    ///</summary>
    ///<param name = "tab" type = "ASPxClientTab">
    ///An ASPxClientTab object specifying the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTabControl.prototype.GetActiveTabIndex = function() {
    ///<summary>
    ///Returns the index of the active tab within the tab control.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer that represents the active tab's index.
    ///</returns>
};
BootstrapClientTabControl.prototype.SetActiveTabIndex = function(index) {
    ///<summary>
    ///Makes a tab active within the tab control, specifying the tab's index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the index of the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTabControl.prototype.GetTabCount = function() {
    ///<summary>
    ///Returns the number of tabs in the ASPxTabControl.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of tabs in the control.
    ///</returns>
};
BootstrapClientTabControl.prototype.GetTab = function(index) {
    ///<summary>
    ///Returns a tab specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the tab object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An Tabs collection.
    ///</returns>
};
BootstrapClientTabControl.prototype.GetTabByName = function(name) {
    ///<summary>
    ///Returns a tab specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the tab.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the tab with the specified name.
    ///</returns>
};
BootstrapClientTabControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientTabControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientTabControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTabControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTabControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTabControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientTabControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTabControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientTabControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTabControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientTabControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTabControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientPageControl.prototype.GetTabContentHTML = function(tab) {
    ///<summary>
    ///Returns the HTML code that represents the contents of the specified page within the page control.
    ///</summary>
    ///<param name = "tab" type = "ASPxClientTab">
    ///An ASPxClientTab object that specifies the required page.
    ///</param>
    ///<returns type = "String">
    ///A string that represents the specified page's HTML content.
    ///</returns>
};
BootstrapClientPageControl.prototype.SetTabContentHTML = function(tab, html) {
    ///<summary>
    ///Defines the HTML content for a specific tab page within the page control.
    ///</summary>
    ///<param name = "tab" type = "ASPxClientTab">
    ///An ASPxClientTab object that specifies the required tab page.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that represents the HTML code defining the content of the specified page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPageControl.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientPageControl.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a tab page's size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPageControl.prototype.GetActiveTab = function() {
    ///<summary>
    ///Returns the active tab within the tab control.
    ///</summary>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the active tab.
    ///</returns>
};
BootstrapClientPageControl.prototype.SetActiveTab = function(tab) {
    ///<summary>
    ///Makes the specified tab active within the tab control on the client side.
    ///</summary>
    ///<param name = "tab" type = "ASPxClientTab">
    ///An ASPxClientTab object specifying the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPageControl.prototype.GetActiveTabIndex = function() {
    ///<summary>
    ///Returns the index of the active tab within the tab control.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer that represents the active tab's index.
    ///</returns>
};
BootstrapClientPageControl.prototype.SetActiveTabIndex = function(index) {
    ///<summary>
    ///Makes a tab active within the tab control, specifying the tab's index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the index of the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPageControl.prototype.GetTabCount = function() {
    ///<summary>
    ///Returns the number of tabs in the ASPxTabControl.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of tabs in the control.
    ///</returns>
};
BootstrapClientPageControl.prototype.GetTab = function(index) {
    ///<summary>
    ///Returns a tab specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the tab object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An Tabs collection.
    ///</returns>
};
BootstrapClientPageControl.prototype.GetTabByName = function(name) {
    ///<summary>
    ///Returns a tab specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the tab.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the tab with the specified name.
    ///</returns>
};
BootstrapClientPageControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientPageControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientPageControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPageControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPageControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPageControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientPageControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPageControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientPageControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPageControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientPageControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientPageControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientTextBox.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
BootstrapClientTextBox.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
BootstrapClientTextBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
BootstrapClientTextBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
BootstrapClientTextBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientTextBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientTextBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientTextBox.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientTextBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientTextBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientTextBox.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientTextBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientTextBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTextBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientMemo.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
BootstrapClientMemo.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
BootstrapClientMemo.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
BootstrapClientMemo.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
BootstrapClientMemo.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientMemo.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientMemo.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientMemo.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientMemo.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientMemo.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientMemo.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientMemo.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientMemo.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientMemo.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
BootstrapClientButtonEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
BootstrapClientButtonEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
BootstrapClientButtonEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientButtonEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientButtonEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientButtonEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientTreeView.prototype.GetNode = function(index) {
    ///<summary>
    ///Returns a node specified by its index within the ASPxTreeView's node collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the node to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object, representing the node located at the specified index within the ASPxTreeView's node collection.
    ///</returns>
};
BootstrapClientTreeView.prototype.GetNodeByName = function(name) {
    ///<summary>
    ///Returns a node specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the node with the specified name.
    ///</returns>
};
BootstrapClientTreeView.prototype.GetNodeByText = function(text) {
    ///<summary>
    ///Returns a node specified by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text content of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the node with the specified node's text content.
    ///</returns>
};
BootstrapClientTreeView.prototype.GetNodeCount = function() {
    ///<summary>
    ///Returns the number of nodes at the ASPxTreeView's zero level.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of the root node child nodes.
    ///</returns>
};
BootstrapClientTreeView.prototype.GetSelectedNode = function() {
    ///<summary>
    ///Returns the selected node within the ASPxTreeView control on the client side.
    ///</summary>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the selected node.
    ///</returns>
};
BootstrapClientTreeView.prototype.SetSelectedNode = function(node) {
    ///<summary>
    ///Selects the specified node within the ASPxTreeView control on the client side.
    ///</summary>
    ///<param name = "node" type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object specifying the node to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTreeView.prototype.GetRootNode = function() {
    ///<summary>
    ///Gets the root node of the ASPxTreeView object.
    ///</summary>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object representing a root node.
    ///</returns>
};
BootstrapClientTreeView.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all nodes in the ASPxTreeView on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTreeView.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all nodes in the ASPxTreeView on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTreeView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientTreeView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientTreeView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTreeView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTreeView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTreeView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientTreeView.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTreeView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientTreeView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTreeView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientTreeView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientTreeView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapUIWidgetBase.prototype.GetInstance = function() {
    ///<returns type = "Object">
    ///</returns>
};
BootstrapUIWidgetBase.prototype.SetOptions = function(options) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetBase.prototype.ExportTo = function(format, fileName) {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetBase.prototype.Print = function() {
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapUIWidgetBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapUIWidgetBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapUIWidgetBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapUIWidgetBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapUIWidgetBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapUIWidgetBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
BootstrapClientUploadControl.prototype.IsAdvancedModeEnabled = function() {
    ///<summary>
    ///Specifies whether the upload control's Advanced mode is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the Advanced mode is enbaled; otherwise, false.
    ///</returns>
};
BootstrapClientUploadControl.prototype.UploadFile = function() {
    ///<summary>
    ///Initiates uploading of the specified file to the web server's memory.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.AddFileInput = function() {
    ///<summary>
    ///Adds a new file input element to the ASPxUploadControl.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.RemoveFileInput = function(index) {
    ///<summary>
    ///Removes a file input element from the ASPxUploadControl.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents a file input element's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.RemoveFileFromSelection = function(fileIndex) {
    ///<signature>
    ///<summary>
    ///Removes a file with the specified index from the selected file list.
    ///</summary>
    ///<param name = "fileIndex" type = "Int32">
    ///An integer value that is the zero-based index of an item in the file list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Removes the specified file from the list of files selected for uploading in the upload control.
    ///</summary>
    ///<param name = "file" type = "ASPxClientUploadControlFile">
    ///An ASPxClientUploadControl object that is the file to be removed from the list of files.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
BootstrapClientUploadControl.prototype.GetSelectedFiles = function(inputIndex) {
    ///<summary>
    ///Returns files selected for uploading within the specified file input.
    ///</summary>
    ///<param name = "inputIndex" type = "Int32">
    ///An integer value that specifies the index of a file input. Default value is "0".
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientUploadControlFile">
    ///An array of ASPxClientUploadControlFile objects that are files selected for uploading.
    ///</returns>
};
BootstrapClientUploadControl.prototype.GetText = function(index) {
    ///<summary>
    ///Gets the text displayed within the edit box of the specified file input element.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the required file input element's index.
    ///</param>
    ///<returns type = "String">
    ///A string value representing the displayed text.
    ///</returns>
};
BootstrapClientUploadControl.prototype.GetFileInputCount = function() {
    ///<summary>
    ///Gets the number of file input elements contained within the ASPxUploadControl.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the total number of file input elements.
    ///</returns>
};
BootstrapClientUploadControl.prototype.SetFileInputCount = function(count) {
    ///<summary>
    ///Specifies the count of the file input elements within the upload control.
    ///</summary>
    ///<param name = "count" type = "Int32">
    ///An integer value that specifies the file input elements count.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Specifies whether the upload control is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true, to enable the upload control; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether the upload control is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the control is enabled; otherwise false.
    ///</returns>
};
BootstrapClientUploadControl.prototype.Upload = function() {
    ///<summary>
    ///Initiates uploading of the specified file(s) to the web server's memory.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.Cancel = function() {
    ///<summary>
    ///Cancels the initiated file uploading process.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.ClearText = function() {
    ///<summary>
    ///Clears the file selection in the upload control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.SetAddButtonText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the add button.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.SetUploadButtonText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the upload button.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.GetAddButtonText = function() {
    ///<summary>
    ///Returns the text displayed within the add button.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the button.
    ///</returns>
};
BootstrapClientUploadControl.prototype.GetUploadButtonText = function() {
    ///<summary>
    ///Returns the text displayed within the upload button.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the button.
    ///</returns>
};
BootstrapClientUploadControl.prototype.SetDialogTriggerID = function(ids) {
    ///<summary>
    ///Sets the ID of a web control or HTML element (or a list of IDs), a click on which invokes file upload dialog.
    ///</summary>
    ///<param name = "ids" type = "String">
    ///A string value specifying the ID or a list of IDs separated by the semicolon (;).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
BootstrapClientUploadControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
BootstrapClientUploadControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
BootstrapClientUploadControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
BootstrapClientUploadControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
BootstrapClientUploadControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
BootstrapClientUploadControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientCalendar.prototype.IsDateSelected = function(date) {
    ///<summary>
    ///Tests whether the specified date is selected.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A date-time value that specifies the date to test.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified date is selected; otherwise, false.
    ///</returns>
};
MVCxClientCalendar.prototype.SetVisibleDate = function(date) {
    ///<summary>
    ///Sets the date that specifies the month and year to be displayed in the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///The date that specifies calendar's visible month and year.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.SetSelectedDate = function(date) {
    ///<summary>
    ///Sets the calendar's selected date.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A date object that specifies the calendar's selected date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.GetSelectedDate = function() {
    ///<summary>
    ///Returns the calendar's selected date.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date object that represents the calendar's selected date.
    ///</returns>
};
MVCxClientCalendar.prototype.GetVisibleDate = function() {
    ///<summary>
    ///Gets the date that determines the month and year that are currently displayed in the calendar.
    ///</summary>
    ///<returns type = "DateTime">
    ///The date that represents the calendar's visible month and year.
    ///</returns>
};
MVCxClientCalendar.prototype.SelectDate = function(date) {
    ///<summary>
    ///Selects the specified date within the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A date-time value that specifies the selected date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.SelectRange = function(start, end) {
    ///<summary>
    ///Selects the specified range of dates within the calendar.
    ///</summary>
    ///<param name = "start" type = "DateTime">
    ///A date-time value that specifies the range's first date.
    ///</param>
    ///<param name = "end" type = "DateTime">
    ///A date-time value that specifies the range's last date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.DeselectDate = function(date) {
    ///<summary>
    ///Deselects the specified date within the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A date-time value that specifies the date to deselect.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.DeselectRange = function(start, end) {
    ///<summary>
    ///Deselects the specified range of dates within the calendar.
    ///</summary>
    ///<param name = "start" type = "DateTime">
    ///A date-time value that specifies the range's first date.
    ///</param>
    ///<param name = "end" type = "DateTime">
    ///A date-time value that specifies the range's last date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.ClearSelection = function() {
    ///<summary>
    ///Deselects all the selected dates within the calendar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.GetSelectedDates = function() {
    ///<summary>
    ///Returns a list of dates which are selected within the calendar.
    ///</summary>
    ///<returns elementType = "DateTime" type = "Array">
    ///An array of date objects that represents the list of the calendar's selected dates.
    ///</returns>
};
MVCxClientCalendar.prototype.GetMinDate = function() {
    ///<summary>
    ///Gets the minimum date on the calendar.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date-time object representing the minimum date.
    ///</returns>
};
MVCxClientCalendar.prototype.SetMinDate = function(date) {
    ///<summary>
    ///Sets the minimum date of the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object representing the minimum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.GetMaxDate = function() {
    ///<summary>
    ///Gets the maximum date on the calendar.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date-time object representing the maximum date.
    ///</returns>
};
MVCxClientCalendar.prototype.SetMaxDate = function(date) {
    ///<summary>
    ///Sets the maximum date of the calendar.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object representing the maximum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
MVCxClientCalendar.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
MVCxClientCalendar.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
MVCxClientCalendar.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
MVCxClientCalendar.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
MVCxClientCalendar.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
MVCxClientCalendar.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientCalendar.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientCalendar.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientCalendar.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientCalendar.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientCalendar.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCalendar.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the Callback Panel by processing the passed information on the server, in an Action specified by the Callback Panel's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the Callback Panel by processing the passed information on the server, in an Action specified by the Callback Panel's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCallbackPanel.prototype.GetLoadingPanelText = function() {
    ///<summary>
    ///Returns the text displayed within the control's loading panel.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the button.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetLoadingPanelText = function(loadingPanelText) {
    ///<summary>
    ///Sets the text to be displayed within the control's loading panel.
    ///</summary>
    ///<param name = "loadingPanelText" type = "String">
    ///A string value specifying the text to be displayed within the loading panel.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetEnabled = function(enabled) {
    ///<signature>
    ///<summary>
    ///Sets a value specifying whether the callback panel is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true, to enable the callback panel; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets a value specifying whether the panel is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true to enable the panel; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCallbackPanel.prototype.GetEnabled = function() {
    ///<signature>
    ///<summary>
    ///Returns a value specifying whether a callback panel is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the callback panel is enabled; otherwise, false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns a value specifying whether a panel is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is enabled; otherwise, false.
    ///</returns>
    ///</signature>
};
MVCxClientCallbackPanel.prototype.Toggle = function() {
    ///<summary>
    ///Expands or collapses the client panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.IsExpandable = function() {
    ///<summary>
    ///Returns a value specifying whether the panel can be expanded.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is expandable; otherwise, false.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.IsExpanded = function() {
    ///<summary>
    ///Returns a value specifying whether the panel is expanded.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is expanded; otherwise, false.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.Expand = function() {
    ///<summary>
    ///Expands the collapsed panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.Collapse = function() {
    ///<summary>
    ///Collapses the expanded panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that is the content of the panel.
    ///</summary>
    ///<returns type = "String">
    ///A string that is the panel's HTML content.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML content for the panel.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the panel.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientCallbackPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCallbackPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientCardView.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the CardView by processing the passed information on the server, in an Action specified via the CardView's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CardView's CustomActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the CardView by processing the passed information on the server, in an Action specified via the CardView's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CardView's CustomActionRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing the specified argument to it.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.GetValuesOnCustomCallback = function(data, onCallback) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to process the passed information on the server, in an Action specified via the CardView's CustomDataActionRouteValues property, and then process the returned result in the specified client function. This method does not update the CardView.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientCardViewValuesCallback">
    ///A ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the information on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientCardViewValuesCallback">
    ///An ASPxClientCardViewValuesCallback object that is the JavaScript function which receives the information on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.GetEditValue = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column within the grid's column collection.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.FocusEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited card.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited card.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited card.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.SetEditValue = function(column, value) {
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column within the grid's column collection.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.ShowFilterControl = function() {
    ///<summary>
    ///Displays the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.CloseFilterControl = function() {
    ///<summary>
    ///Hides the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.SetFilterEnabled = function(isFilterEnabled) {
    ///<summary>
    ///Enables or disables the current filter.
    ///</summary>
    ///<param name = "isFilterEnabled" type = "Boolean">
    ///true to enable the current filter; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetVerticalScrollPosition = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</returns>
};
MVCxClientCardView.prototype.SetVerticalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetFocusedCell = function() {
    ///<summary>
    ///Gets information about a focused cell.
    ///</summary>
    ///<returns type = "ASPxClientCardViewCellInfo">
    ///An <see cref="ASPxClientCardViewCellInfo" /> object containing information about a focused cell.
    ///</returns>
};
MVCxClientCardView.prototype.SetFocusedCell = function(cardVisibleIndex, columnIndex) {
    ///<summary>
    ///Focuses the specified cell.
    ///</summary>
    ///<param name = "cardVisibleIndex" type = "Int32">
    ///An  value that specifies the visible index of the card.
    ///</param>
    ///<param name = "columnIndex" type = "Int32">
    ///A zero-based index that identifies the column in the column collection (the column's Index property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.SortBy = function(column) {
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.MoveColumn = function(column) {
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be hidden by the name of the data source field to which the column is bound, or by the column's name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxCardView.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the ASPxCardView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxCardView.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxCardView.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the ASPxCardView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxCardView.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the CardView.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true, to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxCardView.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the ASPxCardView.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.GetCardKey = function(visibleIndex) {
    ///<summary>
    ///Returns the key value of the specified card.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the card's visible index.
    ///</param>
    ///<returns type = "String">
    ///A string representing the specified card's key value. If the index passed via the visibleIndex parameter is wrong, or the KeyFieldName property is not set, null is returned.
    ///</returns>
};
MVCxClientCardView.prototype.StartEditCard = function(visibleIndex) {
    ///<summary>
    ///Switches the CardView to edit mode.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer that identifies a card to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.StartEditCardByKey = function(key) {
    ///<summary>
    ///Switches the ASPxCardView to edit mode.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies a card to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.IsNewCardEditing = function() {
    ///<summary>
    ///Indicates whether or not a new card is being edited.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the GridView is in edit mode for a new card; otherwise, false.
    ///</returns>
};
MVCxClientCardView.prototype.AddNewCard = function() {
    ///<summary>
    ///Adds a new record.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.DeleteCard = function(visibleIndex) {
    ///<summary>
    ///Deletes the specified card.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.DeleteCardByKey = function(key) {
    ///<summary>
    ///Deletes a card with the specified key value.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetFocusedCardIndex = function() {
    ///<summary>
    ///Returns the focused card's index.
    ///</summary>
    ///<returns type = "Int32">
    ///A zero-based integer that specifies the focused card's index.
    ///</returns>
};
MVCxClientCardView.prototype.SetFocusedCardIndex = function(visibleIndex) {
    ///<summary>
    ///Moves focus to the specified card.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the focused card's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.SelectCards = function() {
    ///<signature>
    ///<summary>
    ///Selects all the unselected cards within the CardView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified card displayed within the CardView.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the card's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified cards within the CardView.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data cards within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified cards within the CardView.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data cards within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean">
    ///true to select the specified cards; false to deselect the cards.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified card within the GridView.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer zero-based index that identifies the data card within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified card; false to deselect the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.SelectCardsByKey = function(keys, selected) {
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified cards displayed within the CardView.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the cards.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified cards; false to deselect the cards.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified card displayed within the CardView.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the card.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified card; false to deselect the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified cards displayed within the CardView.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the cards.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects a card displayed within the CardView by its key.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.UnselectCardsByKey = function(keys) {
    ///<signature>
    ///<summary>
    ///Deselects the specified cards displayed within the ASPxCardView.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the cards.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified card displayed within the ASPxCardView.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.UnselectCards = function() {
    ///<signature>
    ///<summary>
    ///Deselects all the selected cards within the ASPxCardView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified cards (if selected) within the ASPxCardView.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data cards within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified cards (if selected) within the ASPxCardView.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the card's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.UnselectFilteredCards = function() {
    ///<summary>
    ///Deselects all grid cards that match the filter criteria currently applied to the CardView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.SelectCardOnPage = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Selects the specified card displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the card's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified card displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the card's visible index.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified card; false to deselect the card.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.UnselectCardOnPage = function(visibleIndex) {
    ///<summary>
    ///Deselects the specified cards (if selected) displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the card's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.SelectAllCardsOnPage = function() {
    ///<signature>
    ///<summary>
    ///Selects all unselected cards displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Allows you to select or deselect all cards displayed on the current page based on the parameter passed.
    ///</summary>
    ///<param name = "selected" type = "Boolean">
    ///true to select all unselected cards displayed on the current page; false to deselect all selected cards on the page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.UnselectAllCardsOnPage = function() {
    ///<summary>
    ///Deselects all selected cards displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetSelectedCardCount = function() {
    ///<summary>
    ///Returns the number of selected cards.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of selected cards.
    ///</returns>
};
MVCxClientCardView.prototype.IsCardSelectedOnPage = function(visibleIndex) {
    ///<summary>
    ///Indicates whether or not the specified card is selected within the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the card by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified card is selected within the current page; otherwise, false.
    ///</returns>
};
MVCxClientCardView.prototype.ApplySearchPanelFilter = function(value) {
    ///<summary>
    ///Applies the specified search panel filter criterion to grid data.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies the filter criterion.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.ApplyFilter = function(filterExpression) {
    ///<summary>
    ///Applies the specified filter expression to the grid.
    ///</summary>
    ///<param name = "filterExpression" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.ClearFilter = function() {
    ///<summary>
    ///Clears the filter expression applied to a client CardView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetPopupEditForm = function() {
    ///<summary>
    ///Gets the Popup Edit Form.
    ///</summary>
    ///<returns type = "ASPxClientPopupControl">
    ///An ASPxClientPopupControl object that represents the Popup Edit Form.
    ///</returns>
};
MVCxClientCardView.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Selects the specified page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page currently being selected.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
MVCxClientCardView.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages to which the grid's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the number of grid pages.
    ///</returns>
};
MVCxClientCardView.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetTopVisibleIndex = function() {
    ///<summary>
    ///Returns the index of the first card displayed within the grid's active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the index of the topmost row.
    ///</returns>
};
MVCxClientCardView.prototype.IsEditing = function() {
    ///<summary>
    ///Indicates whether the grid is in edit mode.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the grid is in edit mode; otherwise, false.
    ///</returns>
};
MVCxClientCardView.prototype.UpdateEdit = function() {
    ///<summary>
    ///Saves all the changes made and switches the grid to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.CancelEdit = function() {
    ///<summary>
    ///Cancels all the changes made and switches the CardView to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.Refresh = function() {
    ///<summary>
    ///Updates data displayed within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.IsCustomizationWindowVisible = function() {
    ///<summary>
    ///Indicates whether the customization window is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the customization window is displayed; otherwise, false.
    ///</returns>
};
MVCxClientCardView.prototype.ShowCustomizationWindow = function() {
    ///<signature>
    ///<summary>
    ///Invokes the customization window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the customization window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "showAtElement" type = "Object" optional = "true">
    ///An object that specifies the HTML element relative to whose position the customization window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.HideCustomizationWindow = function() {
    ///<summary>
    ///Closes the customization window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetColumnCount = function() {
    ///<summary>
    ///Returns the number of columns within the client grid.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of columns within the client grid.
    ///</returns>
};
MVCxClientCardView.prototype.GetSelectedFieldValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the card values displayed within all selected cards.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated via a semicolon, whose values within the selected cards are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientCardViewValuesCallback">
    ///An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetSelectedKeysOnPage = function() {
    ///<summary>
    ///Returns key values of selected cards displayed within the current page.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array that contains key values of selected cards displayed within the current page.
    ///</returns>
};
MVCxClientCardView.prototype.GetCardValues = function(visibleIndex, fieldNames, onCallback) {
    ///<summary>
    ///Returns the values of the specified data source fields within the specified card.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the data card.
    ///</param>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated via a semicolon, whose values within the specified card are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientCardViewValuesCallback">
    ///An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetPageCardValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the card values displayed within the current page.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields whose values are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientCardViewValuesCallback">
    ///An ASPxClientCardViewValuesCallback object that represents the JavaScript function which receives the list of card values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetVisibleCardsOnPage = function() {
    ///<summary>
    ///Returns the number of cards actually displayed within the active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of cards displayed within the active page.
    ///</returns>
};
MVCxClientCardView.prototype.GetColumn = function(columnIndex) {
    ///<summary>
    ///Returns the client column that resides at the specified position within the column collection.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///A zero-based index that identifies the column within the column collection (the column's Index property value).
    ///</param>
    ///<returns type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the client column.
    ///</returns>
};
MVCxClientCardView.prototype.GetColumnById = function(columnId) {
    ///<summary>
    ///Returns the column with the specified unique identifier.
    ///</summary>
    ///<param name = "columnId" type = "String">
    ///A string value that specifies the column's unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the client column.
    ///</returns>
};
MVCxClientCardView.prototype.GetColumnByField = function(columnFieldName) {
    ///<summary>
    ///Returns the client column which is bound to the specified data source field.
    ///</summary>
    ///<param name = "columnFieldName" type = "String">
    ///A string value that specifies the name of the data source field to which the column is bound (the column's FieldName property value).
    ///</param>
    ///<returns type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that represents the client column bound to the specified data source field.
    ///</returns>
};
MVCxClientCardView.prototype.GetEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientCardViewColumn">
    ///An ASPxClientCardViewColumn object that specifies the required column within the client grid.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///Returns the editor used to edit the specified column's values.
    ///</returns>
    ///</signature>
};
MVCxClientCardView.prototype.GetToolbarByName = function(name) {
    ///<summary>
    ///Returns a toolbar specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the toolbar name.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar with the specified name.
    ///</returns>
};
MVCxClientCardView.prototype.GetToolbar = function(index) {
    ///<summary>
    ///Returns a grid's toolbar specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the toolbar object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar located at the specified index within the control's Toolbars collection.
    ///</returns>
};
MVCxClientCardView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientCardView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientCardView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientCardView.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientCardView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientCardView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientCardView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientChart.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update a Chart by processing the passed information on the server, in an Action specified via the Chart's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update a Chart by processing the passed information on the server, in an Action specified via the Chart's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientChart.prototype.GetChart = function() {
    ///<summary>
    ///Returns an ASPxClientWebChart object, which contains information about the hierarchy of a chart control, and provides access to the main properties of chart elements  on the client side.
    ///</summary>
    ///<returns type = "ASPxClientWebChart">
    ///An ASPxClientWebChart object containing information about a chart on the client side.
    ///</returns>
};
MVCxClientChart.prototype.GetPrintOptions = function() {
    ///<summary>
    ///Returns the printing options of the chart control.
    ///</summary>
    ///<returns type = "ASPxClientChartPrintOptions">
    ///A ASPxClientChartPrintOptions object containing printing options.
    ///</returns>
};
MVCxClientChart.prototype.SetCursor = function(cursor) {
    ///<summary>
    ///Changes the mouse pointer, which is shown when the mouse is over the chart control, to the pointer with the specified name.
    ///</summary>
    ///<param name = "cursor" type = "String">
    ///A string value representing the name of the desired cursor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.HitTest = function(x, y) {
    ///<summary>
    ///Returns the specific chart element which is located under the test point.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer value that specifies the x coordinate of the test point.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer value that specifies the y coordinate of the test point.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientHitObject">
    ///An array collection of ASPxClientHitObject objects, that represent the chart elements located under the test point.
    ///</returns>
};
MVCxClientChart.prototype.Print = function() {
    ///<summary>
    ///Prints the current chart on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.LoadFromObjectModel = function(serializedChartObjectModel) {
    ///<summary>
    ///Loads a chart which should be customized from its object model.
    ///</summary>
    ///<param name = "serializedChartObjectModel" type = "String">
    ///A String object representing the chart model.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.SaveToDisk = function(format) {
    ///<signature>
    ///<summary>
    ///Exports a chart to the file of the specified format, and saves it to the disk.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string value specifying the format, to which a chart should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a chart to a file in the specified format, and saves it to disk, using the specified file name.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string value specifying the format, to which a chart should be exported.
    ///</param>
    ///<param name = "filename" type = "String">
    ///A string value specifying the file name, to which a chart should be exported. If this parameter is missing or set to an empty string, then the created file will be named using the client-side name of a chart.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientChart.prototype.SaveToWindow = function(format) {
    ///<summary>
    ///Exports a report to the file of the specified format, and shows it in a new Web Browser window.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string  value specifying a format in which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.GetMainDOMElement = function() {
    ///<summary>
    ///Gets the main DOM (Document Object Model) element on a Web Page representing this ASPxClientWebChartControl object.
    ///</summary>
    ///<returns type = "Object">
    ///An object which represents the main DOM element.
    ///</returns>
};
MVCxClientChart.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientChart.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientChart.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientChart.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientChart.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientChart.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientChart.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientComboBox.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the ComboBox by processing the passed information on the server, in an Action specified by the ComboBox's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the ComboBox by processing the passed information on the server, in an Action specified by the ComboBox's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientComboBox.prototype.SetText = function(text) {
    ///<signature>
    ///<summary>
    ///Specifies the text displayed within the editor's edit box.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the editor's text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientComboBox.prototype.AddItem = function(text) {
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and associated value, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
};
MVCxClientComboBox.prototype.InsertItem = function(index, text, value, imageUrl) {
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientComboBox.prototype.RemoveItem = function(index) {
    ///<summary>
    ///Removes an item specified by its index from the client list editor.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the index of the list item to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.ClearItems = function() {
    ///<summary>
    ///Removes all items from the client combo box editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.BeginUpdate = function() {
    ///<summary>
    ///Prevents the client combobox editor from being rendered until the EndUpdate method is called.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.EndUpdate = function() {
    ///<summary>
    ///Re-enables editor render operations after a call to the BeginUpdate method and forces an immediate re-rendering.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.MakeItemVisible = function(index) {
    ///<summary>
    ///Scrolls the editor's item list, so that the specified item becomes visible.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the item's index within the editor's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the combo box editor's item collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
MVCxClientComboBox.prototype.FindItemByText = function(text) {
    ///<summary>
    ///Returns a combo box item by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string that specifies the item's text.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
MVCxClientComboBox.prototype.FindItemByValue = function(value) {
    ///<summary>
    ///Returns a combo box item by its value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object that specifies the item's value.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
MVCxClientComboBox.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
MVCxClientComboBox.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the combo box editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
MVCxClientComboBox.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the combobox editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the combo box editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
MVCxClientComboBox.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetText = function() {
    ///<signature>
    ///<summary>
    ///Gets the text displayed in the editor's edit box.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text within the editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
    ///</signature>
};
MVCxClientComboBox.prototype.EnsureDropDownLoaded = function(callbackFunction) {
    ///<summary>
    ///Determines whether the drop-down content is loaded; if not - loads the content.
    ///</summary>
    ///<param name = "callbackFunction" type = "Object">
    ///An object that is the JavaScript function that receives the callback data as a parameter. The function is performed after the combo box content is loaded.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SetItemHtml = function(index, html) {
    ///<summary>
    ///Defines the HTML content for the specified combo box item.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the combo box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SetItemTooltip = function(index, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the combo box editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.AddItemCssClass = function(index, className) {
    ///<summary>
    ///Sets the CSS class for a combo box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.RemoveItemCssClass = function(index, className) {
    ///<summary>
    ///Removes the CSS class from a combo box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SetItemTextCellHtml = function(itemIndex, textCellIndex, html) {
    ///<summary>
    ///Defines the HTML content for the specified combo box item's text cell.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the combo box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SetItemTextCellTooltip = function(itemIndex, textCellIndex, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the text cell of the editor's item specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.AddItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Sets the CSS class for a combo box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.RemoveItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Removes the CSS class from a combo box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
MVCxClientComboBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
MVCxClientComboBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
MVCxClientComboBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
MVCxClientComboBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
MVCxClientComboBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
MVCxClientComboBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
MVCxClientComboBox.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientComboBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientComboBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientComboBox.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientComboBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientComboBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientComboBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientDataView.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the DataView by processing the passed information on the server, in an Action specified via the DataView's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the DataView by processing the passed information on the server, in an Action specified via the DataView's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDataView.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Activates the specified page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDataView.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page that is currently active.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
MVCxClientDataView.prototype.GetPageSize = function() {
    ///<summary>
    ///Gets the size of a single ASPxDataView's page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the page size.
    ///</returns>
};
MVCxClientDataView.prototype.SetPageSize = function(pageSize) {
    ///<summary>
    ///Sets the size of a single ASPxDataView's page.
    ///</summary>
    ///<param name = "pageSize" type = "Int32">
    ///An integer value that specifies the page size.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDataView.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages into which the ASPxDataView's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that represents the number of pages.
    ///</returns>
};
MVCxClientDataView.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDataView.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDataView.prototype.FirstPage = function() {
    ///<summary>
    ///Activates the first page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDataView.prototype.LastPage = function() {
    ///<summary>
    ///Activates the last page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDataView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientDataView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientDataView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDataView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDataView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDataView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientDataView.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDataView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientDataView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDataView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientDataView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDataView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientDateEdit.prototype.GetCalendar = function() {
    ///<summary>
    ///Returns the calendar of the date editor.
    ///</summary>
    ///<returns type = "ASPxClientCalendar">
    ///A ASPxClientCalendar object representing the editor's calendar.
    ///</returns>
};
MVCxClientDateEdit.prototype.GetTimeEdit = function() {
    ///<summary>
    ///Returns the built-in time edit control.
    ///</summary>
    ///<returns type = "ASPxClientTimeEdit">
    ///An <see cref="ASPxClientTimeEdit" /> object that is the built-in time editor.
    ///</returns>
};
MVCxClientDateEdit.prototype.SetDate = function(date) {
    ///<summary>
    ///Specifies the date for the editor.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object that is the date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.GetDate = function() {
    ///<summary>
    ///Gets the date that is the editor's value.
    ///</summary>
    ///<returns type = "DateTime">
    ///A DateTime object that is the date.
    ///</returns>
};
MVCxClientDateEdit.prototype.GetRangeDayCount = function() {
    ///<summary>
    ///Returns the number of days in a range selected within a date edit.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value specifying the number of days.
    ///</returns>
};
MVCxClientDateEdit.prototype.GetMinDate = function() {
    ///<summary>
    ///Gets the minimum date of the editor.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date-time object representing the minimum date.
    ///</returns>
};
MVCxClientDateEdit.prototype.SetMinDate = function(date) {
    ///<summary>
    ///Sets the minimum date of the editor.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object representing the minimum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.GetMaxDate = function() {
    ///<summary>
    ///Gets the maximum date of the editor.
    ///</summary>
    ///<returns type = "DateTime">
    ///A date-time object representing the maximum date.
    ///</returns>
};
MVCxClientDateEdit.prototype.SetMaxDate = function(date) {
    ///<summary>
    ///Sets the maximum date of the editor.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object representing the maximum date.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
MVCxClientDateEdit.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
};
MVCxClientDateEdit.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
MVCxClientDateEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
MVCxClientDateEdit.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
MVCxClientDateEdit.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
MVCxClientDateEdit.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
MVCxClientDateEdit.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
MVCxClientDateEdit.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientDateEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientDateEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientDateEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientDateEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientDateEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDateEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientDockManager.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the DockManager by processing the passed information on the server, in an Action specified by the DockManager's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the DockManager by processing the passed information on the server, in an Action specified by the DockManager's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that contains any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that contains any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDockManager.prototype.GetZoneByUID = function(zoneUID) {
    ///<summary>
    ///Returns a zone specified by its unique identifier (zoneUID).
    ///</summary>
    ///<param name = "zoneUID" type = "String">
    ///A string value specifying the unique identifier of the zone.
    ///</param>
    ///<returns type = "ASPxClientDockZone">
    ///An <see cref="ASPxClientDockZone" /> object that is the zone with the specified unique identifier.
    ///</returns>
};
MVCxClientDockManager.prototype.GetPanelByUID = function(panelUID) {
    ///<summary>
    ///Returns a panel specified by its unique identifier (panelUID).
    ///</summary>
    ///<param name = "panelUID" type = "String">
    ///A string value specifying the unique identifier of the panel.
    ///</param>
    ///<returns type = "ASPxClientDockPanel">
    ///An <see cref="ASPxClientDockPanel" /> object that is the panel with the specified unique identifier.
    ///</returns>
};
MVCxClientDockManager.prototype.GetPanels = function() {
    ///<signature>
    ///<summary>
    ///Returns an array of panels contained in a page.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDockPanel">
    ///An array of ASPxClientDockPanel objects that are the panels contained in a page.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns an array of panels that are contained in a page and meet a specified criteria.
    ///</summary>
    ///<param name = "filterPredicate" type = "ASPxClientDockingFilterPredicate">
    ///An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a panel meets those criteria.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDockPanel">
    ///An array of ASPxClientDockPanel objects.
    ///</returns>
    ///</signature>
};
MVCxClientDockManager.prototype.GetZones = function() {
    ///<signature>
    ///<summary>
    ///Returns an array of zones contained in a page.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDockZone">
    ///An array of ASPxClientDockZone objects that are the zones contained in a page.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns an array of zones that are contained in a page and meet a specified criteria.
    ///</summary>
    ///<param name = "filterPredicate" type = "ASPxClientDockingFilterPredicate">
    ///An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a zone meets those criteria.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDockZone">
    ///An array of ASPxClientDockZone objects.
    ///</returns>
    ///</signature>
};
MVCxClientDockManager.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientDockManager.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientDockManager.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockManager.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockManager.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockManager.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientDockManager.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockManager.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientDockManager.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockManager.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientDockManager.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockManager.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientDockPanel.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the DockPanel by processing the passed information on the server, in an Action specified by the DockPanel's DockPanelSettings.CallbackRouteValues) property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the DockPanel by processing the passed information on the server, in an Action specified by the DockPanel's DockPanelSettings.CallbackRouteValues) property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side WindowCallback event, passing the specified argument to it.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that is any information that needs to be sent to the server-side WindowCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDockPanel.prototype.GetOwnerZone = function() {
    ///<summary>
    ///Retrieves a zone that owns the current panel.
    ///</summary>
    ///<returns type = "ASPxClientDockZone">
    ///A <see cref="ASPxClientDockZone" /> object that is the owner of the current panel.
    ///</returns>
};
MVCxClientDockPanel.prototype.Dock = function(zone) {
    ///<signature>
    ///<summary>
    ///Docks the current panel in the specified zone.
    ///</summary>
    ///<param name = "zone" type = "ASPxClientDockZone">
    ///An ASPxClientDockZone object specifying the zone.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Docks the current panel in a zone at the specified position.
    ///</summary>
    ///<param name = "zone" type = "ASPxClientDockZone">
    ///An ASPxClientDockZone object specifying the zone, where the panel is docked
    ///</param>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value specifying the visible index position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDockPanel.prototype.MakeFloat = function() {
    ///<signature>
    ///<summary>
    ///Undocks the current panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Undocks the current panel and place it at the specified position.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer value that specifies the X-coordinate of the panel's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer value that specifies the Y-coordinate of the panel's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDockPanel.prototype.GetVisibleIndex = function() {
    ///<summary>
    ///Gets a value specifying the position of the current panel, amongst the visible panels within a zone.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the zero-based index of the panel amongst visible panels in the zone.
    ///</returns>
};
MVCxClientDockPanel.prototype.SetVisibleIndex = function(visibleIndex) {
    ///<summary>
    ///Sets a value specifying the position of the current panel, amongst the visible panels in a zone.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the panel amongst visible panels in the zone.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.IsDocked = function() {
    ///<summary>
    ///Returns a value indicating whether the panel is docked.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the panel is docked; otherwise, false.
    ///</returns>
};
MVCxClientDockPanel.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a control's window size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.BringToFront = function() {
    ///<summary>
    ///Brings the window to the front of the z-order.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.GetCollapsed = function() {
    ///<summary>
    ///Returns a value indicating whether the window is collapsed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is collapsed; otherwise, false.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that specifies the contents of the control's window.
    ///</summary>
    ///<returns type = "String">
    ///A string that specifies the window's HTML content.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetContentIFrame = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the control.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetContentIFrameWindow = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the control's window.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetContentUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the web page displayed within the control's window.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetFooterImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window footer by default.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetFooterNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetFooterText = function() {
    ///<summary>
    ///Returns the text displayed within a window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies a window's footer text.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetHeaderImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetHeaderNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within a window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies a window's header text.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetContentWidth = function() {
    ///<summary>
    ///Gets the width of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the width of the content region.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetContentHeight = function() {
    ///<summary>
    ///Gets the height of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the height of the content region.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetMaximized = function() {
    ///<summary>
    ///Returns a value indicating whether the window is maximized.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is maximized; otherwise, false.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetPinned = function() {
    ///<summary>
    ///Returns a value indicating whether the window is pinned.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is pinned; otherwise, false.
    ///</returns>
};
MVCxClientDockPanel.prototype.RefreshContentUrl = function() {
    ///<summary>
    ///Refreshes the content of the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.SetCollapsed = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is collapsed.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, to collapse the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML markup specifying the contents of the control's window.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.SetContentUrl = function(url) {
    ///<summary>
    ///Sets the URL to point to the web page that should be loaded into, and displayed within the control's window.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value specifying the URL to the web page displayed within the control's window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.SetFooterImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window footer by default.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.SetFooterNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.SetFooterText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies a window's footer text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.SetHeaderImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.SetHeaderNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.SetHeaderText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies a window's header text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.SetMaximized = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is maximized.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true. to maximize the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.SetPinned = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is pinned.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, to pin the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.Show = function() {
    ///<signature>
    ///<summary>
    ///Invokes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the control's window at the popup element with the specified index.
    ///</summary>
    ///<param name = "popupElementIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the popup element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDockPanel.prototype.ShowAtElement = function(htmlElement) {
    ///<summary>
    ///Invokes the control's window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.ShowAtElementByID = function(id) {
    ///<summary>
    ///Invokes the control's window and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the control's window at the specified position.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///A integer value specifying the x-coordinate of the window's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///A integer value specifying the y-coordinate of the window's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.Hide = function() {
    ///<summary>
    ///Closes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.IsVisible = function() {
    ///<summary>
    ///Returns a value that specifies whether the control's window is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the window is displayed; otherwise, false.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientDockPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientDockPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientDockPanel.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientDockPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientDockPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDockPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientFileManager.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the FileManager by processing the passed information on the server, in an Action specified via the extension's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the file manager's CustomActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///A string value that specifies any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that specifies any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that specifies any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientFileManager.prototype.GetActiveAreaName = function() {
    ///<summary>
    ///Gets the name of the currently active file manager area.
    ///</summary>
    ///<returns type = "String">
    ///A string value that identifies the active area.
    ///</returns>
};
MVCxClientFileManager.prototype.Refresh = function() {
    ///<summary>
    ///Client-side scripting method which initiates a round trip to the server, so that the current page will be reloaded.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientFileManager.prototype.ExecuteCommand = function(commandName) {
    ///<summary>
    ///Executes the specified command.
    ///</summary>
    ///<param name = "commandName" type = "String">
    ///A string value that specifies the command to perform.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified command has been completed successfully; otherwise, false.
    ///</returns>
};
MVCxClientFileManager.prototype.GetSelectedFile = function() {
    ///<summary>
    ///Returns the selected file within the ASPxFileManager control's file container.
    ///</summary>
    ///<returns type = "ASPxClientFileManagerFile">
    ///An ASPxClientFileManagerFile object, that is the selected file, or null if no file is selected.
    ///</returns>
};
MVCxClientFileManager.prototype.GetSelectedItems = function() {
    ///<summary>
    ///Returns an array of the file manager's selected items.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientFileManagerFile">
    ///An <see cref="ASPxClientFileManagerFile[]" /> array containing the selected items.
    ///</returns>
};
MVCxClientFileManager.prototype.GetItems = function() {
    ///<summary>
    ///Returns a list of files that are loaded on the current page.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientFileManagerFile">
    ///The <see cref="ASPxClientFileManagerFile[]" /> collection of files.
    ///</returns>
};
MVCxClientFileManager.prototype.GetAllItems = function(onCallback) {
    ///<summary>
    ///Sends a callback to the server and returns a list of files that are contained within the current folder.
    ///</summary>
    ///<param name = "onCallback" type = "ASPxClientFileManagerAllItemsCallback">
    ///A  object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientFileManager.prototype.GetToolbarItemByCommandName = function(commandName) {
    ///<summary>
    ///Returns a toolbar item specified by its command name.
    ///</summary>
    ///<param name = "commandName" type = "String">
    ///A string value specifying the command name of the item.
    ///</param>
    ///<returns type = "ASPxClientFileManagerToolbarItem">
    ///An <see cref="ASPxClientFileManagerToolbarItem" /> object that is the item with the specified command name.
    ///</returns>
};
MVCxClientFileManager.prototype.GetContextMenuItemByCommandName = function(commandName) {
    ///<summary>
    ///Returns a context menu item specified by its command name.
    ///</summary>
    ///<param name = "commandName" type = "String">
    ///A string value specifying the command name of the item.
    ///</param>
    ///<returns type = "ASPxClientFileManagerToolbarItem">
    ///An <see cref="ASPxClientFileManagerToolbarItem" /> object that is the item with the specified command name.
    ///</returns>
};
MVCxClientFileManager.prototype.GetCurrentFolderPath = function() {
    ///<signature>
    ///<summary>
    ///Gets the current folder's path.
    ///</summary>
    ///<returns type = "String">
    ///A String value that represents the path to the folder.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the current folder's path with the specified separator.
    ///</summary>
    ///<param name = "separator" type = "String">
    ///A string value that specifies the separator between the folder's name within a path.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the path to the folder.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the current folder's path with the specified settings.
    ///</summary>
    ///<param name = "separator" type = "String">
    ///A string value that specifies the separator between the folder's name within the path.
    ///</param>
    ///<param name = "skipRootFolder" type = "Boolean">
    ///true to skip the root folder; otherwise, false.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the path to the folder.
    ///</returns>
    ///</signature>
};
MVCxClientFileManager.prototype.SetCurrentFolderPath = function(path, onCallback) {
    ///<summary>
    ///Sets the current folder's path.
    ///</summary>
    ///<param name = "path" type = "String">
    ///A String value that is the relative path to the folder (without the root folder).
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientFileManagerCallback">
    ///A ASPxClientFileManagerCallback object that is the JavaScript function that receives the callback data as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientFileManager.prototype.GetCurrentFolderId = function() {
    ///<summary>
    ///Gets the current folder's ID.
    ///</summary>
    ///<returns type = "String">
    ///A <see cref="String" /> value that is the ID of the folder.
    ///</returns>
};
MVCxClientFileManager.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientFileManager.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientFileManager.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientFileManager.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientFileManager.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientFileManager.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientFileManager.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientFileManager.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientFileManager.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientFileManager.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientFileManager.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientFileManager.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the GridView by processing the passed information on the server, in an Action specified via the grid's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the GridView by processing the passed information on the server, in an Action specified via the grid's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing the specified argument to it.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.GetValuesOnCustomCallback = function(data, onCallback) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to process the passed information on the server, in an Action specified via the GridView's CustomDataActionRouteValues property, and then process the returned result in the specified client function. This method does not update the GridView.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the information on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///A ASPxClientGridViewValuesCallback object that is the JavaScript function which receives the information on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.SelectRowsByKey = function(key, selected) {
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified row displayed within the grid.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified rows displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects a grid row by its key.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified rows displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified rows; false to deselect the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.UnselectRowsByKey = function(keys) {
    ///<signature>
    ///<summary>
    ///Deselects the specified rows displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified row displayed within the grid.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.UnselectRows = function() {
    ///<signature>
    ///<summary>
    ///Deselects all the selected rows within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified rows (if selected) within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data rows within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified row (if selected) within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.UnselectFilteredRows = function() {
    ///<summary>
    ///Deselects all grid rows that match the filter criteria currently applied to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectRowOnPage = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Selects the specified row displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified row displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.UnselectRowOnPage = function(visibleIndex) {
    ///<summary>
    ///Deselects the specified row (if selected) displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectAllRowsOnPage = function() {
    ///<signature>
    ///<summary>
    ///Selects all unselected rows displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Allows you to select or deselect all rows displayed on the current page based on the parameter passed.
    ///</summary>
    ///<param name = "selected" type = "Boolean">
    ///true to select all unselected rows displayed on the current page; false to deselect all selected rows on the page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.UnselectAllRowsOnPage = function() {
    ///<summary>
    ///Deselects all selected rows displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetSelectedRowCount = function() {
    ///<summary>
    ///Returns the number of selected rows.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of selected rows.
    ///</returns>
};
MVCxClientGridView.prototype.IsRowSelectedOnPage = function(visibleIndex) {
    ///<summary>
    ///Indicates whether or not the specified row is selected within the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified row is selected within the current page; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.IsGroupRow = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified row is a group row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified row is a group row; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.IsDataRow = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified row is a data row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified row is a data row; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.IsGroupRowExpanded = function(visibleIndex) {
    ///<summary>
    ///Indicates whether the specified group row is expanded.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified group row is expanded; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.GetVertScrollPos = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the vertical scroll position.
    ///</returns>
};
MVCxClientGridView.prototype.GetHorzScrollPos = function() {
    ///<summary>
    ///Returns the current horizontal scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the horizontal scroll position.
    ///</returns>
};
MVCxClientGridView.prototype.GetHorizontalScrollPosition = function() {
    ///<summary>
    ///Returns the current horizontal scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</returns>
};
MVCxClientGridView.prototype.SetVertScrollPos = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SetHorzScrollPos = function(position) {
    ///<summary>
    ///Specifies the horizontal scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SetHorizontalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the horizontal scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SetFixedColumnScrollableRows = function(scrollableRowSettings) {
    ///<summary>
    ///Sets the scrollability of various types of grid rows when the grid displays fixed columns.
    ///</summary>
    ///<param name = "scrollableRowSettings" type = "Object">
    ///An object specifying which types of grid rows should or should not be scrollable.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ApplyOnClickRowFilter = function() {
    ///<summary>
    ///Applies a filter specified in the filter row to the GridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetAutoFilterEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data colum within the ASPxGridView.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column by its index.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the value in the auto filter row for the specified data column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's name or its data base field name.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the editor used to edit the value in the specified auto filter row cell. null (Nothing in Visual Basic) if the editor was not found.
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.AutoFilterByColumn = function(column, val) {
    ///<signature>
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the client GridView.
    ///</param>
    ///<param name = "val" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "val" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Applies a filter to the specified data column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "val" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.ApplySearchPanelFilter = function(value) {
    ///<summary>
    ///Applies the specified search panel filter criterion to grid data.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies the filter criterion.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ApplyFilter = function(filterExpression) {
    ///<summary>
    ///Applies the specified filter expression to the GridView.
    ///</summary>
    ///<param name = "filterExpression" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ClearFilter = function() {
    ///<summary>
    ///Clears the filter expression applied to a client GridView.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetPopupEditForm = function() {
    ///<summary>
    ///Gets the Popup Edit Form.
    ///</summary>
    ///<returns type = "ASPxClientPopupControl">
    ///An ASPxClientPopupControl object that represents the Popup Edit Form.
    ///</returns>
};
MVCxClientGridView.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Selects the specified page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page currently being selected.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
MVCxClientGridView.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages to which the grid's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the number of grid pages.
    ///</returns>
};
MVCxClientGridView.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetTopVisibleIndex = function() {
    ///<summary>
    ///Returns the index of the first data row displayed within the GridView's active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the index of the topmost row.
    ///</returns>
};
MVCxClientGridView.prototype.IsEditing = function() {
    ///<summary>
    ///Indicates whether the grid is in edit mode.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the grid is in edit mode; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.UpdateEdit = function() {
    ///<summary>
    ///Saves all the changes made and switches the grid to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.CancelEdit = function() {
    ///<summary>
    ///Cancels all the changes made and switches the GridView to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.Refresh = function() {
    ///<summary>
    ///Updates data displayed within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.IsCustomizationWindowVisible = function() {
    ///<summary>
    ///Indicates whether the Customization Window is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the customization window is displayed; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.ShowCustomizationWindow = function() {
    ///<signature>
    ///<summary>
    ///Invokes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the Customization Window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "showAtElement" type = "Object" optional = "true">
    ///An object that specifies the HTML element relative to whose position the customization window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.HideCustomizationWindow = function() {
    ///<summary>
    ///Closes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetColumnsCount = function() {
    ///<summary>
    ///Returns the number of columns within the client GridView.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of columns within the client ASPxGridView.
    ///</returns>
};
MVCxClientGridView.prototype.GetColumnCount = function() {
    ///<summary>
    ///Returns the number of columns within the client GridView.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of columns within the client GridView.
    ///</returns>
};
MVCxClientGridView.prototype.GetSelectedFieldValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the row values displayed within all selected rows.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated via a semicolon, whose values within the selected rows are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetSelectedKeysOnPage = function() {
    ///<summary>
    ///Returns key values of selected rows displayed within the current page.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array that contains key values of selected rows displayed within the current page.
    ///</returns>
};
MVCxClientGridView.prototype.GetRowValues = function(visibleIndex, fieldNames, onCallback) {
    ///<summary>
    ///Returns the values of the specified data source fields within the specified row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the data row.
    ///</param>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated via a semicolon, whose values within the specified row are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///An ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetPageRowValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the row values displayed within the current page.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields whose values are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetVisibleRowsOnPage = function() {
    ///<summary>
    ///Returns the number of rows actually displayed within the active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of rows displayed within the active page.
    ///</returns>
};
MVCxClientGridView.prototype.GetColumn = function(columnIndex) {
    ///<summary>
    ///Returns the client column that resides at the specified position within the column collection.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///A zero-based index that identifies the column within the column collection (the column's Index property value).
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column.
    ///</returns>
};
MVCxClientGridView.prototype.GetColumnById = function(columnId) {
    ///<summary>
    ///Returns the column with the specified unique identifier.
    ///</summary>
    ///<param name = "columnId" type = "String">
    ///A string value that specifies the column's unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column.
    ///</returns>
};
MVCxClientGridView.prototype.GetColumnByField = function(columnFieldName) {
    ///<summary>
    ///Returns the client column which is bound to the specified data source field.
    ///</summary>
    ///<param name = "columnFieldName" type = "String">
    ///A string value that specifies the name of the data source field to which the column is bound (the column's FieldName property value).
    ///</param>
    ///<returns type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the client column bound to the specified data source field.
    ///</returns>
};
MVCxClientGridView.prototype.GetEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that specifies the required column within the client grid.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified column's editor.
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.GetEditValue = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column within the grid's column collection.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the value of the edit cell which corresponds to the specified data column.
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.FocusEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified edit cell within the edited row.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.SetEditValue = function(column, value) {
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the client grid.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column within the grid's column collection.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.ShowFilterControl = function() {
    ///<summary>
    ///Displays the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.CloseFilterControl = function() {
    ///<summary>
    ///Hides the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SetFilterEnabled = function(isFilterEnabled) {
    ///<summary>
    ///Enables or disables the current filter.
    ///</summary>
    ///<param name = "isFilterEnabled" type = "Boolean">
    ///true to enable the current filter; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetVerticalScrollPosition = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</returns>
};
MVCxClientGridView.prototype.SetVerticalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetFocusedCell = function() {
    ///<summary>
    ///Gets information about a focused cell.
    ///</summary>
    ///<returns type = "ASPxClientGridViewCellInfo">
    ///An <see cref="ASPxClientGridViewCellInfo" /> object containing information about a focused cell.
    ///</returns>
};
MVCxClientGridView.prototype.SetFocusedCell = function(rowVisibleIndex, columnIndex) {
    ///<summary>
    ///Focuses the specified cell.
    ///</summary>
    ///<param name = "rowVisibleIndex" type = "Int32">
    ///An integer value that specifies the visible index of the row.
    ///</param>
    ///<param name = "columnIndex" type = "Int32">
    ///A zero-based index that identifies the column in the column collection (the column's Index property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ShowCustomizationDialog = function() {
    ///<summary>
    ///Invokes the Customization Dialog and displays it over the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SortBy = function(column) {
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values, and places the column to the specified position among the sorted columns.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based column's index among the sorted columns. -1 if data is not sorted by this column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.MoveColumn = function(column) {
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to hide.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Hides the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A String value that identifies the column to be hidden by the name of the data source field to which the column is bound, or by the column's name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups the grid's data by this column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "moveBefore" type = "Boolean">
    ///true to move the column before the target column; otherwise, false.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<param name = "targetPosition" type = "ASPxClientGridColumnMovingTargetPosition">
    ///An ASPxClientGridColumnMovingTargetPosition enumeration value specifying the position relative to the target column in which to place the moved column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A String value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that specifies the column's position among the visible columns within the grid.
    ///</param>
    ///<param name = "targetPosition" type = "ASPxClientGridColumnMovingTargetPosition">
    ///An ASPxClientGridColumnMovingTargetPosition enumeration value specifying the position relative to the target column in which to place the moved column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the absolute index of the column to move.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "targetPosition" type = "ASPxClientGridColumnMovingTargetPosition">
    ///An ASPxClientGridColumnMovingTargetPosition enumeration value specifying the position relative to the target column in which to place the moved column.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true, to group the ASPxGridView's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true, to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves the specified column to the specified visual position within the grid and optionally groups or ungroups the grid's data by this column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that identifies the column to be moved by the name of the data source field to which the column is bound or by the column's name.
    ///</param>
    ///<param name = "moveToColumnVisibleIndex" type = "Int32">
    ///An integer value that identifies the target column displayed within the grid.
    ///</param>
    ///<param name = "targetPosition" type = "ASPxClientGridColumnMovingTargetPosition">
    ///An ASPxClientGridColumnMovingTargetPosition enumeration value specifying the position relative to the target column in which to place the moved column.
    ///</param>
    ///<param name = "moveToGroup" type = "Boolean">
    ///true, to group the grid's data by the column; otherwise, false.
    ///</param>
    ///<param name = "moveFromGroup" type = "Boolean">
    ///true, to ungroup the grid's data by the column; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.GroupBy = function(column) {
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column by whose values data is grouped.
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Groups data by the values of the specified data column with the specified sort order. If several columns are involved in grouping, the specified column will reside at the specified grouping level.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "groupIndex" type = "Int32">
    ///An integer value that specifies the grouping level. -1 to cancel grouping by the column's values.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.UnGroup = function(column) {
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///An ASPxClientGridViewColumn object that represents the data column within the ASPxGridView.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of the specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.Ungroup = function(column) {
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of a specified column.
    ///</summary>
    ///<param name = "column" type = "ASPxClientGridViewColumn">
    ///A ASPxClientGridViewColumn object that is the grid column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of a specified column.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that is the column index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Ungroups data by the values of a specified column.
    ///</summary>
    ///<param name = "columnFieldNameOrId" type = "String">
    ///A string value that is the column's FieldName or ID.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all group rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all group rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ExpandAllDetailRows = function() {
    ///<summary>
    ///Expands all detail rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.CollapseAllDetailRows = function() {
    ///<summary>
    ///Collapses all detail rows.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ExpandRow = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Expands the specified group row preserving the collapsed state of any child group row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Expands the specified group row and optionally child group rows at all nesting levels.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row.
    ///</param>
    ///<param name = "recursive" type = "Boolean" optional = "true">
    ///true to expand any child group rows at all nesting levels; false to preserve the collapsed state of any child group rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.CollapseRow = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Collapses the specified group row preserving the expanded state of child group rows.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Collapses the specified group row and optionally child group rows at all nesting levels.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the group row by its visible index.
    ///</param>
    ///<param name = "recursive" type = "Boolean" optional = "true">
    ///true to collapse child group rows at all nesting levels; false to preserve the expanded state of any child group row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.MakeRowVisible = function(visibleIndex) {
    ///<summary>
    ///Scrolls the view to the specified row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies a row by its visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.ExpandDetailRow = function(visibleIndex) {
    ///<summary>
    ///Expands the specified detail row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer index that identifies the detail row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.CollapseDetailRow = function(visibleIndex) {
    ///<summary>
    ///Collapses the specified detail row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer index that identifies the detail row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetRowKey = function(visibleIndex) {
    ///<summary>
    ///Returns the key value of the specified data row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "String">
    ///A string representing the specified data row's key value. If the index passed via the visibleIndex parameter is wrong, or the KeyFieldName property is not set, null is returned.
    ///</returns>
};
MVCxClientGridView.prototype.StartEditRow = function(visibleIndex) {
    ///<summary>
    ///Switches the grid to edit mode.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer that identifies a data row to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.StartEditRowByKey = function(key) {
    ///<summary>
    ///Switches the grid to edit mode.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies a data row to be edited.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.IsNewRowEditing = function() {
    ///<summary>
    ///Indicates whether or not a new row is being edited.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the GridView is in edit mode for a new row; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.AddNewRow = function() {
    ///<summary>
    ///Adds a new record.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.DeleteRow = function(visibleIndex) {
    ///<summary>
    ///Deletes the specified row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.DeleteRowByKey = function(key) {
    ///<summary>
    ///Deletes a row with the specified key value.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetFocusedRowIndex = function() {
    ///<summary>
    ///Returns the focused row's index.
    ///</summary>
    ///<returns type = "Int32">
    ///A zero-based integer that specifies the focused row's index.
    ///</returns>
};
MVCxClientGridView.prototype.SetFocusedRowIndex = function(visibleIndex) {
    ///<summary>
    ///Moves focus to the specified row.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the focused row's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SelectRows = function() {
    ///<signature>
    ///<summary>
    ///Selects all the unselected rows within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified row displayed within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the row's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified rows within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data rows within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified rows within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify data rows within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean">
    ///true to select the specified rows; false to deselect the rows.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified row within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer zero-based index that identifies the data row within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified row; false to deselect the row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientGridView.prototype.GetToolbarByName = function(name) {
    ///<summary>
    ///Returns a toolbar specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the toolbar name.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar with the specified name.
    ///</returns>
};
MVCxClientGridView.prototype.GetToolbar = function(index) {
    ///<summary>
    ///Returns a grid's toolbar specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the toolbar object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar located at the specified index within the control's Toolbars collection.
    ///</returns>
};
MVCxClientGridView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientGridView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientGridView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientGridView.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientGridView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientGridView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGridView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.PerformDataCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to process the passed information on the server, in an Action specified via the HtmlEditor's CustomDataCallback event on the client. This method does not update the HtmlEditor.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to process the passed information on the server, in an Action specified via the HtmlEditor's CustomDataCallback event on the client. This method does not update the HtmlEditor.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientDataCallback">
    ///An ASPxClientDataCallback object that is the JavaScript function which receives the callback data as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientDataCallback">
    ///A ASPxClientDataCallback object that represents the JavaScript function which receives the callback data as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientHtmlEditor.prototype.GetDesignViewDocument = function() {
    ///<summary>
    ///Returns the document object generated by an iframe element within a design view area.
    ///</summary>
    ///<returns type = "Object">
    ///A document object specifying the design view area content.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetDialogPopupControl = function() {
    ///<summary>
    ///Provides access to the client ASPxPopupControl object that is a Html Editor's dialog.
    ///</summary>
    ///<returns type = "ASPxClientPopupControl">
    ///A ASPxClientPopupControl object.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetPreviewDocument = function() {
    ///<summary>
    ///Returns the document object generated by an iframe element within a preview area.
    ///</summary>
    ///<returns type = "Object">
    ///A document object specifying the preview area content.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetContextMenu = function() {
    ///<summary>
    ///Returns a collection of client context menu objects.
    ///</summary>
    ///<returns type = "ASPxClientPopupMenu">
    ///An <see cref="ASPxClientPopupMenu" /> object that is the client-side collection of context menu objects.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor is enabled; otherwise false.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the ASPxHtmlEditor's edit region.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetHtml = function() {
    ///<summary>
    ///Gets the HTML markup that represents the editor's content.
    ///</summary>
    ///<returns type = "String">
    ///A string value that represents the HTML markup.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetHtml = function(html) {
    ///<signature>
    ///<summary>
    ///Specifies the HTML markup that represents the editor's content.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the HTML markup that represents the editor's content.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<param name = "clearUndoHistory" type = "Boolean">
    ///true to clear the undo stack; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientHtmlEditor.prototype.ReplacePlaceholders = function(html, placeholders) {
    ///<summary>
    ///Replaces placeholders with the specified values.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that specifies the HTML code to process.
    ///</param>
    ///<param name = "placeholders" elementType = "Object" type = "Array">
    ///An array of objects that specify the placeholders and values to replace them.
    ///</param>
    ///<returns type = "String">
    ///A string value that is the resulting HTML code with the placeholders replaced.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.CreateChangeMediaElementCommandArguments = function(element) {
    ///<summary>
    ///Creates a parameter for ASPxHtmlEditor's client-side commands related to changing media elements.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An element that is being changed.
    ///</param>
    ///<returns type = "ASPxClientHtmlEditorChangeMediaElementCommandArguments">
    ///An <see cref="ASPxClientHtmlEditorChangeMediaElementCommandArguments" /> object which contains the current settings of the changed element.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.ExecuteCommand = function(commandName, parameter, addToUndoHistory) {
    ///<summary>
    ///Executes the specified command.
    ///</summary>
    ///<param name = "commandName" type = "String">
    ///A string value that specifies the command to perform.
    ///</param>
    ///<param name = "parameter" type = "Object">
    ///A string value specifying additional information about the command to perform.
    ///</param>
    ///<param name = "addToUndoHistory" type = "Boolean">
    ///true, to add the specified command to the undo stack; otherwise, false.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified command has been completed successfully; otherwise, false.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SaveToUndoHistory = function() {
    ///<summary>
    ///Adds the current editor state to the undo/redo history.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetSelection = function() {
    ///<summary>
    ///Returns the selection in the ASPxHtmlEditor.
    ///</summary>
    ///<returns type = "ASPxClientHtmlEditorSelection">
    ///The ASPxClientHtmlEditorSelection object specifying the selection within the ASPxHtmlEditor.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.RestoreSelection = function() {
    ///<summary>
    ///Restores the selection within the ASPxHtmlEditor.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if selection has been restored successfully; otherwise, false.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetToolbarComboBoxValue = function(commandName, value) {
    ///<summary>
    ///Sets the value of the combo box within the HtmlEditor on the client side.
    ///</summary>
    ///<param name = "commandName" type = "String">
    ///A string value that identifies the combo box's command name within the HtmlEditor's control collection.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the combo box's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetToolbarDropDownItemPickerValue = function(commandName, value) {
    ///<summary>
    ///Sets the value of the dropdown item picker in the HtmlEditor on the client side.
    ///</summary>
    ///<param name = "commandName" type = "String">
    ///A string value that identifies the dropdown item picker by its command name. This value is contained in the CommandName property.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that specifies the dropdown item picker's new value, i.e., the ToolbarItemPickerItem object.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetRibbonContextTabCategoryVisible = function(categoryName, active) {
    ///<summary>
    ///Specifies the visibility of a ribbon context tab category specified by its name.
    ///</summary>
    ///<param name = "categoryName" type = "String">
    ///A Name property value of the required category.
    ///</param>
    ///<param name = "active" type = "String">
    ///true to make a category visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetRibbon = function() {
    ///<summary>
    ///Provides access to an object implementing the HtmlEditor's ribbon UI.
    ///</summary>
    ///<returns type = "ASPxClientRibbon">
    ///An <see cref="ASPxClientRibbon" /> object that implements the HtmlEditor's ribbon UI.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value passes validation.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.Validate = function() {
    ///<summary>
    ///Performs validation of the editor's content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetActiveTabByName = function(name) {
    ///<summary>
    ///Set an active tab specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value that is the name of the tab.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetActiveTabName = function() {
    ///<summary>
    ///Returns the name of the active HTML editor tab.
    ///</summary>
    ///<returns type = "String">
    ///A String value that is the active tab's name.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.ReconnectToExternalRibbon = function() {
    ///<summary>
    ///Reconnect the control to an external ribbon.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientHtmlEditor.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientHtmlEditor.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientImageGallery.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the ImageGallery by processing the passed information on the server, in an Action specified via the ImageGallery's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the ImageGallery by processing the passed information on the server, in an Action specified via the ImageGallery's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientImageGallery.prototype.ShowFullscreenViewer = function(index) {
    ///<summary>
    ///Shows the fullscreen viewer with the specified active item.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An Int32 value that is an index of the active item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.HideFullscreenViewer = function() {
    ///<summary>
    ///Hides the fullscreen viewer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.SetFullscreenViewerActiveItemIndex = function(index, preventAnimation) {
    ///<summary>
    ///Makes the specified item active within the fullscreen viewer on the client side.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the index of the item to select.
    ///</param>
    ///<param name = "preventAnimation" type = "Boolean">
    ///true to prevent the animation effect; false to change images using animation.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.GetFullscreenViewerItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the control's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value specifying the number of items.
    ///</returns>
};
MVCxClientImageGallery.prototype.GetFullscreenViewerActiveItemIndex = function() {
    ///<summary>
    ///Returns the index of the active item within the fullscreen viewer.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that is the active item's index.
    ///</returns>
};
MVCxClientImageGallery.prototype.PlaySlideShow = function() {
    ///<summary>
    ///Plays a slide show within a fullscreen viewer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.PauseSlideShow = function() {
    ///<summary>
    ///Pauses a slide show within a fullscreen viewer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Activates the specified page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page that is currently active.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
MVCxClientImageGallery.prototype.GetPageSize = function() {
    ///<summary>
    ///Gets the size of a single ASPxDataView's page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the page size.
    ///</returns>
};
MVCxClientImageGallery.prototype.SetPageSize = function(pageSize) {
    ///<summary>
    ///Sets the size of a single ASPxDataView's page.
    ///</summary>
    ///<param name = "pageSize" type = "Int32">
    ///An integer value that specifies the page size.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages into which the ASPxDataView's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that represents the number of pages.
    ///</returns>
};
MVCxClientImageGallery.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.FirstPage = function() {
    ///<summary>
    ///Activates the first page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.LastPage = function() {
    ///<summary>
    ///Activates the last page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientImageGallery.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientImageGallery.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientImageGallery.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientImageGallery.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientImageGallery.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientImageGallery.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientListBox.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the ListBox by processing the passed information on the server, in an Action specified by the ListBox's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the ListBox by processing the passed information on the server, in an Action specified by the ListBox's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server, and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientListBox.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
MVCxClientListBox.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the list box editor's item collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
MVCxClientListBox.prototype.GetSelectedIndices = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items indices.
    ///</summary>
    ///<returns elementType = "Int32" type = "Array">
    ///An array of integer values that represent the indices of the selected items.
    ///</returns>
};
MVCxClientListBox.prototype.GetSelectedValues = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items values.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array of Object[] objects that represent the values of the selected items.
    ///</returns>
};
MVCxClientListBox.prototype.GetSelectedItems = function() {
    ///<summary>
    ///Returns an array of the list editor's selected items.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientListEditItem">
    ///An array of ASPxClientListEditItem objects that represent the selected items.
    ///</returns>
};
MVCxClientListBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all list box items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.UnselectAll = function() {
    ///<summary>
    ///Unselects all list box items.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SelectIndices = function(indices) {
    ///<summary>
    ///Selects the items with the specified indices within a list box.
    ///</summary>
    ///<param name = "indices" elementType = "Int32" type = "Array">
    ///An array of integer values that represent the items indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.UnselectIndices = function(indices) {
    ///<summary>
    ///Unselects an array of the list box items with the specified indices.
    ///</summary>
    ///<param name = "indices" elementType = "Int32" type = "Array">
    ///An array of integer values that represent the indices.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SelectItems = function(items) {
    ///<summary>
    ///Selects the specified items within a list box.
    ///</summary>
    ///<param name = "items" elementType = "ASPxClientListEditItem" type = "Array">
    ///An array of ASPxClientListEditItem objects that represent the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.UnselectItems = function(items) {
    ///<summary>
    ///Unselects an array of the specified list box items.
    ///</summary>
    ///<param name = "items" elementType = "ASPxClientListEditItem" type = "Array">
    ///An array of ASPxClientListEditItem objects that represent the items.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SelectValues = function(values) {
    ///<summary>
    ///Select the items with the specified values within a list box.
    ///</summary>
    ///<param name = "values" elementType = "Object" type = "Array">
    ///An array of Object[] objects that represent the item's values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.UnselectValues = function(values) {
    ///<summary>
    ///Unselects an array of the list box items with the specified values.
    ///</summary>
    ///<param name = "values" elementType = "Object" type = "Array">
    ///An array of Object[] objects that represent the values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.MakeItemVisible = function(index) {
    ///<summary>
    ///Scrolls the editor's item list, so that the specified item becomes visible.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the item's index within the editor's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.InitOnContainerMadeVisible = function() {
    ///<summary>
    ///Initializes the ASPxClientListBox client object when its parent container becomes visible dynamically, on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.AddItem = function(text) {
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text and associated value, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the editor's items collection, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position to which the new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the editor's items collection, specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
};
MVCxClientListBox.prototype.InsertItem = function(index, text, value, imageUrl) {
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientListBox.prototype.BeginUpdate = function() {
    ///<summary>
    ///Prevents the client list box editor from being rendered until the EndUpdate method is called.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.EndUpdate = function() {
    ///<summary>
    ///Re-enables editor render operations after a call to the BeginUpdate method, and forces an immediate re-rendering.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.ClearItems = function() {
    ///<summary>
    ///Removes all items from the client list box editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.RemoveItem = function(index) {
    ///<summary>
    ///Removes an item specified by its index from the client list editor.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the index of the list item to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.FindItemByText = function(text) {
    ///<summary>
    ///Returns a list box item by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string that specifies the item's text.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the list box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
MVCxClientListBox.prototype.FindItemByValue = function(value) {
    ///<summary>
    ///Returns a list box item by its value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object that specifies the item's value.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the list box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
MVCxClientListBox.prototype.SetItemHtml = function(index, html) {
    ///<summary>
    ///Defines the HTML content for the specified list box item.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the list box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SetItemTooltip = function(index, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the list box editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.AddItemCssClass = function(index, className) {
    ///<summary>
    ///Sets the CSS class for a list box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.RemoveItemCssClass = function(index, className) {
    ///<summary>
    ///Removes the CSS class from a list box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SetItemTextCellHtml = function(itemIndex, textCellIndex, html) {
    ///<summary>
    ///Defines the HTML content for the specified list box item's text cell.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the list box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SetItemTextCellTooltip = function(itemIndex, textCellIndex, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the text cell of the editor's item specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.AddItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Sets the CSS class for a list box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.RemoveItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Removes the CSS class from a list box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the list editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
MVCxClientListBox.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the list editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
MVCxClientListBox.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the list editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
MVCxClientListBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
MVCxClientListBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
MVCxClientListBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetValue = function() {
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
};
MVCxClientListBox.prototype.SetValue = function(value) {
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
MVCxClientListBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
MVCxClientListBox.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientListBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientListBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientListBox.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientListBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientListBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientListBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientNavBar.prototype.GetGroupCount = function() {
    ///<summary>
    ///Returns the number of groups in the navbar.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of groups in the navbar.
    ///</returns>
};
MVCxClientNavBar.prototype.GetGroup = function(index) {
    ///<summary>
    ///Returns a group specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the group object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientNavBarGroup">
    ///An Groups collection.
    ///</returns>
};
MVCxClientNavBar.prototype.GetGroupByName = function(name) {
    ///<summary>
    ///Returns a group specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the group.
    ///</param>
    ///<returns type = "ASPxClientNavBarGroup">
    ///An ASPxClientNavBarGroup object that represents the group with the specified name.
    ///</returns>
};
MVCxClientNavBar.prototype.GetActiveGroup = function() {
    ///<summary>
    ///Returns the navbar's active group.
    ///</summary>
    ///<returns type = "ASPxClientNavBarGroup">
    ///A ASPxClientNavBarGroup object that represents the active group.
    ///</returns>
};
MVCxClientNavBar.prototype.SetActiveGroup = function(group) {
    ///<summary>
    ///Makes the specified group active.
    ///</summary>
    ///<param name = "group" type = "ASPxClientNavBarGroup">
    ///A ASPxClientNavBarGroup object that specifies the active group.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns an item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the item.
    ///</param>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object that represents the item with the specified name.
    ///</returns>
};
MVCxClientNavBar.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the selected item within the navbar control.
    ///</summary>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object that represents the selected item.
    ///</returns>
};
MVCxClientNavBar.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Selects the specified item within the navbar control on the client side.
    ///</summary>
    ///<param name = "item" type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object specifying the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all groups of the navbar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all groups of the navbar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientNavBar.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientNavBar.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientNavBar.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientNavBar.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientNavBar.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientNavBar.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientPivotGrid.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the PivotGrid by processing the passed information on the server, in an Action specified via the grid's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the PivotGrid by processing the passed information on the server, in an Action specified via the grid's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientPivotGrid.prototype.FillStateObject = function(obj) {
    ///<summary>
    ///Passes PivotGrid callback parameters to the specified object.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///An object that receives PivotGrid callback parameters.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPivotGrid.prototype.IsDeferUpdatesChecked = function() {
    ///<summary>
    ///Indicates whether the Defer Layout Update check box is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the check box is enabled; otherwise, false.
    ///</returns>
};
MVCxClientPivotGrid.prototype.IsPrefilterVisible = function() {
    ///<summary>
    ///Indicates whether the Filter Editor (Prefilter) is visible.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the Filter Editor (Prefilter) is visible; otherwise, false.
    ///</returns>
};
MVCxClientPivotGrid.prototype.ShowPrefilter = function() {
    ///<summary>
    ///Shows the Filter Editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPivotGrid.prototype.HidePrefilter = function() {
    ///<summary>
    ///Hides the Filter Editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPivotGrid.prototype.ClearPrefilter = function() {
    ///<summary>
    ///Clears the filter expression applied using the Prefilter (Filter Editor).
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPivotGrid.prototype.ChangePrefilterEnabled = function() {
    ///<summary>
    ///Enables or disables the current filter applied by the Filter Editor (Prefilter).
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPivotGrid.prototype.GetCustomizationFieldsVisibility = function() {
    ///<summary>
    ///Returns a value that specifies whether the customization form is visible.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the customization form is visible; otherwise, false.
    ///</returns>
};
MVCxClientPivotGrid.prototype.SetCustomizationFieldsVisibility = function(value) {
    ///<summary>
    ///Specifies the visibility of the customization form.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to display the customization form; false to hide the customization form.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPivotGrid.prototype.ChangeCustomizationFieldsVisibility = function() {
    ///<summary>
    ///Switches the customization form's visible state.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPivotGrid.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientPivotGrid.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientPivotGrid.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPivotGrid.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPivotGrid.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPivotGrid.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientPivotGrid.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPivotGrid.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientPivotGrid.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPivotGrid.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientPivotGrid.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPivotGrid.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientPopupControl.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the PopupControl by processing the passed information on the server, in an Action specified via the PopupControl's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CallbackRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the PopupControl by processing the passed information on the server, in an Action specified via the PopupControl's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CallbackRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side WindowCallback event, passing the specified argument to it.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that is any information that needs to be sent to the server-side WindowCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientPopupControl.prototype.PerformWindowCallback = function(window, data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameters to update the popup window by processing the related popup window and the passed information on the server, in an Action specified by the PopupControl's CallbackRouteValues property.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object identifying the processed popup window.
    ///</param>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///
    ///</param>
    ///<param name = "parameter" type = "String">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with parameters to update the popup window by processing the related popup window and the passed information on the server.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object identifying the processed popup window.
    ///</param>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientPopupControl.prototype.GetMainElement = function() {
    ///<signature>
    ///<summary>
    ///This method is not in effect for a ASPxClientPopupControl object.
    ///</summary>
    ///<returns type = "Object">
    ///Always null.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
    ///</signature>
};
MVCxClientPopupControl.prototype.GetPopUpReasonMouseEvent = function() {
    ///<summary>
    ///Returns an object containing the information about a mouse event that invoked a default popup window.
    ///</summary>
    ///<returns type = "Object">
    ///An object containing the information about the mouse event.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowPopUpReasonMouseEvent = function(window) {
    ///<summary>
    ///Returns an object containing the information about a mouse event that invoked the specified popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Object">
    ///An object containing the information about the mouse event.
    ///</returns>
};
MVCxClientPopupControl.prototype.SetSize = function(width, height) {
    ///<summary>
    ///Specifies the default popup window's size.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the default popup window's width.
    ///</param>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the default popup window's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowContentWidth = function(window) {
    ///<summary>
    ///Gets the width of the specified popup window's content region.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the width of the content region.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowContentHeight = function(window) {
    ///<summary>
    ///Gets the height of the specified popup window's content region.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the height of the content region.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowHeight = function(window) {
    ///<summary>
    ///Returns the height of a specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the specified popup window's height.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowWidth = function(window) {
    ///<summary>
    ///Returns the width of a specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the specified popup window's width.
    ///</returns>
};
MVCxClientPopupControl.prototype.SetWindowSize = function(window, width, height) {
    ///<summary>
    ///Specifies the size of a specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the required popup window's width.
    ///</param>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the required popup window's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.GetContentHTML = function() {
    ///<summary>
    ///Returns the HTML code that is the content of the popup control's default popup window.
    ///</summary>
    ///<returns type = "String">
    ///A string that is the default popup window's HTML content.
    ///</returns>
};
MVCxClientPopupControl.prototype.SetContentHTML = function(html) {
    ///<summary>
    ///Defines the HTML content for the popup control's default popup window.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetWindowPopupElementID = function(window, popupElementId) {
    ///<summary>
    ///Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup control's window is associated.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object representing a popup control's window.
    ///</param>
    ///<param name = "popupElementId" type = "String">
    ///A string value specifying the ID (or a list of IDs) of the web control or HTML element with which the popup control's window is associated.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetPopupElementID = function(popupElementId) {
    ///<summary>
    ///Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup control is associated.
    ///</summary>
    ///<param name = "popupElementId" type = "String">
    ///A string value specifying the ID (or a list of IDs) of the web control or HTML element to which the popup control is associated.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.GetCurrentPopupElementIndex = function() {
    ///<summary>
    ///Returns an index of the object that invoked the default window within the PopupElementID list.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that is the zero-based position of the object's ID within the PopupElementID list.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowCurrentPopupElementIndex = function(window) {
    ///<summary>
    ///Returns an index of the object that invoked the specified popup window, within the window's PopupElementID list.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that is the zero-based position of object's ID within the PopupElementID list.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetCurrentPopupElement = function() {
    ///<summary>
    ///Returns an object that invoked the default window.
    ///</summary>
    ///<returns type = "Object">
    ///An object that invoked the default window.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowCurrentPopupElement = function(window) {
    ///<summary>
    ///Returns an object that invoked the specified popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Object">
    ///An object that invoked the specified window.
    ///</returns>
};
MVCxClientPopupControl.prototype.IsWindowVisible = function(window) {
    ///<summary>
    ///Returns a value that specifies whether the popup control's specific window is displayed.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window whose visibility is checked.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified popup window is displayed; otherwise, false.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindow = function(index) {
    ///<summary>
    ///Returns a popup window specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the popup window object to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientPopupWindow">
    ///An Windows collection.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowByName = function(name) {
    ///<summary>
    ///Returns a popup window specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the popup window.
    ///</param>
    ///<returns type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that represents the popup window with the specified name.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowCount = function() {
    ///<summary>
    ///Returns the number of popup windows in the popup control.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of popup windows in the popup control.
    ///</returns>
};
MVCxClientPopupControl.prototype.ShowWindow = function(window) {
    ///<signature>
    ///<summary>
    ///Invokes the popup control's specific window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the specified popup window at the popup element with the specified index.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "popupElementIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the popup element within the window's PopupElementID list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientPopupControl.prototype.ShowWindowAtElement = function(window, htmlElement) {
    ///<summary>
    ///Invokes the popup control's specific window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element relative to whose position the default popup window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.ShowWindowAtElementByID = function(window, id) {
    ///<summary>
    ///Invokes the popup control's specific window and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<param name = "id" type = "String">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the default popup window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.ShowWindowAtPos = function(window, x, y) {
    ///<summary>
    ///Invokes the popup control's specific popup window at the specified position.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<param name = "x" type = "Int32">
    ///A integer value specifying the x-coordinate of the popup window's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///A integer value specifying the y-coordinate of the popup window's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.BringWindowToFront = function(window) {
    ///<summary>
    ///Brings the specified popup window to the front of the z-order.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.HideWindow = function(window) {
    ///<summary>
    ///Closes the popup control's specified window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to close.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowContentHtml = function(window) {
    ///<summary>
    ///Returns the HTML code that represents the contents of the specified popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "String">
    ///A string that represents the specified popup window's HTML content.
    ///</returns>
};
MVCxClientPopupControl.prototype.SetWindowContentHtml = function(window, html) {
    ///<summary>
    ///Defines the HTML content for a specific popup window within the popup control.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that represents the HTML code defining the content of the specified popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowContentIFrame = function(window) {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the specified popup window's SetWindowContentUrl client method).
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the specified popup window.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowContentUrl = function(window) {
    ///<summary>
    ///Returns the URL pointing to the web page displayed within the control's specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<returns type = "String">
    ///A string value representing the URL to the web page displayed within the specified popup window.
    ///</returns>
};
MVCxClientPopupControl.prototype.SetWindowContentUrl = function(window, url) {
    ///<summary>
    ///Sets the URL pointing to the web page that should be loaded into and displayed within the control's specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<param name = "url" type = "String">
    ///A string value specifying the URL to the web page to be displayed within the specified popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowPinned = function(window) {
    ///<summary>
    ///Returns a value indicating whether the specified window is pinned.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the window is pinned; otherwise, false.
    ///</returns>
};
MVCxClientPopupControl.prototype.SetWindowPinned = function(window, value) {
    ///<summary>
    ///Sets a value indicating whether the specified window is pinned.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true to pin the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowMaximized = function(window) {
    ///<summary>
    ///Returns a value indicating whether the specified window is maximized.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the window is maximized; otherwise, false.
    ///</returns>
};
MVCxClientPopupControl.prototype.SetWindowMaximized = function(window, value) {
    ///<summary>
    ///Sets a value indicating whether the specified window is maximized.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true to maximize the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWindowCollapsed = function(window) {
    ///<summary>
    ///Returns a value indicating whether the specified window is collapsed.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the window is collapsed; otherwise, false.
    ///</returns>
};
MVCxClientPopupControl.prototype.SetWindowCollapsed = function(window, value) {
    ///<summary>
    ///Sets a value indicating whether the specified window is collapsed.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true to collapse the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.RefreshWindowContentUrl = function(window) {
    ///<summary>
    ///Refreshes the content of the web page displayed within the control's specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.UpdatePosition = function() {
    ///<summary>
    ///Updates the default popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.UpdatePositionAtElement = function(htmlElement) {
    ///<summary>
    ///Updates the default popup window's position, to correctly align it at the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element to which the default popup window is aligned using the PopupVerticalAlign properties.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.UpdateWindowPosition = function(window) {
    ///<summary>
    ///Updates the specified popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.UpdateWindowPositionAtElement = function(window, htmlElement) {
    ///<summary>
    ///Updates the specified popup window's position, to correctly align it at the specified HTML element.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element to which the specified popup window is aligned using the PopupVerticalAlign properties.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.RefreshPopupElementConnection = function() {
    ///<summary>
    ///Refreshes the connection between the ASPxPopupControl and the popup element.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a control's window size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.BringToFront = function() {
    ///<summary>
    ///Brings the window to the front of the z-order.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.GetCollapsed = function() {
    ///<summary>
    ///Returns a value indicating whether the window is collapsed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is collapsed; otherwise, false.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that specifies the contents of the control's window.
    ///</summary>
    ///<returns type = "String">
    ///A string that specifies the window's HTML content.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetContentIFrame = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the control.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetContentIFrameWindow = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the control's window.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetContentUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the web page displayed within the control's window.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetFooterImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window footer by default.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetFooterNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetFooterText = function() {
    ///<summary>
    ///Returns the text displayed within a window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies a window's footer text.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetHeaderImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetHeaderNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within a window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies a window's header text.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetContentWidth = function() {
    ///<summary>
    ///Gets the width of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the width of the content region.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetContentHeight = function() {
    ///<summary>
    ///Gets the height of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the height of the content region.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetMaximized = function() {
    ///<summary>
    ///Returns a value indicating whether the window is maximized.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is maximized; otherwise, false.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetPinned = function() {
    ///<summary>
    ///Returns a value indicating whether the window is pinned.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is pinned; otherwise, false.
    ///</returns>
};
MVCxClientPopupControl.prototype.RefreshContentUrl = function() {
    ///<summary>
    ///Refreshes the content of the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetCollapsed = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is collapsed.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, to collapse the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML markup specifying the contents of the control's window.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetContentUrl = function(url) {
    ///<summary>
    ///Sets the URL to point to the web page that should be loaded into, and displayed within the control's window.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value specifying the URL to the web page displayed within the control's window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetFooterImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window footer by default.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetFooterNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetFooterText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies a window's footer text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetHeaderImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetHeaderNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetHeaderText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies a window's header text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetMaximized = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is maximized.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true. to maximize the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetPinned = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is pinned.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, to pin the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.Show = function() {
    ///<signature>
    ///<summary>
    ///Invokes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the control's window at the popup element with the specified index.
    ///</summary>
    ///<param name = "popupElementIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the popup element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientPopupControl.prototype.ShowAtElement = function(htmlElement) {
    ///<summary>
    ///Invokes the control's window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.ShowAtElementByID = function(id) {
    ///<summary>
    ///Invokes the control's window and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the control's window at the specified position.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///A integer value specifying the x-coordinate of the window's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///A integer value specifying the y-coordinate of the window's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.Hide = function() {
    ///<summary>
    ///Closes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.IsVisible = function() {
    ///<summary>
    ///Returns a value that specifies whether the control's window is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the window is displayed; otherwise, false.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientPopupControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientPopupControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientPopupControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientPopupControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPopupControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientDocumentViewer.prototype.GetSplitter = function() {
    ///<summary>
    ///Provides access to the Splitter of the ASPxClientDocumentViewer.
    ///</summary>
    ///<returns type = "ASPxClientSplitter">
    ///An ASPxClientSplitter object.
    ///</returns>
};
MVCxClientDocumentViewer.prototype.GetViewer = function() {
    ///<summary>
    ///Provides access to the ASPxClientDocumentViewer's preview that exposes methods to print and export the document.
    ///</summary>
    ///<returns type = "ASPxClientReportViewer">
    ///An ASPxClientReportViewer object.
    ///</returns>
};
MVCxClientDocumentViewer.prototype.GetToolbar = function() {
    ///<summary>
    ///Provides access to the Document Viewer toolbar on the client.
    ///</summary>
    ///<returns type = "ASPxClientReportToolbar">
    ///An ASPxClientReportToolbar object.
    ///</returns>
};
MVCxClientDocumentViewer.prototype.GetRibbonToolbar = function() {
    ///<summary>
    ///Provides access to the Ribbon of the ASPxClientDocumentViewer.
    ///</summary>
    ///<returns type = "ASPxClientRibbon">
    ///An ASPxClientRibbon object.
    ///</returns>
};
MVCxClientDocumentViewer.prototype.GetParametersPanel = function() {
    ///<summary>
    ///Provides access to the parameters panel of the ASPxClientDocumentViewer.
    ///</summary>
    ///<returns type = "ASPxClientReportParametersPanel">
    ///An ASPxClientReportParametersPanel object.
    ///</returns>
};
MVCxClientDocumentViewer.prototype.GetDocumentMap = function() {
    ///<summary>
    ///Provides access to the document of the ASPxClientDocumentViewer.
    ///</summary>
    ///<returns type = "ASPxClientReportDocumentMap">
    ///An ASPxClientReportDocumentMap object.
    ///</returns>
};
MVCxClientDocumentViewer.prototype.GotoBookmark = function(pageIndex, bookmarkPath) {
    ///<summary>
    ///Sets focus on the report control specified by its bookmark.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value, specifying the page index.
    ///</param>
    ///<param name = "bookmarkPath" type = "String">
    ///A String value, specifying the path to the bookmark.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDocumentViewer.prototype.Refresh = function() {
    ///<summary>
    ///Initiates a round trip to the server so that the current page will be reloaded.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDocumentViewer.prototype.Print = function() {
    ///<signature>
    ///<summary>
    ///Prints the current document.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Prints the document's page with the specified page index.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///A Int32 representing the index of the page to be printed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientDocumentViewer.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Displays the specified report page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value, identifying the report page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDocumentViewer.prototype.Search = function() {
    ///<summary>
    ///Invokes the Search dialog, which allows end-users to search for specific text in a report.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDocumentViewer.prototype.IsSearchAllowed = function() {
    ///<summary>
    ///Gets a value indicating whether or not searching text across a report is permitted in the web browser.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if searching text in the report is allowed; otherwise, false.
    ///</returns>
};
MVCxClientDocumentViewer.prototype.SaveToWindow = function(format) {
    ///<summary>
    ///Exports a report to a file of the specified format, and shows it in a new Web Browser window.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string specifying the format to which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDocumentViewer.prototype.SaveToDisk = function(format) {
    ///<summary>
    ///Exports a report to a file of the specified format, and saves it to the disk.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string specifying the format to which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDocumentViewer.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientDocumentViewer.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientDocumentViewer.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDocumentViewer.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDocumentViewer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDocumentViewer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientDocumentViewer.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDocumentViewer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientDocumentViewer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDocumentViewer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientDocumentViewer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientDocumentViewer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientReportViewer.prototype.SubmitParameters = function(parameters) {
    ///<summary>
    ///Submits the values of the specified parameters.
    ///</summary>
    ///<param name = "parameters" type = "Dictionary">
    ///A dictionary containing the parameter names, along with their Object values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.Print = function() {
    ///<signature>
    ///<summary>
    ///Prints a report shown in the ReportViewer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Prints a report page with the specified page index.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value which specifies an index of the page to be printed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientReportViewer.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Displays a report page with the specified page index in the ReportViewer.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value which specifies the index of a page to be displayed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.Refresh = function() {
    ///<summary>
    ///Initiates a round trip to the server so that the current page will be reloaded.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.Search = function() {
    ///<summary>
    ///Invokes the Search dialog, which allows end-users to search for specific text in a report.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.SaveToWindow = function(format) {
    ///<summary>
    ///Exports a report to a file of the specified format, and shows it in a new Web Browser window.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string specifying the format, to which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.SaveToDisk = function(format) {
    ///<summary>
    ///Exports a report to a file of the specified format, and saves it to the disk.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string specifying the format, to which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.IsSearchAllowed = function() {
    ///<summary>
    ///Gets a value indicating whether or not searching text across a report is permitted in the web browser.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if searching text in the report is allowed; otherwise, false.
    ///</returns>
};
MVCxClientReportViewer.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientReportViewer.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientReportViewer.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientReportViewer.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientReportViewer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientReportViewer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportViewer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientReportDesigner.prototype.PerformCallback = function(arg) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server with the specified argument.
    ///</summary>
    ///<param name = "arg" type = "Object">
    ///A Object value, specifying the callback argument.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing it the specified argument.
    ///</summary>
    ///<param name = "arg" type = "Object">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server with the specified argument.
    ///</summary>
    ///<param name = "arg" type = "String">
    ///A String value, specifying the callback argument.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing it the specified argument.
    ///</summary>
    ///<param name = "arg" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientReportDesigner.prototype.UpdateLocalization = function(localization) {
    ///<summary>
    ///Updates the localization settings of the ASPxClientReportDesigner properties.
    ///</summary>
    ///<param name = "localization" type = "Dictionary">
    ///A dictionary containing the property names, along with their localized equivalents.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.GetDesignerModel = function() {
    ///<summary>
    ///Returns the object model of a Web Report Designer.
    ///</summary>
    ///<returns type = "Object">
    ///A Object value.
    ///</returns>
};
MVCxClientReportDesigner.prototype.GetPreviewModel = function() {
    ///<summary>
    ///Provides access to the preview model of the ASPxClientReportDesigner.
    ///</summary>
    ///<returns type = "Object">
    ///An object that specifies the preview model.
    ///</returns>
};
MVCxClientReportDesigner.prototype.GetPropertyInfo = function(controlType, path) {
    ///<signature>
    ///<summary>
    ///Returns information about the specified property of the specified control.
    ///</summary>
    ///<param name = "controlType" type = "String">
    ///A string that specifies the control type.
    ///</param>
    ///<param name = "path" type = "String">
    ///A string that specifies the path to the property.
    ///</param>
    ///<returns type = "ASPxDesignerElementSerializationInfo">
    ///An object that provides property information.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns information about the specified properties of the specified control.
    ///</summary>
    ///<param name = "controlType" type = "String">
    ///A string that specifies the control type.
    ///</param>
    ///<param name = "path" elementType = "String" type = "Array">
    ///An array of strings that specify paths to properties.
    ///</param>
    ///<returns type = "ASPxDesignerElementSerializationInfo">
    ///An object that provides property information.
    ///</returns>
    ///</signature>
};
MVCxClientReportDesigner.prototype.GetButtonStorage = function() {
    ///<summary>
    ///Returns actions performed by buttons available in the menu and toolbar of the Web Report Designer.
    ///</summary>
    ///<returns type = "Object">
    ///An object that specifies button actions.
    ///</returns>
};
MVCxClientReportDesigner.prototype.GetJsonReportModel = function() {
    ///<summary>
    ///Gets a client-side model of the currently opened report serialized to Json.
    ///</summary>
    ///<returns type = "String">
    ///A string containing a report model.
    ///</returns>
};
MVCxClientReportDesigner.prototype.IsModified = function() {
    ///<summary>
    ///Indicates whether or not the current ASPxClientReportDesigner instance has been modified.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the Web Report Designer has been modified; otherwise false.
    ///</returns>
};
MVCxClientReportDesigner.prototype.ResetIsModified = function() {
    ///<summary>
    ///Resets the value returned by the IsModified method.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.AddToPropertyGrid = function(groupName, property) {
    ///<summary>
    ///Adds a custom property to the Properties Panel.
    ///</summary>
    ///<param name = "groupName" type = "String">
    ///A string that specifies the name of group to which a property should be added.
    ///</param>
    ///<param name = "property" type = "ASPxDesignerElementSerializationInfo">
    ///An object that provides information required to serialize a property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.AddParameterType = function(parameterInfo, editorOptions) {
    ///<summary>
    ///Adds a custom parameter type to the Web End-User Report Designer.
    ///</summary>
    ///<param name = "parameterInfo" type = "ASPxDesignerParameterType">
    ///An object that provides information about a parameter type to be added.
    ///</param>
    ///<param name = "editorOptions" type = "ASPxDesignerEditorOptions">
    ///An object that provides information about an editor used to specify parameter values in design mode.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.RemoveParameterType = function(parameterType) {
    ///<summary>
    ///Removes the specified parameter type from the Web End-User Report Designer.
    ///</summary>
    ///<param name = "parameterType" type = "String">
    ///A string that specifies a parameter type to be deleted.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.GetParameterInfo = function(parameterType) {
    ///<summary>
    ///Returns an object that contains information on the specified parameter type.
    ///</summary>
    ///<param name = "parameterType" type = "String">
    ///A string that specifies a parameter type.
    ///</param>
    ///<returns type = "ASPxDesignerParameterType">
    ///An object storing information on a parameter type.
    ///</returns>
};
MVCxClientReportDesigner.prototype.GetParameterEditor = function(parameterType) {
    ///<summary>
    ///Returns a value editor associated with the specified parameter type.
    ///</summary>
    ///<param name = "parameterType" type = "String">
    ///A string that specifies a parameter type.
    ///</param>
    ///<returns type = "ASPxDesignerEditorOptions">
    ///An object that stores settings of a parameter editor.
    ///</returns>
};
MVCxClientReportDesigner.prototype.ReportStorageGetData = function(url) {
    ///<summary>
    ///Returns the report layout stored in a report storage under the specified URL.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string that specifies the report URL.
    ///</param>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
MVCxClientReportDesigner.prototype.ReportStorageSetData = function(reportLayout, url) {
    ///<summary>
    ///Stores the specified report to a report storage using the specified URL.
    ///</summary>
    ///<param name = "reportLayout" type = "String">
    ///A string that specifies the report layout to be saved.
    ///</param>
    ///<param name = "url" type = "String">
    ///A string that specifies the URL used to save a report.
    ///</param>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
MVCxClientReportDesigner.prototype.ReportStorageSetNewData = function(reportLayout, url) {
    ///<summary>
    ///Stores the specified report to a report storage using a new URL.
    ///</summary>
    ///<param name = "reportLayout" type = "String">
    ///A string that specifies the report layout to be saved.
    ///</param>
    ///<param name = "url" type = "String">
    ///A string that specifies the default report URL.
    ///</param>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
MVCxClientReportDesigner.prototype.SaveReport = function() {
    ///<summary>
    ///Saves the current report.
    ///</summary>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
MVCxClientReportDesigner.prototype.CloseCurrentTab = function() {
    ///<summary>
    ///Closes the report tab currently being opened in the Web Report Designer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.SaveNewReport = function(reportName) {
    ///<summary>
    ///Saves the current report under a new name.
    ///</summary>
    ///<param name = "reportName" type = "String">
    ///A string that specifies the report name.
    ///</param>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
MVCxClientReportDesigner.prototype.ReportStorageGetUrls = function() {
    ///<summary>
    ///Returns the report URLs and display names existing in a report storage.
    ///</summary>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
MVCxClientReportDesigner.prototype.OpenReport = function(url) {
    ///<summary>
    ///Opens the specified report on the client side of the Web Report Designer.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string that specifies the URL of a report to be opened.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.ShowPreview = function() {
    ///<summary>
    ///Switches the Web Report Designer to the preview mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientReportDesigner.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientReportDesigner.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientReportDesigner.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientReportDesigner.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientReportDesigner.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientReportDesigner.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientRichEdit.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the RichEdit by processing the passed information on the server, in an Action specified via the CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the RichEdit by processing the passed information on the server, in an Action specified via the CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientRichEdit.prototype.SetFullscreenMode = function(fullscreen) {
    ///<summary>
    ///Enables you to switch the full-screen mode of the Rich Text Editor.
    ///</summary>
    ///<param name = "fullscreen" type = "Boolean">
    ///true to activate full-screen mode; false to deactivate full-screen mode.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRichEdit.prototype.GetRibbon = function() {
    ///<summary>
    ///Provides access to an object implementing the RichEdit's ribbon UI.
    ///</summary>
    ///<returns type = "ASPxClientRibbon">
    ///An <see cref="ASPxClientRibbon" /> object that implements the RIchEdit's ribbon UI.
    ///</returns>
};
MVCxClientRichEdit.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the RichEdit.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRichEdit.prototype.HasUnsavedChanges = function() {
    ///<summary>
    ///Indicates whether any unsaved changes are contained in the current document.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the document contains unsaved changes; otherwise, false.
    ///</returns>
};
MVCxClientRichEdit.prototype.ReconnectToExternalRibbon = function() {
    ///<summary>
    ///Reconnects the RichEdit to an external ribbon.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRichEdit.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientRichEdit.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientRichEdit.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRichEdit.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRichEdit.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRichEdit.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientRichEdit.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRichEdit.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientRichEdit.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRichEdit.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientRichEdit.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRichEdit.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientRoundPanel.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the Round Panel by processing the passed information on the server, in an Action specified by the Round Panel's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the Round Panel by processing the passed information on the server, in an Action specified by the Round Panel's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side ContentCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that is any information that needs to be sent to the server-side ContentCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side ContentCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that is any information that needs to be sent to the server-side ContentCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientRoundPanel.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within the panel's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies the panel's header text.
    ///</returns>
};
MVCxClientRoundPanel.prototype.SetHeaderText = function(text) {
    ///<summary>
    ///Specifies the text displayed in the panel's header.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value that specifies the panel header's text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRoundPanel.prototype.GetCollapsed = function() {
    ///<summary>
    ///Returns a value indicating whether the panel is collapsed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is collapsed; otherwise, false.
    ///</returns>
};
MVCxClientRoundPanel.prototype.SetCollapsed = function(collapsed) {
    ///<summary>
    ///Sets a value indicating whether the panel is collapsed.
    ///</summary>
    ///<param name = "collapsed" type = "Boolean">
    ///true, to collapse the panel; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRoundPanel.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that is the content of the panel.
    ///</summary>
    ///<returns type = "String">
    ///A string that is the panel's HTML content.
    ///</returns>
};
MVCxClientRoundPanel.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML content for the panel.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the panel.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRoundPanel.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Sets a value specifying whether the panel is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true to enable the panel; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRoundPanel.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a panel is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is enabled; otherwise, false.
    ///</returns>
};
MVCxClientRoundPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientRoundPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientRoundPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRoundPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRoundPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRoundPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientRoundPanel.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRoundPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientRoundPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRoundPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientRoundPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientRoundPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientScheduler.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the Scheduler by processing the passed information on the server, in an Action specified via the Scheduler's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the Scheduler by processing the passed information on the server, in an Action specified via the Scheduler's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientScheduler.prototype.GetActiveViewType = function() {
    ///<summary>
    ///Client-side scripting  method that gets the active View.
    ///</summary>
    ///<returns type = "ASPxSchedulerViewType">
    ///A SchedulerViewType enumeration value, representing  ASPxScheduler's view.
    ///</returns>
};
MVCxClientScheduler.prototype.SetActiveViewType = function(value) {
    ///<summary>
    ///Client-side scripting  method to change the ASPxScheduler's active View.
    ///</summary>
    ///<param name = "value" type = "ASPxSchedulerViewType">
    ///A ASPxSchedulerViewType enumeration value, representing a view type to set.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.Refresh = function() {
    ///<signature>
    ///<summary>
    ///Client-side scripting method which initiates a round trip to the server so that the current page will be reloaded.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Client-side scripting method which initiates a round trip to the server, so that the control will be reloaded using the specified refresh action.
    ///</summary>
    ///<param name = "refreshAction" type = "ASPxClientSchedulerRefreshAction">
    ///An ASPxClientSchedulerRefreshAction enumeration value, specifying the refresh action.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientScheduler.prototype.GetGroupType = function() {
    ///<summary>
    ///Client-side function that returns the type of grouping applied to the appointments displayed in the scheduler.
    ///</summary>
    ///<returns type = "ASPxSchedulerGroupType">
    ///A ASPxSchedulerGroupType enumeration value, specifying the grouping type.
    ///</returns>
};
MVCxClientScheduler.prototype.SetGroupType = function(value) {
    ///<summary>
    ///Client-side scripting method which raises the callback command to set the GroupType.
    ///</summary>
    ///<param name = "value" type = "ASPxSchedulerGroupType">
    ///An ASPxSchedulerGroupType enumeration value, which specifies how appointments are grouped.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.GotoToday = function() {
    ///<summary>
    ///Client-side method that navigates the scheduler to the current system date.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.GotoDate = function(date) {
    ///<summary>
    ///Client-side scripting method which raises the GotoDate callback command.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime value specifying the destination time.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.NavigateBackward = function() {
    ///<summary>
    ///Client-side function which slides the visible interval one time span back.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.NavigateForward = function() {
    ///<summary>
    ///Client-side function which slides the visible interval one time span forward.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.ChangeTimeZoneId = function(timeZoneId) {
    ///<summary>
    ///Client-side method which raises the callback command to change the ClientTimeZoneId of the scheduler.
    ///</summary>
    ///<param name = "timeZoneId" type = "String">
    ///A string, a time zone identifier which is valid for the System.TimeZoneInfo.Id property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.ShowSelectionToolTip = function(x, y) {
    ///<summary>
    ///Displays a Selection ToolTip on a position given by the specified coordinates.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer representing the X-coordinate.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer representing the Y-coordinate.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.GetSelectedInterval = function() {
    ///<summary>
    ///Client-side function that returns the time interval, selected in the scheduler.
    ///</summary>
    ///<returns type = "ASPxClientTimeInterval">
    ///An ASPxClientTimeInterval object, representing the time interval.
    ///</returns>
};
MVCxClientScheduler.prototype.GetSelectedResource = function() {
    ///<summary>
    ///Client-side function that returns the ResourceId of selected time cell's resource.
    ///</summary>
    ///<returns type = "String">
    ///A string, representing the ID of the resource.
    ///</returns>
};
MVCxClientScheduler.prototype.GetVisibleAppointments = function() {
    ///<summary>
    ///Gets a collection of visible appointments.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientAppointment">
    ///A collection of ASPxClientAppointment objects.
    ///</returns>
};
MVCxClientScheduler.prototype.GetAppointmentById = function(id) {
    ///<summary>
    ///Client-side function that returns an appointment with the specified ID.
    ///</summary>
    ///<param name = "id" type = "Object">
    ///An appointment's identifier.
    ///</param>
    ///<returns type = "ASPxClientAppointment">
    ///An ASPxClientAppointment object, representing an appointment on the client.
    ///</returns>
};
MVCxClientScheduler.prototype.GetSelectedAppointmentIds = function() {
    ///<summary>
    ///Client-side function that returns the id's of selected appointments.
    ///</summary>
    ///<returns elementType = "String" type = "Array">
    ///A string array which holds the appointment identifiers.
    ///</returns>
};
MVCxClientScheduler.prototype.DeselectAppointmentById = function(aptId) {
    ///<summary>
    ///Client-side function that removes the appointment specified by its client ID from a collection of selected appointments.
    ///</summary>
    ///<param name = "aptId" type = "Object">
    ///An appointment's identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.SelectAppointmentById = function(aptId) {
    ///<summary>
    ///Client-side function that selects an appointment with the specified ID.
    ///</summary>
    ///<param name = "aptId" type = "Object">
    ///An appointment's identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.GetAppointmentProperties = function(aptId, propertyNames, onCallBack) {
    ///<summary>
    ///Enables obtaining appointment property values in a client-side script. Executes the callback command with the AppointmentData identifier.
    ///</summary>
    ///<param name = "aptId" type = "Int32">
    ///An integer, representing the appointment ID.
    ///</param>
    ///<param name = "propertyNames" elementType = "String" type = "Array">
    ///An array of strings, representing the appointment properties to query.
    ///</param>
    ///<param name = "onCallBack" type = "Object">
    ///A handler of a function which will receive and process the properties' values.
    ///</param>
    ///<returns elementType = "String" type = "Array">
    ///An array of strings containing string representations of appointment properties.
    ///</returns>
};
MVCxClientScheduler.prototype.RefreshClientAppointmentProperties = function(clientAppointment, propertyNames, onCallBack) {
    ///<summary>
    ///Initiates a callback to retrieve and apply the values for the specified list of properties to the specified appointment, and transfer control to the specified function.
    ///</summary>
    ///<param name = "clientAppointment" type = "ASPxClientAppointment">
    ///An ASPxClientAppointment object that is the client appointment for which the data is retrieved.
    ///</param>
    ///<param name = "propertyNames" elementType = "String" type = "Array">
    ///An array of strings, that are the names of appointment properties to query.
    ///</param>
    ///<param name = "onCallBack" type = "Object">
    ///A handler of a function executed after a callback.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.ShowAppointmentFormByClientId = function(aptClientId) {
    ///<summary>
    ///Client-side function that invokes the editing form for the appointment specified by its client ID.
    ///</summary>
    ///<param name = "aptClientId" type = "String">
    ///A string, representing the appointment client identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.ShowAppointmentFormByServerId = function(aptServerId) {
    ///<summary>
    ///Client-side function that invokes the editing form for the appointment specified by its storage identifier.
    ///</summary>
    ///<param name = "aptServerId" type = "String">
    ///A string, representing the appointment identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.SetTopRowTime = function(duration, viewType) {
    ///<signature>
    ///<summary>
    ///Sets the time of the day corresponding to the start of the topmost displayed time cell row.
    ///</summary>
    ///<param name = "duration" type = "Int32">
    ///An integer, representing the number of milliseconds passed since the start of the day.
    ///</param>
    ///<param name = "viewType" type = "ASPxSchedulerViewType">
    ///An ASPxSchedulerViewType enumeration member, representing the scheduler's View. It can be either 'Day' or 'WorkWeek'.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the time of the day corresponding to the start of the topmost displayed time cell row.
    ///</summary>
    ///<param name = "duration" type = "Int32">
    ///An integer, representing the number of milliseconds passed since the start of the day.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientScheduler.prototype.GetTopRowTime = function(viewType) {
    ///<signature>
    ///<summary>
    ///Gets the time of the day corresponding to the start of the topmost displayed time cell row.
    ///</summary>
    ///<param name = "viewType" type = "ASPxSchedulerViewType">
    ///An ASPxSchedulerViewType enumeration member, representing the scheduler's View. It can be either "Day" or  "WorkWeek", otherwise the result is undefined.
    ///</param>
    ///<returns type = "Int32">
    ///An integer, representing the number of milliseconds passed since the start of the day.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the time of day corresponding to the start of the topmost displayed time cell row.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer, representing the number of milliseconds passed since the start of the day.
    ///</returns>
    ///</signature>
};
MVCxClientScheduler.prototype.ShowLoadingPanel = function() {
    ///<summary>
    ///Client-side scripting method which displays the Loading Panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.HideLoadingPanel = function() {
    ///<summary>
    ///Client-side scripting method which hides the Loading Panel from view.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.ShowInplaceEditor = function(start, end) {
    ///<signature>
    ///<summary>
    ///Client-side method that invokes the inplace editor form to create a new appointment.
    ///</summary>
    ///<param name = "start" type = "DateTime">
    ///A date object, representing the start of the new appointment.
    ///</param>
    ///<param name = "end" type = "DateTime">
    ///A date object, representing the end of the new appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Client-side method that invokes the inplace editor form to create a new appointment.
    ///</summary>
    ///<param name = "start" type = "DateTime">
    ///A date object, representing the start of the new appointment.
    ///</param>
    ///<param name = "end" type = "DateTime">
    ///A date object, representing the end of the new appointment.
    ///</param>
    ///<param name = "resourceId" type = "String">
    ///An object representing the identifier of a resource associated with the new appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientScheduler.prototype.InsertAppointment = function(apt) {
    ///<summary>
    ///Client-side scripting  method to insert the specified appointment.
    ///</summary>
    ///<param name = "apt" type = "ASPxClientAppointment">
    ///An ASPxClientAppointment object representing the client-side appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.UpdateAppointment = function(apt) {
    ///<summary>
    ///Client-side scripting  method to update the specified appointment.
    ///</summary>
    ///<param name = "apt" type = "ASPxClientAppointment">
    ///An ASPxClientAppointment object representing the client-side appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.DeleteAppointment = function(apt) {
    ///<summary>
    ///Client-side scripting  method to delete the specified appointment.
    ///</summary>
    ///<param name = "apt" type = "ASPxClientAppointment">
    ///An ASPxClientAppointment object representing the client-side appointment.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.GetVisibleIntervals = function() {
    ///<summary>
    ///Client-side method that allows retrieving a collection of time intervals displayed by the ASPxScheduler.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientTimeInterval">
    ///An array of ASPxClientTimeInterval objects, representing visible intervals.
    ///</returns>
};
MVCxClientScheduler.prototype.ChangeToolTipContainer = function(container) {
    ///<summary>
    ///Changes the container that the ASPxScheduler tooltip belongs to.
    ///</summary>
    ///<param name = "container" type = "Object">
    ///An object that serves as the new container for the pop-up menu.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.ChangePopupMenuContainer = function(container) {
    ///<summary>
    ///Changes the container that the ASPxScheduler pop-up menu belongs to.
    ///</summary>
    ///<param name = "container" type = "Object">
    ///An object that serves as the new container for the pop-up menu.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.ChangeFormContainer = function(container) {
    ///<summary>
    ///Returns focus to the form if the ASPxScheduler control is not visible when the reminder fires.
    ///</summary>
    ///<param name = "container" type = "Object">
    ///A DIV object that is located in such a way that it is visible on the page in situations when the ASPxScheduler control is hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.AppointmentFormSave = function() {
    ///<summary>
    ///Client-side scripting method that saves appointment modifications and closes the form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.AppointmentFormDelete = function() {
    ///<summary>
    ///Client-side scripting method that deletes the appointment being edited.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.AppointmentFormCancel = function() {
    ///<summary>
    ///Client-side scripting method that cancels changes and closes the appointment editing form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.GoToDateFormApply = function() {
    ///<summary>
    ///Client-side scripting method that navigates the scheduler to the date selected in the GotoDate form and closes the form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.GoToDateFormCancel = function() {
    ///<summary>
    ///Client-side scripting method that cancels changes and closes the GotoDate form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.InplaceEditFormSave = function() {
    ///<summary>
    ///Client-side scripting method that cancels changes and closes the form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.InplaceEditFormCancel = function() {
    ///<summary>
    ///Client-side scripting method that cancels changes and closes the form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.InplaceEditFormShowMore = function() {
    ///<summary>
    ///Client-side scripting method that invokes the appointment editing form for the appointment being edited in the inplace editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.ReminderFormCancel = function() {
    ///<summary>
    ///Client-side scripting method that closes the Reminder form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.ReminderFormDismiss = function() {
    ///<summary>
    ///Client-side scripting method that calls the Dismiss method for the selected reminder.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.ReminderFormDismissAll = function() {
    ///<summary>
    ///Client-side scripting method that dismisses all reminders shown in the Reminder form.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.ReminderFormSnooze = function() {
    ///<summary>
    ///Client-side scripting method that changes the alert time for the selected reminder to the specified interval.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientScheduler.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientScheduler.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientScheduler.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientScheduler.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientScheduler.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientScheduler.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientSchedulerTemplateToolTip.prototype.CanShowToolTip = function() {
    ///<summary>
    ///Returns the value that indicates whether or not the tooltip can be displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the tooltip can be displayed; otherwise, false.
    ///</returns>
};
MVCxClientSchedulerTemplateToolTip.prototype.FinalizeUpdate = function(toolTipData) {
    ///<summary>
    ///Ends updating the tooltip content.
    ///</summary>
    ///<param name = "toolTipData" type = "ASPxClientSchedulerToolTipData">
    ///An ASPxClientSchedulerToolTipData object providing data required to update the tooltip content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSchedulerTemplateToolTip.prototype.Update = function(toolTipData) {
    ///<summary>
    ///Updates the tooltip content.
    ///</summary>
    ///<param name = "toolTipData" type = "ASPxClientSchedulerToolTipData">
    ///An ASPxClientSchedulerToolTipData object providing data required to update the tooltip content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSchedulerTemplateToolTip.prototype.Close = function() {
    ///<summary>
    ///Closes the tooltip.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSchedulerTemplateToolTip.prototype.CalculatePosition = function(bounds) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "bounds" type = "Object">
    ///
    ///</param>
    ///<returns type = "ASPxClientPoint">
    ///
    ///</returns>
};
MVCxClientSchedulerTemplateToolTip.prototype.ShowAppointmentMenu = function(eventObject) {
    ///<summary>
    ///Displays the Appointment Menu in the position of the tooltip.
    ///</summary>
    ///<param name = "eventObject" type = "Object">
    ///An object containing information about the event on which the menu is displayed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSchedulerTemplateToolTip.prototype.ShowViewMenu = function(eventObject) {
    ///<summary>
    ///Displays the View Menu in the position of the tooltip.
    ///</summary>
    ///<param name = "eventObject" type = "Object">
    ///An object containing information about the event on which the menu is displayed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSchedulerTemplateToolTip.prototype.ConvertIntervalToString = function(interval) {
    ///<summary>
    ///Returns the string representation of the specified interval.
    ///</summary>
    ///<param name = "interval" type = "ASPxClientTimeInterval">
    ///An ASPxClientTimeInterval object to convert.
    ///</param>
    ///<returns type = "String">
    ///A string containing a textual representation of the interval.
    ///</returns>
};
MVCxClientSpreadsheet.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the Spreadsheet by processing the passed information on the server, in an Action specified via the CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the Spreadsheet by processing the passed information on the server, in an Action specified via the CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientSpreadsheet.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the Spreadsheet.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSpreadsheet.prototype.GetRibbon = function() {
    ///<summary>
    ///Gets access to the client ribbon object.
    ///</summary>
    ///<returns type = "ASPxClientRibbon">
    ///An <see cref="ASPxClientRibbon" /> object specifying the RichEdit's ribbon.
    ///</returns>
};
MVCxClientSpreadsheet.prototype.SetFullscreenMode = function(fullscreen) {
    ///<summary>
    ///Enables you to switch the full-screen mode of the Spreadsheet.
    ///</summary>
    ///<param name = "fullscreen" type = "Boolean">
    ///true to activate full-screen mode; false to deactivate full-screen mode.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSpreadsheet.prototype.GetSelection = function() {
    ///<summary>
    ///Returns the current selection made in a Spreadsheet.
    ///</summary>
    ///<returns type = "ASPxClientSpreadsheetSelection">
    ///An <see cref="ASPxClientSpreadsheetSelection" /> object defining the current selection.
    ///</returns>
};
MVCxClientSpreadsheet.prototype.HasUnsavedChanges = function() {
    ///<summary>
    ///Indicates whether any unsaved changes are contained in the current document.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the document contains unsaved changes; otherwise, false.
    ///</returns>
};
MVCxClientSpreadsheet.prototype.GetCellValue = function(colModelIndex, rowModelIndex) {
    ///<summary>
    ///Gets the value of the specified cell.
    ///</summary>
    ///<param name = "colModelIndex" type = "Int32">
    ///An integer value specifying the cell's column index.
    ///</param>
    ///<param name = "rowModelIndex" type = "Int32">
    ///An integer value specifying the cell's row index.
    ///</param>
    ///<returns type = "Object">
    ///An object representing the specified cell's value.
    ///</returns>
};
MVCxClientSpreadsheet.prototype.GetCellComment = function(colModelIndex, rowModelIndex) {
    ///<summary>
    ///
    ///</summary>
    ///<param name = "colModelIndex" type = "Int32">
    ///
    ///</param>
    ///<param name = "rowModelIndex" type = "Int32">
    ///
    ///</param>
    ///<returns type = "Object">
    ///
    ///</returns>
};
MVCxClientSpreadsheet.prototype.GetActiveCellValue = function() {
    ///<summary>
    ///Gets the value of the currently active cell.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the currently active cell's value.
    ///</returns>
};
MVCxClientSpreadsheet.prototype.PerformDocumentCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side DocumentCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side DocumentCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSpreadsheet.prototype.ReconnectToExternalRibbon = function() {
    ///<summary>
    ///Reconnects the Spreadsheet to an external ribbon.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSpreadsheet.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientSpreadsheet.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientSpreadsheet.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSpreadsheet.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSpreadsheet.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSpreadsheet.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientSpreadsheet.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSpreadsheet.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientSpreadsheet.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSpreadsheet.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientSpreadsheet.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientSpreadsheet.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientPageControl.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the PageControl by processing the passed information on the server, in an Action specified by the PageControl's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the PageControl by processing the passed information on the server, in an Action specified by the PageControl's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientPageControl.prototype.GetTabContentHTML = function(tab) {
    ///<summary>
    ///Returns the HTML code that represents the contents of the specified page within the page control.
    ///</summary>
    ///<param name = "tab" type = "ASPxClientTab">
    ///An ASPxClientTab object that specifies the required page.
    ///</param>
    ///<returns type = "String">
    ///A string that represents the specified page's HTML content.
    ///</returns>
};
MVCxClientPageControl.prototype.SetTabContentHTML = function(tab, html) {
    ///<summary>
    ///Defines the HTML content for a specific tab page within the page control.
    ///</summary>
    ///<param name = "tab" type = "ASPxClientTab">
    ///An ASPxClientTab object that specifies the required tab page.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that represents the HTML code defining the content of the specified page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a tab page's size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.GetActiveTab = function() {
    ///<summary>
    ///Returns the active tab within the tab control.
    ///</summary>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the active tab.
    ///</returns>
};
MVCxClientPageControl.prototype.SetActiveTab = function(tab) {
    ///<summary>
    ///Makes the specified tab active within the tab control on the client side.
    ///</summary>
    ///<param name = "tab" type = "ASPxClientTab">
    ///An ASPxClientTab object specifying the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.GetActiveTabIndex = function() {
    ///<summary>
    ///Returns the index of the active tab within the tab control.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer that represents the active tab's index.
    ///</returns>
};
MVCxClientPageControl.prototype.SetActiveTabIndex = function(index) {
    ///<summary>
    ///Makes a tab active within the tab control, specifying the tab's index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the index of the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.GetTabCount = function() {
    ///<summary>
    ///Returns the number of tabs in the ASPxTabControl.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of tabs in the control.
    ///</returns>
};
MVCxClientPageControl.prototype.GetTab = function(index) {
    ///<summary>
    ///Returns a tab specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the tab object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An Tabs collection.
    ///</returns>
};
MVCxClientPageControl.prototype.GetTabByName = function(name) {
    ///<summary>
    ///Returns a tab specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the tab.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the tab with the specified name.
    ///</returns>
};
MVCxClientPageControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientPageControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientPageControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientPageControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientPageControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientPageControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientPageControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientTokenBox.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the TokenBox by processing the passed information on the server, in an Action specified by the TokenBox's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the TokenBox by processing the passed information on the server, in an Action specified by the TokenBox's CallbackRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified by the CallbackRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTokenBox.prototype.AddToken = function(text) {
    ///<summary>
    ///Adds a new token with the specified text to the end of the control's token collection.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the token's text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.RemoveTokenByText = function(text) {
    ///<summary>
    ///Removes a token specified by its text from the client token box.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value that is the text of the token to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.RemoveToken = function(index) {
    ///<summary>
    ///Removes a token specified by its index from the client token box.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that is the index of the token to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.GetTokenHtmlElement = function(index) {
    ///<summary>
    ///Returns an HTML span element that corresponds to the specified token.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that is the token index.
    ///</param>
    ///<returns type = "Object">
    ///An object that is the HTML span element that corresponds to the specified token.
    ///</returns>
};
MVCxClientTokenBox.prototype.GetTokenTextHtmlElement = function(index) {
    ///<summary>
    ///Returns an HTML span element that corresponds to the specified token's text.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that is the token index.
    ///</param>
    ///<returns type = "Object">
    ///An object that is the HTML span element that corresponds to the specified token's text.
    ///</returns>
};
MVCxClientTokenBox.prototype.GetTokenRemoveButtonHtmlElement = function(index) {
    ///<summary>
    ///Returns an HTML span element that corresponds to the specified token's remove button.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that is the token index.
    ///</param>
    ///<returns type = "Object">
    ///An object that is the HTML span element that corresponds to the specified token's remove button.
    ///</returns>
};
MVCxClientTokenBox.prototype.GetTokenCollection = function() {
    ///<summary>
    ///Returns a collection of tokens.
    ///</summary>
    ///<returns elementType = "String" type = "Array">
    ///A <see cref="String[]" /> object that is the collection of tokens.
    ///</returns>
};
MVCxClientTokenBox.prototype.SetTokenCollection = function(collection) {
    ///<summary>
    ///Sets a collection of tokens.
    ///</summary>
    ///<param name = "collection" elementType = "String" type = "Array">
    ///A  object that is the collection of tokens.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.ClearTokenCollection = function() {
    ///<summary>
    ///Removes all tokens contained in the token box.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.GetTokenIndexByText = function(text) {
    ///<summary>
    ///Returns the index of a token specified by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value that specifies the text of the token.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that is the token index
    ///</returns>
};
MVCxClientTokenBox.prototype.GetText = function() {
    ///<signature>
    ///<summary>
    ///Gets the token texts, separated with a sign, specified by the TextSeparator property.
    ///</summary>
    ///<returns type = "String">
    ///A string value consisting of token texts separated by a text separator.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the text displayed in the editor's edit box.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text within the editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the text displayed within the editor.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the editor's display text.
    ///</returns>
    ///</signature>
};
MVCxClientTokenBox.prototype.SetText = function(text) {
    ///<signature>
    ///<summary>
    ///Sets the token texts, separated with a sign, specified by the TextSeparator property.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value that is the token texts separated with a text separator.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Specifies the text displayed within the editor's edit box.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the editor's text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the text to be displayed within the editor.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the editor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTokenBox.prototype.GetValue = function() {
    ///<signature>
    ///<summary>
    ///Gets the editor value.
    ///</summary>
    ///<returns type = "String">
    ///A string that is the editor value.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor's value.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the editor's value.
    ///</returns>
    ///</signature>
};
MVCxClientTokenBox.prototype.SetValue = function(value) {
    ///<signature>
    ///<summary>
    ///Sets the editor value.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string that is the editor value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Changes the editor's value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object representing the data to be assigned to the editor's edit value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTokenBox.prototype.IsCustomToken = function(text, caseSensitive) {
    ///<summary>
    ///Returns a value that indicates if the specified token (string) is a custom token.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value that is a token.
    ///</param>
    ///<param name = "caseSensitive" type = "Boolean">
    ///true, if tokens are case sensitive; otherwise, false.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the token is not contained in the predefined Items collection; otherwise, false.
    ///</returns>
};
MVCxClientTokenBox.prototype.AddItem = function(text) {
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text and associated value, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor specifying the item's display text, associated value and displayed image, and returns the index of the added item.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the added item's index.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the editor, specifying the item's display text, and returns the index of the added item.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the end of the control's items collection.
    ///</summary>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the position at which a new item was added.
    ///</returns>
    ///</signature>
};
MVCxClientTokenBox.prototype.InsertItem = function(index, text, value, imageUrl) {
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text, associated value and displayed image into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text and associated value into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the value associated with the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Inserts a new item specified by its display text into the editor's item collection, at the position specified.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the zero-based index of the position where the item should be inserted.
    ///</param>
    ///<param name = "text" type = "String">
    ///A string value specifying the item's display text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<param name = "imageUrl" type = "String">
    ///A String value specifying the path to the image displayed by the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that represents the item's associated value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Adds a new item to the control's items collection at the specified index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents the index position.
    ///</param>
    ///<param name = "texts" elementType = "String" type = "Array">
    ///An array of strings that specifies the item's display text. Array element positions relate to the positions of the corresponding columns within the editor's Columns collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTokenBox.prototype.RemoveItem = function(index) {
    ///<summary>
    ///Removes an item specified by its index from the client list editor.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value representing the index of the list item to be removed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.ClearItems = function() {
    ///<summary>
    ///Removes all items from the client combo box editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.BeginUpdate = function() {
    ///<summary>
    ///Prevents the client combobox editor from being rendered until the EndUpdate method is called.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.EndUpdate = function() {
    ///<summary>
    ///Re-enables editor render operations after a call to the BeginUpdate method and forces an immediate re-rendering.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.MakeItemVisible = function(index) {
    ///<summary>
    ///Scrolls the editor's item list, so that the specified item becomes visible.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the item's index within the editor's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the combo box editor's item collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to search for.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object representing the collection item found.
    ///</returns>
};
MVCxClientTokenBox.prototype.FindItemByText = function(text) {
    ///<summary>
    ///Returns a combo box item by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string that specifies the item's text.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
MVCxClientTokenBox.prototype.FindItemByValue = function(value) {
    ///<summary>
    ///Returns a combo box item by its value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An object that specifies the item's value.
    ///</param>
    ///<returns type = "ASPxClientListEditItem">
    ///A ASPxClientListEditItem object that represents the combo box item. null (Nothing in Visual Basic) if the item was not found.
    ///</returns>
};
MVCxClientTokenBox.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the editor's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the total number of items in the editor's item collection.
    ///</returns>
};
MVCxClientTokenBox.prototype.GetSelectedIndex = function() {
    ///<summary>
    ///Returns the index of the selected item within the combo box editor.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the zero-based index of the selected item.
    ///</returns>
};
MVCxClientTokenBox.prototype.SetSelectedIndex = function(index) {
    ///<summary>
    ///Sets the combobox editor's selected item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the combo box editor's selected item.
    ///</summary>
    ///<returns type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that represents the selected item.
    ///</returns>
};
MVCxClientTokenBox.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Sets the list editor's selected item.
    ///</summary>
    ///<param name = "item" type = "ASPxClientListEditItem">
    ///An ASPxClientListEditItem object that specifies the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.EnsureDropDownLoaded = function(callbackFunction) {
    ///<summary>
    ///Determines whether the drop-down content is loaded; if not - loads the content.
    ///</summary>
    ///<param name = "callbackFunction" type = "Object">
    ///An object that is the JavaScript function that receives the callback data as a parameter. The function is performed after the combo box content is loaded.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.SetItemHtml = function(index, html) {
    ///<summary>
    ///Defines the HTML content for the specified combo box item.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the combo box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.SetItemTooltip = function(index, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the combo box editor's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.AddItemCssClass = function(index, className) {
    ///<summary>
    ///Sets the CSS class for a combo box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.RemoveItemCssClass = function(index, className) {
    ///<summary>
    ///Removes the CSS class from a combo box item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.SetItemTextCellHtml = function(itemIndex, textCellIndex, html) {
    ///<summary>
    ///Defines the HTML content for the specified combo box item's text cell.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the combo box item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.SetItemTextCellTooltip = function(itemIndex, textCellIndex, tooltip) {
    ///<summary>
    ///Sets the tooltip text for the text cell of the editor's item specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "tooltip" type = "String">
    ///A string value specifying the tooltip text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.AddItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Sets the CSS class for a combo box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.RemoveItemTextCellCssClass = function(itemIndex, textCellIndex, className) {
    ///<summary>
    ///Removes the CSS class from a combo box item's text cell specified by its index.
    ///</summary>
    ///<param name = "itemIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item.
    ///</param>
    ///<param name = "textCellIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the item's text cell.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the CSS class name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.AdjustDropDownWindow = function() {
    ///<summary>
    ///Modifies the size of the drop down window in accordance with its content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.ShowDropDown = function() {
    ///<summary>
    ///Invokes the editor's drop down window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.HideDropDown = function() {
    ///<summary>
    ///Closes the opened drop down window of the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.SetButtonVisible = function(number, value) {
    ///<summary>
    ///Specifies whether the button is visible.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to make the button visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.GetButtonVisible = function(number) {
    ///<summary>
    ///Returns a value specifying whether a button is displayed.
    ///</summary>
    ///<param name = "number" type = "Int32">
    ///An integer value specifying the button's index within the Buttons collection.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the button visible; otherwise, false.
    ///</returns>
};
MVCxClientTokenBox.prototype.SelectAll = function() {
    ///<summary>
    ///Selects all text in the text editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.SetCaretPosition = function(position) {
    ///<summary>
    ///Sets the caret position within the edited text.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value that specifies the zero-based index of a text character that shall precede the caret.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.SetSelection = function(startPos, endPos, scrollToSelection) {
    ///<summary>
    ///Selects the specified portion of the editor's text.
    ///</summary>
    ///<param name = "startPos" type = "Int32">
    ///A zero-based integer value specifying the selection's starting position.
    ///</param>
    ///<param name = "endPos" type = "Int32">
    ///A zero-based integer value specifying the selection's ending position.
    ///</param>
    ///<param name = "scrollToSelection" type = "Boolean">
    ///true to scroll the editor's contents to make the selection visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.GetInputElement = function() {
    ///<summary>
    ///Returns an HTML element that represents the control's input element.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing the control's input element.
    ///</returns>
};
MVCxClientTokenBox.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the editor.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.GetIsValid = function() {
    ///<summary>
    ///Gets a value that indicates whether the editor's value passes validation.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the editor's value passes validation; otherwise, false.
    ///</returns>
};
MVCxClientTokenBox.prototype.GetErrorText = function() {
    ///<summary>
    ///Gets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the error text.
    ///</returns>
};
MVCxClientTokenBox.prototype.SetIsValid = function(isValid) {
    ///<summary>
    ///Sets a value that specifies whether the editor's value is valid.
    ///</summary>
    ///<param name = "isValid" type = "Boolean">
    ///True if the editor's value is valid; otherwise, False.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.SetErrorText = function(errorText) {
    ///<summary>
    ///Sets the error text to be displayed within the editor's error frame if the editor's validation fails.
    ///</summary>
    ///<param name = "errorText" type = "String">
    ///A string value representing the error text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.Validate = function() {
    ///<summary>
    ///Performs the editor's validation.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an editor is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an editor is enabled; otherwise false.
    ///</returns>
};
MVCxClientTokenBox.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether an editor is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the editor; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the editor caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the editor's caption.
    ///</returns>
};
MVCxClientTokenBox.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the editor caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the editor caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientTokenBox.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientTokenBox.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientTokenBox.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientTokenBox.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientTokenBox.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTokenBox.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientTreeList.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the TreeList by processing the passed information on the server, in an Action specified via the TreeList's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the TreeList by processing the passed information on the server, in an Action specified via the TreeList's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomActionRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTreeList.prototype.PerformCustomDataCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to process the passed information on the server, in an Action specified via the TreeList's CustomDataCallback event. This method does not update the TreeList.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event passing it the specified argument.
    ///</summary>
    ///<param name = "arg" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTreeList.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the ASPxTreeList.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.GetPopupEditForm = function() {
    ///<summary>
    ///Gets the Popup Edit Form.
    ///</summary>
    ///<returns type = "ASPxClientPopupControl">
    ///An ASPxClientPopupControl object that represents the Popup Edit Form.
    ///</returns>
};
MVCxClientTreeList.prototype.GetToolbarByName = function(name) {
    ///<summary>
    ///Returns a toolbar specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the toolbar name.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar with the specified name.
    ///</returns>
};
MVCxClientTreeList.prototype.GetToolbar = function(index) {
    ///<summary>
    ///Returns a toolbar specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the toolbar object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An Toolbars collection.
    ///</returns>
};
MVCxClientTreeList.prototype.GetFocusedNodeKey = function() {
    ///<summary>
    ///Returns the focused node's key value.
    ///</summary>
    ///<returns type = "String">
    ///A String value that uniquely identifies the node.
    ///</returns>
};
MVCxClientTreeList.prototype.SetFocusedNodeKey = function(key) {
    ///<summary>
    ///Moves focus to the specified node.
    ///</summary>
    ///<param name = "key" type = "String">
    ///A String value that uniquely identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.IsNodeSelected = function(nodeKey) {
    ///<summary>
    ///Indicates whether the specified node is selected.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A String value that identifies the node by its key value.
    ///</param>
    ///<returns type = "Nullable">
    ///true if the specified node is selected; false if the specified node isn't selected; null if the specified node was not found on the client.
    ///</returns>
};
MVCxClientTreeList.prototype.SelectNode = function(nodeKey) {
    ///<signature>
    ///<summary>
    ///Selects the specified node.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified node.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node.
    ///</param>
    ///<param name = "state" type = "Boolean">
    ///true to select the node; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTreeList.prototype.GetVisibleSelectedNodeKeys = function() {
    ///<summary>
    ///Obtains key values of selected nodes that are displayed within the current page.
    ///</summary>
    ///<returns elementType = "String" type = "Array">
    ///The list of key values of selected nodes that are displayed within the current page.
    ///</returns>
};
MVCxClientTreeList.prototype.IsCustomizationWindowVisible = function() {
    ///<summary>
    ///Indicates whether the Customization Window is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the customization window is displayed; otherwise, false.
    ///</returns>
};
MVCxClientTreeList.prototype.ShowCustomizationWindow = function() {
    ///<signature>
    ///<summary>
    ///Invokes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the Customization Window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object that specifies the HTML element relative to whose position the customization window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTreeList.prototype.HideCustomizationWindow = function() {
    ///<summary>
    ///Closes the Customization Window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.PerformCustomCallback = function(arg) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "arg" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.GetNodeValues = function(nodeKey, fieldNames, onCallback) {
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within a specified node, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node.
    ///</param>
    ///<param name = "fieldNames" type = "String">
    ///A string value that contains the names of data source fields whose values within the specified node are returned. The field names should be separated by ';'.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within a specified node, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node.
    ///</param>
    ///<param name = "fieldNames" elementType = "String" type = "Array">
    ///The names of data source fields whose values within the specified node are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTreeList.prototype.GetVisibleNodeValues = function(fieldNames, onCallback) {
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within nodes that are displayed within the current page, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///A string value that contains the names of data source fields whose values within visible nodes are returned. The field names should be separated by ';'.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within nodes that are displayed within the current page, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames" elementType = "String" type = "Array">
    ///The names of data source fields whose values within visible nodes are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTreeList.prototype.GetSelectedNodeValues = function(fieldNames, onCallback) {
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///A string value that contains the names of data source fields whose values within selected nodes are returned. The field names should be separated by ';'.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames" elementType = "String" type = "Array">
    ///The names of data source fields whose values within selected nodes are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///A string value that contains the names of data source fields whose values within selected nodes are returned. The field names should be separated by ';'.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<param name = "visibleOnly" type = "Boolean">
    ///true to return values within selected nodes that are displayed within the current page; false to return values within all selected nodes.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Obtains specified data source field values within selected nodes, and submits them to the specified JavaScript function.
    ///</summary>
    ///<param name = "fieldNames" elementType = "String" type = "Array">
    ///The names of data source fields whose values within selected nodes are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientTreeListValuesCallback">
    ///A ASPxClientTreeListValuesCallback object that represents the JavaScript function which receives the list of values as a parameter.
    ///</param>
    ///<param name = "visibleOnly" type = "Boolean">
    ///true to return values within selected nodes that are displayed within the current page; false to return values within all selected nodes.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTreeList.prototype.GoToPage = function(index) {
    ///<summary>
    ///Selects the specified page.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page currently being selected.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
MVCxClientTreeList.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages to which the ASPxTreeList's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the number of grid pages.
    ///</returns>
};
MVCxClientTreeList.prototype.GetNodeState = function(nodeKey) {
    ///<summary>
    ///Returns the specified node's state.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A String value that identifies the node.
    ///</param>
    ///<returns type = "String">
    ///A String value that represents the specified node's state.
    ///</returns>
};
MVCxClientTreeList.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all nodes.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all Node.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.ExpandNode = function(key) {
    ///<summary>
    ///Expands the specified node preserving the collapsed state of child nodes.
    ///</summary>
    ///<param name = "key" type = "String">
    ///A String value that uniquely identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.CollapseNode = function(key) {
    ///<summary>
    ///Collapses the specified node preserving the expanded state of child nodes.
    ///</summary>
    ///<param name = "key" type = "String">
    ///A String value that uniquely identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.GetVisibleNodeKeys = function() {
    ///<summary>
    ///Obtains key values of nodes that are displayed within the current page.
    ///</summary>
    ///<returns elementType = "String" type = "Array">
    ///The list of key values of nodes that are displayed within the current page.
    ///</returns>
};
MVCxClientTreeList.prototype.GetNodeHtmlElement = function(nodeKey) {
    ///<summary>
    ///Returns an HTML table row that represents the specified node.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the HTML table row, which corresponds to the specified node.
    ///</returns>
};
MVCxClientTreeList.prototype.GetVisibleColumnCount = function() {
    ///<summary>
    ///Returns the number of visible columns within the client ASPxTreeList.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of visible columns within the client ASPxTreeList.
    ///</returns>
};
MVCxClientTreeList.prototype.GetColumnCount = function() {
    ///<summary>
    ///Returns the number of columns within the client ASPxTreeList.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of columns within the client ASPxTreeList.
    ///</returns>
};
MVCxClientTreeList.prototype.GetColumnByIndex = function(index) {
    ///<summary>
    ///Returns the column located at the specified position within the Columns collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that identifies the column within the collection (the column's Index property value).
    ///</param>
    ///<returns type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the client column located at the specified position within the collection.
    ///</returns>
};
MVCxClientTreeList.prototype.GetColumnByName = function(name) {
    ///<summary>
    ///Returns the column with the specified name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value that specifies the column's name (the column's Name property value).
    ///</param>
    ///<returns type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the column with the specified name.
    ///</returns>
};
MVCxClientTreeList.prototype.GetColumnByFieldName = function(fieldName) {
    ///<summary>
    ///Returns the client column which is bound to the specified data source field.
    ///</summary>
    ///<param name = "fieldName" type = "String">
    ///A string value that specifies the name of the data source field to which the column is bound (the column's FieldName property value).
    ///</param>
    ///<returns type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the client column bound to the specified data source field.
    ///</returns>
};
MVCxClientTreeList.prototype.SortBy = function(columnIndex) {
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that specifies the column's position within the column collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "nameOrFieldName" type = "String">
    ///A String value that specifies the column's name or field name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "nameOrFieldName" type = "String">
    ///A String value that specifies the column's name or field name.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "nameOrFieldName" type = "String">
    ///A String value that specifies the column's name or field name.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the data column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the column's sort order ('ASC', 'DESC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTreeList.prototype.StartEdit = function(nodeKey) {
    ///<summary>
    ///Switches the ASPxTreeList to edit mode.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node by its key value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.UpdateEdit = function() {
    ///<summary>
    ///Saves all the changes made and switches the ASPxTreeList to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.CancelEdit = function() {
    ///<summary>
    ///Cancels all the changes made and switches the ASPxTreeList to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.IsEditing = function() {
    ///<summary>
    ///Indicates whether the ASPxTreeList is in edit mode.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the ASPxTreeList is in edit mode; otherwise, false.
    ///</returns>
};
MVCxClientTreeList.prototype.GetEditingNodeKey = function() {
    ///<summary>
    ///Gets the key value of the node currently being edited.
    ///</summary>
    ///<returns type = "String">
    ///A string value that identifies the node currently being edited.
    ///</returns>
};
MVCxClientTreeList.prototype.MoveNode = function(nodeKey, parentNodeKey) {
    ///<summary>
    ///Moves the specified node to a new position.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the target node by its key value.
    ///</param>
    ///<param name = "parentNodeKey" type = "String">
    ///A string value that identifies the node to whose child collection the target node is moved. An empty string to display the target node within the root.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.DeleteNode = function(nodeKey) {
    ///<summary>
    ///Deletes the specified node.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///A string value that identifies the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.StartEditNewNode = function() {
    ///<signature>
    ///<summary>
    ///Switches the ASPxTreeList to edit mode and allows new root node values to be edited.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Switches the ASPxTreeList to edit mode and allows new node values to be edited.
    ///</summary>
    ///<param name = "parentNodeKey" type = "String">
    ///A String value that identifies the parent node, which owns a new node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTreeList.prototype.GetEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the column by its position within the column collection.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the specified column's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified column's values.
    ///</summary>
    ///<param name = "columnNameOrFieldName" type = "String">
    ///A String value that identifies the column by its name or field name.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the specified column's editor.
    ///</returns>
    ///</signature>
};
MVCxClientTreeList.prototype.GetEditValue = function(column) {
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
    ///</param>
    ///<returns type = "Object">
    ///A String value that represents the value of the edit cell, which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column by its index within the ASPxTreeList's column collection.
    ///</param>
    ///<returns type = "Object">
    ///A String value that represents the value of the edit cell, which corresponds to the specified data column.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnNameOrFieldName" type = "String">
    ///A String value that identifies the column by its name or field name.
    ///</param>
    ///<returns type = "Object">
    ///A String value that represents the value of the edit cell, which corresponds to the specified data column.
    ///</returns>
    ///</signature>
};
MVCxClientTreeList.prototype.SetEditValue = function(column, value) {
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///An ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column by its index within the ASPxTreeList's column collection.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the value of the specified edit cell.
    ///</summary>
    ///<param name = "columnNameOrFieldName" type = "String">
    ///A String value that identifies the column by its name or field name.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that specifies the edit cell's new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTreeList.prototype.FocusEditor = function(column) {
    ///<signature>
    ///<summary>
    ///Moves focus to the specified editor within the edited node.
    ///</summary>
    ///<param name = "column" type = "ASPxClientTreeListColumn">
    ///A ASPxClientTreeListColumn object that represents the data column within the client ASPxTreeList.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified editor within the edited node.
    ///</summary>
    ///<param name = "columnIndex" type = "Int32">
    ///An integer value that identifies the data column.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Moves focus to the specified editor within the edited node.
    ///</summary>
    ///<param name = "columnNameOrFieldName" type = "String">
    ///A String value that specifies the column's name or field name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientTreeList.prototype.MakeNodeVisible = function(nodeKey) {
    ///<summary>
    ///Scrolls the tree list so that the specified node becomes visible.
    ///</summary>
    ///<param name = "nodeKey" type = "String">
    ///An integer value that specifies the node index within the tree list's client item list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.GetVerticalScrollPosition = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the tree list's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</returns>
};
MVCxClientTreeList.prototype.GetHorizontalScrollPosition = function() {
    ///<summary>
    ///Returns the current horizontal scroll position of the tree list's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</returns>
};
MVCxClientTreeList.prototype.SetVerticalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the tree list's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.SetHorizontalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the horizontal scroll position for the tree list's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientTreeList.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientTreeList.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientTreeList.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientTreeList.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientTreeList.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeList.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientTreeView.prototype.GetNode = function(index) {
    ///<summary>
    ///Returns a node specified by its index within the ASPxTreeView's node collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the node to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object, representing the node located at the specified index within the ASPxTreeView's node collection.
    ///</returns>
};
MVCxClientTreeView.prototype.GetNodeByName = function(name) {
    ///<summary>
    ///Returns a node specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the node with the specified name.
    ///</returns>
};
MVCxClientTreeView.prototype.GetNodeByText = function(text) {
    ///<summary>
    ///Returns a node specified by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text content of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the node with the specified node's text content.
    ///</returns>
};
MVCxClientTreeView.prototype.GetNodeCount = function() {
    ///<summary>
    ///Returns the number of nodes at the ASPxTreeView's zero level.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of the root node child nodes.
    ///</returns>
};
MVCxClientTreeView.prototype.GetSelectedNode = function() {
    ///<summary>
    ///Returns the selected node within the ASPxTreeView control on the client side.
    ///</summary>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the selected node.
    ///</returns>
};
MVCxClientTreeView.prototype.SetSelectedNode = function(node) {
    ///<summary>
    ///Selects the specified node within the ASPxTreeView control on the client side.
    ///</summary>
    ///<param name = "node" type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object specifying the node to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.GetRootNode = function() {
    ///<summary>
    ///Gets the root node of the ASPxTreeView object.
    ///</summary>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object representing a root node.
    ///</returns>
};
MVCxClientTreeView.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all nodes in the ASPxTreeView on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all nodes in the ASPxTreeView on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientTreeView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientTreeView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientTreeView.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientTreeView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientTreeView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientTreeView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientUploadControl.prototype.IsAdvancedModeEnabled = function() {
    ///<summary>
    ///Specifies whether the upload control's Advanced mode is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the Advanced mode is enbaled; otherwise, false.
    ///</returns>
};
MVCxClientUploadControl.prototype.UploadFile = function() {
    ///<summary>
    ///Initiates uploading of the specified file to the web server's memory.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.AddFileInput = function() {
    ///<summary>
    ///Adds a new file input element to the ASPxUploadControl.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.RemoveFileInput = function(index) {
    ///<summary>
    ///Removes a file input element from the ASPxUploadControl.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents a file input element's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.RemoveFileFromSelection = function(fileIndex) {
    ///<signature>
    ///<summary>
    ///Removes a file with the specified index from the selected file list.
    ///</summary>
    ///<param name = "fileIndex" type = "Int32">
    ///An integer value that is the zero-based index of an item in the file list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Removes the specified file from the list of files selected for uploading in the upload control.
    ///</summary>
    ///<param name = "file" type = "ASPxClientUploadControlFile">
    ///An ASPxClientUploadControl object that is the file to be removed from the list of files.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientUploadControl.prototype.GetSelectedFiles = function(inputIndex) {
    ///<summary>
    ///Returns files selected for uploading within the specified file input.
    ///</summary>
    ///<param name = "inputIndex" type = "Int32">
    ///An integer value that specifies the index of a file input. Default value is "0".
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientUploadControlFile">
    ///An array of ASPxClientUploadControlFile objects that are files selected for uploading.
    ///</returns>
};
MVCxClientUploadControl.prototype.GetText = function(index) {
    ///<summary>
    ///Gets the text displayed within the edit box of the specified file input element.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the required file input element's index.
    ///</param>
    ///<returns type = "String">
    ///A string value representing the displayed text.
    ///</returns>
};
MVCxClientUploadControl.prototype.GetFileInputCount = function() {
    ///<summary>
    ///Gets the number of file input elements contained within the ASPxUploadControl.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the total number of file input elements.
    ///</returns>
};
MVCxClientUploadControl.prototype.SetFileInputCount = function(count) {
    ///<summary>
    ///Specifies the count of the file input elements within the upload control.
    ///</summary>
    ///<param name = "count" type = "Int32">
    ///An integer value that specifies the file input elements count.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Specifies whether the upload control is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true, to enable the upload control; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether the upload control is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the control is enabled; otherwise false.
    ///</returns>
};
MVCxClientUploadControl.prototype.Upload = function() {
    ///<summary>
    ///Initiates uploading of the specified file(s) to the web server's memory.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.Cancel = function() {
    ///<summary>
    ///Cancels the initiated file uploading process.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.ClearText = function() {
    ///<summary>
    ///Clears the file selection in the upload control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.SetAddButtonText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the add button.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.SetUploadButtonText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the upload button.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.GetAddButtonText = function() {
    ///<summary>
    ///Returns the text displayed within the add button.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the button.
    ///</returns>
};
MVCxClientUploadControl.prototype.GetUploadButtonText = function() {
    ///<summary>
    ///Returns the text displayed within the upload button.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the button.
    ///</returns>
};
MVCxClientUploadControl.prototype.SetDialogTriggerID = function(ids) {
    ///<summary>
    ///Sets the ID of a web control or HTML element (or a list of IDs), a click on which invokes file upload dialog.
    ///</summary>
    ///<param name = "ids" type = "String">
    ///A string value specifying the ID or a list of IDs separated by the semicolon (;).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientUploadControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientUploadControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientUploadControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientUploadControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientUploadControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUploadControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.PerformCallback = function(data) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the VerticalGrid by processing the passed information on the server in an Action specified via the grid's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to update the VerticalGrid by processing the passed information on the server in an Action specified via the grid's CustomActionRouteValues property.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the grid's CustomActionRouteValues property.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing the specified argument to it.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientVerticalGrid.prototype.GetValuesOnCustomCallback = function(data, onCallback) {
    ///<signature>
    ///<summary>
    ///Sends a callback with a parameter to process the passed information on the server, in an Action specified via the VerticalGrid's CustomDataActionRouteValues property, and then process the returned result in the specified client function. This method does not update the VerticalGrid.
    ///</summary>
    ///<param name = "data" type = "Object">
    ///An object containing any information that needs to be passed to a handling Action specified via the CustomDataActionRouteValues property.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientGridViewValuesCallback">
    ///A ASPxClientGridViewValuesCallback object that represents the JavaScript function which receives the information on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomDataCallback event.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that is any information that needs to be sent to the server-side CustomDataCallback event.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientVerticalGridValuesCallback">
    ///A ASPxClientVerticalGridValuesCallback object that is the JavaScript function which receives the information on the client side.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientVerticalGrid.prototype.SortBy = function(row) {
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRow object that represents the data row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value that specifies the row's position within the row collection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the row's field name or unique identifier (the row's Name property value).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRow object that represents the data row.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value that specifies the row's position within the row collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the row's field name or unique identifier (the row's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRow object that represents the data row.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value that specifies the row's position within the row collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true, to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the row's field name or unique identifier (the row's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values, and places the row to the specified position among the sorted rows.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientGridViewColumn object that represents the data column.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based row's index among the sorted rows. -1 if data is not sorted by this row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values, and places the row to the specified position among the sorted rows.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value that specifies the row's position within the row collection.
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sorts data by the specified data row's values, and places the row to the specified position among the sorted rows.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the column's field name or unique identifier (the column's Name property value).
    ///</param>
    ///<param name = "sortOrder" type = "String">
    ///A string value that specifies the row's sort order ('ASC', 'DSC' or 'NONE').
    ///</param>
    ///<param name = "reset" type = "Boolean">
    ///true to clear any previous sorting; otherwise, false.
    ///</param>
    ///<param name = "sortIndex" type = "Int32">
    ///An integer value that specifies the zero-based row's index among the sorted rows. -1 if data is not sorted by this row.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientVerticalGrid.prototype.GetRecordKey = function(visibleIndex) {
    ///<summary>
    ///Returns the key value of the specified data row (record in the vertical grid).
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that specifies the record's visible index.
    ///</param>
    ///<returns type = "String">
    ///A string representing the specified data row's key value. If the index passed using the visibleIndex parameter is wrong or the KeyFieldName property is not set, null is returned.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.AddNewRecord = function() {
    ///<summary>
    ///Adds a new record.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.DeleteRecord = function(visibleIndex) {
    ///<summary>
    ///Deletes the specified record.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.DeleteRecordByKey = function(key) {
    ///<summary>
    ///Deletes a record with the specified key value.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.SelectRecords = function() {
    ///<signature>
    ///<summary>
    ///Selects all the unselected records within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified record displayed within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the record's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified rercords within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify records within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified records within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify records within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean">
    ///true to select the specified records; false to deselect the records.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified record within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer zero-based index that identifies the record within the grid.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified record; false to deselect the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientVerticalGrid.prototype.SelectRecordsByKey = function(keys, selected) {
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified records displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the records.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified records; false to deselect the records.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified record displayed within the grid.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the record.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified record; false to deselect the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects the specified records displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the records.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects a grid record by its key.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientVerticalGrid.prototype.UnselectRecords = function() {
    ///<signature>
    ///<summary>
    ///Deselects all the selected records within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified records (if selected) within the grid.
    ///</summary>
    ///<param name = "visibleIndices" elementType = "Int32" type = "Array">
    ///An array of zero-based indices that identify records within the grid.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified record (if selected) within the grid.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the record's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientVerticalGrid.prototype.UnselectRecordsByKey = function(keys) {
    ///<signature>
    ///<summary>
    ///Deselects the specified records displayed within the grid.
    ///</summary>
    ///<param name = "keys" elementType = "Object" type = "Array">
    ///An array of objects that uniquely identify the records.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Deselects the specified record displayed within the grid.
    ///</summary>
    ///<param name = "key" type = "Object">
    ///An object that uniquely identifies the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientVerticalGrid.prototype.UnselectFilteredRecords = function() {
    ///<summary>
    ///Deselects all grid records that match the filter criteria currently applied to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.SelectRecordOnPage = function(visibleIndex) {
    ///<signature>
    ///<summary>
    ///Selects the specified record displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the record's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Selects or deselects the specified record displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the record's visible index.
    ///</param>
    ///<param name = "selected" type = "Boolean" optional = "true">
    ///true to select the specified record; false to deselect the record.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientVerticalGrid.prototype.UnselectRecordOnPage = function(visibleIndex) {
    ///<summary>
    ///Deselects the specified record (if selected) displayed on the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///A zero-based integer value that specifies the record's visible index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.SelectAllRecordsOnPage = function() {
    ///<signature>
    ///<summary>
    ///Selects all unselected records displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Allows you to select or deselect all records displayed on the current page based on the parameter passed.
    ///</summary>
    ///<param name = "selected" type = "Boolean">
    ///true to select all unselected records displayed on the current page; false to deselect all selected records on the page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientVerticalGrid.prototype.UnselectAllRecordsOnPage = function() {
    ///<summary>
    ///Deselects all selected records displayed on the current page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetSelectedRecordCount = function() {
    ///<summary>
    ///Returns the number of selected records.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of selected records.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.IsRecordSelectedOnPage = function(visibleIndex) {
    ///<summary>
    ///Indicates whether or not the specified record is selected within the current page.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the record by its visible index.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified record is selected within the current page; otherwise, false.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetRecordValues = function(visibleIndex, fieldNames, onCallback) {
    ///<summary>
    ///Returns the values of the specified data source fields within the specified record.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value that identifies the record.
    ///</param>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated using a semicolon, whose values within the specified record are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientVerticalGridValuesCallback">
    ///An ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetPageRecordValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the record values displayed within the current page.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields whose values are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientVerticalGridValuesCallback">
    ///A ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetVisibleRecordsOnPage = function() {
    ///<summary>
    ///Returns the number of records actually displayed within the active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of records displayed within the active page.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetRowCount = function() {
    ///<summary>
    ///Returns the number of rows within the client vertical grid.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of rows within the client vertical grid.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.ApplySearchPanelFilter = function(value) {
    ///<summary>
    ///Applies the specified search panel filter criterion to grid data.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies the filter criterion.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.ApplyFilter = function(filterExpression) {
    ///<summary>
    ///Applies the specified filter expression to the ASPxVerticalGrid.
    ///</summary>
    ///<param name = "filterExpression" type = "String">
    ///A string value that specifies the filter expression.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.ClearFilter = function() {
    ///<summary>
    ///Clears the filter expression applied to a client vertical grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Selects the specified page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page currently being selected.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages to which the grid's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the number of grid pages.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetTopVisibleIndex = function() {
    ///<summary>
    ///Returns the index of the first record displayed within the vertical grid's active page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the index of the topmost record.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.UpdateEdit = function() {
    ///<summary>
    ///Saves all the changes made and switches the grid to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.CancelEdit = function() {
    ///<summary>
    ///Cancels all the changes made and switches the ASPxVerticalGrid to browse mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.Refresh = function() {
    ///<summary>
    ///Updates data displayed within the grid.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetSelectedFieldValues = function(fieldNames, onCallback) {
    ///<summary>
    ///Returns the record values displayed within all selected records.
    ///</summary>
    ///<param name = "fieldNames" type = "String">
    ///The names of data source fields separated by a semicolon, whose values within the selected records are returned.
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientVerticalGridValuesCallback">
    ///A ASPxClientVerticalGridValuesCallback object that represents the JavaScript function which receives the list of record values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetSelectedKeysOnPage = function() {
    ///<summary>
    ///Returns key values of selected records displayed within the current page.
    ///</summary>
    ///<returns elementType = "Object" type = "Array">
    ///An array that contains key values of selected records displayed within the current page.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetEditor = function(row) {
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified row's values.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRowobject that specifies the required row within the client grid.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified row's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified row's values.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value that specifies the row's position within the rows collection.
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified row's editor.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns the editor used to edit the specified row's values.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the row's field name or unique identifier (the row's Name property value).
    ///</param>
    ///<returns type = "ASPxClientEdit">
    ///An <see cref="ASPxClientEdit" /> object that is the specified row's editor.
    ///</returns>
    ///</signature>
};
MVCxClientVerticalGrid.prototype.ShowFilterControl = function() {
    ///<summary>
    ///Displays the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.CloseFilterControl = function() {
    ///<summary>
    ///Hides the Filter Control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.SetFilterEnabled = function(isFilterEnabled) {
    ///<summary>
    ///Enables or disables the current filter.
    ///</summary>
    ///<param name = "isFilterEnabled" type = "Boolean">
    ///true to enable the current filter; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetRow = function(rowIndex) {
    ///<summary>
    ///Returns the client row that resides at the specified position within the row collection.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///A zero-based index that identifies the row within the row collection (the row's Index property value).
    ///</param>
    ///<returns type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRow object that represents the client row.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetRowById = function(rowId) {
    ///<summary>
    ///Returns the row with the specified unique identifier.
    ///</summary>
    ///<param name = "rowId" type = "String">
    ///A string value that specifies the row's unique identifier (the row's Name property value).
    ///</param>
    ///<returns type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRow object that represents the client row.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetRowByField = function(rowFieldName) {
    ///<summary>
    ///Returns the client row which is bound to the specified data source field.
    ///</summary>
    ///<param name = "rowFieldName" type = "String">
    ///A string value that specifies the name of the data source field to which the row is bound (the row's fieldName property value).
    ///</param>
    ///<returns type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRow object that represents the client row bound to the specified data source field.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetVerticalScrollPosition = function() {
    ///<summary>
    ///Returns the current vertical scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetHorizontalScrollPosition = function() {
    ///<summary>
    ///Returns the current horizontal scroll position of the grid's content.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.SetVerticalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the vertical scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the vertical scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.SetHorizontalScrollPosition = function(position) {
    ///<summary>
    ///Specifies the horizontal scroll position for the grid's content.
    ///</summary>
    ///<param name = "position" type = "Int32">
    ///An integer value specifying the horizontal scroll position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetRowExpanded = function(row) {
    ///<signature>
    ///<summary>
    ///Gets the value that specifies whether the required row is expanded.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRowobject that specifies the row.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the row is expanded; otherwise, false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the value that specifies whether the row with the specified index is expanded.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value specifying the row's index.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the row is expanded; otherwise, false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the value that specifies whether the row with the specified field name or ID is expanded.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value specifying the row's field name or ID.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the row is expanded; otherwise, false.
    ///</returns>
    ///</signature>
};
MVCxClientVerticalGrid.prototype.SetRowExpanded = function(row, value) {
    ///<signature>
    ///<summary>
    ///Sets a value indicating whether the row is expanded.
    ///</summary>
    ///<param name = "row" type = "ASPxClientVerticalGridRow">
    ///An ASPxClientVerticalGridRowobject that specifies the required row within the client grid.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to expand the row; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets a value indicating whether the row is expanded.
    ///</summary>
    ///<param name = "rowIndex" type = "Int32">
    ///An integer value specifying the index of the row.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to expand the row; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets a value indicating whether the row is expanded.
    ///</summary>
    ///<param name = "rowFieldNameOrId" type = "String">
    ///A string value that specifies the row's field name or unique identifier (the row's Name property value).
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true, to expand the row; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientVerticalGrid.prototype.GetToolbarByName = function(name) {
    ///<summary>
    ///Returns a toolbar specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the toolbar name.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar with the specified name.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetToolbar = function(index) {
    ///<summary>
    ///Returns a grid's toolbar specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the toolbar object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An <see cref="ASPxClientMenu" /> object that is the toolbar located at the specified index within the control's Toolbars collection.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientVerticalGrid.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientVerticalGrid.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.GetPreviewModel = function() {
    ///<summary>
    ///Provides access to the preview model of the ASPxClientWebDocumentViewer.
    ///</summary>
    ///<returns type = "Object">
    ///A Object value, specifying the preview model.
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.GetParametersModel = function() {
    ///<summary>
    ///Returns a model for a report parameter.
    ///</summary>
    ///<returns type = "Object">
    ///An object that specifies a report parameter model.
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.OpenReport = function(url) {
    ///<summary>
    ///Opens the specified report on the client side of the Web Document Viewer.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string that specifies the URL of a report to be opened.
    ///</param>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.Print = function() {
    ///<signature>
    ///<summary>
    ///Prints the current document.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Prints the document's page with the specified index.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An index of the page to be printed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientWebDocumentViewer.prototype.ExportTo = function() {
    ///<signature>
    ///<summary>
    ///Exports the document to a PDF file.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports the document to a specified file format.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A String value, specifying the export format. The following formats are currently supported: 'csv', 'html', 'image', 'mht', 'pdf', 'rtf', 'txt', 'xls', and 'xlsx'.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///
    ///</summary>
    ///<param name = "format" type = "String">
    ///
    ///</param>
    ///<param name = "inlineResult" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
MVCxClientWebDocumentViewer.prototype.GetCurrentPageIndex = function() {
    ///<summary>
    ///Returns the zero-based index of the currently displayed page.
    ///</summary>
    ///<returns type = "Int32">
    ///A zero-based integer value that specifies the index of a current page.
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.GoToPage = function(pageIndex) {
    ///<summary>
    ///Displays the report page with the specified page index.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///A zero-based integer value that specifies the index of a page to be displayed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.Close = function() {
    ///<summary>
    ///Closes the document currently being opened in the Web Document Viewer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.ResetParameters = function() {
    ///<summary>
    ///Resets the values of report parameters to their default values.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.StartBuild = function() {
    ///<summary>
    ///Starts building a report document.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.UpdateLocalization = function(localization) {
    ///<summary>
    ///Updates the localization settings of the ASPxClientWebDocumentViewer properties.
    ///</summary>
    ///<param name = "localization" type = "Dictionary">
    ///A dictionary containing the property names, along with their localized equivalents.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientWebDocumentViewer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientControlBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientControlBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControlBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientControlBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControlBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientControlBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControlBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCallback.prototype.SendCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCallback.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCallback.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCallback.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCallback.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientCallback.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCallback.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallback.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientPanelBase.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that is the content of the panel.
    ///</summary>
    ///<returns type = "String">
    ///A string that is the panel's HTML content.
    ///</returns>
};
ASPxClientPanelBase.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML content for the panel.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the panel.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanelBase.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Sets a value specifying whether the panel is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true to enable the panel; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanelBase.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a panel is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is enabled; otherwise, false.
    ///</returns>
};
ASPxClientPanelBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPanelBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPanelBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanelBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanelBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanelBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPanelBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanelBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientPanelBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanelBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPanelBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanelBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientPanel.prototype.Toggle = function() {
    ///<summary>
    ///Expands or collapses the client panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.IsExpandable = function() {
    ///<summary>
    ///Returns a value specifying whether the panel can be expanded.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is expandable; otherwise, false.
    ///</returns>
};
ASPxClientPanel.prototype.IsExpanded = function() {
    ///<summary>
    ///Returns a value specifying whether the panel is expanded.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is expanded; otherwise, false.
    ///</returns>
};
ASPxClientPanel.prototype.Expand = function() {
    ///<summary>
    ///Expands the collapsed panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.Collapse = function() {
    ///<summary>
    ///Collapses the expanded panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that is the content of the panel.
    ///</summary>
    ///<returns type = "String">
    ///A string that is the panel's HTML content.
    ///</returns>
};
ASPxClientPanel.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML content for the panel.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the panel.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Sets a value specifying whether the panel is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true to enable the panel; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a panel is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is enabled; otherwise, false.
    ///</returns>
};
ASPxClientPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPanel.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCallbackPanel.prototype.GetLoadingPanelText = function() {
    ///<summary>
    ///Returns the text displayed within the control's loading panel.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the button.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetLoadingPanelText = function(loadingPanelText) {
    ///<summary>
    ///Sets the text to be displayed within the control's loading panel.
    ///</summary>
    ///<param name = "loadingPanelText" type = "String">
    ///A string value specifying the text to be displayed within the loading panel.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetEnabled = function(enabled) {
    ///<signature>
    ///<summary>
    ///Sets a value specifying whether the callback panel is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true, to enable the callback panel; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets a value specifying whether the panel is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true to enable the panel; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientCallbackPanel.prototype.GetEnabled = function() {
    ///<signature>
    ///<summary>
    ///Returns a value specifying whether a callback panel is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the callback panel is enabled; otherwise, false.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns a value specifying whether a panel is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is enabled; otherwise, false.
    ///</returns>
    ///</signature>
};
ASPxClientCallbackPanel.prototype.Toggle = function() {
    ///<summary>
    ///Expands or collapses the client panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.IsExpandable = function() {
    ///<summary>
    ///Returns a value specifying whether the panel can be expanded.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is expandable; otherwise, false.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.IsExpanded = function() {
    ///<summary>
    ///Returns a value specifying whether the panel is expanded.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is expanded; otherwise, false.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.Expand = function() {
    ///<summary>
    ///Expands the collapsed panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.Collapse = function() {
    ///<summary>
    ///Collapses the expanded panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that is the content of the panel.
    ///</summary>
    ///<returns type = "String">
    ///A string that is the panel's HTML content.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML content for the panel.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the panel.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCallbackPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCallbackPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientEvent.prototype.AddHandler = function(handler) {
    ///<summary>
    ///Dynamically connects the event with an appropriate event handler function.
    ///</summary>
    ///<param name = "handler" type = "Object">
    ///An object representing the event handling function's content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEvent.prototype.RemoveHandler = function(handler) {
    ///<summary>
    ///Dynamically disconnects the event from the associated event handler function.
    ///</summary>
    ///<param name = "handler" type = "Object">
    ///An object representing the event handling function's content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEvent.prototype.ClearHandlers = function() {
    ///<summary>
    ///Dynamically disconnects the event from all the associated event handler functions.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEvent.prototype.FireEvent = function(source, e) {
    ///<summary>
    ///For internal use only.
    ///</summary>
    ///<param name = "source" type = "Object">
    ///
    ///</param>
    ///<param name = "e" type = "ASPxClientEventArgs">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientCloudControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientCloudControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientCloudControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientCloudControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientCloudControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientCloudControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientControlCollection.prototype.Get = function(name) {
    ///<summary>
    ///Returns a collection item identified by its unique hierarchically-qualified identifier.
    ///</summary>
    ///<param name = "name" type = "Object">
    ///A string value representing the hierarchically-qualified identifier of the required control.
    ///</param>
    ///<returns type = "Object">
    ///An object representing the collection item found.
    ///</returns>
};
ASPxClientControlCollection.prototype.GetByName = function(name) {
    ///<summary>
    ///Returns a DevExpress client control object identified by its unique hierarchically-qualified identifier (either ClientInstanceName or ClientID property value).
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value that is the hierarchically-qualified identifier of the required DevExpress control.
    ///</param>
    ///<returns type = "Object">
    ///An object that is the client control object found.
    ///</returns>
};
ASPxClientControlCollection.prototype.GetControlsByPredicate = function(predicate) {
    ///<summary>
    ///Returns all controls in the collection that satisfy the specified predicate.
    ///</summary>
    ///<param name = "predicate" type = "ASPxClientControlPredicate">
    ///An ASPxClientControlPredicate object that is a predicate used to search for controls in the collection.
    ///</param>
    ///<returns elementType = "Object" type = "Array">
    ///An array of all client controls found.
    ///</returns>
};
ASPxClientControlCollection.prototype.GetControlsByType = function(type) {
    ///<summary>
    ///Returns all controls of the specified type.
    ///</summary>
    ///<param name = "type" type = "Object">
    ///The object specifying the client control type.
    ///</param>
    ///<returns elementType = "Object" type = "Array">
    ///An array of all client controls found.
    ///</returns>
};
ASPxClientControlCollection.prototype.ForEachControl = function(action) {
    ///<summary>
    ///Performs the specified action for each control in the collection.
    ///</summary>
    ///<param name = "action" type = "ASPxClientControlAction">
    ///An ASPxClientControlAction object specifying an action to perform.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Activates the specified page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page that is currently active.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
ASPxClientDataView.prototype.GetPageSize = function() {
    ///<summary>
    ///Gets the size of a single ASPxDataView's page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the page size.
    ///</returns>
};
ASPxClientDataView.prototype.SetPageSize = function(pageSize) {
    ///<summary>
    ///Sets the size of a single ASPxDataView's page.
    ///</summary>
    ///<param name = "pageSize" type = "Int32">
    ///An integer value that specifies the page size.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages into which the ASPxDataView's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that represents the number of pages.
    ///</returns>
};
ASPxClientDataView.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.FirstPage = function() {
    ///<summary>
    ///Activates the first page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.LastPage = function() {
    ///<summary>
    ///Activates the last page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDataView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDataView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDataView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDataView.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientDataView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDataView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDataView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDockManager.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that contains any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that contains any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDockManager.prototype.GetZoneByUID = function(zoneUID) {
    ///<summary>
    ///Returns a zone specified by its unique identifier (zoneUID).
    ///</summary>
    ///<param name = "zoneUID" type = "String">
    ///A string value specifying the unique identifier of the zone.
    ///</param>
    ///<returns type = "ASPxClientDockZone">
    ///An <see cref="ASPxClientDockZone" /> object that is the zone with the specified unique identifier.
    ///</returns>
};
ASPxClientDockManager.prototype.GetPanelByUID = function(panelUID) {
    ///<summary>
    ///Returns a panel specified by its unique identifier (panelUID).
    ///</summary>
    ///<param name = "panelUID" type = "String">
    ///A string value specifying the unique identifier of the panel.
    ///</param>
    ///<returns type = "ASPxClientDockPanel">
    ///An <see cref="ASPxClientDockPanel" /> object that is the panel with the specified unique identifier.
    ///</returns>
};
ASPxClientDockManager.prototype.GetPanels = function() {
    ///<signature>
    ///<summary>
    ///Returns an array of panels contained in a page.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDockPanel">
    ///An array of ASPxClientDockPanel objects that are the panels contained in a page.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns an array of panels that are contained in a page and meet a specified criteria.
    ///</summary>
    ///<param name = "filterPredicate" type = "ASPxClientDockingFilterPredicate">
    ///An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a panel meets those criteria.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDockPanel">
    ///An array of ASPxClientDockPanel objects.
    ///</returns>
    ///</signature>
};
ASPxClientDockManager.prototype.GetZones = function() {
    ///<signature>
    ///<summary>
    ///Returns an array of zones contained in a page.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDockZone">
    ///An array of ASPxClientDockZone objects that are the zones contained in a page.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns an array of zones that are contained in a page and meet a specified criteria.
    ///</summary>
    ///<param name = "filterPredicate" type = "ASPxClientDockingFilterPredicate">
    ///An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a zone meets those criteria.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDockZone">
    ///An array of ASPxClientDockZone objects.
    ///</returns>
    ///</signature>
};
ASPxClientDockManager.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDockManager.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDockManager.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManager.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManager.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManager.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDockManager.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManager.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientDockManager.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManager.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDockManager.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockManager.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a control's window size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.BringToFront = function() {
    ///<summary>
    ///Brings the window to the front of the z-order.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetCollapsed = function() {
    ///<summary>
    ///Returns a value indicating whether the window is collapsed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is collapsed; otherwise, false.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that specifies the contents of the control's window.
    ///</summary>
    ///<returns type = "String">
    ///A string that specifies the window's HTML content.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetContentIFrame = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the control.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetContentIFrameWindow = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the control's window.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetContentUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the web page displayed within the control's window.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetFooterImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window footer by default.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetFooterNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetFooterText = function() {
    ///<summary>
    ///Returns the text displayed within a window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies a window's footer text.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetHeaderImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetHeaderNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within a window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies a window's header text.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetContentWidth = function() {
    ///<summary>
    ///Gets the width of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the width of the content region.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetContentHeight = function() {
    ///<summary>
    ///Gets the height of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the height of the content region.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetMaximized = function() {
    ///<summary>
    ///Returns a value indicating whether the window is maximized.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is maximized; otherwise, false.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetPinned = function() {
    ///<summary>
    ///Returns a value indicating whether the window is pinned.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is pinned; otherwise, false.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side WindowCallback event, passing the specified argument to it.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that is any information that needs to be sent to the server-side WindowCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.RefreshContentUrl = function() {
    ///<summary>
    ///Refreshes the content of the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetCollapsed = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is collapsed.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, to collapse the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML markup specifying the contents of the control's window.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetContentUrl = function(url) {
    ///<summary>
    ///Sets the URL to point to the web page that should be loaded into, and displayed within the control's window.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value specifying the URL to the web page displayed within the control's window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetFooterImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window footer by default.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetFooterNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetFooterText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies a window's footer text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetHeaderImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetHeaderNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetHeaderText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies a window's header text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetMaximized = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is maximized.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true. to maximize the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetPinned = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is pinned.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, to pin the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.Show = function() {
    ///<signature>
    ///<summary>
    ///Invokes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the control's window at the popup element with the specified index.
    ///</summary>
    ///<param name = "popupElementIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the popup element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientPopupControlBase.prototype.ShowAtElement = function(htmlElement) {
    ///<summary>
    ///Invokes the control's window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.ShowAtElementByID = function(id) {
    ///<summary>
    ///Invokes the control's window and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the control's window at the specified position.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///A integer value specifying the x-coordinate of the window's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///A integer value specifying the y-coordinate of the window's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.Hide = function() {
    ///<summary>
    ///Closes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.IsVisible = function() {
    ///<summary>
    ///Returns a value that specifies whether the control's window is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the window is displayed; otherwise, false.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPopupControlBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetOwnerZone = function() {
    ///<summary>
    ///Retrieves a zone that owns the current panel.
    ///</summary>
    ///<returns type = "ASPxClientDockZone">
    ///A <see cref="ASPxClientDockZone" /> object that is the owner of the current panel.
    ///</returns>
};
ASPxClientDockPanel.prototype.Dock = function(zone) {
    ///<signature>
    ///<summary>
    ///Docks the current panel in the specified zone.
    ///</summary>
    ///<param name = "zone" type = "ASPxClientDockZone">
    ///An ASPxClientDockZone object specifying the zone.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Docks the current panel in a zone at the specified position.
    ///</summary>
    ///<param name = "zone" type = "ASPxClientDockZone">
    ///An ASPxClientDockZone object specifying the zone, where the panel is docked
    ///</param>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value specifying the visible index position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDockPanel.prototype.MakeFloat = function() {
    ///<signature>
    ///<summary>
    ///Undocks the current panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Undocks the current panel and place it at the specified position.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer value that specifies the X-coordinate of the panel's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer value that specifies the Y-coordinate of the panel's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDockPanel.prototype.GetVisibleIndex = function() {
    ///<summary>
    ///Gets a value specifying the position of the current panel, amongst the visible panels within a zone.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the zero-based index of the panel amongst visible panels in the zone.
    ///</returns>
};
ASPxClientDockPanel.prototype.SetVisibleIndex = function(visibleIndex) {
    ///<summary>
    ///Sets a value specifying the position of the current panel, amongst the visible panels in a zone.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the panel amongst visible panels in the zone.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.IsDocked = function() {
    ///<summary>
    ///Returns a value indicating whether the panel is docked.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the panel is docked; otherwise, false.
    ///</returns>
};
ASPxClientDockPanel.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a control's window size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.BringToFront = function() {
    ///<summary>
    ///Brings the window to the front of the z-order.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.GetCollapsed = function() {
    ///<summary>
    ///Returns a value indicating whether the window is collapsed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is collapsed; otherwise, false.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that specifies the contents of the control's window.
    ///</summary>
    ///<returns type = "String">
    ///A string that specifies the window's HTML content.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetContentIFrame = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the control.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetContentIFrameWindow = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the control's window.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetContentUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the web page displayed within the control's window.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetFooterImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window footer by default.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetFooterNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetFooterText = function() {
    ///<summary>
    ///Returns the text displayed within a window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies a window's footer text.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetHeaderImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetHeaderNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within a window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies a window's header text.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetContentWidth = function() {
    ///<summary>
    ///Gets the width of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the width of the content region.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetContentHeight = function() {
    ///<summary>
    ///Gets the height of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the height of the content region.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetMaximized = function() {
    ///<summary>
    ///Returns a value indicating whether the window is maximized.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is maximized; otherwise, false.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetPinned = function() {
    ///<summary>
    ///Returns a value indicating whether the window is pinned.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is pinned; otherwise, false.
    ///</returns>
};
ASPxClientDockPanel.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side WindowCallback event, passing the specified argument to it.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that is any information that needs to be sent to the server-side WindowCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.RefreshContentUrl = function() {
    ///<summary>
    ///Refreshes the content of the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetCollapsed = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is collapsed.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, to collapse the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML markup specifying the contents of the control's window.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetContentUrl = function(url) {
    ///<summary>
    ///Sets the URL to point to the web page that should be loaded into, and displayed within the control's window.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value specifying the URL to the web page displayed within the control's window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetFooterImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window footer by default.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetFooterNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetFooterText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies a window's footer text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetHeaderImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetHeaderNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetHeaderText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies a window's header text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetMaximized = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is maximized.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true. to maximize the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetPinned = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is pinned.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, to pin the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.Show = function() {
    ///<signature>
    ///<summary>
    ///Invokes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the control's window at the popup element with the specified index.
    ///</summary>
    ///<param name = "popupElementIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the popup element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDockPanel.prototype.ShowAtElement = function(htmlElement) {
    ///<summary>
    ///Invokes the control's window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.ShowAtElementByID = function(id) {
    ///<summary>
    ///Invokes the control's window and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the control's window at the specified position.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///A integer value specifying the x-coordinate of the window's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///A integer value specifying the y-coordinate of the window's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.Hide = function() {
    ///<summary>
    ///Closes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.IsVisible = function() {
    ///<summary>
    ///Returns a value that specifies whether the control's window is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the window is displayed; otherwise, false.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDockPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDockPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDockPanel.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientDockPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDockPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDockZone.prototype.IsVertical = function() {
    ///<summary>
    ///Returns a value that indicates the orientation in which panels are stacked in the current zone.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if panels are stacked vertically within the zone; false, if panels are stacked horizontally.
    ///</returns>
};
ASPxClientDockZone.prototype.GetAllowGrowing = function() {
    ///<summary>
    ///Gets a value that indicates whether the zone can enlarge its size.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the zone can enlarge its size; otherwise, false.
    ///</returns>
};
ASPxClientDockZone.prototype.GetPanelCount = function() {
    ///<summary>
    ///Gets the number of panels contained in the zone.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of panels contained within the zone.
    ///</returns>
};
ASPxClientDockZone.prototype.GetPanelByUID = function(panelUID) {
    ///<summary>
    ///Returns a panel specified by its unique identifier (panelUID).
    ///</summary>
    ///<param name = "panelUID" type = "String">
    ///A string value specifying the unique identifier of the panel.
    ///</param>
    ///<returns type = "ASPxClientDockPanel">
    ///An <see cref="ASPxClientDockPanel" /> object that is the panel with the specified unique identifier.
    ///</returns>
};
ASPxClientDockZone.prototype.GetPanelByVisibleIndex = function(visibleIndex) {
    ///<summary>
    ///Returns a panel specified by its visible index.
    ///</summary>
    ///<param name = "visibleIndex" type = "Int32">
    ///An integer value specifying the panel's position among the visible panels within the current zone.
    ///</param>
    ///<returns type = "ASPxClientDockPanel">
    ///An <see cref="ASPxClientDockPanel" /> object that is the panel with the specified visible index.
    ///</returns>
};
ASPxClientDockZone.prototype.GetPanels = function() {
    ///<signature>
    ///<summary>
    ///Returns an array of panels docked in the current zone.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientDockPanel">
    ///An array of ASPxClientDockPanel objects that are the panels docked in the zone.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns an array of panels that are docked in the current zone and meet a specified criteria.
    ///</summary>
    ///<param name = "filterPredicate" type = "ASPxClientDockingFilterPredicate">
    ///An ASPxClientDockingFilterPredicate delegate that defines a set of criteria and determines whether a panel meets those criteria.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientDockPanel">
    ///An array of ASPxClientDockPanel objects.
    ///</returns>
    ///</signature>
};
ASPxClientDockZone.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDockZone.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDockZone.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZone.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZone.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZone.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDockZone.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZone.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientDockZone.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZone.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDockZone.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDockZone.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientFileManager.prototype.GetActiveAreaName = function() {
    ///<summary>
    ///Gets the name of the currently active file manager area.
    ///</summary>
    ///<returns type = "String">
    ///A string value that identifies the active area.
    ///</returns>
};
ASPxClientFileManager.prototype.Refresh = function() {
    ///<summary>
    ///Client-side scripting method which initiates a round trip to the server, so that the current page will be reloaded.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.ExecuteCommand = function(commandName) {
    ///<summary>
    ///Executes the specified command.
    ///</summary>
    ///<param name = "commandName" type = "String">
    ///A string value that specifies the command to perform.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified command has been completed successfully; otherwise, false.
    ///</returns>
};
ASPxClientFileManager.prototype.GetSelectedFile = function() {
    ///<summary>
    ///Returns the selected file within the ASPxFileManager control's file container.
    ///</summary>
    ///<returns type = "ASPxClientFileManagerFile">
    ///An ASPxClientFileManagerFile object, that is the selected file, or null if no file is selected.
    ///</returns>
};
ASPxClientFileManager.prototype.GetSelectedItems = function() {
    ///<summary>
    ///Returns an array of the file manager's selected items.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientFileManagerFile">
    ///An <see cref="ASPxClientFileManagerFile[]" /> array containing the selected items.
    ///</returns>
};
ASPxClientFileManager.prototype.GetItems = function() {
    ///<summary>
    ///Returns a list of files that are loaded on the current page.
    ///</summary>
    ///<returns type = "Array" elementType = "ASPxClientFileManagerFile">
    ///The <see cref="ASPxClientFileManagerFile[]" /> collection of files.
    ///</returns>
};
ASPxClientFileManager.prototype.GetAllItems = function(onCallback) {
    ///<summary>
    ///Sends a callback to the server and returns a list of files that are contained within the current folder.
    ///</summary>
    ///<param name = "onCallback" type = "ASPxClientFileManagerAllItemsCallback">
    ///A  object that represents the JavaScript function which receives the list of row values as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.GetToolbarItemByCommandName = function(commandName) {
    ///<summary>
    ///Returns a toolbar item specified by its command name.
    ///</summary>
    ///<param name = "commandName" type = "String">
    ///A string value specifying the command name of the item.
    ///</param>
    ///<returns type = "ASPxClientFileManagerToolbarItem">
    ///An <see cref="ASPxClientFileManagerToolbarItem" /> object that is the item with the specified command name.
    ///</returns>
};
ASPxClientFileManager.prototype.GetContextMenuItemByCommandName = function(commandName) {
    ///<summary>
    ///Returns a context menu item specified by its command name.
    ///</summary>
    ///<param name = "commandName" type = "String">
    ///A string value specifying the command name of the item.
    ///</param>
    ///<returns type = "ASPxClientFileManagerToolbarItem">
    ///An <see cref="ASPxClientFileManagerToolbarItem" /> object that is the item with the specified command name.
    ///</returns>
};
ASPxClientFileManager.prototype.GetCurrentFolderPath = function() {
    ///<signature>
    ///<summary>
    ///Gets the current folder's path.
    ///</summary>
    ///<returns type = "String">
    ///A String value that represents the path to the folder.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the current folder's path with the specified separator.
    ///</summary>
    ///<param name = "separator" type = "String">
    ///A string value that specifies the separator between the folder's name within a path.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the path to the folder.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the current folder's path with the specified settings.
    ///</summary>
    ///<param name = "separator" type = "String">
    ///A string value that specifies the separator between the folder's name within the path.
    ///</param>
    ///<param name = "skipRootFolder" type = "Boolean">
    ///true to skip the root folder; otherwise, false.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the path to the folder.
    ///</returns>
    ///</signature>
};
ASPxClientFileManager.prototype.SetCurrentFolderPath = function(path, onCallback) {
    ///<summary>
    ///Sets the current folder's path.
    ///</summary>
    ///<param name = "path" type = "String">
    ///A String value that is the relative path to the folder (without the root folder).
    ///</param>
    ///<param name = "onCallback" type = "ASPxClientFileManagerCallback">
    ///A ASPxClientFileManagerCallback object that is the JavaScript function that receives the callback data as a parameter.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.GetCurrentFolderId = function() {
    ///<summary>
    ///Gets the current folder's ID.
    ///</summary>
    ///<returns type = "String">
    ///A <see cref="String" /> value that is the ID of the folder.
    ///</returns>
};
ASPxClientFileManager.prototype.PerformCallback = function(args) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that specifies any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that specifies any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientFileManager.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientFileManager.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientFileManager.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientFileManager.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientFileManager.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientFileManager.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManager.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientFileManagerItem.prototype.SetSelected = function(selected) {
    ///<summary>
    ///Specifies whether the file manager item is selected.
    ///</summary>
    ///<param name = "selected" type = "Boolean">
    ///true, to select the item; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerItem.prototype.IsSelected = function() {
    ///<summary>
    ///Gets a value indicating whether the item is selected in the file manager.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the item is selected; otherwise, false.
    ///</returns>
};
ASPxClientFileManagerItem.prototype.GetFullName = function() {
    ///<signature>
    ///<summary>
    ///Gets the current item's full name.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the full name of an item.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the current item's full name with the specified separator.
    ///</summary>
    ///<param name = "separator" type = "String">
    ///A string value that specifies the separator between the folder name inside the item's full name.
    ///</param>
    ///<returns type = "String">
    ///A string value that is the full name of an item.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the current item's full name with the specified settings.
    ///</summary>
    ///<param name = "separator" type = "String">
    ///A string value that specifies the separator between the folder name inside the item's full name.
    ///</param>
    ///<param name = "skipRootFolder" type = "Boolean">
    ///true, to skip the root folder; otherwise, false.
    ///</param>
    ///<returns type = "String">
    ///A string value that is the full name of an item.
    ///</returns>
    ///</signature>
};
ASPxClientFileManagerFile.prototype.Download = function() {
    ///<summary>
    ///Downloads a file from a file manager.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFile.prototype.SetSelected = function(selected) {
    ///<summary>
    ///Specifies whether the file manager item is selected.
    ///</summary>
    ///<param name = "selected" type = "Boolean">
    ///true, to select the item; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFile.prototype.IsSelected = function() {
    ///<summary>
    ///Gets a value indicating whether the item is selected in the file manager.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the item is selected; otherwise, false.
    ///</returns>
};
ASPxClientFileManagerFile.prototype.GetFullName = function() {
    ///<signature>
    ///<summary>
    ///Gets the current item's full name.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the full name of an item.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the current item's full name with the specified separator.
    ///</summary>
    ///<param name = "separator" type = "String">
    ///A string value that specifies the separator between the folder name inside the item's full name.
    ///</param>
    ///<returns type = "String">
    ///A string value that is the full name of an item.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the current item's full name with the specified settings.
    ///</summary>
    ///<param name = "separator" type = "String">
    ///A string value that specifies the separator between the folder name inside the item's full name.
    ///</param>
    ///<param name = "skipRootFolder" type = "Boolean">
    ///true, to skip the root folder; otherwise, false.
    ///</param>
    ///<returns type = "String">
    ///A string value that is the full name of an item.
    ///</returns>
    ///</signature>
};
ASPxClientFileManagerFolder.prototype.SetSelected = function(selected) {
    ///<summary>
    ///Specifies whether the file manager item is selected.
    ///</summary>
    ///<param name = "selected" type = "Boolean">
    ///true, to select the item; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerFolder.prototype.IsSelected = function() {
    ///<summary>
    ///Gets a value indicating whether the item is selected in the file manager.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the item is selected; otherwise, false.
    ///</returns>
};
ASPxClientFileManagerFolder.prototype.GetFullName = function() {
    ///<signature>
    ///<summary>
    ///Gets the current item's full name.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the full name of an item.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the current item's full name with the specified separator.
    ///</summary>
    ///<param name = "separator" type = "String">
    ///A string value that specifies the separator between the folder name inside the item's full name.
    ///</param>
    ///<returns type = "String">
    ///A string value that is the full name of an item.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Gets the current item's full name with the specified settings.
    ///</summary>
    ///<param name = "separator" type = "String">
    ///A string value that specifies the separator between the folder name inside the item's full name.
    ///</param>
    ///<param name = "skipRootFolder" type = "Boolean">
    ///true, to skip the root folder; otherwise, false.
    ///</param>
    ///<returns type = "String">
    ///A string value that is the full name of an item.
    ///</returns>
    ///</signature>
};
ASPxClientMenuItem.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of the current menu item's immediate child items.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of the immediate subitems of the current menu item.
    ///</returns>
};
ASPxClientMenuItem.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the current menu item's immediate subitem specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the submenu item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An Items collection.
    ///</returns>
};
ASPxClientMenuItem.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns the current menu item's subitem specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the menu item.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the current menu item's subitem with the specified name.
    ///</returns>
};
ASPxClientMenuItem.prototype.GetChecked = function() {
    ///<summary>
    ///Indicates whether the menu item is checked.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the menu item is checked; otherwise, false.
    ///</returns>
};
ASPxClientMenuItem.prototype.SetChecked = function(value) {
    ///<summary>
    ///Specifies whether the menu item is checked.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true if the menu item is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItem.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a menu item is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the menu item is enabled; otherwise, false.
    ///</returns>
};
ASPxClientMenuItem.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether the menu item is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the menu item; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItem.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the menu item.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the menu item.
    ///</returns>
};
ASPxClientMenuItem.prototype.SetImageUrl = function(value) {
    ///<summary>
    ///Sets the URL which points to the image displayed within the menu item.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value specifying the URL to the image displayed within the menu item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItem.prototype.GetNavigateUrl = function() {
    ///<summary>
    ///Gets a URL which defines the navigation location for the menu item.
    ///</summary>
    ///<returns type = "String">
    ///A string value which represents a URL to where the client web browser will navigate when the menu item is clicked.
    ///</returns>
};
ASPxClientMenuItem.prototype.SetNavigateUrl = function(value) {
    ///<summary>
    ///Specifies a URL which defines the navigation location for the menu item.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies a URL to where the client web browser will navigate when the menu item is clicked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItem.prototype.GetText = function() {
    ///<summary>
    ///Returns text displayed within the menu item.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the menu item.
    ///</returns>
};
ASPxClientMenuItem.prototype.SetText = function(value) {
    ///<summary>
    ///Sets the text to be displayed within the menu item.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value specifying the text to be displayed within the menu item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuItem.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a menu item is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the menu item is visible; otherwise, false.
    ///</returns>
};
ASPxClientMenuItem.prototype.SetVisible = function(value) {
    ///<summary>
    ///Specifies the menu item's visibility.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true if the menu item is visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of the current menu item's immediate child items.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of the immediate subitems of the current menu item.
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the current menu item's immediate subitem specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the submenu item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An Items collection.
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns the current menu item's subitem specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the menu item.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the current menu item's subitem with the specified name.
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.GetChecked = function() {
    ///<summary>
    ///Indicates whether the menu item is checked.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the menu item is checked; otherwise, false.
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.SetChecked = function(value) {
    ///<summary>
    ///Specifies whether the menu item is checked.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true if the menu item is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a menu item is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the menu item is enabled; otherwise, false.
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether the menu item is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the menu item; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the menu item.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the menu item.
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.SetImageUrl = function(value) {
    ///<summary>
    ///Sets the URL which points to the image displayed within the menu item.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value specifying the URL to the image displayed within the menu item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.GetNavigateUrl = function() {
    ///<summary>
    ///Gets a URL which defines the navigation location for the menu item.
    ///</summary>
    ///<returns type = "String">
    ///A string value which represents a URL to where the client web browser will navigate when the menu item is clicked.
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.SetNavigateUrl = function(value) {
    ///<summary>
    ///Specifies a URL which defines the navigation location for the menu item.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies a URL to where the client web browser will navigate when the menu item is clicked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.GetText = function() {
    ///<summary>
    ///Returns text displayed within the menu item.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the menu item.
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.SetText = function(value) {
    ///<summary>
    ///Sets the text to be displayed within the menu item.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value specifying the text to be displayed within the menu item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a menu item is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the menu item is visible; otherwise, false.
    ///</returns>
};
ASPxClientFileManagerToolbarItem.prototype.SetVisible = function(value) {
    ///<summary>
    ///Specifies the menu item's visibility.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true if the menu item is visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLayoutItem.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns the current layout item's subitem specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the layout item.
    ///</param>
    ///<returns type = "ASPxClientLayoutItem">
    ///An <see cref="ASPxClientLayoutItem" /> object that represents the current layout item's subitem with the specified name.
    ///</returns>
};
ASPxClientLayoutItem.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a layout item is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the layout item is visible; otherwise, false.
    ///</returns>
};
ASPxClientLayoutItem.prototype.SetVisible = function(value) {
    ///<summary>
    ///Specifies the layout item's visibility.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, if the layout item is visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLayoutItem.prototype.SetCaption = function(caption) {
    ///<summary>
    ///Specifies the text displayed in the layout item caption.
    ///</summary>
    ///<param name = "caption" type = "String">
    ///A string value specifying the item caption.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLayoutItem.prototype.GetCaption = function() {
    ///<summary>
    ///Returns the text displayed in the layout item caption.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the item's caption.
    ///</returns>
};
ASPxClientFormLayout.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns an item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the item.
    ///</param>
    ///<returns type = "ASPxClientLayoutItem">
    ///An <see cref="ASPxClientLayoutItem" /> object that represents the item with the specified name.
    ///</returns>
};
ASPxClientFormLayout.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientFormLayout.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientFormLayout.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFormLayout.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFormLayout.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFormLayout.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientFormLayout.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFormLayout.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientFormLayout.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFormLayout.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientFormLayout.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientFormLayout.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientHiddenField.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.Add = function(propertyName, propertyValue) {
    ///<summary>
    ///Adds a new value to the control's collection of property name/value pairs, on the client side.
    ///</summary>
    ///<param name = "propertyName" type = "String">
    ///A string value that specifies the property name. It can contain letters, digits, underline characters, and dollar signs. It cannot begin with a digit character.
    ///</param>
    ///<param name = "propertyValue" type = "Object">
    ///An object that represents the value of the specified property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.Get = function(propertyName) {
    ///<summary>
    ///Returns the value with the specified property name.
    ///</summary>
    ///<param name = "propertyName" type = "String">
    ///A string value that specifies the property name.
    ///</param>
    ///<returns type = "Object">
    ///An object that represents the value of the specified property.
    ///</returns>
};
ASPxClientHiddenField.prototype.Set = function(propertyName, propertyValue) {
    ///<summary>
    ///Adds a new value to the control's collection of property name/value pairs, on the client side.
    ///</summary>
    ///<param name = "propertyName" type = "String">
    ///A string value that specifies the property name. It can contain letters, digits, underline characters, and dollar signs. It cannot begin with a digit character.
    ///</param>
    ///<param name = "propertyValue" type = "Object">
    ///An object that represents the property value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.Remove = function(propertyName) {
    ///<summary>
    ///Removes the specified value from the ASPxHiddenField collection.
    ///</summary>
    ///<param name = "propertyName" type = "String">
    ///A string value representing the property name.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.Clear = function() {
    ///<summary>
    ///Clears the ASPxHiddenField's value collection.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.Contains = function(propertyName) {
    ///<summary>
    ///Returns a value indicating whether the value with the specified property name is contained within the ASPxHiddenField control's value collection.
    ///</summary>
    ///<param name = "propertyName" type = "String">
    ///A string value that specifies the property name.
    ///</param>
    ///<returns type = "Boolean">
    ///true if this value is contained within the collection; otherwise, false.
    ///</returns>
};
ASPxClientHiddenField.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientHiddenField.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientHiddenField.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientHiddenField.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientHiddenField.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientHiddenField.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHiddenField.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientHint.prototype.GetMainElement = function() {
    ///<signature>
    ///<summary>
    ///This method is not in effect for a ASPxClientHint object.
    ///</summary>
    ///<returns type = "Object">
    ///Always null.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
    ///</signature>
};
ASPxClientHint.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientHint.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientHint.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHint.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHint.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHint.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHint.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientHint.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHint.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientHint.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHint.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientHintWindow.prototype.UpdatePosition = function() {
    ///<summary>
    ///Forces the ASPxClientHint's window to recalculate its position.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.ShowFullscreenViewer = function(index) {
    ///<summary>
    ///Shows the fullscreen viewer with the specified active item.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An Int32 value that is an index of the active item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.HideFullscreenViewer = function() {
    ///<summary>
    ///Hides the fullscreen viewer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.SetFullscreenViewerActiveItemIndex = function(index, preventAnimation) {
    ///<summary>
    ///Makes the specified item active within the fullscreen viewer on the client side.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the index of the item to select.
    ///</param>
    ///<param name = "preventAnimation" type = "Boolean">
    ///true to prevent the animation effect; false to change images using animation.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.GetFullscreenViewerItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the control's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value specifying the number of items.
    ///</returns>
};
ASPxClientImageGallery.prototype.GetFullscreenViewerActiveItemIndex = function() {
    ///<summary>
    ///Returns the index of the active item within the fullscreen viewer.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that is the active item's index.
    ///</returns>
};
ASPxClientImageGallery.prototype.PlaySlideShow = function() {
    ///<summary>
    ///Plays a slide show within a fullscreen viewer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.PauseSlideShow = function() {
    ///<summary>
    ///Pauses a slide show within a fullscreen viewer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Activates the specified page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page that is currently active.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
ASPxClientImageGallery.prototype.GetPageSize = function() {
    ///<summary>
    ///Gets the size of a single ASPxDataView's page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the page size.
    ///</returns>
};
ASPxClientImageGallery.prototype.SetPageSize = function(pageSize) {
    ///<summary>
    ///Sets the size of a single ASPxDataView's page.
    ///</summary>
    ///<param name = "pageSize" type = "Int32">
    ///An integer value that specifies the page size.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages into which the ASPxDataView's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that represents the number of pages.
    ///</returns>
};
ASPxClientImageGallery.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.FirstPage = function() {
    ///<summary>
    ///Activates the first page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.LastPage = function() {
    ///<summary>
    ///Activates the last page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientImageGallery.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientImageGallery.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientImageGallery.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientImageGallery.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientImageGallery.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientImageGallery.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientImageSlider.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the image slider's item collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientImageSliderItem">
    ///An ASPxClientImageSliderItem object that is the collection item found.
    ///</returns>
};
ASPxClientImageSlider.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns an item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the item.
    ///</param>
    ///<returns type = "ASPxClientImageSliderItem">
    ///An <see cref="ASPxClientImageSliderItem" /> object that is the item with the specified name.
    ///</returns>
};
ASPxClientImageSlider.prototype.GetActiveItemIndex = function() {
    ///<summary>
    ///Returns the index of the active item within the image slider control.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that is the active item's index.
    ///</returns>
};
ASPxClientImageSlider.prototype.SetActiveItemIndex = function(index, preventAnimation) {
    ///<summary>
    ///Makes the specified item active within the image slider control on the client side.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the index of the item to select.
    ///</param>
    ///<param name = "preventAnimation" type = "Boolean">
    ///true to prevent the animation effect; false to change images using animation.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageSlider.prototype.GetActiveItem = function() {
    ///<summary>
    ///Returns the active item within the ASPxImageSlider control.
    ///</summary>
    ///<returns type = "ASPxClientImageSliderItem">
    ///An <see cref="ASPxClientImageSliderItem" /> object that denotes the active item.
    ///</returns>
};
ASPxClientImageSlider.prototype.SetActiveItem = function(item, preventAnimation) {
    ///<summary>
    ///Makes the specified item active within the image slider control on the client side.
    ///</summary>
    ///<param name = "item" type = "ASPxClientImageSliderItem">
    ///An ASPxClientImageSliderItem object specifying the item to select.
    ///</param>
    ///<param name = "preventAnimation" type = "Boolean">
    ///true to prevent animation effect; false to enable animation.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageSlider.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the control's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of items.
    ///</returns>
};
ASPxClientImageSlider.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the ASPxImageSlider control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageSlider.prototype.Play = function() {
    ///<summary>
    ///Plays a slide show within an image slider.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageSlider.prototype.Pause = function() {
    ///<summary>
    ///Pauses a slide show within image slider.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageSlider.prototype.IsSlideShowPlaying = function() {
    ///<summary>
    ///Gets a value indicating whether the slide show is playing.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the slide show is playing; otherwise, false.
    ///</returns>
};
ASPxClientImageSlider.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientImageSlider.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientImageSlider.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageSlider.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageSlider.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageSlider.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientImageSlider.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageSlider.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientImageSlider.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageSlider.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientImageSlider.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageSlider.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns an item specified by its index within the image slider's item collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientImageSliderItem">
    ///An ASPxClientImageSliderItem object that is the collection item found.
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns an item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the item.
    ///</param>
    ///<returns type = "ASPxClientImageSliderItem">
    ///An <see cref="ASPxClientImageSliderItem" /> object that is the item with the specified name.
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.GetActiveItemIndex = function() {
    ///<summary>
    ///Returns the index of the active item within the image slider control.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that is the active item's index.
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.SetActiveItemIndex = function(index, preventAnimation) {
    ///<summary>
    ///Makes the specified item active within the image slider control on the client side.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the index of the item to select.
    ///</param>
    ///<param name = "preventAnimation" type = "Boolean">
    ///true to prevent the animation effect; false to change images using animation.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.GetActiveItem = function() {
    ///<summary>
    ///Returns the active item within the ASPxImageSlider control.
    ///</summary>
    ///<returns type = "ASPxClientImageSliderItem">
    ///An <see cref="ASPxClientImageSliderItem" /> object that denotes the active item.
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.SetActiveItem = function(item, preventAnimation) {
    ///<summary>
    ///Makes the specified item active within the image slider control on the client side.
    ///</summary>
    ///<param name = "item" type = "ASPxClientImageSliderItem">
    ///An ASPxClientImageSliderItem object specifying the item to select.
    ///</param>
    ///<param name = "preventAnimation" type = "Boolean">
    ///true to prevent animation effect; false to enable animation.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.GetItemCount = function() {
    ///<summary>
    ///Gets the number of items contained in the control's item collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of items.
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.Focus = function() {
    ///<summary>
    ///Sets input focus to the ASPxImageSlider control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.Play = function() {
    ///<summary>
    ///Plays a slide show within an image slider.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.Pause = function() {
    ///<summary>
    ///Pauses a slide show within image slider.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.IsSlideShowPlaying = function() {
    ///<summary>
    ///Gets a value indicating whether the slide show is playing.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the slide show is playing; otherwise, false.
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoomNavigator.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientImageZoom.prototype.SetImageProperties = function(imageUrl, largeImageUrl, zoomWindowText, expandWindowText, alternateText) {
    ///<summary>
    ///Sets the properties on an image displayed in the image zoom control.
    ///</summary>
    ///<param name = "imageUrl" type = "String">
    ///A string value specifying the path to the preview image displayed in the preview image.
    ///</param>
    ///<param name = "largeImageUrl" type = "String">
    ///A string value specifying the path to the preview image displayed in the zoom window and the expand window.
    ///</param>
    ///<param name = "zoomWindowText" type = "String">
    ///A string value specifying the text displayed in the zoom window.
    ///</param>
    ///<param name = "expandWindowText" type = "String">
    ///A string value specifying the text displayed in the expand window.
    ///</param>
    ///<param name = "alternateText" type = "String">
    ///A string value that specifies the alternate text displayed instead of the image.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoom.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientImageZoom.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientImageZoom.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoom.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoom.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoom.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientImageZoom.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoom.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientImageZoom.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoom.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientImageZoom.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageZoom.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientLoadingPanel.prototype.Show = function() {
    ///<summary>
    ///Invokes the loading panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.ShowInElement = function(htmlElement) {
    ///<summary>
    ///Invokes the loading panel, displaying it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object that specifies the required HTML element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.ShowInElementByID = function(id) {
    ///<summary>
    ///Invokes the loading panel, displaying it over the specified element.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string that specifies the required element's identifier.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the loading panel at the specified position.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer value specifying the x-coordinate of the loading panel's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer value specifying the y-coordinate of the loaidng panel's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.SetText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the ASPxLoadingPanel.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the ASPxLoadingPanel.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.GetText = function() {
    ///<summary>
    ///Gets the text displayed within the ASPxLoadingPanel.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the control.
    ///</returns>
};
ASPxClientLoadingPanel.prototype.Hide = function() {
    ///<summary>
    ///Hides the loading panel.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientLoadingPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientLoadingPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientLoadingPanel.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientLoadingPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientLoadingPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientLoadingPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.GetUrl = function() {
    ///<summary>
    ///Returns a URL text from the URL text box in Html Editor's media dialogs.
    ///</summary>
    ///<returns type = "String">
    ///A string specifying the URL text.
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.SetUrl = function(url) {
    ///<summary>
    ///Sets a URL text in the Html Editor's media dialogs.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value that is the Url text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMediaFileSelector.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientMenuBase.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of menu items at the root menu level.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of the root menu items.
    ///</returns>
};
ASPxClientMenuBase.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the menu's root menu item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the root menu item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An Items collection.
    ///</returns>
};
ASPxClientMenuBase.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns a menu item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the menu item.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the menu item with the specified name.
    ///</returns>
};
ASPxClientMenuBase.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the selected item within the menu control.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the selected menu item.
    ///</returns>
};
ASPxClientMenuBase.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Selects the specified menu item within a menu control on the client side.
    ///</summary>
    ///<param name = "item" type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object specifying the menu item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuBase.prototype.GetRootItem = function() {
    ///<summary>
    ///Returns a root menu item.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object representing a root menu item.
    ///</returns>
};
ASPxClientMenuBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientMenuBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientMenuBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientMenuBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientMenuBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientMenuBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientMenuCollection.prototype.RecalculateAll = function() {
    ///<summary>
    ///Recalculates the position of visible sub menus.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuCollection.prototype.HideAll = function() {
    ///<summary>
    ///Hides all menus maitained by the collection.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenuCollection.prototype.Get = function(name) {
    ///<summary>
    ///Returns a collection item identified by its unique hierarchically-qualified identifier.
    ///</summary>
    ///<param name = "name" type = "Object">
    ///A string value representing the hierarchically-qualified identifier of the required control.
    ///</param>
    ///<returns type = "Object">
    ///An object representing the collection item found.
    ///</returns>
};
ASPxClientMenuCollection.prototype.GetByName = function(name) {
    ///<summary>
    ///Returns a DevExpress client control object identified by its unique hierarchically-qualified identifier (either ClientInstanceName or ClientID property value).
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value that is the hierarchically-qualified identifier of the required DevExpress control.
    ///</param>
    ///<returns type = "Object">
    ///An object that is the client control object found.
    ///</returns>
};
ASPxClientMenuCollection.prototype.GetControlsByPredicate = function(predicate) {
    ///<summary>
    ///Returns all controls in the collection that satisfy the specified predicate.
    ///</summary>
    ///<param name = "predicate" type = "ASPxClientControlPredicate">
    ///An ASPxClientControlPredicate object that is a predicate used to search for controls in the collection.
    ///</param>
    ///<returns elementType = "Object" type = "Array">
    ///An array of all client controls found.
    ///</returns>
};
ASPxClientMenuCollection.prototype.GetControlsByType = function(type) {
    ///<summary>
    ///Returns all controls of the specified type.
    ///</summary>
    ///<param name = "type" type = "Object">
    ///The object specifying the client control type.
    ///</param>
    ///<returns elementType = "Object" type = "Array">
    ///An array of all client controls found.
    ///</returns>
};
ASPxClientMenuCollection.prototype.ForEachControl = function(action) {
    ///<summary>
    ///Performs the specified action for each control in the collection.
    ///</summary>
    ///<param name = "action" type = "ASPxClientControlAction">
    ///An ASPxClientControlAction object specifying an action to perform.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.GetOrientation = function() {
    ///<summary>
    ///Gets a value specifying the menu orientation.
    ///</summary>
    ///<returns type = "String">
    ///'Vertical' if the menu is oriented vertically; 'Horizontal'  if the menu is oriented horizontally.
    ///</returns>
};
ASPxClientMenu.prototype.SetOrientation = function(orientation) {
    ///<summary>
    ///Sets the menu orientation.
    ///</summary>
    ///<param name = "orientation" type = "String">
    ///'Vertical' to orient the menu vertically; 'Horizontal' to orient the menu horizontally.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of menu items at the root menu level.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of the root menu items.
    ///</returns>
};
ASPxClientMenu.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the menu's root menu item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the root menu item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An Items collection.
    ///</returns>
};
ASPxClientMenu.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns a menu item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the menu item.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the menu item with the specified name.
    ///</returns>
};
ASPxClientMenu.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the selected item within the menu control.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the selected menu item.
    ///</returns>
};
ASPxClientMenu.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Selects the specified menu item within a menu control on the client side.
    ///</summary>
    ///<param name = "item" type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object specifying the menu item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.GetRootItem = function() {
    ///<summary>
    ///Returns a root menu item.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object representing a root menu item.
    ///</returns>
};
ASPxClientMenu.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientMenu.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientMenu.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientMenu.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientMenu.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientMenu.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientMenu.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ScrollExtender.prototype.ChangeElement = function(id) {
    ///<signature>
    ///<summary>
    ///Applies the current scroll extender to the element specified by the ID.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string value specifying the element's ID.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Applies the current scroll extender to the specified DOM element.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object specifying the required DOM element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientNavBar.prototype.GetGroupCount = function() {
    ///<summary>
    ///Returns the number of groups in the navbar.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of groups in the navbar.
    ///</returns>
};
ASPxClientNavBar.prototype.GetGroup = function(index) {
    ///<summary>
    ///Returns a group specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the group object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientNavBarGroup">
    ///An Groups collection.
    ///</returns>
};
ASPxClientNavBar.prototype.GetGroupByName = function(name) {
    ///<summary>
    ///Returns a group specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the group.
    ///</param>
    ///<returns type = "ASPxClientNavBarGroup">
    ///An ASPxClientNavBarGroup object that represents the group with the specified name.
    ///</returns>
};
ASPxClientNavBar.prototype.GetActiveGroup = function() {
    ///<summary>
    ///Returns the navbar's active group.
    ///</summary>
    ///<returns type = "ASPxClientNavBarGroup">
    ///A ASPxClientNavBarGroup object that represents the active group.
    ///</returns>
};
ASPxClientNavBar.prototype.SetActiveGroup = function(group) {
    ///<summary>
    ///Makes the specified group active.
    ///</summary>
    ///<param name = "group" type = "ASPxClientNavBarGroup">
    ///A ASPxClientNavBarGroup object that specifies the active group.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns an item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the item.
    ///</param>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object that represents the item with the specified name.
    ///</returns>
};
ASPxClientNavBar.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the selected item within the navbar control.
    ///</summary>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object that represents the selected item.
    ///</returns>
};
ASPxClientNavBar.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Selects the specified item within the navbar control on the client side.
    ///</summary>
    ///<param name = "item" type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object specifying the item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all groups of the navbar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all groups of the navbar.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientNavBar.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientNavBar.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientNavBar.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientNavBar.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientNavBar.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBar.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientNavBarGroup.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a group is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the group is enabled; otherwise, false.
    ///</returns>
};
ASPxClientNavBarGroup.prototype.GetExpanded = function() {
    ///<summary>
    ///Returns a value specifying whether the group is expanded.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the group is expanded; otherwise, false.
    ///</returns>
};
ASPxClientNavBarGroup.prototype.SetExpanded = function(value) {
    ///<summary>
    ///Sets the group's expansion state.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to expand the group; false to collapse the group.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroup.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a group is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true is the group is visible; otherwise, false.
    ///</returns>
};
ASPxClientNavBarGroup.prototype.GetText = function() {
    ///<summary>
    ///Returns text displayed within a group.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the text displayed within the navbar group.
    ///</returns>
};
ASPxClientNavBarGroup.prototype.SetText = function(text) {
    ///<summary>
    ///Specifies the text displayed within a group.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value that is the text displayed within the navbar group.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroup.prototype.SetVisible = function(value) {
    ///<summary>
    ///Specifies whether the group is visible.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true if the group is visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarGroup.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of items in the group.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of items in the group.
    ///</returns>
};
ASPxClientNavBarGroup.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the group's item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object representing the item located at the specified index within the current group.
    ///</returns>
};
ASPxClientNavBarGroup.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns a group item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the item.
    ///</param>
    ///<returns type = "ASPxClientNavBarItem">
    ///An ASPxClientNavBarItem object that represents the item with the specified name.
    ///</returns>
};
ASPxClientNavBarItem.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether an item is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an item is enabled; otherwise, false.
    ///</returns>
};
ASPxClientNavBarItem.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether the item is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true if the item is enabled; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarItem.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL which points to the image displayed within the item.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies the URL to the image displayed within the item.
    ///</returns>
};
ASPxClientNavBarItem.prototype.SetImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the item.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies the URL to the image displayed within the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarItem.prototype.GetNavigateUrl = function() {
    ///<summary>
    ///Gets an URL which defines the item's navigation location.
    ///</summary>
    ///<returns type = "String">
    ///A string value which represents the URL to where the client web browser will navigate when the item is clicked.
    ///</returns>
};
ASPxClientNavBarItem.prototype.SetNavigateUrl = function(value) {
    ///<summary>
    ///Specifies a URL which defines the item's navigation location.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which represents the URL to where the client web browser will navigate when the item is clicked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarItem.prototype.GetText = function() {
    ///<summary>
    ///Returns text displayed within the item.
    ///</summary>
    ///<returns type = "String">
    ///A string value that represents the text displayed within the item.
    ///</returns>
};
ASPxClientNavBarItem.prototype.SetText = function(value) {
    ///<summary>
    ///Specifies the text displayed within the item.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that represents the text displayed within the item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNavBarItem.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether an item is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true is the item is visible; otherwise, false.
    ///</returns>
};
ASPxClientNavBarItem.prototype.SetVisible = function(value) {
    ///<summary>
    ///Specifies whether the item is visible.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true is the item is visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Activates the specified page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.GetPageIndex = function() {
    ///<summary>
    ///Gets the index of the page that is currently active.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the active page's index.
    ///</returns>
};
ASPxClientNewsControl.prototype.GetPageSize = function() {
    ///<summary>
    ///Gets the size of a single ASPxDataView's page.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the page size.
    ///</returns>
};
ASPxClientNewsControl.prototype.SetPageSize = function(pageSize) {
    ///<summary>
    ///Sets the size of a single ASPxDataView's page.
    ///</summary>
    ///<param name = "pageSize" type = "Int32">
    ///An integer value that specifies the page size.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.GetPageCount = function() {
    ///<summary>
    ///Gets the number of pages into which the ASPxDataView's data is divided.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that represents the number of pages.
    ///</returns>
};
ASPxClientNewsControl.prototype.NextPage = function() {
    ///<summary>
    ///Activates the next page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.PrevPage = function() {
    ///<summary>
    ///Activates the previous page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.FirstPage = function() {
    ///<summary>
    ///Activates the first page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.LastPage = function() {
    ///<summary>
    ///Activates the last page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side CustomCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientNewsControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientNewsControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientNewsControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientNewsControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientNewsControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientNewsControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientNewsControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientObjectContainer.prototype.Back = function() {
    ///<summary>
    ///Play the Flash movie backwards.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.GetVariable = function(name) {
    ///<summary>
    ///Returns the value of the Flash variable specified.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value that specifies the Flash variable.
    ///</param>
    ///<returns type = "String">
    ///A string value that represents the Flash variable's value.
    ///</returns>
};
ASPxClientObjectContainer.prototype.Forward = function() {
    ///<summary>
    ///Play the Flash movie forwards.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.GotoFrame = function(frameNumber) {
    ///<summary>
    ///Activates the specified frame in the Flash movie.
    ///</summary>
    ///<param name = "frameNumber" type = "Int32">
    ///An integer value that specifies the requested frame.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.IsPlaying = function() {
    ///<summary>
    ///Indicates whether the Flash movie is currently playing.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the movie is playing; otherwise, false.
    ///</returns>
};
ASPxClientObjectContainer.prototype.LoadMovie = function(layerNumber, url) {
    ///<summary>
    ///Loads the Flash movie to the specified layer.
    ///</summary>
    ///<param name = "layerNumber" type = "Int32">
    ///An integer value that identifies a layer in which to load the movie.
    ///</param>
    ///<param name = "url" type = "String">
    ///A string value that specifies the movie's URL.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.Pan = function(x, y, mode) {
    ///<summary>
    ///Pans a zoomed-in Flash movie to the specified coordinates.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer value that specifies the X-coordinate.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer value that specifies the Y-coordinate.
    ///</param>
    ///<param name = "mode" type = "Int32">
    ///0 the coordinates are pixels; 1 the coordinates are a percentage of the window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.PercentLoaded = function() {
    ///<summary>
    ///Returns the percent of the Flash Player movie that has streamed into the browser so far.
    ///</summary>
    ///<returns type = "String">
    ///An integer value that specifies the percent of the Flash Player movie that has streamed into the browser so far.
    ///</returns>
};
ASPxClientObjectContainer.prototype.Play = function() {
    ///<summary>
    ///Starts playing the Flash movie.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.Rewind = function() {
    ///<summary>
    ///Rewinds the Flash movie to the first frame.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.SetVariable = function(name, value) {
    ///<summary>
    ///Sets the value of the specified Flash variable.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value that specifies the Flash variable.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string value that represents a new value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.SetZoomRect = function(left, top, right, bottom) {
    ///<summary>
    ///Zooms in on the specified rectangular area of the Flash movie.
    ///</summary>
    ///<param name = "left" type = "Int32">
    ///An integer value that specifies the x-coordinate of the rectangle's left side, in twips.
    ///</param>
    ///<param name = "top" type = "Int32">
    ///An integer value that specifies the y-coordinate of the rectangle's top side, in twips.
    ///</param>
    ///<param name = "right" type = "Int32">
    ///An integer value that specifies the x-coordinate of the rectangle's right side, in twips.
    ///</param>
    ///<param name = "bottom" type = "Int32">
    ///An integer value that specifies the y-coordinate of the rectangle's bottom side, in twips.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.StopPlay = function() {
    ///<summary>
    ///Stops playing the Flash movie.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.TotalFrames = function() {
    ///<summary>
    ///Returns the total number of frames in the Flash movie.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the total number of frames in the movie.
    ///</returns>
};
ASPxClientObjectContainer.prototype.Zoom = function(percent) {
    ///<summary>
    ///Zooms the Flash view by a relative scale factor.
    ///</summary>
    ///<param name = "percent" type = "Int32">
    ///An integer value that specifies the relative scale factor, as a  percentage.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.QTPlay = function() {
    ///<summary>
    ///Starts playing a Quick Time movie.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.QTStopPlay = function() {
    ///<summary>
    ///Stops playing a Quick Time movie.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.QTRewind = function() {
    ///<summary>
    ///Rewinds a Quick Time movie to the first frame.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.QTStep = function(count) {
    ///<summary>
    ///Steps through a Quick Time video stream by a specified number of frames.
    ///</summary>
    ///<param name = "count" type = "Int32">
    ///An integer value that specifies the number of frames to step.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientObjectContainer.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientObjectContainer.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientObjectContainer.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientObjectContainer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientObjectContainer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientObjectContainer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientPager.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPager.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPager.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPager.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPager.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPager.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPager.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPager.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientPager.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPager.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPager.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPager.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetMainElement = function() {
    ///<signature>
    ///<summary>
    ///This method is not in effect for a ASPxClientPopupControl object.
    ///</summary>
    ///<returns type = "Object">
    ///Always null.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
    ///</signature>
};
ASPxClientPopupControl.prototype.GetPopUpReasonMouseEvent = function() {
    ///<summary>
    ///Returns an object containing the information about a mouse event that invoked a default popup window.
    ///</summary>
    ///<returns type = "Object">
    ///An object containing the information about the mouse event.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowPopUpReasonMouseEvent = function(window) {
    ///<summary>
    ///Returns an object containing the information about a mouse event that invoked the specified popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Object">
    ///An object containing the information about the mouse event.
    ///</returns>
};
ASPxClientPopupControl.prototype.PerformWindowCallback = function(window, parameter) {
    ///<signature>
    ///<summary>
    ///
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///
    ///</param>
    ///<param name = "parameter" type = "String">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback with parameters to update the popup window by processing the related popup window and the passed information on the server.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object identifying the processed popup window.
    ///</param>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side CustomCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientPopupControl.prototype.SetSize = function(width, height) {
    ///<summary>
    ///Specifies the default popup window's size.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the default popup window's width.
    ///</param>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the default popup window's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowContentWidth = function(window) {
    ///<summary>
    ///Gets the width of the specified popup window's content region.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the width of the content region.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowContentHeight = function(window) {
    ///<summary>
    ///Gets the height of the specified popup window's content region.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the height of the content region.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowHeight = function(window) {
    ///<summary>
    ///Returns the height of a specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the specified popup window's height.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowWidth = function(window) {
    ///<summary>
    ///Returns the width of a specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the specified popup window's width.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWindowSize = function(window, width, height) {
    ///<summary>
    ///Specifies the size of a specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the required popup window's width.
    ///</param>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the required popup window's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetContentHTML = function() {
    ///<summary>
    ///Returns the HTML code that is the content of the popup control's default popup window.
    ///</summary>
    ///<returns type = "String">
    ///A string that is the default popup window's HTML content.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetContentHTML = function(html) {
    ///<summary>
    ///Defines the HTML content for the popup control's default popup window.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWindowPopupElementID = function(window, popupElementId) {
    ///<summary>
    ///Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup control's window is associated.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object representing a popup control's window.
    ///</param>
    ///<param name = "popupElementId" type = "String">
    ///A string value specifying the ID (or a list of IDs) of the web control or HTML element with which the popup control's window is associated.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetPopupElementID = function(popupElementId) {
    ///<summary>
    ///Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup control is associated.
    ///</summary>
    ///<param name = "popupElementId" type = "String">
    ///A string value specifying the ID (or a list of IDs) of the web control or HTML element to which the popup control is associated.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetCurrentPopupElementIndex = function() {
    ///<summary>
    ///Returns an index of the object that invoked the default window within the PopupElementID list.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that is the zero-based position of the object's ID within the PopupElementID list.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowCurrentPopupElementIndex = function(window) {
    ///<summary>
    ///Returns an index of the object that invoked the specified popup window, within the window's PopupElementID list.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that is the zero-based position of object's ID within the PopupElementID list.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetCurrentPopupElement = function() {
    ///<summary>
    ///Returns an object that invoked the default window.
    ///</summary>
    ///<returns type = "Object">
    ///An object that invoked the default window.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowCurrentPopupElement = function(window) {
    ///<summary>
    ///Returns an object that invoked the specified popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Object">
    ///An object that invoked the specified window.
    ///</returns>
};
ASPxClientPopupControl.prototype.IsWindowVisible = function(window) {
    ///<summary>
    ///Returns a value that specifies whether the popup control's specific window is displayed.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window whose visibility is checked.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified popup window is displayed; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindow = function(index) {
    ///<summary>
    ///Returns a popup window specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the popup window object to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientPopupWindow">
    ///An Windows collection.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowByName = function(name) {
    ///<summary>
    ///Returns a popup window specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the popup window.
    ///</param>
    ///<returns type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that represents the popup window with the specified name.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowCount = function() {
    ///<summary>
    ///Returns the number of popup windows in the popup control.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of popup windows in the popup control.
    ///</returns>
};
ASPxClientPopupControl.prototype.ShowWindow = function(window) {
    ///<signature>
    ///<summary>
    ///Invokes the popup control's specific window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the specified popup window at the popup element with the specified index.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "popupElementIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the popup element within the window's PopupElementID list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientPopupControl.prototype.ShowWindowAtElement = function(window, htmlElement) {
    ///<summary>
    ///Invokes the popup control's specific window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element relative to whose position the default popup window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.ShowWindowAtElementByID = function(window, id) {
    ///<summary>
    ///Invokes the popup control's specific window and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<param name = "id" type = "String">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the default popup window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.ShowWindowAtPos = function(window, x, y) {
    ///<summary>
    ///Invokes the popup control's specific popup window at the specified position.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to display.
    ///</param>
    ///<param name = "x" type = "Int32">
    ///A integer value specifying the x-coordinate of the popup window's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///A integer value specifying the y-coordinate of the popup window's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.BringWindowToFront = function(window) {
    ///<summary>
    ///Brings the specified popup window to the front of the z-order.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.HideWindow = function(window) {
    ///<summary>
    ///Closes the popup control's specified window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the popup window to close.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowContentHtml = function(window) {
    ///<summary>
    ///Returns the HTML code that represents the contents of the specified popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "String">
    ///A string that represents the specified popup window's HTML content.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWindowContentHtml = function(window, html) {
    ///<summary>
    ///Defines the HTML content for a specific popup window within the popup control.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that represents the HTML code defining the content of the specified popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowContentIFrame = function(window) {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the specified popup window's SetWindowContentUrl client method).
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the specified popup window.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowContentUrl = function(window) {
    ///<summary>
    ///Returns the URL pointing to the web page displayed within the control's specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<returns type = "String">
    ///A string value representing the URL to the web page displayed within the specified popup window.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWindowContentUrl = function(window, url) {
    ///<summary>
    ///Sets the URL pointing to the web page that should be loaded into and displayed within the control's specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<param name = "url" type = "String">
    ///A string value specifying the URL to the web page to be displayed within the specified popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowPinned = function(window) {
    ///<summary>
    ///Returns a value indicating whether the specified window is pinned.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the window is pinned; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWindowPinned = function(window, value) {
    ///<summary>
    ///Sets a value indicating whether the specified window is pinned.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true to pin the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowMaximized = function(window) {
    ///<summary>
    ///Returns a value indicating whether the specified window is maximized.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the window is maximized; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWindowMaximized = function(window, value) {
    ///<summary>
    ///Sets a value indicating whether the specified window is maximized.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true to maximize the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWindowCollapsed = function(window) {
    ///<summary>
    ///Returns a value indicating whether the specified window is collapsed.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the window is collapsed; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWindowCollapsed = function(window, value) {
    ///<summary>
    ///Sets a value indicating whether the specified window is collapsed.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object specifying the popup window.
    ///</param>
    ///<param name = "value" type = "Boolean">
    ///true to collapse the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.RefreshWindowContentUrl = function(window) {
    ///<summary>
    ///Refreshes the content of the web page displayed within the control's specific popup window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///A ASPxClientPopupWindow object representing the required popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.UpdatePosition = function() {
    ///<summary>
    ///Updates the default popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.UpdatePositionAtElement = function(htmlElement) {
    ///<summary>
    ///Updates the default popup window's position, to correctly align it at the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element to which the default popup window is aligned using the PopupVerticalAlign properties.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.UpdateWindowPosition = function(window) {
    ///<summary>
    ///Updates the specified popup window's position, to correctly align it at either the specified element, or the center of the browser's window.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.UpdateWindowPositionAtElement = function(window, htmlElement) {
    ///<summary>
    ///Updates the specified popup window's position, to correctly align it at the specified HTML element.
    ///</summary>
    ///<param name = "window" type = "ASPxClientPopupWindow">
    ///An ASPxClientPopupWindow object that specifies the required popup window.
    ///</param>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element to which the specified popup window is aligned using the PopupVerticalAlign properties.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.RefreshPopupElementConnection = function() {
    ///<summary>
    ///Refreshes the connection between the ASPxPopupControl and the popup element.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a control's window size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.BringToFront = function() {
    ///<summary>
    ///Brings the window to the front of the z-order.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetCollapsed = function() {
    ///<summary>
    ///Returns a value indicating whether the window is collapsed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is collapsed; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that specifies the contents of the control's window.
    ///</summary>
    ///<returns type = "String">
    ///A string that specifies the window's HTML content.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetContentIFrame = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the control.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetContentIFrameWindow = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the control's SetContentUrl client method).
    ///</summary>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the control's window.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetContentUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the web page displayed within the control's window.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetFooterImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window footer by default.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetFooterNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetFooterText = function() {
    ///<summary>
    ///Returns the text displayed within a window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies a window's footer text.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetHeaderImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetHeaderNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within a window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies a window's header text.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetContentWidth = function() {
    ///<summary>
    ///Gets the width of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the width of the content region.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetContentHeight = function() {
    ///<summary>
    ///Gets the height of the default window's (for ASPxPopupControl) or panel's (for ASPxDockPanel) content region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the height of the content region.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetMaximized = function() {
    ///<summary>
    ///Returns a value indicating whether the window is maximized.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is maximized; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetPinned = function() {
    ///<summary>
    ///Returns a value indicating whether the window is pinned.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the window is pinned; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.PerformCallback = function(parameter) {
    ///<summary>
    ///Sends a callback to the server and generates the server-side WindowCallback event, passing the specified argument to it.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that is any information that needs to be sent to the server-side WindowCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.RefreshContentUrl = function() {
    ///<summary>
    ///Refreshes the content of the web page displayed within the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetCollapsed = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is collapsed.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, to collapse the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML markup specifying the contents of the control's window.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that specifies the HTML markup.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetContentUrl = function(url) {
    ///<summary>
    ///Sets the URL to point to the web page that should be loaded into, and displayed within the control's window.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value specifying the URL to the web page displayed within the control's window.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetFooterImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window footer by default.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL for the image displayed within the window footer.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetFooterNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetFooterText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies a window's footer text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetHeaderImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetHeaderNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within a window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetHeaderText = function(value) {
    ///<summary>
    ///Specifies the text displayed within a window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies a window's header text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetMaximized = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is maximized.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true. to maximize the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetPinned = function(value) {
    ///<summary>
    ///Sets a value indicating whether the window is pinned.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true, to pin the window; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.Show = function() {
    ///<signature>
    ///<summary>
    ///Invokes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the control's window at the popup element with the specified index.
    ///</summary>
    ///<param name = "popupElementIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the popup element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientPopupControl.prototype.ShowAtElement = function(htmlElement) {
    ///<summary>
    ///Invokes the control's window and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.ShowAtElementByID = function(id) {
    ///<summary>
    ///Invokes the control's window and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to whose position the window is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the control's window at the specified position.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///A integer value specifying the x-coordinate of the window's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///A integer value specifying the y-coordinate of the window's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.Hide = function() {
    ///<summary>
    ///Closes the control's window.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.IsVisible = function() {
    ///<summary>
    ///Returns a value that specifies whether the control's window is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the window is displayed; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPopupControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientPopupControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPopupControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientPopupWindow.prototype.GetHeaderImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</returns>
};
ASPxClientPopupWindow.prototype.SetHeaderImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL to the image displayed within the header.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindow.prototype.GetFooterImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the window footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the window footer.
    ///</returns>
};
ASPxClientPopupWindow.prototype.SetFooterImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the window footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL to the image displayed within the window footer.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindow.prototype.GetHeaderNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientPopupWindow.prototype.SetHeaderNavigateUrl = function(value) {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindow.prototype.GetFooterNavigateUrl = function() {
    ///<summary>
    ///Returns the URL where the web browser will navigate when the text or image is clicked within the popup window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value which specifies the required navigation location.
    ///</returns>
};
ASPxClientPopupWindow.prototype.SetFooterNavigateUrl = function(value) {
    ///<summary>
    ///Specifies the URL where the web browser will navigate when the text or image is clicked within the popup window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies the required navigation location.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindow.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within the window's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies the window's header text.
    ///</returns>
};
ASPxClientPopupWindow.prototype.SetHeaderText = function(value) {
    ///<summary>
    ///Specifies the text displayed within the window's header.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies the window's header text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupWindow.prototype.GetFooterText = function() {
    ///<summary>
    ///Returns the text displayed within the popup window's footer.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies the window's footer text.
    ///</returns>
};
ASPxClientPopupWindow.prototype.SetFooterText = function(value) {
    ///<summary>
    ///Specifies the text displayed within the window's footer.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that specifies the window's footer text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlCollection.prototype.HideAllWindows = function() {
    ///<summary>
    ///Hides all popup windows maintained by the collection.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupControlCollection.prototype.Get = function(name) {
    ///<summary>
    ///Returns a collection item identified by its unique hierarchically-qualified identifier.
    ///</summary>
    ///<param name = "name" type = "Object">
    ///A string value representing the hierarchically-qualified identifier of the required control.
    ///</param>
    ///<returns type = "Object">
    ///An object representing the collection item found.
    ///</returns>
};
ASPxClientPopupControlCollection.prototype.GetByName = function(name) {
    ///<summary>
    ///Returns a DevExpress client control object identified by its unique hierarchically-qualified identifier (either ClientInstanceName or ClientID property value).
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value that is the hierarchically-qualified identifier of the required DevExpress control.
    ///</param>
    ///<returns type = "Object">
    ///An object that is the client control object found.
    ///</returns>
};
ASPxClientPopupControlCollection.prototype.GetControlsByPredicate = function(predicate) {
    ///<summary>
    ///Returns all controls in the collection that satisfy the specified predicate.
    ///</summary>
    ///<param name = "predicate" type = "ASPxClientControlPredicate">
    ///An ASPxClientControlPredicate object that is a predicate used to search for controls in the collection.
    ///</param>
    ///<returns elementType = "Object" type = "Array">
    ///An array of all client controls found.
    ///</returns>
};
ASPxClientPopupControlCollection.prototype.GetControlsByType = function(type) {
    ///<summary>
    ///Returns all controls of the specified type.
    ///</summary>
    ///<param name = "type" type = "Object">
    ///The object specifying the client control type.
    ///</param>
    ///<returns elementType = "Object" type = "Array">
    ///An array of all client controls found.
    ///</returns>
};
ASPxClientPopupControlCollection.prototype.ForEachControl = function(action) {
    ///<summary>
    ///Performs the specified action for each control in the collection.
    ///</summary>
    ///<param name = "action" type = "ASPxClientControlAction">
    ///An ASPxClientControlAction object specifying an action to perform.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.SetPopupElementID = function(popupElementId) {
    ///<summary>
    ///Sets the ID of a web control or HTML element (or a list of IDs) with which the current popup menu is associated.
    ///</summary>
    ///<param name = "popupElementId" type = "String">
    ///A string value specifying the ID (or a list of IDs) of the web control or HTML element with which the popup menu is associated.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetCurrentPopupElementIndex = function() {
    ///<summary>
    ///Returns an index of the object that invoked the popup menu within the PopupElementID list.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that is the zero-based position of the object's ID within the PopupElementID list.
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetCurrentPopupElement = function() {
    ///<summary>
    ///Returns an object that invoked the popup menu.
    ///</summary>
    ///<returns type = "Object">
    ///An object that invoked the popup menu.
    ///</returns>
};
ASPxClientPopupMenu.prototype.RefreshPopupElementConnection = function() {
    ///<summary>
    ///Refreshes the connection between the ASPxPopupMenu and the popup element.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.Hide = function() {
    ///<summary>
    ///Hides the popup menu.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.Show = function() {
    ///<signature>
    ///<summary>
    ///Invokes the popup menu.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Invokes the popup menu at the popup element with the specified index.
    ///</summary>
    ///<param name = "popupElementIndex" type = "Int32">
    ///An integer value specifying the zero-based index of the popup element.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientPopupMenu.prototype.ShowAtElement = function(htmlElement) {
    ///<summary>
    ///Invokes the popup menu and displays it over the specified HTML element.
    ///</summary>
    ///<param name = "htmlElement" type = "Object">
    ///An object specifying the HTML element relative to which position the popup menu is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.ShowAtElementByID = function(id) {
    ///<summary>
    ///Invokes the popup menu and displays it over an HTML element specified by its unique identifier.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string value that specifies the hierarchically qualified identifier of an HTML element relative to which position the popup menu is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.ShowAtPos = function(x, y) {
    ///<summary>
    ///Invokes the popup menu at the specified position.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer value specifying the x-coordinate of the popup menu's display position.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer value specifying the y-coordinate of the popup menu's display position.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetItemCount = function() {
    ///<summary>
    ///Returns the number of menu items at the root menu level.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of the root menu items.
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetItem = function(index) {
    ///<summary>
    ///Returns the menu's root menu item specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the root menu item to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An Items collection.
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns a menu item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the menu item.
    ///</param>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the menu item with the specified name.
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetSelectedItem = function() {
    ///<summary>
    ///Returns the selected item within the menu control.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object that represents the selected menu item.
    ///</returns>
};
ASPxClientPopupMenu.prototype.SetSelectedItem = function(item) {
    ///<summary>
    ///Selects the specified menu item within a menu control on the client side.
    ///</summary>
    ///<param name = "item" type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object specifying the menu item to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetRootItem = function() {
    ///<summary>
    ///Returns a root menu item.
    ///</summary>
    ///<returns type = "ASPxClientMenuItem">
    ///An ASPxClientMenuItem object representing a root menu item.
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPopupMenu.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPopupMenu.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientPopupMenu.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPopupMenu.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPopupMenu.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRatingControl.prototype.GetTitle = function(index) {
    ///<summary>
    ///Gets the item tooltip title specified by the item index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the item index.
    ///</param>
    ///<returns type = "String">
    ///A string that is the specified item tooltip title.
    ///</returns>
};
ASPxClientRatingControl.prototype.GetReadOnly = function() {
    ///<summary>
    ///Returns a value indicating whether the control's status is read-only.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the status is read-only; otherwise, false.
    ///</returns>
};
ASPxClientRatingControl.prototype.SetReadOnly = function(value) {
    ///<summary>
    ///Specifies whether the control's status is read-only.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to make the control read-only; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.GetValue = function() {
    ///<summary>
    ///Returns the value of the ASPxRatingControl.
    ///</summary>
    ///<returns type = "Decimal">
    ///A decimal value representing the value of the control.
    ///</returns>
};
ASPxClientRatingControl.prototype.SetValue = function(value) {
    ///<summary>
    ///Modifies the value of the ASPxRatingControl on the client side.
    ///</summary>
    ///<param name = "value" type = "Decimal">
    ///A decimal value representing the value of the control.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRatingControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRatingControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRatingControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientRatingControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRatingControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRatingControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRibbon.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Specifies whether the ribbon control is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true to enable the ribbon; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbon.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether the ribbon is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the ribbon is enabled; otherwise false.
    ///</returns>
};
ASPxClientRibbon.prototype.GetTab = function(index) {
    ///<summary>
    ///Returns a tab specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the tab object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientRibbonTab">
    ///An Tabs collection.
    ///</returns>
};
ASPxClientRibbon.prototype.GetTabByName = function(name) {
    ///<summary>
    ///Returns a tab specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the tab.
    ///</param>
    ///<returns type = "ASPxClientRibbonTab">
    ///An <see cref="ASPxClientRibbonTab" /> object that is the tab with the specified name.
    ///</returns>
};
ASPxClientRibbon.prototype.GetTabCount = function() {
    ///<summary>
    ///Returns the number of tabs in the ribbon Tabs collection.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of tabs in the control.
    ///</returns>
};
ASPxClientRibbon.prototype.GetActiveTab = function() {
    ///<summary>
    ///Returns the active tab within the ribbon control.
    ///</summary>
    ///<returns type = "ASPxClientRibbonTab">
    ///An <see cref="ASPxClientRibbonTab" /> object that is the active tab.
    ///</returns>
};
ASPxClientRibbon.prototype.SetActiveTab = function(tab) {
    ///<summary>
    ///Makes the specified tab active in the ribbon control on the client side.
    ///</summary>
    ///<param name = "tab" type = "ASPxClientRibbonTab">
    ///A ASPxClientRibbonTab object specifying the tab selection.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbon.prototype.SetActiveTabIndex = function(index) {
    ///<summary>
    ///Makes a tab active within the ribbon control, specifying the tab's index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the index of the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbon.prototype.GetItemByName = function(name) {
    ///<summary>
    ///Returns a ribbon item specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the item.
    ///</param>
    ///<returns type = "ASPxClientRibbonItem">
    ///An <see cref="ASPxClientRibbonItem" /> object that is the ribbon item with the specified name.
    ///</returns>
};
ASPxClientRibbon.prototype.GetItemValueByName = function(name) {
    ///<summary>
    ///Returns a value of item with the specified name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the item.
    ///</param>
    ///<returns type = "Object">
    ///An <see cref="Object" /> that is the value of the item with the specified name.
    ///</returns>
};
ASPxClientRibbon.prototype.SetItemValueByName = function(name, value) {
    ///<summary>
    ///Sets the value of the item with the specified name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the item.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object that is the new item value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbon.prototype.SetMinimized = function(minimized) {
    ///<summary>
    ///Specifies whether the ribbon is minimized.
    ///</summary>
    ///<param name = "minimized" type = "Boolean">
    ///true to set the ribbon state to minimized; false to set the ribbon state to normal.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbon.prototype.GetMinimized = function() {
    ///<summary>
    ///Gets a value specifying whether the ribbon is minimized.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the ribbon is minimized or temporarily shown; false if the ribbon state is set to normal.
    ///</returns>
};
ASPxClientRibbon.prototype.SetContextTabCategoryVisible = function(categoryName, visible) {
    ///<summary>
    ///Specifies the visibility of a context tab category specified by its name.
    ///</summary>
    ///<param name = "categoryName" type = "String">
    ///A Name property value of the required category.
    ///</param>
    ///<param name = "visible" type = "Boolean">
    ///true to make a category visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbon.prototype.ShowKeyTips = function() {
    ///<summary>
    ///Shows ribbon key tips.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbon.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRibbon.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRibbon.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbon.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbon.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbon.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRibbon.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbon.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientRibbon.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbon.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRibbon.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbon.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientRibbonTab.prototype.GetText = function() {
    ///<summary>
    ///Returns the text displayed in the tab.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the text displayed in the tab.
    ///</returns>
};
ASPxClientRibbonTab.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Sets a value specifying whether the tab is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true to enable the tab; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbonTab.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether a ribbon tab is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if a tab is enabled; otherwise false.
    ///</returns>
};
ASPxClientRibbonTab.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a ribbon tab is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the tab is visible; otherwise, false.
    ///</returns>
};
ASPxClientRibbonGroup.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a ribbon group is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the group is visible; otherwise, false.
    ///</returns>
};
ASPxClientRibbonItem.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether a ribbon item is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if an item is enabled; otherwise false.
    ///</returns>
};
ASPxClientRibbonItem.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Sets a value specifying whether the item is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true to enable the item; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbonItem.prototype.GetValue = function() {
    ///<summary>
    ///Returns the item value.
    ///</summary>
    ///<returns type = "Object">
    ///An <see cref="Object" /> that is the item value.
    ///</returns>
};
ASPxClientRibbonItem.prototype.SetValue = function(value) {
    ///<summary>
    ///Sets the item value.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///An  that specifies the item value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRibbonItem.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a ribbon item is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the item is visible; otherwise, false.
    ///</returns>
};
ASPxClientRoundPanel.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side ContentCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that is any information that needs to be sent to the server-side ContentCallback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side ContentCallback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that is any information that needs to be sent to the server-side ContentCallback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientRoundPanel.prototype.GetHeaderText = function() {
    ///<summary>
    ///Returns the text displayed within the panel's header.
    ///</summary>
    ///<returns type = "String">
    ///A string value that specifies the panel's header text.
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetHeaderText = function(text) {
    ///<summary>
    ///Specifies the text displayed in the panel's header.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value that specifies the panel header's text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetCollapsed = function() {
    ///<summary>
    ///Returns a value indicating whether the panel is collapsed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is collapsed; otherwise, false.
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetCollapsed = function(collapsed) {
    ///<summary>
    ///Sets a value indicating whether the panel is collapsed.
    ///</summary>
    ///<param name = "collapsed" type = "Boolean">
    ///true, to collapse the panel; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetContentHtml = function() {
    ///<summary>
    ///Returns the HTML code that is the content of the panel.
    ///</summary>
    ///<returns type = "String">
    ///A string that is the panel's HTML content.
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetContentHtml = function(html) {
    ///<summary>
    ///Sets the HTML content for the panel.
    ///</summary>
    ///<param name = "html" type = "String">
    ///A string value that is the HTML code defining the content of the panel.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Sets a value specifying whether the panel is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true to enable the panel; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a panel is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the panel is enabled; otherwise, false.
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientRoundPanel.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientRoundPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRoundPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientSplitter.prototype.GetPaneCount = function() {
    ///<summary>
    ///Returns the number of panes at the root level of a splitter.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of panes at the root level of the splitter control.
    ///</returns>
};
ASPxClientSplitter.prototype.GetPane = function(index) {
    ///<summary>
    ///Returns the splitter's root pane specified by its index within the Panes collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the root pane to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientSplitterPane">
    ///An Panes collection.
    ///</returns>
};
ASPxClientSplitter.prototype.GetPaneByName = function(name) {
    ///<summary>
    ///Returns a pane specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the pane.
    ///</param>
    ///<returns type = "ASPxClientSplitterPane">
    ///An ASPxClientSplitterPane object that represents the pane with the specified name.
    ///</returns>
};
ASPxClientSplitter.prototype.SetAllowResize = function(allowResize) {
    ///<summary>
    ///Specifies whether the control's panes can be resized by end-users on the client side.
    ///</summary>
    ///<param name = "allowResize" type = "Boolean">
    ///true if pane resizing is allowed; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitter.prototype.GetLayoutData = function() {
    ///<summary>
    ///Returns a string value that represents the client state of splitter panes.
    ///</summary>
    ///<returns type = "String">
    ///A string that represents the splitter pane state.
    ///</returns>
};
ASPxClientSplitter.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientSplitter.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientSplitter.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitter.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitter.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitter.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientSplitter.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitter.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientSplitter.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitter.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientSplitter.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitter.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetSplitter = function() {
    ///<summary>
    ///Returns a client splitter object that contains the current pane.
    ///</summary>
    ///<returns type = "ASPxClientSplitter">
    ///A ASPxClientSplitter object to which the current pane belongs.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetParentPane = function() {
    ///<summary>
    ///Returns the immediate parent of the current pane.
    ///</summary>
    ///<returns type = "ASPxClientSplitterPane">
    ///A ASPxClientSplitterPane that represents the immediate parent pane of the current pane; otherwise, a null reference (Nothing in Visual Basic), if no parent pane exists.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetPrevPane = function() {
    ///<summary>
    ///Returns the previous sibling pane of the current pane.
    ///</summary>
    ///<returns type = "ASPxClientSplitterPane">
    ///A SplitterPaneCollection.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetNextPane = function() {
    ///<summary>
    ///Returns the next sibling pane of the current pane.
    ///</summary>
    ///<returns type = "ASPxClientSplitterPane">
    ///A SplitterPaneCollection.
    ///</returns>
};
ASPxClientSplitterPane.prototype.IsFirstPane = function() {
    ///<summary>
    ///Determines whether the current pane is the first pane within the SplitterPaneCollection.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the pane is the first within the collection; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.IsLastPane = function() {
    ///<summary>
    ///Determines whether the current pane is the last pane within the SplitterPaneCollection.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the pane is the last within the collection; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.IsVertical = function() {
    ///<summary>
    ///Returns a value that indicates the orientation in which the current pane and its sibling panes are stacked.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if panes are stacked vertically within their container (a splitter control or a parent pane); false, if panes are stacked horizontally.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetPaneCount = function() {
    ///<summary>
    ///Returns the number of the current pane's immediate child panes.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the number of the immediate child panes of the current pane.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetPane = function(index) {
    ///<summary>
    ///Returns the current pane's immediate child pane specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the child pane to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientSplitterPane">
    ///An Panes collection.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetPaneByName = function(name) {
    ///<summary>
    ///Returns the current pane's child pane specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the pane.
    ///</param>
    ///<returns type = "ASPxClientSplitterPane">
    ///An ASPxClientSplitterPane object that represents the current pane's child pane with the specified name.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetClientWidth = function() {
    ///<summary>
    ///Gets the width of the pane's content area.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the width of the splitter's pane content area.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetClientHeight = function() {
    ///<summary>
    ///Gets the height of the pane's content area.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the height of the pane's content area.
    ///</returns>
};
ASPxClientSplitterPane.prototype.Collapse = function(maximizedPane) {
    ///<summary>
    ///Collapses the current pane and occupies its space by maximizing the specified pane.
    ///</summary>
    ///<param name = "maximizedPane" type = "ASPxClientSplitterPane">
    ///A ASPxClientSplitterPane object specifying the pane to be maximized to occupy the freed space.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the current pane has been collapsed successfully; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.CollapseForward = function() {
    ///<summary>
    ///Collapses the current pane in a forward direction and occupies its space by maximizing the previous adjacent pane.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the current pane has been collapsed successfully; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.CollapseBackward = function() {
    ///<summary>
    ///Collapses the current pane in a backward direction, and occupies its space by maximizing the next adjacent pane.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the current pane has been collapsed successfully; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.Expand = function() {
    ///<summary>
    ///Expands the current pane object on the client side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the current pane has been expanded successfully; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.IsCollapsed = function() {
    ///<summary>
    ///Returns whether the pane is collapsed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the pane is collapsed; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.IsContentUrlPane = function() {
    ///<summary>
    ///Returns whether the pane's content is loaded from an external web page.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the pane's content is loaded from an external web page; otherwise, false.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetContentUrl = function() {
    ///<summary>
    ///Gets the URL of a web page displayed as a pane's content.
    ///</summary>
    ///<returns type = "String">
    ///A string value specifying the URL to the web page displayed within the current pane.
    ///</returns>
};
ASPxClientSplitterPane.prototype.SetContentUrl = function(url) {
    ///<signature>
    ///<summary>
    ///Sets the URL to point to a web page that should be loaded into, and displayed within the current pane.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value specifying the URL to a web page displayed within the pane.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sets the URL to point to a web page that should be loaded into, and displayed within the current pane, but should not be cached by a client browser.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string value specifying the URL to a web page displayed within the pane.
    ///</param>
    ///<param name = "preventBrowserCaching" type = "Boolean">
    ///true to prevent the browser to cache the loaded content; false to allow browser caching.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientSplitterPane.prototype.RefreshContentUrl = function() {
    ///<summary>
    ///Refreshes the content of the web page displayed within the current pane.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetContentIFrame = function() {
    ///<summary>
    ///Returns an iframe object containing a web page specified via the pane's SetContentUrl client method).
    ///</summary>
    ///<returns type = "Object">
    ///The iframe object that contains a web page displayed within the pane.
    ///</returns>
};
ASPxClientSplitterPane.prototype.SetAllowResize = function(allowResize) {
    ///<summary>
    ///Specifies whether the current pane can be resized by end-users on the client side.
    ///</summary>
    ///<param name = "allowResize" type = "Boolean">
    ///true if pane resizing is allowed; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPane.prototype.RaiseResizedEvent = function() {
    ///<summary>
    ///Forces the client PaneResized event to be generated.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetElement = function() {
    ///<summary>
    ///Returns an HTML element representing a splitter pane object.
    ///</summary>
    ///<returns type = "Object">
    ///The HTML element representing a splitter pane object.
    ///</returns>
};
ASPxClientSplitterPane.prototype.SetSize = function(size) {
    ///<signature>
    ///<summary>
    ///Specifies the splitter pane's size in pixels.
    ///</summary>
    ///<param name = "size" type = "Int32">
    ///An integer value that specifies the splitter pane's size.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Specifies the splitter pane's size, in pixels or percents.
    ///</summary>
    ///<param name = "size" type = "String">
    ///A string value that specifies the splitter pane's size, in pixels or percents.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientSplitterPane.prototype.GetSize = function() {
    ///<summary>
    ///Returns the splitter pane's size, in pixels or percents.
    ///</summary>
    ///<returns type = "String">
    ///A string specifying the splitter pane's size, in pixels or percents.
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetScrollTop = function() {
    ///<summary>
    ///Returns the distance between the top edge of the pane content and the topmost portion of the content currently visible in the pane.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that is the distance (in pixels).
    ///</returns>
};
ASPxClientSplitterPane.prototype.SetScrollTop = function(value) {
    ///<summary>
    ///Specifies the distance between the top edge of the pane content and the topmost portion of the content currently visible in the pane.
    ///</summary>
    ///<param name = "value" type = "Int32">
    ///An integer value that is the distance (in pixels).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSplitterPane.prototype.GetScrollLeft = function() {
    ///<summary>
    ///Returns the distance between the left edge of the pane content and the leftmost portion of the content currently visible in the pane.
    ///</summary>
    ///<returns type = "Int32">
    ///An <see cref="Int32" /> value that is the distance (in pixels).
    ///</returns>
};
ASPxClientSplitterPane.prototype.SetScrollLeft = function(value) {
    ///<summary>
    ///Specifies the distance between the left edge of the pane content and the leftmost portion of the content currently visible in the pane.
    ///</summary>
    ///<param name = "value" type = "Int32">
    ///An integer value that is the distance (in pixels).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a tab page's size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetActiveTab = function() {
    ///<summary>
    ///Returns the active tab within the tab control.
    ///</summary>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the active tab.
    ///</returns>
};
ASPxClientTabControlBase.prototype.SetActiveTab = function(tab) {
    ///<summary>
    ///Makes the specified tab active within the tab control on the client side.
    ///</summary>
    ///<param name = "tab" type = "ASPxClientTab">
    ///An ASPxClientTab object specifying the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetActiveTabIndex = function() {
    ///<summary>
    ///Returns the index of the active tab within the tab control.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer that represents the active tab's index.
    ///</returns>
};
ASPxClientTabControlBase.prototype.SetActiveTabIndex = function(index) {
    ///<summary>
    ///Makes a tab active within the tab control, specifying the tab's index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the index of the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetTabCount = function() {
    ///<summary>
    ///Returns the number of tabs in the ASPxTabControl.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of tabs in the control.
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetTab = function(index) {
    ///<summary>
    ///Returns a tab specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the tab object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An Tabs collection.
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetTabByName = function(name) {
    ///<summary>
    ///Returns a tab specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the tab.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the tab with the specified name.
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTabControlBase.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTabControlBase.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientTabControlBase.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTabControlBase.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControlBase.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTabControl.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a tab page's size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.GetActiveTab = function() {
    ///<summary>
    ///Returns the active tab within the tab control.
    ///</summary>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the active tab.
    ///</returns>
};
ASPxClientTabControl.prototype.SetActiveTab = function(tab) {
    ///<summary>
    ///Makes the specified tab active within the tab control on the client side.
    ///</summary>
    ///<param name = "tab" type = "ASPxClientTab">
    ///An ASPxClientTab object specifying the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.GetActiveTabIndex = function() {
    ///<summary>
    ///Returns the index of the active tab within the tab control.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer that represents the active tab's index.
    ///</returns>
};
ASPxClientTabControl.prototype.SetActiveTabIndex = function(index) {
    ///<summary>
    ///Makes a tab active within the tab control, specifying the tab's index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the index of the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.GetTabCount = function() {
    ///<summary>
    ///Returns the number of tabs in the ASPxTabControl.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of tabs in the control.
    ///</returns>
};
ASPxClientTabControl.prototype.GetTab = function(index) {
    ///<summary>
    ///Returns a tab specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the tab object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An Tabs collection.
    ///</returns>
};
ASPxClientTabControl.prototype.GetTabByName = function(name) {
    ///<summary>
    ///Returns a tab specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the tab.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the tab with the specified name.
    ///</returns>
};
ASPxClientTabControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTabControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTabControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTabControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientTabControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTabControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTabControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientPageControl.prototype.GetTabContentHTML = function(tab) {
    ///<summary>
    ///Returns the HTML code that represents the contents of the specified page within the page control.
    ///</summary>
    ///<param name = "tab" type = "ASPxClientTab">
    ///An ASPxClientTab object that specifies the required page.
    ///</param>
    ///<returns type = "String">
    ///A string that represents the specified page's HTML content.
    ///</returns>
};
ASPxClientPageControl.prototype.SetTabContentHTML = function(tab, html) {
    ///<summary>
    ///Defines the HTML content for a specific tab page within the page control.
    ///</summary>
    ///<param name = "tab" type = "ASPxClientTab">
    ///An ASPxClientTab object that specifies the required tab page.
    ///</param>
    ///<param name = "html" type = "String">
    ///A string value that represents the HTML code defining the content of the specified page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.PerformCallback = function(parameter) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side Callback event, passing it the specified argument.
    ///</summary>
    ///<param name = "parameter" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side Callback event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientPageControl.prototype.AdjustSize = function() {
    ///<summary>
    ///Modifies a tab page's size in accordance with the content.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.GetActiveTab = function() {
    ///<summary>
    ///Returns the active tab within the tab control.
    ///</summary>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the active tab.
    ///</returns>
};
ASPxClientPageControl.prototype.SetActiveTab = function(tab) {
    ///<summary>
    ///Makes the specified tab active within the tab control on the client side.
    ///</summary>
    ///<param name = "tab" type = "ASPxClientTab">
    ///An ASPxClientTab object specifying the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.GetActiveTabIndex = function() {
    ///<summary>
    ///Returns the index of the active tab within the tab control.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer that represents the active tab's index.
    ///</returns>
};
ASPxClientPageControl.prototype.SetActiveTabIndex = function(index) {
    ///<summary>
    ///Makes a tab active within the tab control, specifying the tab's index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the index of the tab to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.GetTabCount = function() {
    ///<summary>
    ///Returns the number of tabs in the ASPxTabControl.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of tabs in the control.
    ///</returns>
};
ASPxClientPageControl.prototype.GetTab = function(index) {
    ///<summary>
    ///Returns a tab specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the tab object to retrieve.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An Tabs collection.
    ///</returns>
};
ASPxClientPageControl.prototype.GetTabByName = function(name) {
    ///<summary>
    ///Returns a tab specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the tab.
    ///</param>
    ///<returns type = "ASPxClientTab">
    ///An ASPxClientTab object that represents the tab with the specified name.
    ///</returns>
};
ASPxClientPageControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientPageControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientPageControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientPageControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientPageControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientPageControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPageControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTab.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether a tab is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the tab is enabled; otherwise, false.
    ///</returns>
};
ASPxClientTab.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Specifies whether the tab is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to enable the tab; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTab.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the tab.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the tab.
    ///</returns>
};
ASPxClientTab.prototype.SetImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the tab.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL to the image displayed within the tab.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTab.prototype.GetActiveImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the active tab.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the active tab.
    ///</returns>
};
ASPxClientTab.prototype.SetActiveImageUrl = function(value) {
    ///<summary>
    ///Specifies the URL which points to the image displayed within the active tab.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the URL to the image displayed within the active tab.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTab.prototype.GetNavigateUrl = function() {
    ///<summary>
    ///Gets an URL which defines the navigation location for the tab.
    ///</summary>
    ///<returns type = "String">
    ///A string value which represents an URL to where the client web browser will navigate when the tab is clicked.
    ///</returns>
};
ASPxClientTab.prototype.SetNavigateUrl = function(value) {
    ///<summary>
    ///Specifies a URL which defines the navigation location for the tab.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which is a URL to where the client web browser will navigate when the tab is clicked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTab.prototype.GetText = function() {
    ///<summary>
    ///Returns text displayed within the tab.
    ///</summary>
    ///<returns type = "String">
    ///A string value that represents the text displayed within the tab.
    ///</returns>
};
ASPxClientTab.prototype.SetText = function(value) {
    ///<summary>
    ///Specifies the text displayed within the tab.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that is the text displayed within the tab.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTab.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a tab is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true is the tab is visible; otherwise, false.
    ///</returns>
};
ASPxClientTab.prototype.SetVisible = function(value) {
    ///<summary>
    ///Specifies whether the tab is visible.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true is the tab is visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether the timer is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the timer is enabled; false if it is disabled.
    ///</returns>
};
ASPxClientTimer.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Enables the timer.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true to turn the timer on; false, to turn the timer off.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.GetInterval = function() {
    ///<summary>
    ///Gets the time before the Tick event.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that specifies the number of milliseconds before the Tick event is raised relative to the last occurrence of the Tick event.
    ///</returns>
};
ASPxClientTimer.prototype.SetInterval = function(interval) {
    ///<summary>
    ///Specifies the time before the Tick event.
    ///</summary>
    ///<param name = "interval" type = "Int32">
    ///An integer value that specifies the number of milliseconds before the Tick event is raised relative to the last occurrence of the Tick event. The value cannot be less than one.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTimer.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTimer.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTimer.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientTimer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTimer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTimer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTitleIndex.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTitleIndex.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTitleIndex.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndex.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndex.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndex.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTitleIndex.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndex.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientTitleIndex.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndex.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTitleIndex.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTitleIndex.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTreeView.prototype.GetNode = function(index) {
    ///<summary>
    ///Returns a node specified by its index within the ASPxTreeView's node collection.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the node to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object, representing the node located at the specified index within the ASPxTreeView's node collection.
    ///</returns>
};
ASPxClientTreeView.prototype.GetNodeByName = function(name) {
    ///<summary>
    ///Returns a node specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the node with the specified name.
    ///</returns>
};
ASPxClientTreeView.prototype.GetNodeByText = function(text) {
    ///<summary>
    ///Returns a node specified by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text content of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the node with the specified node's text content.
    ///</returns>
};
ASPxClientTreeView.prototype.GetNodeCount = function() {
    ///<summary>
    ///Returns the number of nodes at the ASPxTreeView's zero level.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of the root node child nodes.
    ///</returns>
};
ASPxClientTreeView.prototype.GetSelectedNode = function() {
    ///<summary>
    ///Returns the selected node within the ASPxTreeView control on the client side.
    ///</summary>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the selected node.
    ///</returns>
};
ASPxClientTreeView.prototype.SetSelectedNode = function(node) {
    ///<summary>
    ///Selects the specified node within the ASPxTreeView control on the client side.
    ///</summary>
    ///<param name = "node" type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object specifying the node to select.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.GetRootNode = function() {
    ///<summary>
    ///Gets the root node of the ASPxTreeView object.
    ///</summary>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object representing a root node.
    ///</returns>
};
ASPxClientTreeView.prototype.CollapseAll = function() {
    ///<summary>
    ///Collapses all nodes in the ASPxTreeView on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.ExpandAll = function() {
    ///<summary>
    ///Expands all nodes in the ASPxTreeView on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientTreeView.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientTreeView.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientTreeView.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientTreeView.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientTreeView.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeView.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetNodeCount = function() {
    ///<summary>
    ///Returns the number of the current node's immediate child nodes.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value specifying the number of the immediate child nodes of the current node.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetNode = function(index) {
    ///<summary>
    ///Returns the current node's immediate child node specified by its index.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the node to be retrieved.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object representing the node located at the specified index within the current node collection.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetNodeByName = function(name) {
    ///<summary>
    ///Returns the current node's child node specified by its name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value specifying the name of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the current node's child with the specified name.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetNodeByText = function(text) {
    ///<summary>
    ///Returns the current node's child node specified by its text.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text content of the node.
    ///</param>
    ///<returns type = "ASPxClientTreeViewNode">
    ///An ASPxClientTreeViewNode object that represents the current node's child with the specified node's text content.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetExpanded = function() {
    ///<summary>
    ///Returns a value indicating whether the node is expanded.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the node is expanded; otherwise, false.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetExpanded = function(value) {
    ///<summary>
    ///Sets a value which specifies the node's expansion state.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true if the node is expanded; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetChecked = function() {
    ///<summary>
    ///Returns a value indicating whether the node is checked.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the node is checked; otherwise, false.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetChecked = function(value) {
    ///<summary>
    ///Sets a value indicating whether the node is checked.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true if the node is checked; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetCheckState = function() {
    ///<summary>
    ///Returns a value which specifies the node's check state.
    ///</summary>
    ///<returns type = "String">
    ///A string value matches one of the CheckState enumeration values.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value specifying whether the node is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the node is enabled; otherwise, false.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetEnabled = function(value) {
    ///<summary>
    ///Sets a value specifying whether the node is enabled.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true to make the node enabled; false to disable it.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetImageUrl = function() {
    ///<summary>
    ///Returns the URL pointing to the image displayed within the node.
    ///</summary>
    ///<returns type = "String">
    ///A string value that is the URL to the image displayed within the node.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetImageUrl = function(value) {
    ///<summary>
    ///Sets the URL which points to the image displayed within the node.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value specifying the URL to the image displayed within the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetNavigateUrl = function() {
    ///<summary>
    ///Gets an URL which defines the navigation location for the node's hyperlink.
    ///</summary>
    ///<returns type = "String">
    ///A string value which represents an URL to where the client web browser will navigate when the node is clicked.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetNavigateUrl = function(value) {
    ///<summary>
    ///Specifies a URL which defines the node's navigate URL.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value which specifies a URL to where the client web browser will navigate when the node is clicked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetText = function() {
    ///<summary>
    ///Gets the text, displayed within the node.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the node.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetText = function(value) {
    ///<summary>
    ///Specifies the text, displayed within the node.
    ///</summary>
    ///<param name = "value" type = "String">
    ///A string value that represents the text displayed within the node.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a node is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true is the node is visible; otherwise, false.
    ///</returns>
};
ASPxClientTreeViewNode.prototype.SetVisible = function(value) {
    ///<summary>
    ///Specifies whether the node is visible.
    ///</summary>
    ///<param name = "value" type = "Boolean">
    ///true if the node is visible; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientTreeViewNode.prototype.GetHtmlElement = function() {
    ///<summary>
    ///Gets the HTML object that contains the current node.
    ///</summary>
    ///<returns type = "Object">
    ///An object representing a container for the current node.
    ///</returns>
};
ASPxClientUploadControl.prototype.IsAdvancedModeEnabled = function() {
    ///<summary>
    ///Specifies whether the upload control's Advanced mode is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the Advanced mode is enbaled; otherwise, false.
    ///</returns>
};
ASPxClientUploadControl.prototype.UploadFile = function() {
    ///<summary>
    ///Initiates uploading of the specified file to the web server's memory.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.AddFileInput = function() {
    ///<summary>
    ///Adds a new file input element to the ASPxUploadControl.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.RemoveFileInput = function(index) {
    ///<summary>
    ///Removes a file input element from the ASPxUploadControl.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that represents a file input element's index.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.RemoveFileFromSelection = function(fileIndex) {
    ///<signature>
    ///<summary>
    ///Removes a file with the specified index from the selected file list.
    ///</summary>
    ///<param name = "fileIndex" type = "Int32">
    ///An integer value that is the zero-based index of an item in the file list.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Removes the specified file from the list of files selected for uploading in the upload control.
    ///</summary>
    ///<param name = "file" type = "ASPxClientUploadControlFile">
    ///An ASPxClientUploadControl object that is the file to be removed from the list of files.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientUploadControl.prototype.GetSelectedFiles = function(inputIndex) {
    ///<summary>
    ///Returns files selected for uploading within the specified file input.
    ///</summary>
    ///<param name = "inputIndex" type = "Int32">
    ///An integer value that specifies the index of a file input. Default value is "0".
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientUploadControlFile">
    ///An array of ASPxClientUploadControlFile objects that are files selected for uploading.
    ///</returns>
};
ASPxClientUploadControl.prototype.GetText = function(index) {
    ///<summary>
    ///Gets the text displayed within the edit box of the specified file input element.
    ///</summary>
    ///<param name = "index" type = "Int32">
    ///An integer value that specifies the required file input element's index.
    ///</param>
    ///<returns type = "String">
    ///A string value representing the displayed text.
    ///</returns>
};
ASPxClientUploadControl.prototype.GetFileInputCount = function() {
    ///<summary>
    ///Gets the number of file input elements contained within the ASPxUploadControl.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the total number of file input elements.
    ///</returns>
};
ASPxClientUploadControl.prototype.SetFileInputCount = function(count) {
    ///<summary>
    ///Specifies the count of the file input elements within the upload control.
    ///</summary>
    ///<param name = "count" type = "Int32">
    ///An integer value that specifies the file input elements count.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.SetEnabled = function(enabled) {
    ///<summary>
    ///Specifies whether the upload control is enabled.
    ///</summary>
    ///<param name = "enabled" type = "Boolean">
    ///true, to enable the upload control; otherwise, false.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.GetEnabled = function() {
    ///<summary>
    ///Returns a value indicating whether the upload control is enabled.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the control is enabled; otherwise false.
    ///</returns>
};
ASPxClientUploadControl.prototype.Upload = function() {
    ///<summary>
    ///Initiates uploading of the specified file(s) to the web server's memory.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.Cancel = function() {
    ///<summary>
    ///Cancels the initiated file uploading process.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.ClearText = function() {
    ///<summary>
    ///Clears the file selection in the upload control.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.SetAddButtonText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the add button.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.SetUploadButtonText = function(text) {
    ///<summary>
    ///Sets the text to be displayed within the upload button.
    ///</summary>
    ///<param name = "text" type = "String">
    ///A string value specifying the text to be displayed within the button.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.GetAddButtonText = function() {
    ///<summary>
    ///Returns the text displayed within the add button.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the button.
    ///</returns>
};
ASPxClientUploadControl.prototype.GetUploadButtonText = function() {
    ///<summary>
    ///Returns the text displayed within the upload button.
    ///</summary>
    ///<returns type = "String">
    ///A string value representing the text displayed within the button.
    ///</returns>
};
ASPxClientUploadControl.prototype.SetDialogTriggerID = function(ids) {
    ///<summary>
    ///Sets the ID of a web control or HTML element (or a list of IDs), a click on which invokes file upload dialog.
    ///</summary>
    ///<param name = "ids" type = "String">
    ///A string value specifying the ID or a list of IDs separated by the semicolon (;).
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientUploadControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientUploadControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientUploadControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientUploadControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientUploadControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUploadControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientChartDesigner.prototype.PerformCallback = function(arg) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing it the specified argument.
    ///</summary>
    ///<param name = "arg" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing it the specified argument.
    ///</summary>
    ///<param name = "arg" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientChartDesigner.prototype.UpdateLocalization = function(localization) {
    ///<summary>
    ///Updates the localization settings of the ASPxClientChartDesigner properties.
    ///</summary>
    ///<param name = "localization" type = "Dictionary">
    ///A dictionary containing the property names, along with their localized equivalents.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartDesigner.prototype.GetDesignerModel = function() {
    ///<summary>
    ///Returns the model of the Client Chart Designer.
    ///</summary>
    ///<returns type = "Object">
    ///An Object
    ///</returns>
};
ASPxClientChartDesigner.prototype.GetJsonChartModel = function() {
    ///<summary>
    ///For internal use.
    ///</summary>
    ///<returns type = "String">
    ///
    ///</returns>
};
ASPxClientChartDesigner.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientChartDesigner.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientChartDesigner.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartDesigner.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartDesigner.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartDesigner.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientChartDesigner.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartDesigner.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientChartDesigner.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartDesigner.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientChartDesigner.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartDesigner.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetChart = function() {
    ///<summary>
    ///Returns an ASPxClientWebChart object, which contains information about the hierarchy of a chart control, and provides access to the main properties of chart elements  on the client side.
    ///</summary>
    ///<returns type = "ASPxClientWebChart">
    ///An ASPxClientWebChart object containing information about a chart on the client side.
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetPrintOptions = function() {
    ///<summary>
    ///Returns the printing options of the chart control.
    ///</summary>
    ///<returns type = "ASPxClientChartPrintOptions">
    ///A ASPxClientChartPrintOptions object containing printing options.
    ///</returns>
};
ASPxClientWebChartControl.prototype.SetCursor = function(cursor) {
    ///<summary>
    ///Changes the mouse pointer, which is shown when the mouse is over the chart control, to the pointer with the specified name.
    ///</summary>
    ///<param name = "cursor" type = "String">
    ///A string value representing the name of the desired cursor.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.HitTest = function(x, y) {
    ///<summary>
    ///Returns the specific chart element which is located under the test point.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer value that specifies the x coordinate of the test point.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer value that specifies the y coordinate of the test point.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxClientHitObject">
    ///An array collection of ASPxClientHitObject objects, that represent the chart elements located under the test point.
    ///</returns>
};
ASPxClientWebChartControl.prototype.PerformCallback = function(args) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing it the specified argument.
    ///</summary>
    ///<param name = "args" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientWebChartControl.prototype.Print = function() {
    ///<summary>
    ///Prints the current chart on the client side.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.LoadFromObjectModel = function(serializedChartObjectModel) {
    ///<summary>
    ///Loads a chart which should be customized from its object model.
    ///</summary>
    ///<param name = "serializedChartObjectModel" type = "String">
    ///A String object representing the chart model.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.SaveToDisk = function(format) {
    ///<signature>
    ///<summary>
    ///Exports a chart to the file of the specified format, and saves it to the disk.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string value specifying the format, to which a chart should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports a chart to a file in the specified format, and saves it to disk, using the specified file name.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string value specifying the format, to which a chart should be exported.
    ///</param>
    ///<param name = "filename" type = "String">
    ///A string value specifying the file name, to which a chart should be exported. If this parameter is missing or set to an empty string, then the created file will be named using the client-side name of a chart.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientWebChartControl.prototype.SaveToWindow = function(format) {
    ///<summary>
    ///Exports a report to the file of the specified format, and shows it in a new Web Browser window.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string  value specifying a format in which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetMainDOMElement = function() {
    ///<summary>
    ///Gets the main DOM (Document Object Model) element on a Web Page representing this ASPxClientWebChartControl object.
    ///</summary>
    ///<returns type = "Object">
    ///An object which represents the main DOM element.
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientWebChartControl.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientWebChartControl.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientWebChartControl.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientWebChartControl.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebChartControl.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientDiagramCoordinates.prototype.IsEmpty = function() {
    ///<summary>
    ///Checks whether the current object represents a point outside the diagram area.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the diagram coordinates correspond to a point outside the diagram area; otherwise, false.
    ///</returns>
};
ASPxClientDiagramCoordinates.prototype.GetAxisValue = function(axis) {
    ///<summary>
    ///Gets the value of the client-side axis instance.
    ///</summary>
    ///<param name = "axis" type = "ASPxClientAxisBase">
    ///An ASPxClientAxisBase class descendant, representing the axis that contains the requested value.
    ///</param>
    ///<returns type = "ASPxClientAxisValue">
    ///An ASPxClientAxisValue object that contains the information about the axis scale type and value.
    ///</returns>
};
ASPxClientXYDiagram2D.prototype.PointToDiagram = function(x, y) {
    ///<summary>
    ///Converts the display coordinates into a diagram coordinates object.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<returns type = "ASPxClientDiagramCoordinates">
    ///An ASPxClientDiagramCoordinates object, containing information about the point's argument and value, their scale types, associated axes and pane.
    ///</returns>
};
ASPxClientXYDiagram2D.prototype.DiagramToPoint = function(argument, value, axisX, axisY, pane) {
    ///<summary>
    ///Converts the diagram coordinates of a point into screen coordinates.
    ///</summary>
    ///<param name = "argument" type = "Object">
    ///An object, representing the point's argument.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object, representing the point's value.
    ///</param>
    ///<param name = "axisX" type = "ASPxClientAxis2D">
    ///An ASPxClientAxis2D descendant, representing the X-axis.
    ///</param>
    ///<param name = "axisY" type = "ASPxClientAxis2D">
    ///An ASPxClientAxis2D descendant, representing the Y-axis.
    ///</param>
    ///<param name = "pane" type = "ASPxClientXYDiagramPane">
    ///An ASPxClientXYDiagramPane object, representing the pane.
    ///</param>
    ///<returns type = "ASPxClientControlCoordinates">
    ///An ASPxClientControlCoordinates object, containing information about the point's X and Y coordinates, its visibility state, and the associated pane.
    ///</returns>
};
ASPxClientXYDiagram2D.prototype.ShowCrosshair = function(screenX, screenY) {
    ///<summary>
    ///Shows the Crosshair Cursor at the point with the specified coordinates.
    ///</summary>
    ///<param name = "screenX" type = "Int32">
    ///The horizontal coordinate that is related to the top-left angle of the chart.
    ///</param>
    ///<param name = "screenY" type = "Int32">
    ///The vertical coordinate that is related to the top-left angle of the chart.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientXYDiagram.prototype.PointToDiagram = function(x, y) {
    ///<summary>
    ///Converts the display coordinates into a diagram coordinates object.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<returns type = "ASPxClientDiagramCoordinates">
    ///An ASPxClientDiagramCoordinates object, containing information about the point's argument and value, their scale types, associated axes and pane.
    ///</returns>
};
ASPxClientXYDiagram.prototype.DiagramToPoint = function(argument, value, axisX, axisY, pane) {
    ///<summary>
    ///Converts the diagram coordinates of a point into screen coordinates.
    ///</summary>
    ///<param name = "argument" type = "Object">
    ///An object, representing the point's argument.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object, representing the point's value.
    ///</param>
    ///<param name = "axisX" type = "ASPxClientAxis2D">
    ///An ASPxClientAxis2D descendant, representing the X-axis.
    ///</param>
    ///<param name = "axisY" type = "ASPxClientAxis2D">
    ///An ASPxClientAxis2D descendant, representing the Y-axis.
    ///</param>
    ///<param name = "pane" type = "ASPxClientXYDiagramPane">
    ///An ASPxClientXYDiagramPane object, representing the pane.
    ///</param>
    ///<returns type = "ASPxClientControlCoordinates">
    ///An ASPxClientControlCoordinates object, containing information about the point's X and Y coordinates, its visibility state, and the associated pane.
    ///</returns>
};
ASPxClientXYDiagram.prototype.ShowCrosshair = function(screenX, screenY) {
    ///<summary>
    ///Shows the Crosshair Cursor at the point with the specified coordinates.
    ///</summary>
    ///<param name = "screenX" type = "Int32">
    ///The horizontal coordinate that is related to the top-left angle of the chart.
    ///</param>
    ///<param name = "screenY" type = "Int32">
    ///The vertical coordinate that is related to the top-left angle of the chart.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientSwiftPlotDiagram.prototype.PointToDiagram = function(x, y) {
    ///<summary>
    ///Converts the display coordinates into a diagram coordinates object.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<returns type = "ASPxClientDiagramCoordinates">
    ///An ASPxClientDiagramCoordinates object, containing information about the point's argument and value, their scale types, associated axes and pane.
    ///</returns>
};
ASPxClientSwiftPlotDiagram.prototype.DiagramToPoint = function(argument, value, axisX, axisY, pane) {
    ///<summary>
    ///Converts the diagram coordinates of a point into screen coordinates.
    ///</summary>
    ///<param name = "argument" type = "Object">
    ///An object, representing the point's argument.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object, representing the point's value.
    ///</param>
    ///<param name = "axisX" type = "ASPxClientAxis2D">
    ///An ASPxClientAxis2D descendant, representing the X-axis.
    ///</param>
    ///<param name = "axisY" type = "ASPxClientAxis2D">
    ///An ASPxClientAxis2D descendant, representing the Y-axis.
    ///</param>
    ///<param name = "pane" type = "ASPxClientXYDiagramPane">
    ///An ASPxClientXYDiagramPane object, representing the pane.
    ///</param>
    ///<returns type = "ASPxClientControlCoordinates">
    ///An ASPxClientControlCoordinates object, containing information about the point's X and Y coordinates, its visibility state, and the associated pane.
    ///</returns>
};
ASPxClientSwiftPlotDiagram.prototype.ShowCrosshair = function(screenX, screenY) {
    ///<summary>
    ///Shows the Crosshair Cursor at the point with the specified coordinates.
    ///</summary>
    ///<param name = "screenX" type = "Int32">
    ///The horizontal coordinate that is related to the top-left angle of the chart.
    ///</param>
    ///<param name = "screenY" type = "Int32">
    ///The vertical coordinate that is related to the top-left angle of the chart.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientRadarDiagram.prototype.PointToDiagram = function(x, y) {
    ///<summary>
    ///Converts the display coordinates into a diagram coordinates object.
    ///</summary>
    ///<param name = "x" type = "Int32">
    ///An integer value, representing the X-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer value, representing the Y-coordinate of a point (measured in pixels relative to the top left corner of a chart).
    ///</param>
    ///<returns type = "ASPxClientDiagramCoordinates">
    ///An ASPxClientDiagramCoordinates object, containing information about the point's argument and value, their scale types, associated axes and pane.
    ///</returns>
};
ASPxClientRadarDiagram.prototype.DiagramToPoint = function(argument, value) {
    ///<summary>
    ///Converts the diagram coordinates of a point into screen coordinates.
    ///</summary>
    ///<param name = "argument" type = "Object">
    ///An object, representing the point's argument.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object, representing the point's value.
    ///</param>
    ///<returns type = "ASPxClientControlCoordinates">
    ///An ASPxClientControlCoordinates object, containing information about the point's X and Y coordinates, its visibility state, and the associated pane.
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.GetSizeMode = function() {
    ///<summary>
    ///Gets the size mode used to print a chart.
    ///</summary>
    ///<returns type = "String">
    ///A System.String object, specifying the name of the size mode.
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.SetSizeMode = function(sizeMode) {
    ///<summary>
    ///Sets the size mode used to print a chart.
    ///</summary>
    ///<param name = "sizeMode" type = "String">
    ///A System.String object, specifying the name of the size mode.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.GetLandscape = function() {
    ///<summary>
    ///Gets a value indicating that the landscape orientation will be used to print a chart.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the landscape orientation will be used to print a chart, false if the portrait orientation will be used to print a chart.
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.SetLandscape = function(landscape) {
    ///<summary>
    ///Sets a value indicating that the landscape orientation will be used to print a chart.
    ///</summary>
    ///<param name = "landscape" type = "Boolean">
    ///A Boolean value, specifying that the landscape orientation will be used to print a chart.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.GetMarginLeft = function() {
    ///<summary>
    ///Gets the left margin which will be used to print a chart.
    ///</summary>
    ///<returns type = "Int32">
    ///A System.Int32 value, specifying the margin in hundredths of an inch.
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.SetMarginLeft = function(marginLeft) {
    ///<summary>
    ///Sets the left margin which will be used to print a chart.
    ///</summary>
    ///<param name = "marginLeft" type = "Int32">
    ///A System.Int32 value, specifying the margin in hundredths of an inch.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.GetMarginTop = function() {
    ///<summary>
    ///Gets the top margin which will be used to print a chart.
    ///</summary>
    ///<returns type = "Int32">
    ///A System.Int32 value, specifying the margin in hundredths of an inch.
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.SetMarginTop = function(marginTop) {
    ///<summary>
    ///Sets the top margin which will be used to print a chart.
    ///</summary>
    ///<param name = "marginTop" type = "Int32">
    ///A System.Int32 value, specifying the margin in hundredths of an inch.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.GetMarginRight = function() {
    ///<summary>
    ///Gets the right margin which will be used to print a chart.
    ///</summary>
    ///<returns type = "Int32">
    ///A System.Int32 value, specifying the margin in hundredths of an inch.
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.SetMarginRight = function(marginRight) {
    ///<summary>
    ///Sets the right margin which will be used to print a chart.
    ///</summary>
    ///<param name = "marginRight" type = "Int32">
    ///A System.Int32 value, specifying the margin in hundredths of an inch.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.GetMarginBottom = function() {
    ///<summary>
    ///Gets the bottom margin which will be used to print a chart.
    ///</summary>
    ///<returns type = "Int32">
    ///A System.Int32 value, specifying the margin in hundredths of an inch.
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.SetMarginBottom = function(marginBottom) {
    ///<summary>
    ///Sets the bottom margin which will be used to print a chart.
    ///</summary>
    ///<param name = "marginBottom" type = "Int32">
    ///A System.Int32 value, specifying the margin in hundredths of an inch.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.GetPaperKind = function() {
    ///<summary>
    ///Gets the predefined size ratio of the paper which will be used to print a chart.
    ///</summary>
    ///<returns type = "String">
    ///A System.String object, specifying the name of the size ratio.
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.SetPaperKind = function(paperKind) {
    ///<summary>
    ///Sets the predefined size ratio of the paper which will be used to print a chart.
    ///</summary>
    ///<param name = "paperKind" type = "String">
    ///A System.String object, specifying the name of a size ratio.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.GetCustomPaperWidth = function() {
    ///<summary>
    ///Gets the custom paper width which will be used to print a chart.
    ///</summary>
    ///<returns type = "Int32">
    ///A System.Int32 value, specifying the width in hundredths of an inch.
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.SetCustomPaperWidth = function(customPaperWidth) {
    ///<summary>
    ///Sets the custom paper width which will be used to print a chart.
    ///</summary>
    ///<param name = "customPaperWidth" type = "Int32">
    ///A System.Int32 object, specifying the width in hundredths of an inch.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.GetCustomPaperHeight = function() {
    ///<summary>
    ///Gets the custom paper height which will be used to print a chart.
    ///</summary>
    ///<returns type = "Int32">
    ///A System.Int32 value, specifying the height in hundredths of an inch.
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.SetCustomPaperHeight = function(customPaperHeight) {
    ///<summary>
    ///Sets the custom paper height which will be used to print a chart.
    ///</summary>
    ///<param name = "customPaperHeight" type = "Int32">
    ///A System.Int32 object, specifying the height in hundredths of an inch.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.GetCustomPaperName = function() {
    ///<summary>
    ///Gets the name of the custom paper width-height ratio used to print the chart.
    ///</summary>
    ///<returns type = "String">
    ///A System.String object, specifying the name of the custom paper width-height ratio.
    ///</returns>
};
ASPxClientChartPrintOptions.prototype.SetCustomPaperName = function(customPaperName) {
    ///<summary>
    ///Sets the name of the custom paper width-height ratio used to print a chart.
    ///</summary>
    ///<param name = "customPaperName" type = "String">
    ///A String object, specifying the name of the custom paper width-height ratio.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDocumentViewer.prototype.GetSplitter = function() {
    ///<summary>
    ///Provides access to the Splitter of the ASPxClientDocumentViewer.
    ///</summary>
    ///<returns type = "ASPxClientSplitter">
    ///An ASPxClientSplitter object.
    ///</returns>
};
ASPxClientDocumentViewer.prototype.GetViewer = function() {
    ///<summary>
    ///Provides access to the ASPxClientDocumentViewer's preview that exposes methods to print and export the document.
    ///</summary>
    ///<returns type = "ASPxClientReportViewer">
    ///An ASPxClientReportViewer object.
    ///</returns>
};
ASPxClientDocumentViewer.prototype.GetToolbar = function() {
    ///<summary>
    ///Provides access to the Document Viewer toolbar on the client.
    ///</summary>
    ///<returns type = "ASPxClientReportToolbar">
    ///An ASPxClientReportToolbar object.
    ///</returns>
};
ASPxClientDocumentViewer.prototype.GetRibbonToolbar = function() {
    ///<summary>
    ///Provides access to the Ribbon of the ASPxClientDocumentViewer.
    ///</summary>
    ///<returns type = "ASPxClientRibbon">
    ///An ASPxClientRibbon object.
    ///</returns>
};
ASPxClientDocumentViewer.prototype.GetParametersPanel = function() {
    ///<summary>
    ///Provides access to the parameters panel of the ASPxClientDocumentViewer.
    ///</summary>
    ///<returns type = "ASPxClientReportParametersPanel">
    ///An ASPxClientReportParametersPanel object.
    ///</returns>
};
ASPxClientDocumentViewer.prototype.GetDocumentMap = function() {
    ///<summary>
    ///Provides access to the document of the ASPxClientDocumentViewer.
    ///</summary>
    ///<returns type = "ASPxClientReportDocumentMap">
    ///An ASPxClientReportDocumentMap object.
    ///</returns>
};
ASPxClientDocumentViewer.prototype.GotoBookmark = function(pageIndex, bookmarkPath) {
    ///<summary>
    ///Sets focus on the report control specified by its bookmark.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value, specifying the page index.
    ///</param>
    ///<param name = "bookmarkPath" type = "String">
    ///A String value, specifying the path to the bookmark.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDocumentViewer.prototype.Refresh = function() {
    ///<summary>
    ///Initiates a round trip to the server so that the current page will be reloaded.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDocumentViewer.prototype.Print = function() {
    ///<signature>
    ///<summary>
    ///Prints the current document.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Prints the document's page with the specified page index.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///A Int32 representing the index of the page to be printed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientDocumentViewer.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Displays the specified report page.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value, identifying the report page.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDocumentViewer.prototype.Search = function() {
    ///<summary>
    ///Invokes the Search dialog, which allows end-users to search for specific text in a report.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDocumentViewer.prototype.IsSearchAllowed = function() {
    ///<summary>
    ///Gets a value indicating whether or not searching text across a report is permitted in the web browser.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if searching text in the report is allowed; otherwise, false.
    ///</returns>
};
ASPxClientDocumentViewer.prototype.SaveToWindow = function(format) {
    ///<summary>
    ///Exports a report to a file of the specified format, and shows it in a new Web Browser window.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string specifying the format to which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDocumentViewer.prototype.SaveToDisk = function(format) {
    ///<summary>
    ///Exports a report to a file of the specified format, and saves it to the disk.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string specifying the format to which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDocumentViewer.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientDocumentViewer.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientDocumentViewer.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDocumentViewer.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDocumentViewer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDocumentViewer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientDocumentViewer.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDocumentViewer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientDocumentViewer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDocumentViewer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientDocumentViewer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientDocumentViewer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientQueryBuilder.prototype.PerformCallback = function(arg) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server with the specified argument.
    ///</summary>
    ///<param name = "arg" type = "String">
    ///A String value, specifying the callback argument.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing it the specified argument.
    ///</summary>
    ///<param name = "arg" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientQueryBuilder.prototype.UpdateLocalization = function(localization) {
    ///<summary>
    ///Updates the localization settings of the ASPxClientQueryBuilder properties.
    ///</summary>
    ///<param name = "localization" type = "Dictionary">
    ///A dictionary containing the property names, along with their localized equivalents.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientQueryBuilder.prototype.GetDesignerModel = function() {
    ///<summary>
    ///Returns the object model of a Query Builder.
    ///</summary>
    ///<returns type = "Object">
    ///A Object value.
    ///</returns>
};
ASPxClientQueryBuilder.prototype.GetJsonQueryModel = function() {
    ///<summary>
    ///Gets a client-side model of the currently opened query serialized to Json.
    ///</summary>
    ///<returns type = "String">
    ///A string containing a query model.
    ///</returns>
};
ASPxClientQueryBuilder.prototype.Save = function() {
    ///<summary>
    ///Saves the current query.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientQueryBuilder.prototype.ShowPreview = function() {
    ///<summary>
    ///Invokes a Data Preview for the current query.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientQueryBuilder.prototype.IsQueryValid = function() {
    ///<summary>
    ///Specifies whether or not the current query is a valid SQL string.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the query is valid; otherwise false.
    ///</returns>
};
ASPxClientQueryBuilder.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientQueryBuilder.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientQueryBuilder.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientQueryBuilder.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientQueryBuilder.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientQueryBuilder.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientQueryBuilder.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientQueryBuilder.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientQueryBuilder.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientQueryBuilder.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientQueryBuilder.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientQueryBuilder.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientReportDesigner.prototype.PerformCallback = function(arg) {
    ///<signature>
    ///<summary>
    ///Sends a callback to the server with the specified argument.
    ///</summary>
    ///<param name = "arg" type = "String">
    ///A String value, specifying the callback argument.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Sends a callback to the server and generates the server-side event, passing it the specified argument.
    ///</summary>
    ///<param name = "arg" type = "String">
    ///A string value that represents any information that needs to be sent to the server-side event.
    ///</param>
    ///<param name = "onSuccess" type = "Action">
    ///A client action to perform if the server round-trip completed successfully.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientReportDesigner.prototype.UpdateLocalization = function(localization) {
    ///<summary>
    ///Updates the localization settings of the ASPxClientReportDesigner properties.
    ///</summary>
    ///<param name = "localization" type = "Dictionary">
    ///A dictionary containing the property names, along with their localized equivalents.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.GetDesignerModel = function() {
    ///<summary>
    ///Returns the object model of a Web Report Designer.
    ///</summary>
    ///<returns type = "Object">
    ///A Object value.
    ///</returns>
};
ASPxClientReportDesigner.prototype.GetPreviewModel = function() {
    ///<summary>
    ///Provides access to the preview model of the ASPxClientReportDesigner.
    ///</summary>
    ///<returns type = "Object">
    ///An object that specifies the preview model.
    ///</returns>
};
ASPxClientReportDesigner.prototype.GetPropertyInfo = function(controlType, path) {
    ///<signature>
    ///<summary>
    ///Returns information about the specified property of the specified control.
    ///</summary>
    ///<param name = "controlType" type = "String">
    ///A string that specifies the control type.
    ///</param>
    ///<param name = "path" type = "String">
    ///A string that specifies the path to the property.
    ///</param>
    ///<returns type = "ASPxDesignerElementSerializationInfo">
    ///An object that provides property information.
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Returns information about the specified properties of the specified control.
    ///</summary>
    ///<param name = "controlType" type = "String">
    ///A string that specifies the control type.
    ///</param>
    ///<param name = "path" elementType = "String" type = "Array">
    ///An array of strings that specify paths to properties.
    ///</param>
    ///<returns type = "ASPxDesignerElementSerializationInfo">
    ///An object that provides property information.
    ///</returns>
    ///</signature>
};
ASPxClientReportDesigner.prototype.GetButtonStorage = function() {
    ///<summary>
    ///Returns actions performed by buttons available in the menu and toolbar of the Web Report Designer.
    ///</summary>
    ///<returns type = "Object">
    ///An object that specifies button actions.
    ///</returns>
};
ASPxClientReportDesigner.prototype.GetJsonReportModel = function() {
    ///<summary>
    ///Gets a client-side model of the currently opened report serialized to Json.
    ///</summary>
    ///<returns type = "String">
    ///A string containing a report model.
    ///</returns>
};
ASPxClientReportDesigner.prototype.IsModified = function() {
    ///<summary>
    ///Indicates whether or not the current ASPxClientReportDesigner instance has been modified.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the Web Report Designer has been modified; otherwise false.
    ///</returns>
};
ASPxClientReportDesigner.prototype.ResetIsModified = function() {
    ///<summary>
    ///Resets the value returned by the IsModified method.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.AddToPropertyGrid = function(groupName, property) {
    ///<summary>
    ///Adds a custom property to the Properties Panel.
    ///</summary>
    ///<param name = "groupName" type = "String">
    ///A string that specifies the name of group to which a property should be added.
    ///</param>
    ///<param name = "property" type = "ASPxDesignerElementSerializationInfo">
    ///An object that provides information required to serialize a property.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.AddParameterType = function(parameterInfo, editorOptions) {
    ///<summary>
    ///Adds a custom parameter type to the Web End-User Report Designer.
    ///</summary>
    ///<param name = "parameterInfo" type = "ASPxDesignerParameterType">
    ///An object that provides information about a parameter type to be added.
    ///</param>
    ///<param name = "editorOptions" type = "ASPxDesignerEditorOptions">
    ///An object that provides information about an editor used to specify parameter values in design mode.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.RemoveParameterType = function(parameterType) {
    ///<summary>
    ///Removes the specified parameter type from the Web End-User Report Designer.
    ///</summary>
    ///<param name = "parameterType" type = "String">
    ///A string that specifies a parameter type to be deleted.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.GetParameterInfo = function(parameterType) {
    ///<summary>
    ///Returns an object that contains information on the specified parameter type.
    ///</summary>
    ///<param name = "parameterType" type = "String">
    ///A string that specifies a parameter type.
    ///</param>
    ///<returns type = "ASPxDesignerParameterType">
    ///An object storing information on a parameter type.
    ///</returns>
};
ASPxClientReportDesigner.prototype.GetParameterEditor = function(parameterType) {
    ///<summary>
    ///Returns a value editor associated with the specified parameter type.
    ///</summary>
    ///<param name = "parameterType" type = "String">
    ///A string that specifies a parameter type.
    ///</param>
    ///<returns type = "ASPxDesignerEditorOptions">
    ///An object that stores settings of a parameter editor.
    ///</returns>
};
ASPxClientReportDesigner.prototype.ReportStorageGetData = function(url) {
    ///<summary>
    ///Returns the report layout stored in a report storage under the specified URL.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string that specifies the report URL.
    ///</param>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
ASPxClientReportDesigner.prototype.ReportStorageSetData = function(reportLayout, url) {
    ///<summary>
    ///Stores the specified report to a report storage using the specified URL.
    ///</summary>
    ///<param name = "reportLayout" type = "String">
    ///A string that specifies the report layout to be saved.
    ///</param>
    ///<param name = "url" type = "String">
    ///A string that specifies the URL used to save a report.
    ///</param>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
ASPxClientReportDesigner.prototype.ReportStorageSetNewData = function(reportLayout, url) {
    ///<summary>
    ///Stores the specified report to a report storage using a new URL.
    ///</summary>
    ///<param name = "reportLayout" type = "String">
    ///A string that specifies the report layout to be saved.
    ///</param>
    ///<param name = "url" type = "String">
    ///A string that specifies the default report URL.
    ///</param>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
ASPxClientReportDesigner.prototype.SaveReport = function() {
    ///<summary>
    ///Saves the current report.
    ///</summary>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
ASPxClientReportDesigner.prototype.CloseCurrentTab = function() {
    ///<summary>
    ///Closes the report tab currently being opened in the Web Report Designer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.SaveNewReport = function(reportName) {
    ///<summary>
    ///Saves the current report under a new name.
    ///</summary>
    ///<param name = "reportName" type = "String">
    ///A string that specifies the report name.
    ///</param>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
ASPxClientReportDesigner.prototype.ReportStorageGetUrls = function() {
    ///<summary>
    ///Returns the report URLs and display names existing in a report storage.
    ///</summary>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
ASPxClientReportDesigner.prototype.OpenReport = function(url) {
    ///<summary>
    ///Opens the specified report on the client side of the Web Report Designer.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string that specifies the URL of a report to be opened.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.ShowPreview = function() {
    ///<summary>
    ///Switches the Web Report Designer to the preview mode.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientReportDesigner.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientReportDesigner.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientReportDesigner.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientReportDesigner.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientReportDesigner.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesigner.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientReportDesignerCustomizeSaveDialogEventArgs.prototype.Customize = function(template, model) {
    ///<summary>
    ///Customizes the Save dialog based on the specified template and model.
    ///</summary>
    ///<param name = "template" type = "String">
    ///A string that specifies the name of an HTML template for the dialog.
    ///</param>
    ///<param name = "model" type = "ASPxDesignerDialogModel">
    ///A model of the Save dialog.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerCustomizeSaveAsDialogEventArgs.prototype.Customize = function(template, model) {
    ///<summary>
    ///Customizes the Save Report dialog based on the specified template and model.
    ///</summary>
    ///<param name = "template" type = "String">
    ///A string that specifies the name of an HTML template for the dialog.
    ///</param>
    ///<param name = "model" type = "ASPxDesignerDialogModel">
    ///A model of the Save Report dialog.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDesignerCustomizeOpenDialogEventArgs.prototype.Customize = function(template, model) {
    ///<summary>
    ///Customizes the Open Report dialog based on the specified template and model.
    ///</summary>
    ///<param name = "template" type = "String">
    ///A string that specifies the name of an HTML template for the dialog.
    ///</param>
    ///<param name = "model" type = "ASPxDesignerDialogModel">
    ///A model of the Open Report dialog.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerUndoEngine.prototype.undoAll = function() {
    ///<summary>
    ///Undoes all changes made to a report.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerUndoEngine.prototype.clearHistory = function() {
    ///<summary>
    ///Clears information about edit operations made to a report, so they cannot not be undone.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerUndoEngine.prototype.undo = function() {
    ///<summary>
    ///Undoes the last edit action in a report.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerUndoEngine.prototype.redo = function() {
    ///<summary>
    ///Reverses the results of the last undo action.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerDialogModel.prototype.getUrl = function() {
    ///<summary>
    ///Specifies a function that gets the report URL.
    ///</summary>
    ///<returns type = "String">
    ///A string that specifies the report URL.
    ///</returns>
};
ASPxDesignerDialogModel.prototype.setUrl = function(url) {
    ///<summary>
    ///Specifies a function that sets the report URL.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string that specifies the report URL.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerDialogModel.prototype.onShow = function(tab) {
    ///<summary>
    ///Specifies a function to be executed when showing a dialog.
    ///</summary>
    ///<param name = "tab" type = "ASPxDesignerNavigateTab">
    ///An object that specifies the report tab for which a dialog is invoked.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerReportDialogBase.prototype.show = function(tab) {
    ///<summary>
    ///Shows the dialog for the specified report tab.
    ///</summary>
    ///<param name = "tab" type = "ASPxDesignerNavigateTab">
    ///A report tab for which the dialog should be shown.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerReportDialogBase.prototype.customize = function(template, model) {
    ///<summary>
    ///Customizes the dialog based on the specified template and model.
    ///</summary>
    ///<param name = "template" type = "String">
    ///A string that specifies the name of an HTML template for the dialog.
    ///</param>
    ///<param name = "model" type = "ASPxDesignerDialogModel">
    ///An object that specifies the dialog model.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerReportDialogBase.prototype.cancel = function() {
    ///<summary>
    ///Cancels the dialog.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerSaveDialog.prototype.save = function(url) {
    ///<summary>
    ///Saves the report with the specified URL.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string that specifies an URL of the report to be saved.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerSaveDialog.prototype.notSave = function() {
    ///<summary>
    ///Closes the dialog without saving the current report.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerSaveDialog.prototype.show = function(tab) {
    ///<summary>
    ///Shows the dialog for the specified report tab.
    ///</summary>
    ///<param name = "tab" type = "ASPxDesignerNavigateTab">
    ///A report tab for which the dialog should be shown.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerSaveDialog.prototype.customize = function(template, model) {
    ///<summary>
    ///Customizes the dialog based on the specified template and model.
    ///</summary>
    ///<param name = "template" type = "String">
    ///A string that specifies the name of an HTML template for the dialog.
    ///</param>
    ///<param name = "model" type = "ASPxDesignerDialogModel">
    ///An object that specifies the dialog model.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerSaveDialog.prototype.cancel = function() {
    ///<summary>
    ///Cancels the dialog.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerSaveAsDialog.prototype.save = function(url) {
    ///<summary>
    ///Saves the report with the specified URL.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string that specifies a URL of the report to be saved.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerSaveAsDialog.prototype.show = function(tab) {
    ///<summary>
    ///Shows the dialog for the specified report tab.
    ///</summary>
    ///<param name = "tab" type = "ASPxDesignerNavigateTab">
    ///A report tab for which the dialog should be shown.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerSaveAsDialog.prototype.customize = function(template, model) {
    ///<summary>
    ///Customizes the dialog based on the specified template and model.
    ///</summary>
    ///<param name = "template" type = "String">
    ///A string that specifies the name of an HTML template for the dialog.
    ///</param>
    ///<param name = "model" type = "ASPxDesignerDialogModel">
    ///An object that specifies the dialog model.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerSaveAsDialog.prototype.cancel = function() {
    ///<summary>
    ///Cancels the dialog.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerOpenDialog.prototype.open = function(url) {
    ///<summary>
    ///Opens the report with the specified URL.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string that specifies an URL of the report to be opened.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerOpenDialog.prototype.show = function(tab) {
    ///<summary>
    ///Shows the dialog for the specified report tab.
    ///</summary>
    ///<param name = "tab" type = "ASPxDesignerNavigateTab">
    ///A report tab for which the dialog should be shown.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerOpenDialog.prototype.customize = function(template, model) {
    ///<summary>
    ///Customizes the dialog based on the specified template and model.
    ///</summary>
    ///<param name = "template" type = "String">
    ///A string that specifies the name of an HTML template for the dialog.
    ///</param>
    ///<param name = "model" type = "ASPxDesignerDialogModel">
    ///An object that specifies the dialog model.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerOpenDialog.prototype.cancel = function() {
    ///<summary>
    ///Cancels the dialog.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerControlsFactory.prototype.getControlInfo = function(controlType) {
    ///<summary>
    ///Returns information about the specified toolbox control.
    ///</summary>
    ///<param name = "controlType" type = "String">
    ///A string that specifies the control type.
    ///</param>
    ///<returns type = "ASPxDesignerToolboxItem">
    ///An object that provides information about a toolbox control.
    ///</returns>
};
ASPxDesignerControlsFactory.prototype.getControlType = function(model) {
    ///<summary>
    ///Returns a control type by the specified model.
    ///</summary>
    ///<param name = "model" type = "Object">
    ///An object that specifies the control model.
    ///</param>
    ///<returns type = "String">
    ///A string that specifies the control type.
    ///</returns>
};
ASPxDesignerControlsFactory.prototype.registerControl = function(typeName, metadata) {
    ///<summary>
    ///Registers the specified control in the Toolbox of the Web Report Designer.
    ///</summary>
    ///<param name = "typeName" type = "String">
    ///A string that specifies the name of a custom control.
    ///</param>
    ///<param name = "metadata" type = "ASPxDesignerToolboxItem">
    ///An ASPxDesignerToolboxItem object that provides information about a toolbox item.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxDesignerControlsFactory.prototype.getPropertyInfo = function(controlType, propertyDisplayName) {
    ///<summary>
    ///Returns information about the specified property of the specified control.
    ///</summary>
    ///<param name = "controlType" type = "String">
    ///A string that specifies the control type.
    ///</param>
    ///<param name = "propertyDisplayName" type = "String">
    ///A string that specifies the property display name.
    ///</param>
    ///<returns type = "ASPxDesignerElementSerializationInfo">
    ///An object that provides property information.
    ///</returns>
};
ASPxDesignerParameterType.prototype.valueConverter = function(val) {
    ///<summary>
    ///Converts the specified parameter value to the current parameter type.
    ///</summary>
    ///<param name = "val" type = "Object">
    ///An object that specifies the parameter value to be converted.
    ///</param>
    ///<returns type = "Object">
    ///An object that specifies the converted parameter value.
    ///</returns>
};
ASPxClientReportDocumentMap.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientReportDocumentMap.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientReportDocumentMap.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDocumentMap.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDocumentMap.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDocumentMap.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientReportDocumentMap.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDocumentMap.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientReportDocumentMap.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDocumentMap.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientReportDocumentMap.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportDocumentMap.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.AssignParameters = function(parametersInfo) {
    ///<summary>
    ///Assigns a value to a parameter of the report displayed in the document viewer.
    ///</summary>
    ///<param name = "parametersInfo" elementType = "ASPxClientReportParameterInfo" type = "Array">
    ///An array of ASPxClientReportParameterInfo values specifying parameters and values to assign.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.AssignParameter = function(path, value) {
    ///<summary>
    ///Assigns a value to a parameter of the report displayed in the document viewer.
    ///</summary>
    ///<param name = "path" type = "String">
    ///A System.String specifying the parameter's path.
    ///</param>
    ///<param name = "value" type = "Object">
    ///An object specifying the parameter value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.GetParameterNames = function() {
    ///<summary>
    ///Returns an array storing the names of parameters available in a report.
    ///</summary>
    ///<returns elementType = "String" type = "Array">
    ///An array of String values.
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.GetEditorByParameterName = function(parameterName) {
    ///<summary>
    ///Returns a value editor that is associated with a parameter with the specified name.
    ///</summary>
    ///<param name = "parameterName" type = "String">
    ///A String value, specifying the parameter name.
    ///</param>
    ///<returns type = "ASPxClientControl">
    ///An ASPxClientControl object.
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportParametersPanel.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientReportToolbar.prototype.GetItemTemplateControl = function(name) {
    ///<summary>
    ///Provides access to the control template assigned for the specified menu item.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A String value, specifying the menu item name.
    ///</param>
    ///<returns type = "ASPxClientControl">
    ///An ASPxClientControl object.
    ///</returns>
};
ASPxClientReportToolbar.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientReportToolbar.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientReportToolbar.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportToolbar.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportToolbar.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportToolbar.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientReportToolbar.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportToolbar.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientReportToolbar.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportToolbar.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientReportToolbar.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportToolbar.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientReportViewer.prototype.SubmitParameters = function(parameters) {
    ///<summary>
    ///Submits the values of the specified parameters.
    ///</summary>
    ///<param name = "parameters" type = "Dictionary">
    ///A dictionary containing the parameter names, along with their Object values.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.Print = function() {
    ///<signature>
    ///<summary>
    ///Prints a report shown in the ReportViewer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Prints a report page with the specified page index.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value which specifies an index of the page to be printed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientReportViewer.prototype.GotoPage = function(pageIndex) {
    ///<summary>
    ///Displays a report page with the specified page index in the ReportViewer.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An integer value which specifies the index of a page to be displayed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.Refresh = function() {
    ///<summary>
    ///Initiates a round trip to the server so that the current page will be reloaded.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.Search = function() {
    ///<summary>
    ///Invokes the Search dialog, which allows end-users to search for specific text in a report.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.SaveToWindow = function(format) {
    ///<summary>
    ///Exports a report to a file of the specified format, and shows it in a new Web Browser window.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string specifying the format, to which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.SaveToDisk = function(format) {
    ///<summary>
    ///Exports a report to a file of the specified format, and saves it to the disk.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A string specifying the format, to which a report should be exported.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.IsSearchAllowed = function() {
    ///<summary>
    ///Gets a value indicating whether or not searching text across a report is permitted in the web browser.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if searching text in the report is allowed; otherwise, false.
    ///</returns>
};
ASPxClientReportViewer.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientReportViewer.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientReportViewer.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientReportViewer.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientReportViewer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientReportViewer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientReportViewer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};
ASPxClientReportViewerPageLoadEventArgs.prototype.IsFirstPage = function() {
    ///<summary>
    ///Gets a value indicating whether a report page, which is currently loaded into the ASPxClientReportViewer, is the first page of a report.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the loaded page is first; otherwise, false.
    ///</returns>
};
ASPxClientReportViewerPageLoadEventArgs.prototype.IsLastPage = function() {
    ///<summary>
    ///Gets a value indicating whether a report page, which is currently loaded into the ASPxClientReportViewer, is the last page of a report.
    ///</summary>
    ///<returns type = "Boolean">
    ///true if the loaded page is last; otherwise, false.
    ///</returns>
};
ASPxClientCustomizeMenuActionsEventArgs.prototype.GetById = function(actionId) {
    ///<summary>
    ///Returns a menu action with the specified ID.
    ///</summary>
    ///<param name = "actionId" type = "String">
    ///A String value that specifies the action ID.
    ///</param>
    ///<returns type = "ASPxClientMenuAction">
    ///An ASPxClientMenuAction object.
    ///</returns>
};
ASPxClientCustomizeElementsEventArgs.prototype.GetById = function(templateId) {
    ///<summary>
    ///Returns UI elements with the specified ID.
    ///</summary>
    ///<param name = "templateId" type = "String">
    ///A string that specifies the element ID.
    ///</param>
    ///<returns type = "Array" elementType = "ASPxReportUIElement">
    ///An array of ASPxReportUIElement objects.
    ///</returns>
};
ASPxClientWebDocumentViewerEditingField.prototype.id = function() {
    ///<summary>
    ///Returns the unique identifier of an editing field.
    ///</summary>
    ///<returns type = "String">
    ///A string that specifies the editing field's ID.
    ///</returns>
};
ASPxClientWebDocumentViewerEditingField.prototype.groupID = function() {
    ///<summary>
    ///Returns the ID of a logical group to which an editing field for a check box belongs.
    ///</summary>
    ///<returns type = "String">
    ///A string that specifies the ID of a logical group owning the corresponding check box.
    ///</returns>
};
ASPxClientWebDocumentViewerEditingField.prototype.editorName = function() {
    ///<summary>
    ///Returns the name of an editor used to change a field value in Print Preview.
    ///</summary>
    ///<returns type = "String">
    ///A string that specifies the editor name.
    ///</returns>
};
ASPxClientWebDocumentViewerEditingField.prototype.pageIndex = function() {
    ///<summary>
    ///Returns the index of the page on which an editing field is located.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value which specifies the page index.
    ///</returns>
};
ASPxClientWebDocumentViewerParameter.prototype.getParameterDescriptor = function() {
    ///<summary>
    ///Returns an object that provides general information about a report parameter.
    ///</summary>
    ///<returns type = "ASPxDesignerElementParameterDescriptor">
    ///An object storing report parameter information.
    ///</returns>
};
ASPxClientPreviewClickEventArgs.prototype.DefaultHandler = function() {
    ///<summary>
    ///Specifies the default function used to handle the PreviewClick event.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPreviewClickEventArgs.prototype.GetBrickText = function() {
    ///<summary>
    ///Returns the text displayed by the Brick.
    ///</summary>
    ///<returns type = "String">
    ///A string that specified the brick text.
    ///</returns>
};
ASPxClientPreviewClickEventArgs.prototype.GetBrickValue = function() {
    ///<summary>
    ///Returns a string providing additional information on the Brick.
    ///</summary>
    ///<returns type = "String">
    ///A string that provides additional information on the current brick.
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.GetPreviewModel = function() {
    ///<summary>
    ///Provides access to the preview model of the ASPxClientWebDocumentViewer.
    ///</summary>
    ///<returns type = "Object">
    ///A Object value, specifying the preview model.
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.GetParametersModel = function() {
    ///<summary>
    ///Returns a model for a report parameter.
    ///</summary>
    ///<returns type = "Object">
    ///An object that specifies a report parameter model.
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.OpenReport = function(url) {
    ///<summary>
    ///Opens the specified report on the client side of the Web Document Viewer.
    ///</summary>
    ///<param name = "url" type = "String">
    ///A string that specifies the URL of a report to be opened.
    ///</param>
    ///<returns type = "JQueryPromise">
    ///A Deferred Promise object.
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.Print = function() {
    ///<signature>
    ///<summary>
    ///Prints the current document.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Prints the document's page with the specified index.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///An index of the page to be printed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientWebDocumentViewer.prototype.ExportTo = function() {
    ///<signature>
    ///<summary>
    ///Exports the document to a PDF file.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///Exports the document to a specified file format.
    ///</summary>
    ///<param name = "format" type = "String">
    ///A String value, specifying the export format. The following formats are currently supported: 'csv', 'html', 'image', 'mht', 'pdf', 'rtf', 'txt', 'xls', and 'xlsx'.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
    ///<signature>
    ///<summary>
    ///
    ///</summary>
    ///<param name = "format" type = "String">
    ///
    ///</param>
    ///<param name = "inlineResult" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
    ///</signature>
};
ASPxClientWebDocumentViewer.prototype.GetCurrentPageIndex = function() {
    ///<summary>
    ///Returns the zero-based index of the currently displayed page.
    ///</summary>
    ///<returns type = "Int32">
    ///A zero-based integer value that specifies the index of a current page.
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.GoToPage = function(pageIndex) {
    ///<summary>
    ///Displays the report page with the specified page index.
    ///</summary>
    ///<param name = "pageIndex" type = "Int32">
    ///A zero-based integer value that specifies the index of a page to be displayed.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.Close = function() {
    ///<summary>
    ///Closes the document currently being opened in the Web Document Viewer.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.ResetParameters = function() {
    ///<summary>
    ///Resets the values of report parameters to their default values.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.StartBuild = function() {
    ///<summary>
    ///Starts building a report document.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.UpdateLocalization = function(localization) {
    ///<summary>
    ///Updates the localization settings of the ASPxClientWebDocumentViewer properties.
    ///</summary>
    ///<param name = "localization" type = "Dictionary">
    ///A dictionary containing the property names, along with their localized equivalents.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.GetWidth = function() {
    ///<summary>
    ///Returns the control's width.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's width.
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.GetHeight = function() {
    ///<summary>
    ///Returns the control's height.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value that represents the control's height.
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.SetWidth = function(width) {
    ///<summary>
    ///Specifies the control's width.
    ///</summary>
    ///<param name = "width" type = "Int32">
    ///An integer value that specifies the control's width.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.SetHeight = function(height) {
    ///<summary>
    ///Specifies the control's height.   Note that this method is not in effect for some controls.
    ///</summary>
    ///<param name = "height" type = "Int32">
    ///An integer value that specifies the control's height.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.AdjustControl = function() {
    ///<summary>
    ///Modifies the control's size against the control's container.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.GetMainElement = function() {
    ///<summary>
    ///Returns an HTML element that is the root of the control's hierarchy.
    ///</summary>
    ///<returns type = "Object">
    ///An object that is the root HTML container element within the control element's hierarchy.
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.GetClientVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.SetClientVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.GetVisible = function() {
    ///<summary>
    ///Returns a value specifying whether a control is displayed.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if a control is visible; otherwise, false.
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.SetVisible = function(visible) {
    ///<summary>
    ///Specifies whether a control is displayed.
    ///</summary>
    ///<param name = "visible" type = "Boolean">
    ///true to make a control visible; false to make it hidden.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientWebDocumentViewer.prototype.InCallback = function() {
    ///<summary>
    ///Returns a value that determines whether a callback request sent by a web control is being currently processed on the server side.
    ///</summary>
    ///<returns type = "Boolean">
    ///true, if the callback processing is being currently performed in response to a web control's request; otherwise, false.
    ///</returns>
};

DashboardSpecialValues.IsNullValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is an NullValue.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is an NullValue; otherwise, false.
    ///</returns>
};
DashboardSpecialValues.IsOlapNullValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is an OlapNullValue.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is an OlapNullValue; otherwise, false.
    ///</returns>
};
DashboardSpecialValues.IsOthersValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is an OthersValue.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is an OthersValue; otherwise, false.
    ///</returns>
};
DashboardSpecialValues.IsErrorValue = function(value) {
    ///<summary>
    ///Returns whether or not the specified value is an ErrorValue.
    ///</summary>
    ///<param name = "value" type = "Object">
    ///The specified value.
    ///</param>
    ///<returns type = "Boolean">
    ///true, if the specified value is an ErrorValue; otherwise, false.
    ///</returns>
};
ASPxClientDashboardViewer.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDashboardViewer">
    ///An object of the ASPxClientDashboardViewer type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientEdit.ClearEditorsInContainer = function(container, validationGroup, clearInvisibleEditors) {
    ///<summary>
    ///Assigns a null value to all editors in a specified visibility state, which are located within a specified container and belong to a specific validation group.
    ///</summary>
    ///<param name = "container" type = "Object">
    ///An HTML element specifying the container of editors to be validated.
    ///</param>
    ///<param name = "validationGroup" type = "String">
    ///A string value specifying the validation group's name.
    ///</param>
    ///<param name = "clearInvisibleEditors" type = "Boolean">
    ///true to clear both visible and invisible editors that belong to the specified container and group; false to clear only visible editors.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.ClearEditorsInContainerById = function(containerId, validationGroup, clearInvisibleEditors) {
    ///<summary>
    ///Assigns a null value to all editors which are located within the specified container object, and belonging to a specific validation group, dependent on the visibility state specified.
    ///</summary>
    ///<param name = "containerId" type = "String">
    ///A string value specifying the editor container's identifier.
    ///</param>
    ///<param name = "validationGroup" type = "String">
    ///A string value specifying the validatiion group's name.
    ///</param>
    ///<param name = "clearInvisibleEditors" type = "Boolean">
    ///true to clear both visible and invisible editors that belong to the specified container and group; false to clear only visible editors.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.ClearGroup = function(validationGroup, clearInvisibleEditors) {
    ///<summary>
    ///Assigns a null value to all editors which belong to a specific validation group, dependent on the visibility state specified.
    ///</summary>
    ///<param name = "validationGroup" type = "String">
    ///A string value specifying the validation group's name.
    ///</param>
    ///<param name = "clearInvisibleEditors" type = "Boolean">
    ///true to clear both visible and invisible editors that belong to the specified validation group; false to clear only visible editors.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientEdit.ValidateEditorsInContainer = function(container, validationGroup, validateInvisibleEditors) {
    ///<summary>
    ///Performs validation of all editors in a specified visibility state, which are located within a specified container and belong to a specific validation group.
    ///</summary>
    ///<param name = "container" type = "Object">
    ///An HTML element specifying the container of editors to be validated.
    ///</param>
    ///<param name = "validationGroup" type = "String">
    ///A string value that specifies the validation group's name.
    ///</param>
    ///<param name = "validateInvisibleEditors" type = "Boolean">
    ///true to validate both visible and invisible editors that belong to the specified container and group; false to validate only visible editors.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified editors pass validation; otherwise, false.
    ///</returns>
};
ASPxClientEdit.ValidateEditorsInContainerById = function(containerId, validationGroup, validateInvisibleEditors) {
    ///<summary>
    ///Performs validation of the editors which are located within the specified container and belong to a specific validation group, dependent on the visibility state specified.
    ///</summary>
    ///<param name = "containerId" type = "String">
    ///A string value specifying the editor container's identifier.
    ///</param>
    ///<param name = "validationGroup" type = "String">
    ///A string value that specifies the validation group's name.
    ///</param>
    ///<param name = "validateInvisibleEditors" type = "Boolean">
    ///true to validate both visible and invisible editors that belong to the specified container and group; false to validate only visible editors.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified editors pass validation; otherwise, false.
    ///</returns>
};
ASPxClientEdit.ValidateGroup = function(validationGroup, validateInvisibleEditors) {
    ///<summary>
    ///Performs validation of editors contained within the specified validation group, dependent on the editor visibility state specified.
    ///</summary>
    ///<param name = "validationGroup" type = "String">
    ///A string value specifying the validation group's name.
    ///</param>
    ///<param name = "validateInvisibleEditors" type = "Boolean">
    ///true to validate both visible and invisible editors that belong to the specified validation group; false to validate only visible editors.
    ///</param>
    ///<returns type = "Boolean">
    ///true if editors of the specified validation group pass validation; otherwise, false.
    ///</returns>
};
ASPxClientEdit.AreEditorsValid = function(container, validationGroup, checkInvisibleEditors) {
    ///<summary>
    ///Verifies whether the editors in a specified visibility state, which are located within a specified container and belong to a specific validation group, are valid.
    ///</summary>
    ///<param name = "container" type = "Object">
    ///An HTML element specifying the container of editors to be validated.
    ///</param>
    ///<param name = "validationGroup" type = "String">
    ///A string value that specifies the validation group's name.
    ///</param>
    ///<param name = "checkInvisibleEditors" type = "Boolean">
    ///true to check both visible and invisible editors that belong to the specified container; false to check only visible editors.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the editors are valid; otherwise, false.
    ///</returns>
};
ASPxClientBinaryImage.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientBinaryImage">
    ///An object of the ASPxClientBinaryImage type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientButton.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientButton">
    ///An object of the ASPxClientButton type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientCalendar.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCalendar">
    ///An object of the ASPxClientCalendar type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientCaptcha.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCaptcha">
    ///An object of the ASPxClientCaptcha type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientCheckBox.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCheckBox">
    ///An object of the ASPxClientCheckBox type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientRadioButton.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientRadioButton">
    ///An object of the ASPxClientRadioButton type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientColorEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientColorEdit">
    ///An object of the ASPxClientColorEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientComboBox.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientComboBox">
    ///An object of the ASPxClientComboBox type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientDateEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDateEdit">
    ///An object of the ASPxClientDateEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientDropDownEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDropDownEdit">
    ///An object of the ASPxClientDropDownEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientFilterControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientFilterControl">
    ///An object of the ASPxClientFilterControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientListBox.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientListBox">
    ///An object of the ASPxClientListBox type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientRadioButtonList.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientRadioButtonList">
    ///An object of the ASPxClientRadioButtonList type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientCheckBoxList.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCheckBoxList">
    ///An object of the ASPxClientCheckBoxList type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientProgressBar.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientProgressBar">
    ///An object of the ASPxClientProgressBar type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientSpinEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientSpinEdit">
    ///An object of the ASPxClientSpinEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTimeEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTimeEdit">
    ///An object of the ASPxClientTimeEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientHyperLink.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientHyperLink">
    ///An object of the ASPxClientHyperLink type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientImage.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientImage">
    ///An object of the ASPxClientImage type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientLabel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientLabel">
    ///An object of the ASPxClientLabel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTextBox.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTextBox">
    ///An object of the ASPxClientTextBox type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientMemo.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientMemo">
    ///An object of the ASPxClientMemo type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientButtonEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientButtonEdit">
    ///An object of the ASPxClientButtonEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTokenBox.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTokenBox">
    ///An object of the ASPxClientTokenBox type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTrackBar.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTrackBar">
    ///An object of the ASPxClientTrackBar type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientGaugeControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientGaugeControl">
    ///An object of the ASPxClientGaugeControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientGridLookup.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientGridLookup">
    ///An object of the ASPxClientGridLookup type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientCardView.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCardView">
    ///An object of the ASPxClientCardView type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientGridView.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientGridView">
    ///An object of the ASPxClientGridView type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientVerticalGrid.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientVerticalGrid">
    ///An object of the ASPxClientVerticalGrid type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientHtmlEditor.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientHtmlEditor">
    ///An object of the ASPxClientHtmlEditor type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientHtmlEditor.CustomDialogComplete = function(status, data) {
    ///<summary>
    ///Programmatically closes a custom dialog, supplying it with specific parameters.
    ///</summary>
    ///<param name = "status" type = "Object">
    ///An object representing a custom dialog's closing status.
    ///</param>
    ///<param name = "data" type = "Object">
    ///An object representing custom data associated with a custom dialog.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientPivotGrid.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientPivotGrid">
    ///An object of the ASPxClientPivotGrid type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientRichEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientRichEdit">
    ///An object of the ASPxClientRichEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxSchedulerDateTimeHelper.TruncToDate = function(date) {
    ///<summary>
    ///Returns the date part of the specified DateTime value.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object from which to extract the date.
    ///</param>
    ///<returns type = "DateTime">
    ///A DateTime object containing a date.
    ///</returns>
};
ASPxSchedulerDateTimeHelper.ToDayTime = function(date) {
    ///<summary>
    ///Returns the day time part of the specified DateTime value.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object from which to extract the day time.
    ///</param>
    ///<returns type = "TimeSpan">
    ///A TimeSpan object containing the day time.
    ///</returns>
};
ASPxSchedulerDateTimeHelper.AddDays = function(date, dayCount) {
    ///<summary>
    ///Adds the specified number of days to a DateTime object and returns the result.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object to which to add days.
    ///</param>
    ///<param name = "dayCount" type = "Int32">
    ///The number of days to add.
    ///</param>
    ///<returns type = "DateTime">
    ///A DateTime object.
    ///</returns>
};
ASPxSchedulerDateTimeHelper.AddTimeSpan = function(date, timeSpan) {
    ///<summary>
    ///Adds the specified timespan to a DateTime object and returns the result.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object to which to add a timespan.
    ///</param>
    ///<param name = "timeSpan" type = "TimeSpan">
    ///A TimeSpan object specifying the timespan to add.
    ///</param>
    ///<returns type = "DateTime">
    ///A DateTime object.
    ///</returns>
};
ASPxSchedulerDateTimeHelper.CeilDateTime = function(date, spanInMs) {
    ///<summary>
    ///Rounds a DateTime value up to the nearest interval.
    ///</summary>
    ///<param name = "date" type = "DateTime">
    ///A DateTime object containing a value to round.
    ///</param>
    ///<param name = "spanInMs" type = "TimeSpan">
    ///A TimeSpan object specifying an interval to which to round.
    ///</param>
    ///<returns type = "DateTime">
    ///A DateTime object containing the rounded value.
    ///</returns>
};
ASPxClientTimeInterval.CalculateDuration = function(start, end) {
    ///<summary>
    ///Gets the duration of a time interval between two points in time.
    ///</summary>
    ///<param name = "start" type = "DateTime">
    ///A DateTime object specifying the starting point of the time interval.
    ///</param>
    ///<param name = "end" type = "DateTime">
    ///A DateTime object specifying the ending point of the time interval.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that is a duration of the time interval in milliseconds.
    ///</returns>
};
ASPxClientScheduler.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientScheduler">
    ///An object of the ASPxClientScheduler type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientSpellChecker.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientSpellChecker">
    ///An object of the ASPxClientSpellChecker type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientSpreadsheet.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientSpreadsheet">
    ///An object of the ASPxClientSpreadsheet type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTreeList.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTreeList">
    ///An object of the ASPxClientTreeList type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientCalendar.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientCalendar">
    ///An object of the MVCxClientCalendar type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientCallbackPanel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientCallbackPanel">
    ///An object of the MVCxClientCallbackPanel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientCardView.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientCardView">
    ///An object of the MVCxClientCardView type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientChart.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientChart">
    ///An object of the MVCxClientChart type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientComboBox.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientComboBox">
    ///An object of the MVCxClientComboBox type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientDataView.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientDataView">
    ///An object of the MVCxClientDataView type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientDateEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientDateEdit">
    ///An object of the MVCxClientDateEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientDockManager.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientDockManager">
    ///An object of the MVCxClientDockManager type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientDockPanel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientDockPanel">
    ///An object of the MVCxClientDockPanel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientFileManager.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientFileManager">
    ///An object of the MVCxClientFileManager type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientGridView.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientGridView">
    ///An object of the MVCxClientGridView type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientHtmlEditor.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientHtmlEditor">
    ///An object of the MVCxClientHtmlEditor type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientImageGallery.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientImageGallery">
    ///An object of the MVCxClientImageGallery type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientListBox.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientListBox">
    ///An object of the MVCxClientListBox type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientNavBar.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientNavBar">
    ///An object of the MVCxClientNavBar type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientPivotGrid.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientPivotGrid">
    ///An object of the MVCxClientPivotGrid type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientPopupControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientPopupControl">
    ///An object of the MVCxClientPopupControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientRichEdit.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientRichEdit">
    ///An object of the MVCxClientRichEdit type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientRoundPanel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientRoundPanel">
    ///An object of the MVCxClientRoundPanel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientScheduler.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientScheduler">
    ///An object of the MVCxClientScheduler type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientSpreadsheet.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientSpreadsheet">
    ///An object of the MVCxClientSpreadsheet type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientPageControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientPageControl">
    ///An object of the MVCxClientPageControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientTokenBox.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientTokenBox">
    ///An object of the MVCxClientTokenBox type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientTreeList.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientTreeList">
    ///An object of the MVCxClientTreeList type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientTreeView.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientTreeView">
    ///An object of the MVCxClientTreeView type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientUploadControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientUploadControl">
    ///An object of the MVCxClientUploadControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
MVCxClientUtils.FinalizeCallback = function() {
    ///<summary>
    ///Loads service resources (such as scripts, CSS files, etc.) required for DevExpress functionality to work properly after a non DevExpress callback has been processed on the server and returned back to the client.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientUtils.GetSerializedEditorValuesInContainer = function(containerOrId) {
    ///<summary>
    ///Returns values of editors placed in the specified container.
    ///</summary>
    ///<param name = "containerOrId" type = "Object">
    ///A container of editors, or its ID.
    ///</param>
    ///<returns type = "Object">
    ///An object containing pairs of editor names and values.
    ///</returns>
};
MVCxClientGlobalEvents.AddControlsInitializedEventHandler = function(handler) {
    ///<summary>
    ///Dynamically connects the ControlsInitialized client event with an appropriate event handler function.
    ///</summary>
    ///<param name = "handler" type = "ASPxClientControlsInitializedEventHandler">
    ///A object representing the event handling function's content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGlobalEvents.AddBeginCallbackEventHandler = function(handler) {
    ///<summary>
    ///Dynamically connects the BeginCallback client event with an appropriate event handler function.
    ///</summary>
    ///<param name = "handler" type = "MVCxClientBeginCallbackEventHandler">
    ///A object containing the event handling function's content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGlobalEvents.AddEndCallbackEventHandler = function(handler) {
    ///<summary>
    ///Dynamically connects the EndCallback client event with an appropriate event handler function.
    ///</summary>
    ///<param name = "handler" type = "ASPxClientEndCallbackEventHandler">
    ///A object containing the event handling function's content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientGlobalEvents.AddCallbackErrorHandler = function(handler) {
    ///<summary>
    ///Dynamically connects the CallbackError client event with an appropriate event handler function.
    ///</summary>
    ///<param name = "handler" type = "ASPxClientCallbackErrorEventHandler">
    ///A object containing the event handling function's content.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
MVCxClientVerticalGrid.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "MVCxClientVerticalGrid">
    ///An object of the MVCxClientVerticalGrid type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientControlBase.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientControlBase">
    ///An object of the ASPxClientControlBase type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientControl">
    ///An object of the ASPxClientControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientControl.AdjustControls = function() {
    ///<summary>
    ///Modifies the controls size on the page.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientControl.GetControlCollection = function() {
    ///<summary>
    ///Returns a collection of client web control objects.
    ///</summary>
    ///<returns type = "ASPxClientControlCollection">
    ///An ASPxClientControlCollection object representing the client-side collection of web controls.
    ///</returns>
};
ASPxClientCallback.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCallback">
    ///An object of the ASPxClientCallback type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientPanelBase.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientPanelBase">
    ///An object of the ASPxClientPanelBase type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientPanel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientPanel">
    ///An object of the ASPxClientPanel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientCallbackPanel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCallbackPanel">
    ///An object of the ASPxClientCallbackPanel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientCloudControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientCloudControl">
    ///An object of the ASPxClientCloudControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientDataView.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDataView">
    ///An object of the ASPxClientDataView type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientDockManager.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDockManager">
    ///An object of the ASPxClientDockManager type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientDockPanel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDockPanel">
    ///An object of the ASPxClientDockPanel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientDockZone.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDockZone">
    ///An object of the ASPxClientDockZone type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientFileManager.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientFileManager">
    ///An object of the ASPxClientFileManager type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientFormLayout.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientFormLayout">
    ///An object of the ASPxClientFormLayout type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientHiddenField.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientHiddenField">
    ///An object of the ASPxClientHiddenField type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientHint.Update = function() {
    ///<summary>
    ///Forces the hint to reselect target UI elements according to the specified CSS selector.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHint.UpdatePosition = function() {
    ///<summary>
    ///Forces the hint to recalculate its position.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHint.Register = function(targetSelector, options) {
    ///<summary>
    ///Registers a hint's functionality with the specified settings.
    ///</summary>
    ///<param name = "targetSelector" type = "String">
    ///A string value that is the CSS selector. Specifies to which UI elements the hint is displayed.
    ///</param>
    ///<param name = "options" type = "ASPxClientHintOptions">
    ///An ASPxClientHintOptions object that is the hint's options.
    ///</param>
    ///<returns type = "ASPxClientHint">
    ///An ASPxClientHint that is the hint.
    ///</returns>
};
ASPxClientHint.Show = function(targetSelector, options) {
    ///<summary>
    ///Invokes a hint.
    ///</summary>
    ///<param name = "targetSelector" type = "String">
    ///A string value that is the CSS selector.
    ///</param>
    ///<param name = "options" type = "ASPxClientHintOptions">
    ///An ASPxClientHintOptions object that is the hint's options.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHint.Hide = function(targetSelector) {
    ///<summary>
    ///Hides a hint window.
    ///</summary>
    ///<param name = "targetSelector" type = "String">
    ///A string value that is the CSS selector.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientHint.HideAll = function() {
    ///<summary>
    ///Hides all hints.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientImageGallery.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientImageGallery">
    ///An object of the ASPxClientImageGallery type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientImageSlider.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientImageSlider">
    ///An object of the ASPxClientImageSlider type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientLoadingPanel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientLoadingPanel">
    ///An object of the ASPxClientLoadingPanel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientMenuBase.GetMenuCollection = function() {
    ///<summary>
    ///Returns a collection of client menu objects.
    ///</summary>
    ///<returns type = "ASPxClientMenuCollection">
    ///An ASPxClientMenuCollection object representing the client-side collection of menu objects.
    ///</returns>
};
ASPxClientMenu.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientMenu">
    ///An object of the ASPxClientMenu type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTouchUI.MakeScrollable = function(id) {
    ///<summary>
    ///Extends the specified element's functionality with scrolling via touch behavior (one finger) and the ability to display vertical and horizontal scroll bars.
    ///</summary>
    ///<param name = "id" type = "String">
    ///A string value specifying the element's ID.
    ///</param>
    ///<returns type = "ScrollExtender">
    ///A ScrollExtender object allowing you to apply the current scroll extender to another element.
    ///</returns>
};
ASPxClientNavBar.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientNavBar">
    ///An object of the ASPxClientNavBar type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientNewsControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientNewsControl">
    ///An object of the ASPxClientNewsControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientObjectContainer.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientObjectContainer">
    ///An object of the ASPxClientObjectContainer type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientPopupControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientPopupControl">
    ///An object of the ASPxClientPopupControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientPopupControl.GetPopupControlCollection = function() {
    ///<summary>
    ///Returns a collection of client popup control objects.
    ///</summary>
    ///<returns type = "ASPxClientPopupControlCollection">
    ///An ASPxClientPopupControlCollection object that is the client-side collection of popup controls.
    ///</returns>
};
ASPxClientPopupMenu.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientPopupMenu">
    ///An object of the ASPxClientPopupMenu type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientRatingControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientRatingControl">
    ///An object of the ASPxClientRatingControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientRibbon.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientRibbon">
    ///An object of the ASPxClientRibbon type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientRoundPanel.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientRoundPanel">
    ///An object of the ASPxClientRoundPanel type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientSplitter.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientSplitter">
    ///An object of the ASPxClientSplitter type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTabControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTabControl">
    ///An object of the ASPxClientTabControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientPageControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientPageControl">
    ///An object of the ASPxClientPageControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTimer.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTimer">
    ///An object of the ASPxClientTimer type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTitleIndex.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTitleIndex">
    ///An object of the ASPxClientTitleIndex type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientTreeView.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientTreeView">
    ///An object of the ASPxClientTreeView type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientUploadControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientUploadControl">
    ///An object of the ASPxClientUploadControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientUtils.ArrayInsert = function(array, element) {
    ///<summary>
    ///Inserts the specified item into the specified array object.
    ///</summary>
    ///<param name = "array" elementType = "Object" type = "Array">
    ///An object that specifies the array to manipulate.
    ///</param>
    ///<param name = "element" type = "Object">
    ///An object that specifies the array item to insert.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.ArrayRemove = function(array, element) {
    ///<summary>
    ///Removes the specified item from the specified array object.
    ///</summary>
    ///<param name = "array" elementType = "Object" type = "Array">
    ///An object that specifies the array to manipulate.
    ///</param>
    ///<param name = "element" type = "Object">
    ///An object that specifies the array item to remove.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.ArrayRemoveAt = function(array, index) {
    ///<summary>
    ///Removes an item at the specified index location from the specified array object.
    ///</summary>
    ///<param name = "array" elementType = "Object" type = "Array">
    ///An object that specifies the array to manipulate.
    ///</param>
    ///<param name = "index" type = "Int32">
    ///The zero-based index location of the array item to remove.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.ArrayClear = function(array) {
    ///<summary>
    ///Removes all items from the specified array object.
    ///</summary>
    ///<param name = "array" elementType = "Object" type = "Array">
    ///An object that specifies the array to manipulate.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.ArrayIndexOf = function(array, element) {
    ///<summary>
    ///Searches for the specified array item and returns the zero-based index of its first occurrence within the specified array object.
    ///</summary>
    ///<param name = "array" elementType = "Object" type = "Array">
    ///An object that specifies the array to manipulate.
    ///</param>
    ///<param name = "element" type = "Object">
    ///An object that specifies the array item to locate.
    ///</param>
    ///<returns type = "Int32">
    ///The zero-based index of the first occurrence of the specified array item within the specified array, if found; otherwise, negative one (-1).
    ///</returns>
};
ASPxClientUtils.AttachEventToElement = function(element, eventName, method) {
    ///<summary>
    ///Binds the specified function to a specific element's event, so that the function gets called whenever the event fires on the element.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object specifying the required element.
    ///</param>
    ///<param name = "eventName" type = "String">
    ///A string value that specifies the required event name without the "on" prefix.
    ///</param>
    ///<param name = "method" type = "Object">
    ///An object that specifies the event's handling function.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.DetachEventFromElement = function(element, eventName, method) {
    ///<summary>
    ///Unbinds the specified function from a specific element's event, so that the function stops receiving notifications when the event fires.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object specifying the required element.
    ///</param>
    ///<param name = "eventName" type = "String">
    ///A string value that specifies the required event name.
    ///</param>
    ///<param name = "method" type = "Object">
    ///An object that specifies the event's handling function.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.GetEventSource = function(htmlEvent) {
    ///<summary>
    ///Returns the object that fired the event.
    ///</summary>
    ///<param name = "htmlEvent" type = "Object">
    ///An object that represents the current event.
    ///</param>
    ///<returns type = "Object">
    ///The object that receives the event that fired.
    ///</returns>
};
ASPxClientUtils.GetEventX = function(htmlEvent) {
    ///<summary>
    ///Gets the x-coordinate of the event-related mouse pointer position relative to an end-user's screen.
    ///</summary>
    ///<param name = "htmlEvent" type = "Object">
    ///An object specifying the required HTML event.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the x-coordinate of the event-related mouse pointer position relative to an end-user's screen.
    ///</returns>
};
ASPxClientUtils.GetEventY = function(htmlEvent) {
    ///<summary>
    ///Gets the y-coordinate of the event-related mouse pointer position relative to an end-user's screen.
    ///</summary>
    ///<param name = "htmlEvent" type = "Object">
    ///An object specifying the required HTML event.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the y-coordinate of the event-related mouse pointer position relative to an end-user's screen.
    ///</returns>
};
ASPxClientUtils.GetKeyCode = function(htmlEvent) {
    ///<summary>
    ///Gets the keyboard code for the specified event.
    ///</summary>
    ///<param name = "htmlEvent" type = "Object">
    ///An object specifying the required HTML event.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the keyboard code of the specified event.
    ///</returns>
};
ASPxClientUtils.PreventEvent = function(htmlEvent) {
    ///<summary>
    ///Cancels the default action of the specified event.
    ///</summary>
    ///<param name = "htmlEvent" type = "Object">
    ///An object that specifies the required HTML event.
    ///</param>
    ///<returns type = "Boolean">
    ///Always false.
    ///</returns>
};
ASPxClientUtils.PreventEventAndBubble = function(htmlEvent) {
    ///<summary>
    ///Cancels both the specified event's default action and the event's bubbling upon the hierarchy of event handlers.
    ///</summary>
    ///<param name = "htmlEvent" type = "Object">
    ///An object that specifies the required HTML event.
    ///</param>
    ///<returns type = "Boolean">
    ///Always false.
    ///</returns>
};
ASPxClientUtils.PreventDragStart = function(htmlEvent) {
    ///<summary>
    ///Removes mouse capture from the specified event's source object.
    ///</summary>
    ///<param name = "htmlEvent" type = "Object">
    ///An object that specifies the required HTML event.
    ///</param>
    ///<returns type = "Boolean">
    ///Always false.
    ///</returns>
};
ASPxClientUtils.ClearSelection = function() {
    ///<summary>
    ///Clears any text selection made within the window's client region.
    ///</summary>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.IsExists = function(obj) {
    ///<summary>
    ///Gets a value that indicates whether the specified object exists on the client side.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The object to test.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified object exists; otherwise, false.
    ///</returns>
};
ASPxClientUtils.IsFunction = function(obj) {
    ///<summary>
    ///Gets a value that indicates whether the specified object is a function.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The object to test.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the specified object is a function; otherwise, false.
    ///</returns>
};
ASPxClientUtils.GetAbsoluteX = function(element) {
    ///<summary>
    ///Gets the x-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object identifying the HTML element whose position should be obtained.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the specified element's x-coordinate, in pixels.
    ///</returns>
};
ASPxClientUtils.GetAbsoluteY = function(element) {
    ///<summary>
    ///Gets the y-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object identifying the HTML element whose position should be obtained.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value representing the specified element's y-coordinate, in pixels.
    ///</returns>
};
ASPxClientUtils.SetAbsoluteX = function(element, x) {
    ///<summary>
    ///Sets the x-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object identifying the HTML element whose position should be defined.
    ///</param>
    ///<param name = "x" type = "Int32">
    ///An integer value specifying the required element's x-coordinate, in pixels.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.SetAbsoluteY = function(element, y) {
    ///<summary>
    ///Sets the y-coordinate of the specified element's top left corner relative to the client area of the window, excluding scroll bars.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object identifying the HTML element whose position should be defined.
    ///</param>
    ///<param name = "y" type = "Int32">
    ///An integer value specifying the required element's y-coordinate, in pixels.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.GetDocumentScrollTop = function() {
    ///<summary>
    ///Returns the distance between the top edge of the document and the topmost portion of the content currently visible in the window.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the distance (in pixels) between the top edge of the document and the topmost portion of the content currently visible in the window.
    ///</returns>
};
ASPxClientUtils.GetDocumentScrollLeft = function() {
    ///<summary>
    ///Returns the distance between the left edge of the document and the leftmost portion of the content currently visible in the window.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the distance (in pixels) between the left edge of the document and the leftmost portion of the content currently visible in the window.
    ///</returns>
};
ASPxClientUtils.GetDocumentClientWidth = function() {
    ///<summary>
    ///Gets the width of the window's client region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the width of the window's client region.
    ///</returns>
};
ASPxClientUtils.GetDocumentClientHeight = function() {
    ///<summary>
    ///Gets the height of the window's client region.
    ///</summary>
    ///<returns type = "Int32">
    ///An integer value representing the height of the window's client region.
    ///</returns>
};
ASPxClientUtils.GetIsParent = function(parentElement, element) {
    ///<summary>
    ///Gets a value indicating whether the object passed via the parentElement parameter is a parent of the object passed via the element parameter.
    ///</summary>
    ///<param name = "parentElement" type = "Object">
    ///An object specifying the parent HTML element.
    ///</param>
    ///<param name = "element" type = "Object">
    ///An object specifying the child HTML element.
    ///</param>
    ///<returns type = "Boolean">
    ///true if the parentElement  is a parent for the element; otherwise, false.
    ///</returns>
};
ASPxClientUtils.GetParentById = function(element, id) {
    ///<summary>
    ///Returns a reference to the specified HTML element's first parent object which has an ID that matches the specified value.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object specifying the child HTML element whose parent elements are searched.
    ///</param>
    ///<param name = "id" type = "String">
    ///A string specifying the required parent's ID.
    ///</param>
    ///<returns type = "Object">
    ///An object representing the first parent element with a matching ID or a null value if no matching element is found.
    ///</returns>
};
ASPxClientUtils.GetParentByTagName = function(element, tagName) {
    ///<summary>
    ///Returns a reference to the specified HTML element's first parent object whose element name matches the specified value.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object specifying the child HTML element whose parent elements are searched.
    ///</param>
    ///<param name = "tagName" type = "String">
    ///A string value specifying the element name (tag name) of the desired HTML element.
    ///</param>
    ///<returns type = "Object">
    ///An object representing the first parent element with a matching element name or a null value if no matching element is found.
    ///</returns>
};
ASPxClientUtils.GetParentByClassName = function(element, className) {
    ///<summary>
    ///Returns a reference to the specified HTML element's first parent object whose class name matches the specified value.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object specifying the child HTML element whose parent elements are searched.
    ///</param>
    ///<param name = "className" type = "String">
    ///A string value specifying the class name of the desired HTML element.
    ///</param>
    ///<returns type = "Object">
    ///An object representing the first parent element with a matching class name or a null value if no matching element is found.
    ///</returns>
};
ASPxClientUtils.GetChildById = function(element, id) {
    ///<summary>
    ///Returns a reference to the first element that has the specified ID in the parent HTML element specified.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object identifying the parent HTML element to search.
    ///</param>
    ///<param name = "id" type = "String">
    ///A string specifying the ID attribute value of the desired child element.
    ///</param>
    ///<returns type = "Object">
    ///An object representing the first element with a matching ID or null if no matching element is found.
    ///</returns>
};
ASPxClientUtils.GetChildByTagName = function(element, tagName, index) {
    ///<summary>
    ///Returns a reference to the particular element that has the specified element name and is contained within the specified parent HTML element.
    ///</summary>
    ///<param name = "element" type = "Object">
    ///An object specifying the parent HTML element to search.
    ///</param>
    ///<param name = "tagName" type = "String">
    ///A string value specifying the element name (tag name) of the desired HTML element.
    ///</param>
    ///<param name = "index" type = "Int32">
    ///An integer value specifying the zero-based index of the desired element amongst all the matching elements found.
    ///</param>
    ///<returns type = "Object">
    ///An object representing the matching element; a null value if no matching element is found.
    ///</returns>
};
ASPxClientUtils.SetCookie = function(name, value) {
    ///<summary>
    ///Creates or updates the HTTP cookie for the response.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value that represents the name of a cookie.
    ///</param>
    ///<param name = "value" type = "String">
    ///A string representing the cookie value.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.GetCookie = function(name) {
    ///<summary>
    ///Retrieves a cookie with the specified name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value that represents the name of a cookie.
    ///</param>
    ///<returns type = "String">
    ///A string value, if the cookie exists.
    ///</returns>
};
ASPxClientUtils.DeleteCookie = function(name) {
    ///<summary>
    ///Deletes a cookie with the specified name.
    ///</summary>
    ///<param name = "name" type = "String">
    ///A string value that represents the name of a cookie.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientUtils.GetShortcutCode = function(keyCode, isCtrlKey, isShiftKey, isAltKey) {
    ///<summary>
    ///Returns a specifically generated code that uniquely identifies the combination of keys specified via the parameters.
    ///</summary>
    ///<param name = "keyCode" type = "Int32">
    ///An integer value that specifies the code of the key.
    ///</param>
    ///<param name = "isCtrlKey" type = "Boolean">
    ///true if the CTRL key should be included into the key combination; otherwise, false.
    ///</param>
    ///<param name = "isShiftKey" type = "Boolean">
    ///true if the SHIFT key should be included into the key combination; otherwise, false.
    ///</param>
    ///<param name = "isAltKey" type = "Boolean">
    ///true if the ALT key should be included into the key combination; otherwise, false.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the code uniquely identifying the key combination.
    ///</returns>
};
ASPxClientUtils.GetShortcutCodeByEvent = function(htmlEvent) {
    ///<summary>
    ///Returns a specifically generated code that uniquely identifies the pressed key combination, which is specified by the related HTML event.
    ///</summary>
    ///<param name = "htmlEvent" type = "Object">
    ///A DHTML event object that relates to a key combination being pressed.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the code uniquely identifying the specified key combination.
    ///</returns>
};
ASPxClientUtils.StringToShortcutCode = function(shortcutString) {
    ///<summary>
    ///Returns a specifically generated code that uniquely identifies the combination of keys specified via the parameter.
    ///</summary>
    ///<param name = "shortcutString" type = "String">
    ///A string value that specifies the key combination.
    ///</param>
    ///<returns type = "Int32">
    ///An integer value that represents the code uniquely identifying the key combination.
    ///</returns>
};
ASPxClientUtils.Trim = function(str) {
    ///<summary>
    ///Trims all leading and trailing whitespaces from the string.
    ///</summary>
    ///<param name = "str" type = "String">
    ///A string value representing the string for trimming.
    ///</param>
    ///<returns type = "String">
    ///A string value representing the trimmed string.
    ///</returns>
};
ASPxClientUtils.TrimStart = function(str) {
    ///<summary>
    ///Trims all leading whitespaces from the string.
    ///</summary>
    ///<param name = "str" type = "String">
    ///A string value representing the string for trimming.
    ///</param>
    ///<returns type = "String">
    ///A string value representing the trimmed string.
    ///</returns>
};
ASPxClientUtils.TrimEnd = function(str) {
    ///<summary>
    ///Trims all trailing whitespaces from the string.
    ///</summary>
    ///<param name = "str" type = "String">
    ///A string value representing the string for trimming.
    ///</param>
    ///<returns type = "String">
    ///A string value representing the trimmed string.
    ///</returns>
};
ASPxClientUtils.SendMessageToAssistiveTechnology = function(message) {
    ///<summary>
    ///Specifies the text that Assistive Technologies (screen readers or braille display, for example) will provide to a user.
    ///</summary>
    ///<param name = "message" type = "String">
    ///A String value that specifies a text.
    ///</param>
    ///<returns type = "Void">
    ///</returns>
};
ASPxClientChartDesigner.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientChartDesigner">
    ///An object of the ASPxClientChartDesigner type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientWebChartControl.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientWebChartControl">
    ///An object of the ASPxClientWebChartControl type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientDocumentViewer.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientDocumentViewer">
    ///An ASPxClientDocumentViewer object.
    ///</returns>
};
ASPxClientQueryBuilder.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientQueryBuilder">
    ///An ASPxClientQueryBuilder object.
    ///</returns>
};
ASPxClientReportDesigner.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientReportDesigner">
    ///An ASPxClientReportDesigner object.
    ///</returns>
};
ASPxClientReportToolbar.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientReportToolbar">
    ///An ASPxClientReportToolbar object.
    ///</returns>
};
ASPxClientReportViewer.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientReportViewer">
    ///An object of the ASPxClientReportViewer type. Represents the converted client object specified by the obj parameter.
    ///</returns>
};
ASPxClientWebDocumentViewer.Cast = function(obj) {
    ///<summary>
    ///Converts the specified object to the current object's type. This method is effective when you utilize the Client API IntelliSense feature provided by DevExpress.
    ///</summary>
    ///<param name = "obj" type = "Object">
    ///The client object to be type cast. Represents an instance of a DevExpress web control's client object.
    ///</param>
    ///<returns type = "ASPxClientWebDocumentViewer">
    ///An ASPxClientWebDocumentViewer object.
    ///</returns>
};

MVCxClientDashboardViewer.__class = true;
DashboardDataAxisNames.__class = true;
DashboardSpecialValues.__class = true;
ASPxClientDashboardItemUnderlyingData.__class = true;
ASPxClientDashboardItemRequestUnderlyingDataParameters.__class = true;
ASPxClientDashboardItemRequestUnderlyingDataCompleted.__class = true;
ASPxClientDashboardItemClickEventHandler.__class = true;
ASPxClientDashboardItemClickEventArgs.__class = true;
ASPxClientDashboardItemVisualInteractivityEventHandler.__class = true;
ASPxClientDashboardItemVisualInteractivityEventArgs.__class = true;
ASPxClientDashboardItemSelectionChangedEventHandler.__class = true;
ASPxClientDashboardItemSelectionChangedEventArgs.__class = true;
ASPxClientDashboardItemElementCustomColorEventHandler.__class = true;
ASPxClientDashboardItemElementCustomColorEventArgs.__class = true;
ASPxClientDashboardItemWidgetCreatedEventHandler.__class = true;
ASPxClientDashboardItemWidgetUpdatingEventHandler.__class = true;
ASPxClientDashboardItemWidgetUpdatedEventHandler.__class = true;
ASPxClientDashboardItemBeforeWidgetDisposedEventHandler.__class = true;
ASPxClientDashboardItemWidgetEventArgs.__class = true;
ASPxClientDashboardItemData.__class = true;
ASPxClientDashboardItemDataAxis.__class = true;
ASPxClientDashboardItemDataDimension.__class = true;
ASPxClientDashboardItemDataMeasure.__class = true;
ASPxClientDashboardItemDataDelta.__class = true;
ASPxClientDashboardItemDataDimensionValue.__class = true;
ASPxClientDashboardItemDataMeasureValue.__class = true;
ASPxClientDashboardItemDataDeltaValue.__class = true;
ASPxClientDashboardItemDataAxisPoint.__class = true;
ASPxClientDashboardItemDataAxisPointTuple.__class = true;
ASPxClientDashboardRangeFilterSelection.__class = true;
ASPxClientDashboardParameters.__class = true;
ASPxClientDashboardParameter.__class = true;
ASPxClientDashboardParameterValue.__class = true;
DashboardExportPageLayout.__class = true;
DashboardExportPaperKind.__class = true;
DashboardExportScaleMode.__class = true;
DashboardExportFilterState.__class = true;
DashboardStateExportPosition.__class = true;
DashboardStateExcelExportPosition.__class = true;
DashboardExportImageFormat.__class = true;
ExcelExportFilterState.__class = true;
DashboardExportExcelFormat.__class = true;
ChartExportSizeMode.__class = true;
MapExportSizeMode.__class = true;
TreemapExportSizeMode.__class = true;
RangeFilterExportSizeMode.__class = true;
ImageFormatOptions.__class = true;
ExcelFormatOptions.__class = true;
GridExportOptions.__class = true;
PivotExportOptions.__class = true;
PieExportOptions.__class = true;
GaugeExportOptions.__class = true;
CardExportOptions.__class = true;
RangeFilterExportOptions.__class = true;
ChartExportOptions.__class = true;
MapExportOptions.__class = true;
ASPxClientDashboardExportOptions.__class = true;
DashboardPdfExportOptions.__class = true;
DashboardImageExportOptions.__class = true;
DashboardExcelExportOptions.__class = true;
DashboardSelectionMode.__class = true;
ASPxClientDashboard.__class = true;
ASPxClientDashboardStateChangedEventHandler.__class = true;
ASPxClientDashboardStateChangedEventArgs.__class = true;
ASPxClientDashboardChangedEventHandler.__class = true;
ASPxClientDashboardChangedEventArgs.__class = true;
ASPxClientDashboardCustomizeMenuItemsEventHandler.__class = true;
ASPxClientDashboardMenuItem.__class = true;
ASPxClientDashboardCustomizeMenuItemsEventArgs.__class = true;
ASPxClientDashboardBeforeRenderEventHandler.__class = true;
ASPxClientDashboardItemEventArgs.__class = true;
ASPxClientDashboardItemMasterFilterStateChangedEventHandler.__class = true;
ASPxClientDashboardItemMasterFilterStateChangedEventArgs.__class = true;
ASPxClientDashboardItemDrillDownStateChangedEventHandler.__class = true;
ASPxClientDashboardItemDrillDownStateChangedEventArgs.__class = true;
ASPxClientActionAvailabilityChangedEventHandler.__class = true;
ASPxClientActionAvailabilityChangedEventArgs.__class = true;
ASPxClientDynamicLookUpValuesLoadedEventHandler.__class = true;
ASPxClientDynamicLookUpValuesLoadedEventArgs.__class = true;
ASPxClientItemBeginUpdateEventHandler.__class = true;
ASPxClientItemBeginUpdateEventArgs.__class = true;
ASPxClientItemEndUpdateEventHandler.__class = true;
ASPxClientItemEndUpdateEventArgs.__class = true;
ASPxClientDashboardBeginUpdateEventHandler.__class = true;
ASPxClientDashboardBeginUpdateEventArgs.__class = true;
ASPxClientDashboardEndUpdateEventHandler.__class = true;
ASPxClientDashboardEndUpdateEventArgs.__class = true;
ASPxClientDashboardViewer.__class = true;
ASPxClientDashboardActionAvailabilityChangedEventHandler.__class = true;
ASPxClientDashboardActionAvailabilityChangedEventArgs.__class = true;
ASPxClientDashboardDataLoadingErrorEventHandler.__class = true;
ASPxClientDashboardDataLoadingErrorEventArgs.__class = true;
ASPxClientDashboardItemAction.__class = true;
ASPxClientDashboardMasterFilterSetEventHandler.__class = true;
ASPxClientDashboardMasterFilterSetEventArgs.__class = true;
ASPxClientDashboardMasterFilterClearedEventHandler.__class = true;
ASPxClientDashboardMasterFilterClearedEventArgs.__class = true;
ASPxClientDashboardDrillDownPerformedEventHandler.__class = true;
ASPxClientDashboardDrillDownPerformedEventArgs.__class = true;
ASPxClientDashboardDrillUpPerformedEventHandler.__class = true;
ASPxClientDashboardDrillUpPerformedEventArgs.__class = true;
IExtension.__class = true;
DashboardControl.__class = true;
DashboardParameterDialogExtension.__class = true;
DashboardExportExtension.__class = true;
DashboardClientApiExtension.__class = true;
DashboardCurrencyEditorExtension.__class = true;
DataSourceBrowserExtension.__class = true;
DataSourceWizardExtension.__class = true;
DashboadItemMenuExtension.__class = true;
UndoRedoExtension.__class = true;
BindingPanelExtension.__class = true;
DashboardColorSchemeEditorExtension.__class = true;
ConversionPanelExtension.__class = true;
SaveDashboardExtension.__class = true;
CreateDashboardExtension.__class = true;
OpenDashboardExtension.__class = true;
InteractivityPanelExtension.__class = true;
OptionsPanelExtension.__class = true;
DashboardTitleEditorExtension.__class = true;
DashboardPanelExtension.__class = true;
AvailableDataSourcesExtension.__class = true;
DashboardMenuItem.__class = true;
DashboardToolboxItem.__class = true;
DashboardToolbarItem.__class = true;
DashboardToolboxGroup.__class = true;
DashboardToolbarGroup.__class = true;
ToolboxExtension.__class = true;
DashboardParameterEditorExtension.__class = true;
ASPxClientEditBase.__class = true;
ASPxClientEdit.__class = true;
ASPxClientBinaryImage.__class = true;
ASPxClientButton.__class = true;
ASPxClientButtonClickEventHandler.__class = true;
ASPxClientButtonClickEventArgs.__class = true;
ASPxClientCalendar.__class = true;
ASPxClientCalendarCustomDisabledDateEventArgs.__class = true;
ASPxClientCalendarCustomDisabledDateEventHandler.__class = true;
ASPxClientCaptcha.__class = true;
ASPxClientCheckBox.__class = true;
ASPxClientRadioButton.__class = true;
ASPxClientTextEdit.__class = true;
ASPxClientTextBoxBase.__class = true;
ASPxClientButtonEditBase.__class = true;
ASPxClientDropDownEditBase.__class = true;
ASPxClientColorEdit.__class = true;
ASPxClientComboBox.__class = true;
ASPxClientDateEdit.__class = true;
ASPxClientParseDateEventArgs.__class = true;
ASPxClientParseDateEventHandler.__class = true;
ASPxClientDropDownEdit.__class = true;
ASPxClientEditKeyEventHandler.__class = true;
ASPxClientEditKeyEventArgs.__class = true;
ASPxClientEditValidationEventHandler.__class = true;
ASPxClientEditValidationEventArgs.__class = true;
ASPxClientFilterControl.__class = true;
ASPxClientFilterAppliedEventHandler.__class = true;
ASPxClientFilterAppliedEventArgs.__class = true;
ASPxClientListEdit.__class = true;
ASPxClientListEditItem.__class = true;
ASPxClientListBox.__class = true;
ASPxClientCheckListBase.__class = true;
ASPxClientRadioButtonList.__class = true;
ASPxClientCheckBoxList.__class = true;
ASPxClientListEditItemSelectedChangedEventHandler.__class = true;
ASPxClientListEditItemSelectedChangedEventArgs.__class = true;
ASPxClientProgressBar.__class = true;
ASPxClientSpinEditBase.__class = true;
ASPxClientSpinEdit.__class = true;
ASPxClientTimeEdit.__class = true;
ASPxClientStaticEdit.__class = true;
ASPxClientEditEventHandler.__class = true;
ASPxClientEditClickEventArgs.__class = true;
ASPxClientHyperLink.__class = true;
ASPxClientImageBase.__class = true;
ASPxClientImage.__class = true;
ASPxClientLabel.__class = true;
ASPxClientTextBox.__class = true;
ASPxClientMemo.__class = true;
ASPxClientButtonEdit.__class = true;
ASPxClientButtonEditClickEventHandler.__class = true;
ASPxClientButtonEditClickEventArgs.__class = true;
ASPxClientTokenBox.__class = true;
ASPxClientTrackBar.__class = true;
ASPxClientTrackBarPositionChangingEventHandler.__class = true;
ASPxClientTrackBarPositionChangingEventArgs.__class = true;
ASPxClientValidationSummary.__class = true;
ASPxClientValidationSummaryVisibilityChangedEventHandler.__class = true;
ASPxClientValidationSummaryVisibilityChangedEventArgs.__class = true;
ASPxClientGaugeControl.__class = true;
ASPxClientGridColumnMovingTargetPosition.__class = true;
ASPxClientGridBase.__class = true;
ASPxClientGridColumnBase.__class = true;
ASPxClientGridViewCallbackCommand.__class = true;
ASPxClientGridToolbarItemClickEventHandler.__class = true;
ASPxClientGridToolbarItemClickEventArgs.__class = true;
ASPxClientGridLookup.__class = true;
ASPxClientCardView.__class = true;
ASPxClientCardViewColumn.__class = true;
ASPxClientCardViewValuesCallback.__class = true;
ASPxClientCardViewColumnCancelEventHandler.__class = true;
ASPxClientCardViewColumnCancelEventArgs.__class = true;
ASPxClientCardViewCardClickEventHandler.__class = true;
ASPxClientCardViewCardClickEventArgs.__class = true;
ASPxClientCardViewCustomButtonEventHandler.__class = true;
ASPxClientCardViewCustomButtonEventArgs.__class = true;
ASPxClientCardViewSelectionEventHandler.__class = true;
ASPxClientCardViewSelectionEventArgs.__class = true;
ASPxClientCardViewBatchEditStartEditingEventHandler.__class = true;
ASPxClientCardViewBatchEditStartEditingEventArgs.__class = true;
ASPxClientCardViewBatchEditEndEditingEventHandler.__class = true;
ASPxClientCardViewBatchEditEndEditingEventArgs.__class = true;
ASPxClientCardViewBatchEditCardValidatingEventHandler.__class = true;
ASPxClientCardViewBatchEditCardValidatingEventArgs.__class = true;
ASPxClientCardViewBatchEditConfirmShowingEventHandler.__class = true;
ASPxClientCardViewBatchEditConfirmShowingEventArgs.__class = true;
ASPxClientCardViewBatchEditTemplateCellFocusedEventHandler.__class = true;
ASPxClientCardViewBatchEditTemplateCellFocusedEventArgs.__class = true;
ASPxClientCardViewBatchEditChangesSavingEventHandler.__class = true;
ASPxClientCardViewBatchEditChangesSavingEventArgs.__class = true;
ASPxClientCardViewBatchEditChangesCancelingEventHandler.__class = true;
ASPxClientCardViewBatchEditChangesCancelingEventArgs.__class = true;
ASPxClientCardViewBatchEditCardInsertingEventHandler.__class = true;
ASPxClientCardViewBatchEditCardInsertingEventArgs.__class = true;
ASPxClientCardViewBatchEditCardDeletingEventHandler.__class = true;
ASPxClientCardViewBatchEditCardDeletingEventArgs.__class = true;
ASPxClientCardViewFocusedCellChangingEventHandler.__class = true;
ASPxClientCardViewFocusedCellChangingEventArgs.__class = true;
ASPxClientCardViewBatchEditApi.__class = true;
ASPxClientCardViewCellInfo.__class = true;
ASPxClientGridView.__class = true;
ASPxClientGridViewColumn.__class = true;
ASPxClientGridViewValuesCallback.__class = true;
ASPxClientGridViewColumnCancelEventHandler.__class = true;
ASPxClientGridViewColumnCancelEventArgs.__class = true;
ASPxClientGridViewColumnProcessingModeEventHandler.__class = true;
ASPxClientGridViewColumnProcessingModeEventArgs.__class = true;
ASPxClientGridViewRowCancelEventHandler.__class = true;
ASPxClientGridViewRowCancelEventArgs.__class = true;
ASPxClientGridViewSelectionEventHandler.__class = true;
ASPxClientGridViewSelectionEventArgs.__class = true;
ASPxClientGridViewRowClickEventHandler.__class = true;
ASPxClientGridViewRowClickEventArgs.__class = true;
ASPxClientGridViewContextMenuEventHandler.__class = true;
ASPxClientGridViewContextMenuEventArgs.__class = true;
ASPxClientGridViewContextMenuItemClickEventHandler.__class = true;
ASPxClientGridViewContextMenuItemClickEventArgs.__class = true;
ASPxClientGridViewCustomButtonEventHandler.__class = true;
ASPxClientGridViewCustomButtonEventArgs.__class = true;
ASPxClientGridViewColumnMovingEventHandler.__class = true;
ASPxClientGridViewColumnMovingEventArgs.__class = true;
ASPxClientGridViewBatchEditConfirmShowingEventHandler.__class = true;
ASPxClientGridViewBatchEditConfirmShowingEventArgs.__class = true;
ASPxClientGridViewBatchEditStartEditingEventHandler.__class = true;
ASPxClientGridViewBatchEditStartEditingEventArgs.__class = true;
ASPxClientGridViewBatchEditEndEditingEventHandler.__class = true;
ASPxClientGridViewBatchEditEndEditingEventArgs.__class = true;
ASPxClientGridViewBatchEditRowValidatingEventHandler.__class = true;
ASPxClientGridViewBatchEditRowValidatingEventArgs.__class = true;
ASPxClientGridViewBatchEditTemplateCellFocusedEventHandler.__class = true;
ASPxClientGridViewBatchEditTemplateCellFocusedEventArgs.__class = true;
ASPxClientGridViewBatchEditChangesSavingEventHandler.__class = true;
ASPxClientGridViewBatchEditChangesSavingEventArgs.__class = true;
ASPxClientGridViewBatchEditChangesCancelingEventHandler.__class = true;
ASPxClientGridViewBatchEditChangesCancelingEventArgs.__class = true;
ASPxClientGridViewBatchEditRowInsertingEventHandler.__class = true;
ASPxClientGridViewBatchEditRowInsertingEventArgs.__class = true;
ASPxClientGridViewBatchEditRowDeletingEventHandler.__class = true;
ASPxClientGridViewBatchEditRowDeletingEventArgs.__class = true;
ASPxClientGridViewFocusedCellChangingEventHandler.__class = true;
ASPxClientGridViewFocusedCellChangingEventArgs.__class = true;
ASPxClientGridViewCellInfo.__class = true;
ASPxClientGridViewBatchEditApi.__class = true;
ASPxClientVerticalGrid.__class = true;
ASPxClientVerticalGridRow.__class = true;
ASPxClientVerticalGridValuesCallback.__class = true;
ASPxClientVerticalGridRowCancelEventHandler.__class = true;
ASPxClientVerticalGridRowCancelEventArgs.__class = true;
ASPxClientVerticalGridRecordClickEventHandler.__class = true;
ASPxClientVerticalGridRecordClickEventArgs.__class = true;
ASPxClientVerticalGridCustomButtonEventHandler.__class = true;
ASPxClientVerticalGridCustomButtonEventArgs.__class = true;
ASPxClientVerticalGridSelectionEventHandler.__class = true;
ASPxClientVerticalGridSelectionEventArgs.__class = true;
ASPxClientVerticalGridRowExpandedEventHandler.__class = true;
ASPxClientVerticalGridRowExpandedEventArgs.__class = true;
ASPxClientVerticalGridRowExpandingEventHandler.__class = true;
ASPxClientVerticalGridRowExpandingEventArgs.__class = true;
ASPxClientVerticalGridBatchEditStartEditingEventHandler.__class = true;
ASPxClientVerticalGridBatchEditStartEditingEventArgs.__class = true;
ASPxClientVerticalGridBatchEditEndEditingEventHandler.__class = true;
ASPxClientVerticalGridBatchEditEndEditingEventArgs.__class = true;
ASPxClientVerticalGridBatchEditRecordValidatingEventHandler.__class = true;
ASPxClientVerticalGridBatchEditRecordValidatingEventArgs.__class = true;
ASPxClientVerticalGridBatchEditConfirmShowingEventHandler.__class = true;
ASPxClientVerticalGridBatchEditConfirmShowingEventArgs.__class = true;
ASPxClientVerticalGridBatchEditTemplateCellFocusedEventHandler.__class = true;
ASPxClientVerticalGridBatchEditTemplateCellFocusedEventArgs.__class = true;
ASPxClientVerticalGridBatchEditChangesSavingEventHandler.__class = true;
ASPxClientVerticalGridBatchEditChangesSavingEventArgs.__class = true;
ASPxClientVerticalGridBatchEditChangesCancelingEventHandler.__class = true;
ASPxClientVerticalGridBatchEditChangesCancelingEventArgs.__class = true;
ASPxClientVerticalGridBatchEditRecordInsertingEventHandler.__class = true;
ASPxClientVerticalGridBatchEditRecordInsertingEventArgs.__class = true;
ASPxClientVerticalGridBatchEditRecordDeletingEventHandler.__class = true;
ASPxClientVerticalGridBatchEditRecordDeletingEventArgs.__class = true;
ASPxClientVerticalGridFocusedCellChangingEventHandler.__class = true;
ASPxClientVerticalGridFocusedCellChangingEventArgs.__class = true;
ASPxClientVerticalGridCellInfo.__class = true;
ASPxClientVerticalGridCallbackCommand.__class = true;
ASPxClientVerticalGridBatchEditApi.__class = true;
ASPxClientHtmlEditorCommandStyleSettings.__class = true;
ASPxClientHtmlEditorCommandArguments.__class = true;
ASPxClientHtmlEditorInsertImageCommandArguments.__class = true;
ASPxClientHtmlEditorChangeImageCommandArguments.__class = true;
ASPxClientHtmlEditorInsertLinkCommandArguments.__class = true;
ASPxClientHtmlEditorChangeMediaElementCommandArguments.__class = true;
ASPxClientHtmlEditorChangeHtml5MediaElementCommandArguments.__class = true;
ASPxClientHtmlEditorInsertAudioCommandArguments.__class = true;
ASPxClientHtmlEditorChangeAudioCommandArguments.__class = true;
ASPxClientHtmlEditorInsertVideoCommandArguments.__class = true;
ASPxClientHtmlEditorChangeVideoCommandArguments.__class = true;
ASPxClientHtmlEditorInsertFlashCommandArguments.__class = true;
ASPxClientHtmlEditorChangeFlashCommandArguments.__class = true;
ASPxClientHtmlEditorInsertYouTubeVideoCommandArguments.__class = true;
ASPxClientHtmlEditorChangeYouTubeVideoCommandArguments.__class = true;
ASPxClientHtmlEditorTablePropertiesCommandArguments.__class = true;
ASPxClientHtmlEditorInsertTableCommandArguments.__class = true;
ASPxClientHtmlEditorTableCellPropertiesCommandArguments.__class = true;
ASPxClientHtmlEditorTableRowPropertiesCommandArguments.__class = true;
ASPxClientHtmlEditorTableColumnPropertiesCommandArguments.__class = true;
ASPxClientCommandConsts.__class = true;
ASPxClientHtmlEditorDialogInitializedEventHandler.__class = true;
ASPxClientHtmlEditorDialogInitializedEventArgs.__class = true;
ASPxClientHtmlEditorDialogCloseEventArgs.__class = true;
ASPxClientHtmlEditorDialogClosingEventHandler.__class = true;
ASPxClientHtmlEditorDialogClosingEventArgs.__class = true;
ASPxClientHtmlEditorDialogClosedEventHandler.__class = true;
ASPxClientHtmlEditorDialogClosedEventArgs.__class = true;
ASPxClientHtmlEditorCommandExecutingEventHandler.__class = true;
ASPxClientHtmlEditorCommandExecutingEventArgs.__class = true;
ASPxClientHtmlEditorCommandEventHandler.__class = true;
ASPxClientHtmlEditorCommandEventArgs.__class = true;
ASPxClientHtmlEditorCustomDialogEventHandler.__class = true;
ASPxClientHtmlEditorCustomDialogEventArgs.__class = true;
ASPxClientHtmlEditorCustomDialogCloseEventArgsBase.__class = true;
ASPxClientHtmlEditorCustomDialogClosingEventHandler.__class = true;
ASPxClientHtmlEditorCustomDialogClosingEventArgs.__class = true;
ASPxClientHtmlEditorCustomDialogClosedEventHandler.__class = true;
ASPxClientHtmlEditorCustomDialogClosedEventArgs.__class = true;
ASPxClientHtmlEditorValidationEventHandler.__class = true;
ASPxClientHtmlEditorValidationEventArgs.__class = true;
ASPxClientHtmlEditorTabEventHandler.__class = true;
ASPxClientHtmlEditorTabEventArgs.__class = true;
ASPxClientHtmlEditorTabCancelEventHandler.__class = true;
ASPxClientHtmlEditorTabCancelEventArgs.__class = true;
ASPxClientHtmlEditorBeforePasteEventHandler.__class = true;
ASPxClientHtmlEditorBeforePasteEventArgs.__class = true;
ASPxClientHtmlEditor.__class = true;
ASPxClientHtmlEditorDialogBase.__class = true;
ASPxClientHtmlEditorEditElementDialog.__class = true;
ASPxClientHtmlEditorChangeElementPropertiesDialog.__class = true;
ASPxClientHtmlEditorLinkDialog.__class = true;
ASPxClientHtmlEditorPlaceholderDialog.__class = true;
ASPxClientHtmlEditorPasteFromWordDialog.__class = true;
ASPxClientHtmlEditorMediaDialogBase.__class = true;
ASPxClientHtmlEditorImageDialog.__class = true;
ASPxClientHtmlEditorFlashDialog.__class = true;
ASPxClientHtmlEditorAudioDialog.__class = true;
ASPxClientHtmlEditorVideoDialog.__class = true;
ASPxClientHtmlEditorYouTubeDialog.__class = true;
ASPxClientHtmlEditorTableDialogBase.__class = true;
ASPxClientHtmlEditorTableDialog.__class = true;
ASPxClientHtmlEditorInsertTableDialog.__class = true;
ASPxClientHtmlEditorTableElementPropertiesDialog.__class = true;
ASPxClientHtmlEditorTableCellPropertiesDialog.__class = true;
ASPxClientHtmlEditorTableRowPropertiesDialog.__class = true;
ASPxClientHtmlEditorTableColumnPropertiesDialog.__class = true;
ASPxClientHtmlEditorMediaPreloadMode.__class = true;
ASPxClientHtmlEditorSelection.__class = true;
ASPxClientPivotGrid.__class = true;
ASPxClientClickEventHandler.__class = true;
ASPxClientClickEventArgs.__class = true;
ASPxClientPivotMenuItemClickEventHandler.__class = true;
ASPxClientPivotMenuItemClickEventArgs.__class = true;
ASPxClientPivotCustomization.__class = true;
ASPxClientRichEditCustomCommandExecutedEventHandler.__class = true;
ASPxClientRichEditCustomCommandExecutedEventArgs.__class = true;
ASPxClientRichEditHyperlinkClickEventHandler.__class = true;
ASPxClientRichEditHyperlinkClickEventArgs.__class = true;
ASPxClientRichEdit.__class = true;
RichEditCommands.__class = true;
CommandBase.__class = true;
CommandWithSimpleStateBase.__class = true;
CommandWithBooleanStateBase.__class = true;
SimpleCommandState.__class = true;
CommandState.__class = true;
RichEditDocument.__class = true;
AbstractNumberingList.__class = true;
Paragraph.__class = true;
Field.__class = true;
Bookmark.__class = true;
Section.__class = true;
HeaderFooter.__class = true;
InlinePictureInfo.__class = true;
RichEditFileInfo.__class = true;
RichEditSelection.__class = true;
Interval.__class = true;
SpellingInfo.__class = true;
MisspelledInterval.__class = true;
StyleBase.__class = true;
ParagraphStyle.__class = true;
CharacterStyle.__class = true;
TableStyle.__class = true;
SubDocument.__class = true;
Table.__class = true;
TableRow.__class = true;
TableCell.__class = true;
RichEditUnitConverter.__class = true;
OpenInsertBookmarkDialogCommand.__class = true;
InsertBookmarkCommand.__class = true;
DeleteBookmarkCommand.__class = true;
GoToBookmarkCommand.__class = true;
PasteCommand.__class = true;
CopyCommand.__class = true;
CutCommand.__class = true;
CreateFieldCommand.__class = true;
UpdateFieldCommand.__class = true;
ShowFieldCodesCommand.__class = true;
ShowAllFieldCodesCommand.__class = true;
UpdateAllFieldsCommand.__class = true;
CreateDateFieldCommand.__class = true;
CreateTimeFieldCommand.__class = true;
CreatePageFieldCommand.__class = true;
GoToDataRecordCommand.__class = true;
DataRecordOptions.__class = true;
GoToFirstDataRecordCommand.__class = true;
GoToPreviousDataRecordCommand.__class = true;
GoToNextDataRecordCommand.__class = true;
GoToLastDataRecordCommand.__class = true;
ShowMergedDataCommand.__class = true;
MergeFieldDialogCommand.__class = true;
CreateMergeFieldCommand.__class = true;
MailMergeDialogCommand.__class = true;
MailMergeAndDownloadCommand.__class = true;
MailMergeAndSaveAsCommand.__class = true;
CreatePageCountFieldCommand.__class = true;
MailMergeSettings.__class = true;
FileNewCommand.__class = true;
FileOpenCommand.__class = true;
FileOpenDialogCommand.__class = true;
FileSaveCommand.__class = true;
FileSaveAsCommand.__class = true;
FileDownloadCommand.__class = true;
FileSaveAsDialogCommand.__class = true;
FilePrintCommand.__class = true;
OpenFindPanelCommand.__class = true;
OpenFindAndReplaceDialogCommand.__class = true;
FindAllCommand.__class = true;
HideFindResultsCommand.__class = true;
ReplaceAllCommand.__class = true;
ReplaceNextCommand.__class = true;
OpenLayoutOptionsDialogCommand.__class = true;
InsertFloatingTextBoxCommand.__class = true;
ChangeFloatingObjectLockAnchorCommand.__class = true;
ChangeFloatingObjectAlignmentPositionCommand.__class = true;
ChangeFloatingObjectAbsolutePositionCommand.__class = true;
ChangeFloatingObjectRelativePositionCommand.__class = true;
ChangeFloatingObjectTextWrappingCommand.__class = true;
ChangeFloatingObjectAbsoluteSizeCommand.__class = true;
ChangeTextBoxRelativeSizeCommand.__class = true;
ChangeFloatingObjectRotationCommand.__class = true;
ChangeFloatingObjectLockAspectRatioCommand.__class = true;
ChangeFloatingObjectFillColorCommand.__class = true;
ChangeFloatingObjectOutlineColorCommand.__class = true;
ChangeFloatingObjectOutlineWidthCommand.__class = true;
ChangeTextBoxContentMarginsCommand.__class = true;
FloatingObjectAlignmentPositionSettings.__class = true;
FloatingObjectAbsolutePositionSettings.__class = true;
FloatingObjectRelativePositionSettings.__class = true;
FloatingObjectTextWrappingSettings.__class = true;
FloatingObjectAbsoluteSizeSettings.__class = true;
TextBoxRelativeSizeSettings.__class = true;
FloatingObjectShapeSettings.__class = true;
UndoCommand.__class = true;
RedoCommand.__class = true;
OpenInsertHyperlinkDialogCommand.__class = true;
InsertHyperlinkCommand.__class = true;
DeleteHyperlinkCommand.__class = true;
DeleteHyperlinksCommand.__class = true;
OpenHyperlinkCommand.__class = true;
HyperlinkSettings.__class = true;
InsertPageBreakCommand.__class = true;
InsertColumnBreakCommand.__class = true;
InsertSectionBreakNextPageCommand.__class = true;
InsertSectionBreakEvenPageCommand.__class = true;
InsertSectionBreakOddPageCommand.__class = true;
InsertLineBreakCommand.__class = true;
ToggleBulletedListCommand.__class = true;
ToggleNumberingListCommand.__class = true;
ToggleMultilevelListCommand.__class = true;
OpenNumberingListDialogCommand.__class = true;
OpenCustomNumberingListDialogCommand.__class = true;
ChangeCustomNumberingListCommand.__class = true;
RestartNumberingListCommand.__class = true;
IncrementNumberingIndentCommand.__class = true;
DecrementNumberingIndentCommand.__class = true;
ContinueNumberingListCommand.__class = true;
InsertNumerationCommand.__class = true;
RemoveNumerationCommand.__class = true;
ListLevelSettings.__class = true;
OpenInsertPictureDialogCommand.__class = true;
InsertPictureCommand.__class = true;
OpenInsertSymbolDialogCommand.__class = true;
InsertSymbolCommand.__class = true;
InsertParagraphCommand.__class = true;
InsertTextCommand.__class = true;
DeleteCommand.__class = true;
RemovePrevWordCommand.__class = true;
RemoveNextWordCommand.__class = true;
BackspaceCommand.__class = true;
ChangePictureScaleCommand.__class = true;
MoveContentCommand.__class = true;
CopyContentCommand.__class = true;
InsertTabCommand.__class = true;
Scale.__class = true;
ChangePageMarginsCommand.__class = true;
OpenPageMarginsDialogCommand.__class = true;
ChangePageOrientationCommand.__class = true;
OpenPagePaperSizeDialogCommand.__class = true;
SetPageSizeDialogCommand.__class = true;
ChangePageSizeCommand.__class = true;
ChangeSectionEqualColumnCountCommand.__class = true;
OpenSectionColumnsDialogCommand.__class = true;
ChangeSectionColumnsCommand.__class = true;
ChangePageColorCommand.__class = true;
InsertHeaderCommand.__class = true;
InsertFooterCommand.__class = true;
LinkHeaderFooterToPreviousCommand.__class = true;
GoToFooterCommand.__class = true;
GoToHeaderCommand.__class = true;
GoToNextHeaderFooterCommand.__class = true;
GoToPreviousHeaderFooterCommand.__class = true;
SetDifferentFirstPageHeaderFooterCommand.__class = true;
SetDifferentOddAndEvenPagesHeaderFooterCommand.__class = true;
CloseHeaderFooterCommand.__class = true;
SectionColumn.__class = true;
Size.__class = true;
Margins.__class = true;
IncreaseIndentCommand.__class = true;
DecreaseIndentCommand.__class = true;
ShowHiddenSymbolsCommand.__class = true;
ToggleParagraphAlignmentLeftCommand.__class = true;
ToggleParagraphAlignmentCenterCommand.__class = true;
ToggleParagraphAlignmentRightCommand.__class = true;
ToggleParagraphAlignmentJustifyCommand.__class = true;
SetSingleParagraphSpacingCommand.__class = true;
SetSesquialteralParagraphSpacingCommand.__class = true;
SetDoubleParagraphSpacingCommand.__class = true;
AddSpacingBeforeParagraphCommand.__class = true;
AddSpacingAfterParagraphCommand.__class = true;
RemoveSpacingBeforeParagraphCommand.__class = true;
RemoveSpacingAfterParagraphCommand.__class = true;
ChangeParagraphBackColorCommand.__class = true;
OpenParagraphFormattingDialogCommand.__class = true;
ChangeParagraphFormattingCommand.__class = true;
IncrementParagraphLeftIndentCommand.__class = true;
DecrementParagraphLeftIndentCommand.__class = true;
OpenTabsDialogCommand.__class = true;
ChangeTabsCommand.__class = true;
TabsSettings.__class = true;
TabSettings.__class = true;
ParagraphFormattingSettings.__class = true;
AssignShortcutCommand.__class = true;
OpenSpellingDialogCommand.__class = true;
OpenInsertTableDialogCommand.__class = true;
InsertTableCommand.__class = true;
OpenTableFormattingDialogCommand.__class = true;
ChangeTableFormattingCommand.__class = true;
ChangeTableRowPreferredHeightCommand.__class = true;
ChangeTableCellPreferredWidthCommand.__class = true;
ChangeTableColumnPreferredWidthCommand.__class = true;
ChangeTableCellFormattingCommand.__class = true;
InsertTableColumnToTheLeftCommand.__class = true;
InsertTableColumnToTheRightCommand.__class = true;
InsertTableRowBelowCommand.__class = true;
InsertTableRowAboveCommand.__class = true;
DeleteTableRowsCommand.__class = true;
DeleteTableColumnsCommand.__class = true;
InsertTableCellWithShiftToTheLeftCommand.__class = true;
DeleteTableCellsWithShiftHorizontallyCommand.__class = true;
DeleteTableCellsWithShiftVerticallyCommand.__class = true;
DeleteTableCommand.__class = true;
InsertTableCellsDialogCommand.__class = true;
DeleteTableCellsDialogCommand.__class = true;
MergeTableCellsCommand.__class = true;
SplitTableCellsDialogCommand.__class = true;
SplitTableCellsCommand.__class = true;
InsertTableCellsWithShiftToTheVerticallyCommand.__class = true;
OpenTableBordersAndShadingDialogCommand.__class = true;
ChangeTableBordersAndShadingCommand.__class = true;
ToggleTableCellAlignTopLeftCommand.__class = true;
ToggleTableCellAlignTopCenterCommand.__class = true;
ToggleTableCellAlignTopRightCommand.__class = true;
ToggleTableCellAlignMiddleLeftCommand.__class = true;
ToggleTableCellAlignMiddleCenterCommand.__class = true;
ToggleTableCellAlignMiddleRightCommand.__class = true;
ToggleTableCellAlignBottomLeftCommand.__class = true;
ToggleTableCellAlignBottomCenterCommand.__class = true;
ToggleTableCellAlignBottomRightCommand.__class = true;
ChangeTableStyleCommand.__class = true;
ToggleTableCellTopBorderCommand.__class = true;
ToggleTableCellRightBorderCommand.__class = true;
ToggleTableCellBottomBorderCommand.__class = true;
ToggleTableCellLeftBorderCommand.__class = true;
RemoveTableCellBordersCommand.__class = true;
ToggleTableCellAllBordersCommand.__class = true;
ToggleTableCellInsideBordersCommand.__class = true;
ToggleTableCellInsideHorizontalBordersCommand.__class = true;
ToggleTableCellInsideVerticalBordersCommand.__class = true;
ToggleTableCellOutsideBordersCommand.__class = true;
ChangeTableLookCommand.__class = true;
ChangeTableBorderRepositoryItemCommand.__class = true;
ChangeTableCellShadingCommand.__class = true;
ShowTableGridLinesCommand.__class = true;
TableLookSettings.__class = true;
TableBordersSettings.__class = true;
TableBorderSettings.__class = true;
TableCellFormattingSettings.__class = true;
TableFormattingSettings.__class = true;
TableWidthUnit.__class = true;
TableHeightUnit.__class = true;
ChangeFontNameCommand.__class = true;
ChangeFontSizeCommand.__class = true;
IncreaseFontSizeCommand.__class = true;
DecreaseFontSizeCommand.__class = true;
MakeTextUpperCaseCommand.__class = true;
MakeTextLowerCaseCommand.__class = true;
CapitalizeEachWordTextCaseCommand.__class = true;
ToggleTextCaseCommand.__class = true;
ChangeFontBoldCommand.__class = true;
ChangeFontItalicCommand.__class = true;
ChangeFontUnderlineCommand.__class = true;
ChangeFontStrikeoutCommand.__class = true;
ChangeFontSuperscriptCommand.__class = true;
ChangeFontSubscriptCommand.__class = true;
ChangeFontForeColorCommand.__class = true;
ChangeFontBackColorCommand.__class = true;
ClearFormattingCommand.__class = true;
ChangeStyleCommand.__class = true;
OpenFontFormattingDialogCommand.__class = true;
MakeTextSentenceCaseCommand.__class = true;
SwitchTextCaseCommand.__class = true;
ChangeFontFormattingCommand.__class = true;
FontFormattingSettings.__class = true;
ShowHorizontalRulerCommand.__class = true;
SetFullscreenCommand.__class = true;
ASPxClientAppointmentFlags.__class = true;
ASPxClientAppointment.__class = true;
ASPxClientPoint.__class = true;
ASPxClientRect.__class = true;
ASPxClientRecurrenceInfo.__class = true;
ASPxClientRecurrenceRange.__class = true;
ASPxClientRecurrenceType.__class = true;
ASPxClientWeekDays.__class = true;
ASPxClientWeekOfMonth.__class = true;
ASPxSchedulerDateTimeHelper.__class = true;
ASPxClientWeekDaysCheckEdit.__class = true;
ASPxClientRecurrenceRangeControl.__class = true;
ASPxClientRecurrenceControlBase.__class = true;
ASPxClientDailyRecurrenceControl.__class = true;
ASPxClientWeeklyRecurrenceControl.__class = true;
ASPxClientMonthlyRecurrenceControl.__class = true;
ASPxClientYearlyRecurrenceControl.__class = true;
DefaultRecurrenceRuleValuesAccessor.__class = true;
DailyRecurrenceValuesAccessor.__class = true;
WeeklyRecurrenceValuesAccessor.__class = true;
MonthlyRecurrenceValuesAccessor.__class = true;
YearlyRecurrenceValuesAccessor.__class = true;
ASPxClientFormBase.__class = true;
ASPxClientRecurrenceTypeEdit.__class = true;
AppointmentPropertyNames.__class = true;
ASPxClientTimeInterval.__class = true;
ASPxClientSchedulerRefreshAction.__class = true;
ASPxClientAppointmentOperation.__class = true;
ASPxClientScheduler.__class = true;
ASPxSchedulerViewType.__class = true;
ASPxSchedulerGroupType.__class = true;
ASPxAppointmentType.__class = true;
ASPxClientAppointmentDeletingEventHandler.__class = true;
ASPxClientAppointmentDeletingEventArgs.__class = true;
AppointmentClickEventHandler.__class = true;
AppointmentClickEventArgs.__class = true;
AppointmentsSelectionEventHandler.__class = true;
AppointmentsSelectionEventArgs.__class = true;
ShortcutEventHandler.__class = true;
ShortcutEventArgs.__class = true;
ActiveViewChangingEventHandler.__class = true;
ActiveViewChangingEventArgs.__class = true;
MoreButtonClickedEventHandler.__class = true;
MoreButtonClickedEventArgs.__class = true;
MenuItemClickedEventHandler.__class = true;
MenuItemClickedEventArgs.__class = true;
AppointmentDragEventHandler.__class = true;
ASPxClientAppointmentDragEventArgs.__class = true;
AppointmentDropEventHandler.__class = true;
ASPxClientAppointmentDropEventArgs.__class = true;
AppointmentResizeEventHandler.__class = true;
ASPxClientAppointmentResizeEventArgs.__class = true;
AppointmentResizingEventHandler.__class = true;
ASPxClientAppointmentResizingEventArgs.__class = true;
ASPxClientAppointmentDragInfo.__class = true;
CellClickEventHandler.__class = true;
CellClickEventArgs.__class = true;
ASPxClientSchedulerToolTipData.__class = true;
ASPxClientToolTipBase.__class = true;
ASPxClientSpellChecker.__class = true;
ASPxClientBeforeCheckEventHandler.__class = true;
ASPxClientSpellCheckerBeforeCheckEventArgs.__class = true;
ASPxClientAfterCheckEventHandler.__class = true;
ASPxClientSpellCheckerAfterCheckEventArgs.__class = true;
ASPxClientSpellCheckerStopCheckingReason.__class = true;
ASPxClientWordChangedEventHandler.__class = true;
ASPxClientSpreadsheetCustomCommandExecutedEventHandler.__class = true;
ASPxClientSpreadsheetCustomCommandExecutedEventArgs.__class = true;
ASPxClientSpreadsheetDocumentChangedEventHandler.__class = true;
ASPxClientSpreadsheetDocumentChangedEventArgs.__class = true;
ASPxClientSpreadsheetSynchronizationEventHandler.__class = true;
ASPxClientSpreadsheetSynchronizationEventArgs.__class = true;
ASPxClientSpreadsheetHyperlinkClickEventHandler.__class = true;
ASPxClientSpreadsheetHyperlinkClickEventArgs.__class = true;
ASPxClientSpreadsheetPopupMenuShowingEventHandler.__class = true;
ASPxClientSpreadsheetPopupMenuShowingEventArgs.__class = true;
ASPxClientSpreadsheet.__class = true;
ASPxClientSpreadsheetSelectionChangedEventHandler.__class = true;
ASPxClientSpreadsheetSelectionChangedEventArgs.__class = true;
ASPxClientSpreadsheetSelection.__class = true;
ASPxClientSpreadsheetPopupMenuItem.__class = true;
ASPxClientSpreadsheetPopupMenuItemCollection.__class = true;
ASPxClientTreeList.__class = true;
ASPxClientTreeListColumn.__class = true;
ASPxClientTreeListCustomDataCallbackEventArgs.__class = true;
ASPxClientTreeListCustomDataCallbackEventHandler.__class = true;
ASPxClientTreeListNodeEventArgs.__class = true;
ASPxClientTreeListNodeEventHandler.__class = true;
ASPxClientTreeListContextMenuEventArgs.__class = true;
ASPxClientTreeListContextMenuEventHandler.__class = true;
ASPxClientTreeListStartDragNodeEventArgs.__class = true;
ASPxClientTreeListStartDragNodeEventHandler.__class = true;
ASPxClientTreeListEndDragNodeEventArgs.__class = true;
ASPxClientTreeListEndDragNodeEventHandler.__class = true;
ASPxClientTreeListCustomButtonEventArgs.__class = true;
ASPxClientTreeListCustomButtonEventHandler.__class = true;
ASPxClientTreeListValuesCallback.__class = true;
ASPxClientTreeListColumnResizingEventArgs.__class = true;
ASPxClientTreeListColumnResizingEventHandler.__class = true;
ASPxClientTreeListColumnResizedEventArgs.__class = true;
ASPxClientTreeListColumnResizedEventHandler.__class = true;
ASPxClientTreeListToolbarItemClickEventArgs.__class = true;
ASPxClientTreeListToolbarItemClickEventHandler.__class = true;
BootstrapClientAccordion.__class = true;
BootstrapClientBinaryImage.__class = true;
BootstrapClientButton.__class = true;
BootstrapClientCalendar.__class = true;
BootstrapClientCallbackPanel.__class = true;
BootstrapClientChartBase.__class = true;
BootstrapClientChart.__class = true;
BootstrapClientPolarChart.__class = true;
BootstrapClientPieChart.__class = true;
BootstrapClientChartBaseDoneEventHandler.__class = true;
BootstrapClientChartBaseLegendClickEventHandler.__class = true;
BootstrapClientCoordinateSystemChartArgumentAxisClickEventHandler.__class = true;
BootstrapClientChartBasePointClickEventHandler.__class = true;
BootstrapClientChartBasePointHoverChangedEventHandler.__class = true;
BootstrapClientChartBasePointSelectionChangedEventHandler.__class = true;
BootstrapClientChartBaseTooltipHiddenEventHandler.__class = true;
BootstrapClientChartBaseTooltipShownEventHandler.__class = true;
BootstrapClientCoordinateSystemChartSeriesClickEventHandler.__class = true;
BootstrapClientCoordinateSystemChartSeriesHoverChangedEventHandler.__class = true;
BootstrapClientCoordinateSystemChartSeriesSelectionChangedEventHandler.__class = true;
BootstrapClientChartZoomStartEventHandler.__class = true;
BootstrapClientChartZoomEndEventHandler.__class = true;
BootstrapUIWidgetEventArgsBase.__class = true;
BootstrapClientChartZoomEndEventArgs.__class = true;
BootstrapClientCheckBox.__class = true;
BootstrapClientRadioButton.__class = true;
BootstrapClientComboBox.__class = true;
BootstrapClientDateEdit.__class = true;
BootstrapClientDropDownEdit.__class = true;
BootstrapClientFormLayout.__class = true;
BootstrapClientGridView.__class = true;
BootstrapClientHyperLink.__class = true;
BootstrapClientImage.__class = true;
BootstrapClientListBox.__class = true;
BootstrapClientCheckBoxList.__class = true;
BootstrapClientRadioButtonList.__class = true;
BootstrapClientMenu.__class = true;
BootstrapClientPager.__class = true;
BootstrapClientPopupControl.__class = true;
BootstrapClientPopupMenu.__class = true;
BootstrapClientProgressBar.__class = true;
BootstrapClientSpinEdit.__class = true;
BootstrapClientTabControl.__class = true;
BootstrapClientPageControl.__class = true;
BootstrapClientTextBox.__class = true;
BootstrapClientMemo.__class = true;
BootstrapClientButtonEdit.__class = true;
BootstrapClientTreeView.__class = true;
BootstrapUIWidgetBase.__class = true;
BootstrapUIWidgetInitializedEventHandler.__class = true;
BootstrapUIWidgetDrawnEventHandler.__class = true;
BootstrapUIWidgetDisposingEventHandler.__class = true;
BootstrapUIWidgetExportedEventHandler.__class = true;
BootstrapUIWidgetOptionChangedEventHandler.__class = true;
BootstrapUIWidgetOptionChangedEventArgs.__class = true;
BootstrapUIWidgetExportingEventHandler.__class = true;
BootstrapUIWidgetFileSavingEventHandler.__class = true;
BootstrapUIWidgetExportEventArgs.__class = true;
BootstrapUIWidgetErrorEventHandler.__class = true;
BootstrapUIWidgetErrorEventArgs.__class = true;
BootstrapUIWidgetElementActionEventArgs.__class = true;
BootstrapUIWidgetElementClickEventArgs.__class = true;
BootstrapClientUploadControl.__class = true;
MVCxClientCalendar.__class = true;
MVCxClientCallbackPanel.__class = true;
MVCxClientCardView.__class = true;
MVCxClientChart.__class = true;
MVCxClientComboBox.__class = true;
MVCxClientDataView.__class = true;
MVCxClientDateEdit.__class = true;
MVCxClientDockManager.__class = true;
MVCxClientDockPanel.__class = true;
MVCxClientFileManager.__class = true;
MVCxClientGridView.__class = true;
MVCxClientHtmlEditor.__class = true;
MVCxClientImageGallery.__class = true;
MVCxClientListBox.__class = true;
MVCxClientNavBar.__class = true;
MVCxClientPivotGrid.__class = true;
MVCxClientPopupControl.__class = true;
MVCxClientDocumentViewer.__class = true;
MVCxClientReportViewer.__class = true;
MVCxClientBeforeExportRequestEventHandler.__class = true;
MVCxClientBeforeExportRequestEventArgs.__class = true;
MVCxClientReportDesigner.__class = true;
MVCxClientReportDesignerSaveCommandExecutedEventHandler.__class = true;
MVCxClientReportDesignerSaveCommandExecutedEventArgs.__class = true;
MVCxClientRichEdit.__class = true;
MVCxClientRoundPanel.__class = true;
MVCxClientScheduler.__class = true;
MVCxClientSchedulerTemplateToolTip.__class = true;
MVCxClientSchedulerToolTipDisplayingEventHandler.__class = true;
MVCxClientSchedulerToolTipDisplayingEventArgs.__class = true;
MVCxSchedulerToolTipType.__class = true;
MVCxClientSpreadsheet.__class = true;
MVCxClientPageControl.__class = true;
MVCxClientTokenBox.__class = true;
MVCxClientTreeList.__class = true;
MVCxClientTreeView.__class = true;
MVCxClientUploadControl.__class = true;
MVCxClientUtils.__class = true;
MVCxClientBeginCallbackEventHandler.__class = true;
MVCxClientBeginCallbackEventArgs.__class = true;
MVCxClientGlobalBeginCallbackEventHandler.__class = true;
MVCxClientGlobalBeginCallbackEventArgs.__class = true;
MVCxClientGlobalEvents.__class = true;
MVCxClientVerticalGrid.__class = true;
MVCxClientWebDocumentViewer.__class = true;
ASPxClientControlBase.__class = true;
ASPxClientControl.__class = true;
ASPxClientCallback.__class = true;
ASPxClientCallbackCompleteEventHandler.__class = true;
ASPxClientEventArgs.__class = true;
ASPxClientCallbackCompleteEventArgs.__class = true;
ASPxClientPanelBase.__class = true;
ASPxClientPanel.__class = true;
ASPxClientCallbackPanel.__class = true;
ASPxClientEvent.__class = true;
ASPxClientEventHandler.__class = true;
ASPxClientCancelEventHandler.__class = true;
ASPxClientCancelEventArgs.__class = true;
ASPxClientProcessingModeEventHandler.__class = true;
ASPxClientProcessingModeEventArgs.__class = true;
ASPxClientProcessingModeCancelEventHandler.__class = true;
ASPxClientProcessingModeCancelEventArgs.__class = true;
KnockoutObservableBoolean.__class = true;
KnockoutObservableArray.__class = true;
ASPxClientDataCallback.__class = true;
ASPxClientCloudControl.__class = true;
ASPxClientCloudControlItemEventHandler.__class = true;
ASPxClientCloudControlItemEventArgs.__class = true;
ASPxClientBeginCallbackEventHandler.__class = true;
ASPxClientBeginCallbackEventArgs.__class = true;
ASPxClientGlobalBeginCallbackEventHandler.__class = true;
ASPxClientGlobalBeginCallbackEventArgs.__class = true;
ASPxClientEndCallbackEventHandler.__class = true;
ASPxClientEndCallbackEventArgs.__class = true;
ASPxClientGlobalEndCallbackEventHandler.__class = true;
ASPxClientGlobalEndCallbackEventArgs.__class = true;
ASPxClientCustomDataCallbackEventHandler.__class = true;
ASPxClientCustomDataCallbackEventArgs.__class = true;
ASPxClientCallbackErrorEventHandler.__class = true;
ASPxClientCallbackErrorEventArgs.__class = true;
ASPxClientGlobalCallbackErrorEventHandler.__class = true;
ASPxClientGlobalCallbackErrorEventArgs.__class = true;
ASPxClientValidationCompletedEventHandler.__class = true;
ASPxClientValidationCompletedEventArgs.__class = true;
ASPxClientControlsInitializedEventHandler.__class = true;
ASPxClientControlsInitializedEventArgs.__class = true;
ASPxClientControlPredicate.__class = true;
ASPxClientControlAction.__class = true;
ASPxClientControlCollection.__class = true;
ASPxClientDataView.__class = true;
ASPxClientDockingFilterPredicate.__class = true;
ASPxClientDockManager.__class = true;
ASPxClientDockManagerProcessingModeCancelEventHandler.__class = true;
ASPxClientDockManagerProcessingModeCancelEventArgs.__class = true;
ASPxClientDockManagerProcessingModeEventHandler.__class = true;
ASPxClientDockManagerProcessingModeEventArgs.__class = true;
ASPxClientDockManagerEventHandler.__class = true;
ASPxClientDockManagerEventArgs.__class = true;
ASPxClientDockManagerCancelEventHandler.__class = true;
ASPxClientDockManagerCancelEventArgs.__class = true;
ASPxClientPopupControlBase.__class = true;
ASPxClientDockPanel.__class = true;
ASPxClientDockPanelProcessingModeCancelEventHandler.__class = true;
ASPxClientDockPanelProcessingModeCancelEventArgs.__class = true;
ASPxClientDockPanelProcessingModeEventHandler.__class = true;
ASPxClientDockPanelProcessingModeEventArgs.__class = true;
ASPxClientDockZone.__class = true;
ASPxClientDockZoneCancelEventHandler.__class = true;
ASPxClientDockZoneCancelEventArgs.__class = true;
ASPxClientDockZoneProcessingModeEventHandler.__class = true;
ASPxClientDockZoneProcessingModeEventArgs.__class = true;
ASPxClientFileManager.__class = true;
ASPxClientFileManagerCallback.__class = true;
ASPxClientFileManagerItem.__class = true;
ASPxClientFileManagerFile.__class = true;
ASPxClientFileManagerFolder.__class = true;
ASPxClientFileManagerAllItemsCallback.__class = true;
ASPxClientFileManagerFileEventHandler.__class = true;
ASPxClientFileManagerFileEventArgs.__class = true;
ASPxClientFileManagerFileOpenedEventHandler.__class = true;
ASPxClientFileManagerFileOpenedEventArgs.__class = true;
ASPxClientFileManagerActionEventArgsBase.__class = true;
ASPxClientFileManagerItemEditingEventHandler.__class = true;
ASPxClientFileManagerItemEditingEventArgs.__class = true;
ASPxClientFileManagerItemRenamedEventHandler.__class = true;
ASPxClientFileManagerItemRenamedEventArgs.__class = true;
ASPxClientFileManagerItemDeletedEventHandler.__class = true;
ASPxClientFileManagerItemDeletedEventArgs.__class = true;
ASPxClientFileManagerItemsDeletedEventHandler.__class = true;
ASPxClientFileManagerItemsDeletedEventArgs.__class = true;
ASPxClientFileManagerItemMovedEventHandler.__class = true;
ASPxClientFileManagerItemMovedEventArgs.__class = true;
ASPxClientFileManagerItemsMovedEventHandler.__class = true;
ASPxClientFileManagerItemsMovedEventArgs.__class = true;
ASPxClientFileManagerItemCopiedEventHandler.__class = true;
ASPxClientFileManagerItemCopiedEventArgs.__class = true;
ASPxClientFileManagerItemsCopiedEventHandler.__class = true;
ASPxClientFileManagerItemsCopiedEventArgs.__class = true;
ASPxClientFileManagerItemCreatedEventHandler.__class = true;
ASPxClientFileManagerItemCreatedEventArgs.__class = true;
ASPxClientFileManagerErrorEventHandler.__class = true;
ASPxClientFileManagerErrorEventArgs.__class = true;
ASPxClientFileManagerErrorAlertDisplayingEventHandler.__class = true;
ASPxClientFileManagerErrorAlertDisplayingEventArgs.__class = true;
ASPxClientFileManagerFileUploadingEventHandler.__class = true;
ASPxClientFileManagerFileUploadingEventArgs.__class = true;
ASPxClientFileManagerFilesUploadingEventHandler.__class = true;
ASPxClientFileManagerFilesUploadingEventArgs.__class = true;
ASPxClientFileManagerFileUploadedEventHandler.__class = true;
ASPxClientFileManagerFileUploadedEventArgs.__class = true;
ASPxClientFileManagerFilesUploadedEventHandler.__class = true;
ASPxClientFileManagerFilesUploadedEventArgs.__class = true;
ASPxClientFileManagerFileDownloadingEventHandler.__class = true;
ASPxClientFileManagerFileDownloadingEventArgs.__class = true;
ASPxClientFileManagerFocusedItemChangedEventHandler.__class = true;
ASPxClientFileManagerFocusedItemChangedEventArgs.__class = true;
ASPxClientFileManagerCurrentFolderChangedEventHandler.__class = true;
ASPxClientFileManagerCurrentFolderChangedEventArgs.__class = true;
ASPxClientFileManagerSelectionChangedEventHandler.__class = true;
ASPxClientFileManagerSelectionChangedEventArgs.__class = true;
ASPxClientFileManagerCustomCommandEventHandler.__class = true;
ASPxClientFileManagerCustomCommandEventArgs.__class = true;
ASPxClientFileManagerToolbarUpdatingEventHandler.__class = true;
ASPxClientFileManagerToolbarUpdatingEventArgs.__class = true;
ASPxClientFileManagerHighlightItemTemplateEventHandler.__class = true;
ASPxClientFileManagerHighlightItemTemplateEventArgs.__class = true;
ASPxClientFileManagerCommandConsts.__class = true;
ASPxClientFileManagerErrorConsts.__class = true;
ASPxClientMenuItem.__class = true;
ASPxClientFileManagerToolbarItem.__class = true;
ASPxClientLayoutItem.__class = true;
ASPxClientFormLayout.__class = true;
ASPxClientGlobalEvents.__class = true;
ASPxClientHiddenField.__class = true;
ASPxClientHint.__class = true;
ASPxClientHintWindow.__class = true;
ASPxClientHintShowingEventHandler.__class = true;
ASPxClientHintShowingEventArgs.__class = true;
ASPxClientHintHidingEventHandler.__class = true;
ASPxClientHintHidingEventArgs.__class = true;
ASPxClientHintOptions.__class = true;
ASPxClientImageGallery.__class = true;
ASPxClientImageGalleryCancelEventHandler.__class = true;
ASPxClientImageGalleryCancelEventArgs.__class = true;
ASPxClientImageGalleryFullscreenViewerEventHandler.__class = true;
ASPxClientImageGalleryFullscreenViewerEventArgs.__class = true;
ASPxClientImageSlider.__class = true;
ASPxClientImageSliderItemEventHandler.__class = true;
ASPxClientImageSliderItemEventArgs.__class = true;
ASPxClientImageSliderItem.__class = true;
ASPxClientImageZoomNavigator.__class = true;
ASPxClientImageZoom.__class = true;
ASPxClientLoadingPanel.__class = true;
ASPxClientMediaFileSelector.__class = true;
ASPxClientMenuBase.__class = true;
ASPxClientMenuCollection.__class = true;
ASPxClientMenu.__class = true;
ASPxClientMenuItemEventHandler.__class = true;
ASPxClientMenuItemEventArgs.__class = true;
ASPxClientMenuItemMouseEventHandler.__class = true;
ASPxClientMenuItemMouseEventArgs.__class = true;
ASPxClientMenuItemClickEventHandler.__class = true;
ASPxClientMenuItemClickEventArgs.__class = true;
ASPxClientTouchUIOptions.__class = true;
ASPxClientTouchUI.__class = true;
ScrollExtender.__class = true;
ASPxClientNavBar.__class = true;
ASPxClientNavBarGroup.__class = true;
ASPxClientNavBarItem.__class = true;
ASPxClientNavBarItemEventHandler.__class = true;
ASPxClientNavBarItemEventArgs.__class = true;
ASPxClientNavBarGroupEventHandler.__class = true;
ASPxClientNavBarGroupEventArgs.__class = true;
ASPxClientNavBarGroupCancelEventHandler.__class = true;
ASPxClientNavBarGroupCancelEventArgs.__class = true;
ASPxClientNavBarGroupClickEventHandler.__class = true;
ASPxClientNavBarGroupClickEventArgs.__class = true;
ASPxClientNewsControl.__class = true;
ASPxClientNewsControlItemEventHandler.__class = true;
ASPxClientNewsControlItemEventArgs.__class = true;
ASPxClientObjectContainer.__class = true;
ASPxClientFlashScriptCommandEventHandler.__class = true;
ASPxClientFlashScriptCommandEventArgs.__class = true;
ASPxClientOfficeDocumentLinkType.__class = true;
ASPxClientPager.__class = true;
ASPxClientPopupControl.__class = true;
ASPxClientPopupWindow.__class = true;
ASPxClientPopupWindowEventHandler.__class = true;
ASPxClientPopupWindowEventArgs.__class = true;
ASPxClientPopupWindowCancelEventHandler.__class = true;
ASPxClientPopupWindowCancelEventArgs.__class = true;
ASPxClientPopupWindowCloseUpEventHandler.__class = true;
ASPxClientPopupWindowCloseUpEventArgs.__class = true;
ASPxClientPopupWindowResizeEventHandler.__class = true;
ASPxClientPopupWindowResizeEventArgs.__class = true;
ASPxClientPopupWindowPinnedChangedEventHandler.__class = true;
ASPxClientPopupWindowPinnedChangedEventArgs.__class = true;
ASPxClientPopupControlCollection.__class = true;
ASPxClientPopupControlResizeState.__class = true;
ASPxClientPopupControlCloseReason.__class = true;
ASPxClientPopupMenu.__class = true;
ASPxClientRatingControl.__class = true;
ASPxClientRatingControlItemClickEventHandler.__class = true;
ASPxClientRatingControlItemClickEventArgs.__class = true;
ASPxClientRatingControlItemMouseEventHandler.__class = true;
ASPxClientRatingControlItemMouseEventArgs.__class = true;
ASPxClientRibbon.__class = true;
ASPxClientRibbonTab.__class = true;
ASPxClientRibbonGroup.__class = true;
ASPxClientRibbonItem.__class = true;
ASPxClientRibbonCommandExecutedEventHandler.__class = true;
ASPxClientRibbonCommandExecutedEventArgs.__class = true;
ASPxClientRibbonTabEventHandler.__class = true;
ASPxClientRibbonTabEventArgs.__class = true;
ASPxClientRibbonMinimizationStateEventHandler.__class = true;
ASPxClientRibbonMinimizationStateEventArgs.__class = true;
ASPxClientRibbonDialogBoxLauncherClickedEventHandler.__class = true;
ASPxClientRibbonDialogBoxLauncherClickedEventArgs.__class = true;
ASPxClientRibbonState.__class = true;
ASPxClientRoundPanel.__class = true;
ASPxClientSplitter.__class = true;
ASPxClientSplitterPane.__class = true;
ASPxClientSplitterPaneEventHandler.__class = true;
ASPxClientSplitterPaneEventArgs.__class = true;
ASPxClientSplitterPaneCancelEventHandler.__class = true;
ASPxClientSplitterPaneCancelEventArgs.__class = true;
ASPxClientTabControlBase.__class = true;
ASPxClientTabControl.__class = true;
ASPxClientPageControl.__class = true;
ASPxClientTab.__class = true;
ASPxClientTabControlTabEventHandler.__class = true;
ASPxClientTabControlTabEventArgs.__class = true;
ASPxClientTabControlTabCancelEventHandler.__class = true;
ASPxClientTabControlTabCancelEventArgs.__class = true;
ASPxClientTabControlTabClickEventHandler.__class = true;
ASPxClientTabControlTabClickEventArgs.__class = true;
ASPxClientTimer.__class = true;
ASPxClientTitleIndex.__class = true;
ASPxClientTitleIndexItemEventHandler.__class = true;
ASPxClientTitleIndexItemEventArgs.__class = true;
ASPxClientTreeView.__class = true;
ASPxClientTreeViewNode.__class = true;
ASPxClientTreeViewNodeProcessingModeEventHandler.__class = true;
ASPxClientTreeViewNodeProcessingModeEventArgs.__class = true;
ASPxClientTreeViewNodeClickEventHandler.__class = true;
ASPxClientTreeViewNodeClickEventArgs.__class = true;
ASPxClientTreeViewNodeEventHandler.__class = true;
ASPxClientTreeViewNodeEventArgs.__class = true;
ASPxClientTreeViewNodeCancelEventHandler.__class = true;
ASPxClientTreeViewNodeCancelEventArgs.__class = true;
ASPxClientUploadControl.__class = true;
ASPxClientUploadControlFilesUploadStartEventHandler.__class = true;
ASPxClientUploadControlFilesUploadStartEventArgs.__class = true;
ASPxClientUploadControlFileUploadCompleteEventHandler.__class = true;
ASPxClientUploadControlFileUploadCompleteEventArgs.__class = true;
ASPxClientUploadControlFilesUploadCompleteEventHandler.__class = true;
ASPxClientUploadControlFilesUploadCompleteEventArgs.__class = true;
ASPxClientUploadControlTextChangedEventHandler.__class = true;
ASPxClientUploadControlTextChangedEventArgs.__class = true;
ASPxClientUploadControlUploadingProgressChangedEventHandler.__class = true;
ASPxClientUploadControlUploadingProgressChangedEventArgs.__class = true;
ASPxClientUploadControlValidationErrorOccurredEventHandler.__class = true;
ASPxClientUploadControlValidationErrorOccurredEventArgs.__class = true;
ASPxClientUploadControlValidationSettings.__class = true;
ASPxClientUploadControlInvalidFileInfo.__class = true;
ASPxClientUploadControlValidationErrorTypeConsts.__class = true;
ASPxClientUploadControlFile.__class = true;
ASPxClientUploadControlDropZoneEnterEventHandler.__class = true;
ASPxClientUploadControlDropZoneEnterEventArgs.__class = true;
ASPxClientUploadControlDropZoneLeaveEventHandler.__class = true;
ASPxClientUploadControlDropZoneLeaveEventArgs.__class = true;
ASPxClientUtils.__class = true;
ASPxClientChartDesigner.__class = true;
ASPxClientChartDesignerSaveCommandExecuteEventHandler.__class = true;
ASPxClientChartDesignerSaveCommandExecuteEventArgs.__class = true;
ASPxClientChartDesignerCustomizeMenuActionsEventHandler.__class = true;
ASPxClientChartDesignerMenuAction.__class = true;
ASPxClientChartDesignerCustomizeMenuActionsEventArgs.__class = true;
ASPxClientWebChartControl.__class = true;
ASPxClientWebChartControlCustomDrawCrosshairEventHandler.__class = true;
ASPxClientWebChartControlCustomDrawCrosshairEventArgs.__class = true;
ASPxClientCrosshairElement.__class = true;
ASPxClientCrosshairLineElement.__class = true;
ASPxClientCrosshairAxisLabelElement.__class = true;
ASPxClientCrosshairGroupHeaderElement.__class = true;
ASPxClientCrosshairSeriesLabelElement.__class = true;
ASPxClientCrosshairElementGroup.__class = true;
ASPxClientWebChartControlHotTrackEventHandler.__class = true;
ASPxClientWebChartControlHotTrackEventArgs.__class = true;
ASPxClientHitObject.__class = true;
ASPxClientWebChartHitInfo.__class = true;
ASPxClientDiagramCoordinates.__class = true;
ASPxClientAxisValue.__class = true;
ASPxClientControlCoordinates.__class = true;
ASPxClientWebChartElement.__class = true;
ASPxClientWebChartEmptyElement.__class = true;
ASPxClientWebChartRequiredElement.__class = true;
ASPxClientWebChartElementNamed.__class = true;
ASPxClientWebChart.__class = true;
ASPxClientSimpleDiagram.__class = true;
ASPxClientXYDiagramBase.__class = true;
ASPxClientXYDiagram2D.__class = true;
ASPxClientXYDiagram.__class = true;
ASPxClientSwiftPlotDiagram.__class = true;
ASPxClientXYDiagramPane.__class = true;
ASPxClientXYDiagram3D.__class = true;
ASPxClientRadarDiagram.__class = true;
ASPxClientAxisBase.__class = true;
ASPxClientAxis2D.__class = true;
ASPxClientAxis.__class = true;
ASPxClientSwiftPlotDiagramAxis.__class = true;
ASPxClientAxis3D.__class = true;
ASPxClientRadarAxis.__class = true;
ASPxClientAxisTitle.__class = true;
ASPxClientAxisLabelItem.__class = true;
ASPxClientAxisRange.__class = true;
ASPxClientStrip.__class = true;
ASPxClientConstantLine.__class = true;
ASPxClientSeries.__class = true;
ASPxClientSeriesLabel.__class = true;
ASPxClientSeriesPoint.__class = true;
ASPxClientLegend.__class = true;
ASPxClientTitleBase.__class = true;
ASPxClientChartTitle.__class = true;
ASPxClientSeriesTitle.__class = true;
ASPxClientIndicator.__class = true;
ASPxClientFinancialIndicator.__class = true;
ASPxClientTrendLine.__class = true;
ASPxClientFibonacciIndicator.__class = true;
ASPxClientFinancialIndicatorPoint.__class = true;
ASPxClientSingleLevelIndicator.__class = true;
ASPxClientRegressionLine.__class = true;
ASPxClientMovingAverage.__class = true;
ASPxClientSimpleMovingAverage.__class = true;
ASPxClientExponentialMovingAverage.__class = true;
ASPxClientWeightedMovingAverage.__class = true;
ASPxClientTriangularMovingAverage.__class = true;
ASPxClientTripleExponentialMovingAverageTema.__class = true;
ASPxClientBollingerBands.__class = true;
ASPxClientMedianPrice.__class = true;
ASPxClientTypicalPrice.__class = true;
ASPxClientWeightedClose.__class = true;
ASPxSeparatePaneIndicator.__class = true;
ASPxClientAverageTrueRange.__class = true;
ASPxClientChaikinsVolatility.__class = true;
ASPxClientCommodityChannelIndex.__class = true;
ASPxClientDetrendedPriceOscillator.__class = true;
ASPxClientMassIndex.__class = true;
ASPxClientMovingAverageConvergenceDivergence.__class = true;
ASPxClientRateOfChange.__class = true;
ASPxClientRelativeStrengthIndex.__class = true;
ASPxClientStandardDeviation.__class = true;
ASPxClientTripleExponentialMovingAverageTrix.__class = true;
ASPxClientWilliamsR.__class = true;
ASPxClientFixedValueErrorBars.__class = true;
ASPxClientPercentageErrorBars.__class = true;
ASPxClientStandardDeviationErrorBars.__class = true;
ASPxClientStandardErrorBars.__class = true;
ASPxClientDataSourceBasedErrorBars.__class = true;
ASPxClientAnnotation.__class = true;
ASPxClientTextAnnotation.__class = true;
ASPxClientImageAnnotation.__class = true;
ASPxClientCrosshairValueItem.__class = true;
ASPxClientToolTipController.__class = true;
ASPxClientToolTipPosition.__class = true;
ASPxClientToolTipRelativePosition.__class = true;
ASPxClientToolTipFreePosition.__class = true;
ASPxClientCrosshairPosition.__class = true;
ASPxClientCrosshairMousePosition.__class = true;
ASPxClientCrosshairFreePosition.__class = true;
ASPxClientLineStyle.__class = true;
ASPxClientCrosshairOptions.__class = true;
ASPxClientChartPrintOptions.__class = true;
ASPxClientCustomLegendItem.__class = true;
ASPxClientDocumentViewer.__class = true;
ASPxClientToolbarItemValueChangedEventHandler.__class = true;
ASPxClientToolbarItemValueChangedEventArgs.__class = true;
ASPxClientQueryBuilder.__class = true;
ASPxClientQueryBuilderSaveCommandExecuteEventHandler.__class = true;
ASPxClientQueryBuilderSaveCommandExecuteEventArgs.__class = true;
ASPxClientQueryBuilderCustomizeToolbarActionsEventHandler.__class = true;
ASPxClientReportDesigner.__class = true;
ASPxClientReportDesignerSaveCommandExecuteEventHandler.__class = true;
ASPxClientReportDesignerSaveCommandExecuteEventArgs.__class = true;
ASPxClientReportDesignerExitDesignerEventArgs.__class = true;
ASPxClientReportDesignerDialogEventArgs.__class = true;
ASPxClientReportDesignerErrorEventArgs.__class = true;
ASPxClientReportDesignerComponentAddedEventArgs.__class = true;
ASPxClientReportDesignerCustomizeSaveDialogEventArgs.__class = true;
ASPxClientReportDesignerCustomizeSaveAsDialogEventArgs.__class = true;
ASPxClientReportDesignerCustomizeOpenDialogEventArgs.__class = true;
ASPxClientReportDesignerCustomizeToolboxEventArgs.__class = true;
ASPxClientReportDesignerCustomizeMenuActionsEventHandler.__class = true;
ASPxClientReportDesignerCustomizeParameterLookUpSourceEventHandler.__class = true;
ASPxClientReportDesignerCustomizeParameterEditorsEventHandler.__class = true;
ASPxClientReportDesignerCustomizeElementsEventHandler.__class = true;
ASPxClientReportDesignerExitDesignerEventHandler.__class = true;
ASPxClientReportDesignerReportSavingEventHandler.__class = true;
ASPxClientReportDesignerReportSavedEventHandler.__class = true;
ASPxClientReportDesignerReportOpeningEventHandler.__class = true;
ASPxClientReportDesignerReportOpenedEventHandler.__class = true;
ASPxClientReportDesignerErrorEventHandler.__class = true;
ASPxClientReportDesignerComponentAddedEventHandler.__class = true;
ASPxClientReportDesignerCustomizeSaveDialogEventHandler.__class = true;
ASPxClientReportDesignerCustomizeSaveAsDialogEventHandler.__class = true;
ASPxClientReportDesignerCustomizeOpenDialogEventHandler.__class = true;
ASPxClientReportDesignerCustomizeToolboxEventHandler.__class = true;
ASPxDesignerEditorOptions.__class = true;
ASPxDesignerUndoEngine.__class = true;
ASPxDesignerNavigateTab.__class = true;
ASPxDesignerDialogModel.__class = true;
ASPxDesignerReportDialogBase.__class = true;
ASPxDesignerSaveDialog.__class = true;
ASPxDesignerSaveAsDialog.__class = true;
ASPxDesignerOpenDialog.__class = true;
ASPxDesignerToolboxItem.__class = true;
ASPxDesignerControlsFactory.__class = true;
ASPxDesignerParameterType.__class = true;
ASPxClientReportDocumentMap.__class = true;
ASPxClientReportParametersPanel.__class = true;
ASPxClientReportParameterInfo.__class = true;
ASPxClientReportToolbar.__class = true;
ASPxClientReportViewer.__class = true;
ASPxClientReportViewerPageLoadEventHandler.__class = true;
ASPxClientReportViewerPageLoadEventArgs.__class = true;
ASPxClientCustomizeParameterEditorsEventArgs.__class = true;
ASPxClientCustomizeParameterLookUpSourceEventArgs.__class = true;
ASPxClientMenuAction.__class = true;
ASPxClientMenuActionHotKey.__class = true;
ASPxClientCustomizeMenuActionsEventArgs.__class = true;
ASPxClientCustomizeElementsEventArgs.__class = true;
ASPxDesignerElementParameterDescriptor.__class = true;
ASPxDesignerElementSerializationInfo.__class = true;
ASPxDesignerElementEditor.__class = true;
ASPxDesignerElementEditorItem.__class = true;
ASPxReportUIElement.__class = true;
ASPxClientWebDocumentViewerDocumentReadyEventArgs.__class = true;
ASPxClientWebDocumentViewerEditingFieldChangedEventArgs.__class = true;
ASPxClientWebDocumentViewerEditingField.__class = true;
ASPxClientParametersSubmittedEventArgs.__class = true;
ASPxClientParametersResetEventArgs.__class = true;
ASPxClientWebDocumentViewerParameter.__class = true;
ASPxClientPreviewClickEventArgs.__class = true;
ASPxClientWebDocumentViewerBrick.__class = true;
ASPxClientWebDocumentViewerBrickNavigation.__class = true;
ASPxClientWebDocumentViewer.__class = true;
ASPxClientWebDocumentViewerEditingFieldChangedEventHandler.__class = true;
ASPxClientWebDocumentViewerDocumentReadyEventHandler.__class = true;
ASPxClientWebDocumentViewerCustomizeElementsEventHandler.__class = true;
ASPxClientWebDocumentViewerCustomizeMenuActionsEventHandler.__class = true;
ASPxClientWebDocumentViewerCustomizeParameterEditorsEventHandler.__class = true;
ASPxClientWebDocumentViewerCustomizeParameterLookUpSourceEventHandler.__class = true;
ASPxClientWebDocumentViewerPreviewClickEventHandler.__class = true;
ASPxClientWebDocumentViewerParametersResetEventHandler.__class = true;
ASPxClientWebDocumentViewerParametersSubmittedEventHandler.__class = true;

